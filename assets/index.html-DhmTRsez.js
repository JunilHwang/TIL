import{_ as a,o as t,c as e,e as l}from"./app-DMp-al8-.js";const n={},s=l(`<h1 id="프로그래밍-언어로서의-자바" tabindex="-1"><a class="header-anchor" href="#프로그래밍-언어로서의-자바"><span>프로그래밍 언어로서의 자바</span></a></h1><p>자바는 근본적으로 프로그래밍 언어다. 자바가 어떻게 작동하는지, 변수가 메모리에 어떻게 저장되고 사용되는지, 메서드가 어떻게 호출되고 메모리에 어떤 변화를 일으키는지 살펴볼 필요가 있다.</p><p>그리고 앞서 언급한 메모리는 JVM에 존재하는 <u>가상의 메모리 구조</u> 이다.</p><h2 id="java-virtual-machine" tabindex="-1"><a class="header-anchor" href="#java-virtual-machine"><span>Java Virtual Machine</span></a></h2><p>일단 java source file 을 실행하기 위해서는 <code>JVM(Java Virtual Machine)</code> 이라는 것이 필요하다.</p><table><thead><tr><th style="text-align:center;">Real World</th><th style="text-align:center;">Java Virtual World</th><th style="text-align:center;">대응</th></tr></thead><tbody><tr><td style="text-align:center;">소프트웨어 개발 도구</td><td style="text-align:center;">JDK(Java Develop Kit)</td><td style="text-align:center;">JVM용 소프트웨어 개발 도구(이클립스, 인텔리제이)</td></tr><tr><td style="text-align:center;">운영체제</td><td style="text-align:center;">JRE(Java Runtime Environment)</td><td style="text-align:center;">JVM용 OS</td></tr><tr><td style="text-align:center;">하드웨어(머신)</td><td style="text-align:center;">JVM(Java Virtual Machine)</td><td style="text-align:center;">가상의 컴퓨터</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">용어 정리</p><ul><li><strong>JDK</strong> : Java Develop Kit. 자바를 개발할 때 필요한 도구</li><li><strong>JRE</strong> : Java Runtime Environment. 자바가 실행되는 환경</li><li><strong>JVM</strong> : Java Virtual Machine. 자바가 실행되는 가상의 머신</li></ul><p>JVM에는 가상의 메모리 구조가 있고, Java에서 실행되는 코드는 이 JVM에 종속적이다.</p></div><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILNmSl5MgEPIK40I2N85Yw28XVcYYVXa9XKb5bK2HMjHTBkabdbdba0DICxFoG7APERd5IiK92Pd9wQd5eDrr78vfEQb05q20000" alt="uml diagram"><p>C언어 같은 경우에는 Runtime이 OS지만, Java의 경우 Runtime이 JVM이다.<br><u>그리고 JVM이 Byte Code(*.class file)를 OS에 특화된 코드로 변환하여 실행한다.</u></p><p>JVM의 구조는 다음과 같다.</p><img src="https://www.plantuml.com/plantuml/svg/TP51QiCm44NtEiMWLNgBW0YkWsCCxWKczg2Ao58OoQLkwTqhkuPs0jreyURhp__CCMNaF4zUCGqPW_K4sdXC2Pg88p7qIyeqQS04Wq_mgG1-fQl61IkP2xT7LWUN7NhtWTd5eBxKdtKNcY8l3yPznk4cYExCeUDe6ISmSGwP-6bBrHcfQykEjzKslyRnnsZJjPTU29y9xmBiFq36qwTt6kOrDfo2TO4sCofmYonAbantflBAmRb-aK1Nvb0XNz5IwU9z6SIzJMNa-dDRgt_BDUxAoCjUhr7gI64in_m6" alt="uml diagram"><ul><li><p>Class Loader System</p><ul><li>*.class에서 Byte Code를 읽고 메모리에 저장</li><li><code>Loading</code>: 클래스를 읽어오는 과정</li><li><code>Linking</code>: Reference를 연결하는 과정</li><li><code>Initialization</code>: static 값들 초기화 및 변수 할당</li><li>일종의 <strong>Static 영역</strong>이라고 할 수 있다.</li></ul></li><li><p>Memory</p><ul><li>Class 수준의 정보(Class Name, Super Class Name, Method, Variable) 저장</li><li><code>Heap</code>: Object 저장. 공유자원</li><li><code>Stack</code><ul><li>Thread 마다 Runtime Stack을 만들고, 그 안에서 Method 호출을 Stack Frame 이라고 부르는 Block 으로 쌓는다.</li><li>Thread 종료 후 Runtime Stack 도 사라진다.</li></ul></li><li><code>Program Counter</code>: Thread 마다 Thread 내 현재 실행할 Stack Frame 을 가르키는 포인터가 생성된다.</li><li><code>Native Method Stack</code>: 말 그대로 Native Method에 대한 Stack <ul><li>Native Method는 다른 언어로 작성된 코드를 자바에서 호출하는 것을 의미한다.</li></ul></li></ul></li><li><p>Execution Engine</p><ul><li><code>Interpreter</code>: 바이트 코드를 한 줄씩 실행</li><li><code>JIT Compiler</code>: 인터프리터의 효율을 높이기 위해 반복되는 코드를 발견시 모두 네이티브 코드로 변환</li><li><code>Garbage Collector</code>: 더 이상 참조 되지 않는 객체를 모아서 정리함</li></ul></li><li><p>JNI(Java Native Interface)</p><ul><li>자바 애플리케이션에서 C, C++, Assembly 등으로 작성된 함수를 사용할 수 있는 Interface 제공</li><li>Native 키워드를 사용한 메소드 호출</li></ul></li><li><p>Native Method Library</p><ul><li><u>C, C++ 등으로 작성된 Library</u></li></ul></li></ul><p>Java에서 사용되는 Class들을 Class Loader에서 관리하고, Class가 Object(혹은 Instance)를 만들면 Heap에 쌓이게 된다.</p><ul><li><code>Static(Class Loader System)</code><ul><li>Class의 놀이터</li><li>Static Property, Method</li><li>Object의 Method Address</li></ul></li><li><code>Heap</code>: Object(Instance)의 놀이터</li><li><code>Stack</code>: Method의 놀이터</li></ul><h2 id="main-method의-stack-frame" tabindex="-1"><a class="header-anchor" href="#main-method의-stack-frame"><span>Main Method의 Stack Frame</span></a></h2><p>다음과 같은 코드가 있을 때 JVM의 메모리 구조 변화를 살펴보자.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Start</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello OOP!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>main method가 실행되기 전에는 일단 java.lang과 start class가 Static 영역에 올라온다.</li></ol><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuL9GA4fDBadCIyz9LGWkIIp9J5Qe1WegA4Hd9PObwkK0PMB1_EJyt8BylDIy4f2oeXAeAg1uOb6AGcvYPXwONyi5mGX3FL8J2y2AQz7jIiw6YZkavgK0tG80" alt="uml diagram"><ol start="2"><li>main method의 실행이 시작되면, main method의 지역변수와 매개변수가 stack 영역에 생성됩니다.</li></ol>`,20),i=[s];function c(o,r){return t(),e("div",null,i)}const p=a(n,[["render",c],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/Book/OOP-Principle/02-Java-As-PL/","title":"02 프로그래밍 언어로서의 자바 | 객체지향의 원리와 이해","lang":"en-US","frontmatter":{"title":"02 프로그래밍 언어로서의 자바 | 객체지향의 원리와 이해","description":"프로그래밍 언어로서의 Java가 가지고 있는 여러 가지 특성들을 알아보고 이해하여봅시다.","date":"2020-02-19T13:00:00.000Z","sidebarDepth":2,"tag":"책","thumbnail":"http://image.kyobobook.co.kr/images/book/xlarge/940/x9788998139940.jpg"},"headers":[{"level":2,"title":"Java Virtual Machine","slug":"java-virtual-machine","link":"#java-virtual-machine","children":[]},{"level":2,"title":"Main Method의 Stack Frame","slug":"main-method의-stack-frame","link":"#main-method의-stack-frame","children":[]}],"git":{"updatedTime":1739958092000},"filePathRelative":"Book/OOP-Principle/02-Java-As-PL/README.md"}');export{p as comp,u as data};
