import{_ as e,r as o,o as l,c,a as n,b as s,d as t,e as p}from"./app-B2zpISQz.js";const i="/TIL/assets/1-C2N8fj1Z.png",u="/TIL/assets/2-DMDyjrnU.png",r="/TIL/assets/3-D0EPHnjT.png",k={},d=n("h1",{id:"vanilla-javascript로-react-usestate-hook-만들기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vanilla-javascript로-react-usestate-hook-만들기"},[n("span",null,"Vanilla Javascript로 React UseState Hook 만들기")])],-1),v=n("p",null,[s("본 포스트는 React의 "),n("code",null,"useState"),s(" Hook의 작동방식에 대해 "),n("strong",null,"고민해보고, 구현해보고, 최적화"),s("하는 내용을 다룹니다.")],-1),m={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"선행학습",-1),g=n("p",null,"구현부 코드는 아래 포스트의 내용을 모르면 이해하기가 힘들 수 있습니다.",-1),h={href:"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Store/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/",target:"_blank",rel:"noopener noreferrer"},w=p(`<h2 id="_1-react의-usestate" tabindex="-1"><a class="header-anchor" href="#_1-react의-usestate"><span>1. React의 useState</span></a></h2><h3 id="_1-의문을-갖기" tabindex="-1"><a class="header-anchor" href="#_1-의문을-갖기"><span>(1) 의문을 갖기</span></a></h3><p>필자는 React를 사용할 때 hook api들을 보면서 항상 신기했다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 돔에서 직접 호출하기 위해 window(전역객체)에 할당</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;strong&gt;count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/strong&gt;</span>
<span class="line">      &lt;button onclick=&quot;increment()&quot;&gt;증가&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>useState로 state와 setState를 만들 수 있다.</li><li>500ms(0.5초)마다 setCount를 실행한다.</li><li>값이 1씩 증가한다.</li><li>setCount가 실행되면 다시 렌더링이 실행된다.</li><li>렌더링이 실행되면 Counter가 다시 실행될 것이다.</li><li><strong>Counter 컴포넌트가 다시 실행되어도 count의 값은 초기화되지 않고 유지된다.</strong></li></ol><p>핵심은 5번의 내용이다. <u>컴포넌트 함수가 다시 실행 되더라도 count의 값이 초기화되지 않는 다는 것이다.</u> 어떻게 이게 가능할까?</p><h3 id="_2-bottom-up-분석" tabindex="-1"><a class="header-anchor" href="#_2-bottom-up-분석"><span>(2) bottom - up 분석</span></a></h3><p>밑 바닥 부터 차근차근 <code>useState</code> 에 대해 분석해보자.</p><p>이번 섹션의 목적은 <strong>count의 값이 어떻게 초기화되지 않고 유지 되는지 알아보는 것</strong>이다.</p><p>일단 <code>Counter</code> 컴포넌트를 렌더링 해주는 코드를 작성해보자.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token comment">/** HTML **/</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/** Javascript **/</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">useState</span> <span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">function</span> <span class="token function">Counter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">  window<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line highlighted">    &lt;div&gt;</span>
<span class="line highlighted">      &lt;strong&gt;count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/strong&gt;</span>
<span class="line highlighted">      &lt;button onclick=&quot;increment()&quot;&gt;증가&lt;/button&gt;</span>
<span class="line highlighted">    &lt;/div&gt;</span>
<span class="line highlighted">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">const</span> $app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	$app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아마도 이런 형태일 것이다.</p><p>React를 사용하는 사람들이라면, 위의 코드를 보고 <code>useState</code>와 <code>render</code>와의 관계를 유추할 수 있다.</p><p><code>useState</code>를 실행하면 첫 번째 인자는 <code>state</code>를 반환하고, 두 번째 인자는 state를 변경하는 <code>setState</code>를 반환하다. 그리고 <code>setState</code> 를 실행하면 <code>render</code>가 실행된다.</p><p>그래서 대략 다음과 같은 형태의 코드가 될 것이다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> state <span class="token operator">=</span> initState<span class="token punctuation">;</span> <span class="token comment">// state를 정의한다.</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    state <span class="token operator">=</span> newState<span class="token punctuation">;</span> <span class="token comment">// 새로운 state를 할당한다</span></span>
<span class="line highlighted">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// render를 실행한다.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useState</code>를 실행하면 내부에 state를 정의하고, setState를 실행하면 내부에 선언된 state를 변경할 것이다. 즉, 함수가 실행될 때 마다 결국 state의 값은 <code>initState</code> 로 초기화 될 것이다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// state에는 항상 1이 들어간다.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/01-make-state-frame/index.html"></iframe><p>결과물에서도 확인할 수 있듯이, state에는 항상 1이 들어간다.</p><p>그래서 <code>state</code>의 값은 내부가 아닌 외부에서 관리해야 한다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line highlighted"><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token comment">// state에 값이 없을 때만 초기화를 진행한다.</span></span>
<span class="line highlighted">  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line highlighted">    state <span class="token operator">=</span> initState<span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    state <span class="token operator">=</span> newState<span class="token punctuation">;</span> <span class="token comment">// 새로운 state를 할당한다</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// render를 실행한다.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*생략*/</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*생략*/</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/02-only-one-state/index.html"></iframe><p>잘 실행되고 있다.</p><p>그런데 만약 useState와 Component가 여러 개라면 어떨까?</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;strong&gt;count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/strong&gt;</span>
<span class="line">      &lt;button onclick=&quot;increment()&quot;&gt;증가&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Cat</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span> setCat<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;고양이&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">meow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCat</span><span class="token punctuation">(</span>cat <span class="token operator">+</span> <span class="token string">&#39; 야옹!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;strong&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cat<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/strong&gt;</span>
<span class="line">      &lt;button onclick=&quot;meow()&quot;&gt;고양이의 울음소리&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/03-multi-state-bug/index.html"></iframe><p>한 개의 state 변수로 두 개의 state를 관리하기 때문에 count와 cat이 똑같은 값을 보여주게 된다.</p><p>이를 해결하기 위해서 외부의 state 갯수를 useState가 실행되는 횟수만큼 만들어주면 될 것이다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line highlighted"><span class="token keyword">let</span> currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// useState가 실행 된 횟수</span></span>
<span class="line highlighted"><span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// state를 보관할 배열</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// initState로 초기값 설정</span></span>
<span class="line highlighted">  <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span>length <span class="token operator">===</span> currentStateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    states<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// state 할당</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> state <span class="token operator">=</span> states<span class="token punctuation">[</span>currentStateKey<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// state를 직접 수정하는 것이 아닌, states 내부의 값을 수정</span></span>
<span class="line highlighted">    states<span class="token punctuation">[</span>currentStateKey<span class="token punctuation">]</span> <span class="token operator">=</span> newState<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line highlighted">  currentStateKey <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*생략*/</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Cat</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*생략*/</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token comment">// 이 시점에 currentStateKey는 2가 될 것이다.</span></span>
<span class="line highlighted">  <span class="token comment">// 그래서 다시 0부터 접근할 수 있도록 값을 초기화 해야 한다.</span></span>
<span class="line highlighted">  currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/04-multi-state-success/index.html"></iframe><p>여기까지가 <code>useState</code>의 핵심 원리이다. 생각보다 간단하지 않은가?</p><div class="custom-container tip"><p class="custom-container-title">클로저</p><p>사실 이건 <code>클로저</code>에 대한 이해가 먼저 필요하다. 직접적으로 클로저를 사용하진 않았지만 유사한 개념이라고 볼 수 있다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">클로저</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> 죽지않는_변수 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    죽지않는_변수 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;죽지않는_변수 : &#39;</span> <span class="token operator">+</span> 죽지않는_변수<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> 클로저로_만들어진_함수 <span class="token operator">=</span> <span class="token function">클로저</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">클로저로_만들어진_함수</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 죽지않는_변수 : 1</span></span>
<span class="line"><span class="token function">클로저로_만들어진_함수</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 죽지않는_변수 : 2</span></span>
<span class="line"><span class="token function">클로저로_만들어진_함수</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 죽지않는_변수 : 3</span></span>
<span class="line"><span class="token function">클로저로_만들어진_함수</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 죽지않는_변수 : 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useState</code> 함수의 바깥에서 <code>state</code>를 관리하기 때문에 <code>state</code>의 값이 유지되는 것이다.</p></div><h2 id="_2-usestate-최적화" tabindex="-1"><a class="header-anchor" href="#_2-usestate-최적화"><span>2. useState 최적화</span></a></h2><p>앞선 과정은 <code>useState</code>가 <strong>값을 보존하는 방법</strong>에 대해 분석해보는 내용이었다. 이제 useState를 <strong>최적화</strong> 해보자.</p><h3 id="_1-변경된-값이-없을-경우" tabindex="-1"><a class="header-anchor" href="#_1-변경된-값이-없을-경우"><span>(1) 변경된 값이 없을 경우</span></a></h3><p>먼저 고민해볼 수 있는 상황은 <code>setState</code>에 <code>state</code>와 <strong>동일한 값</strong>을 넣었을 경우이다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  window<span class="token punctuation">.</span><span class="token function-variable function">nochange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// count에 똑같은 값을 삽입한다.</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;strong&gt;count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/strong&gt;</span>
<span class="line">      &lt;button onclick=&quot;nochange()&quot;&gt;변화없음&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> renderCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> $app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  $app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      renderCount: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>renderCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  renderCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/05-no-state-change/index.html"></iframe><p>값은 똑같은데 <strong>render는 계속 실행</strong>하고 있다.</p><p>이럴 때는 렌더링이 되지 않도록 <strong>방지</strong>해야한다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// initState로 초기값 설정</span></span>
<span class="line">  <span class="token keyword">const</span> key <span class="token operator">=</span> currentStateKey<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span>length <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    states<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// state 할당</span></span>
<span class="line">  <span class="token keyword">const</span> state <span class="token operator">=</span> states<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 값이 똑같은 경우</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">===</span> state<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 배열/객체일 때는 JSON.stringify를 통해 간단하게 비교할 수 있다.</span></span>
<span class="line">    <span class="token comment">// 그런데 Set, Map, WeekMap, Symbol 같은 원시타입의 경우</span></span>
<span class="line">    <span class="token comment">// JSON으로 파싱되지 않기 때문에 주의해야한다.</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token comment">// 기존 값과 다른 경우에만 값을 변경하고 render()를 실행한다.</span></span>
<span class="line">    states<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newState<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  currentStateKey <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/06-dont-render-no-change/index.html"></iframe><p>이제 값이 똑같을 경우에는 렌더링이 되지 않는다.</p><h3 id="_2-동시에-여러-setstate가-실행될-경우" tabindex="-1"><a class="header-anchor" href="#_2-동시에-여러-setstate가-실행될-경우"><span>(2) 동시에 여러 setState가 실행될 경우</span></a></h3><p>일단 다음과 같이 하나의 함수에 <code>setState</code>가 두 번 사용 되는 경우가 있다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">CounterAndMeow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span> setCat<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;야옹! &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">  <span class="token keyword">function</span> <span class="token function">countMeow</span> <span class="token punctuation">(</span><span class="token parameter">newCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token function">setCount</span><span class="token punctuation">(</span>newCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token function">setCat</span><span class="token punctuation">(</span><span class="token string">&#39;야옹! &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>newCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">countMeow</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">countMeow</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;p&gt;고양이가 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">번 울어서 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cat<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/p&gt;</span>
<span class="line">      &lt;button onclick=&quot;increment()&quot;&gt;증가&lt;/button&gt;</span>
<span class="line">      &lt;button onclick=&quot;decrement()&quot;&gt;감소&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> renderCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> $app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  $app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>renderCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">CounterAndMeow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  renderCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/07-unnecessary-render/index.html"></iframe><p><code>countMeow</code> 를 실행할 때 마다 <code>render</code>는 2번 실행된다. 즉, 비효율적이다.</p><p>이를 해결할 수 있는 방법 중 하나가 <code>debounce</code> 를 이용하는 것이다.</p><p>주절주절 설명하기보단, 코드로 살펴보자.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> timer <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> currentCallbackTimer <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 클로저를 이용하기 위해 debounce를 실행하면 함수를 반환한다.</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 실행이 예약된 함수(callback)가 있을 경우 캔슬한다.</span></span>
<span class="line">    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>currentCallbackTimer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 특정시간(timer) 후에 callback이 실행되도록 한다.</span></span>
<span class="line">    currentCallbackTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> timer<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> 야옹 <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;야옹&#39;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행 취소</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행 취소</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행 취소</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행</span></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span>야옹<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="1"></p><ul><li>일반적으로 우리가 사용하는 모니터의 주사율은 <strong>60프레임</strong>이다.</li><li>즉, <strong>1초에 60번의 변화가 발생하는 것</strong>이다.</li><li>따라서 1프레임 이내로 발생하는 모든 변화를 모아서 실행시켜주면 어떨까?</li><li>render가 <strong>1초에 최대 60번만 실행되면 되도록</strong> 만들면 되지 않을까?</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;실행&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1초에 60번 실행된다.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이 때 이용할 수 있는 API가 바로 <code>requestAnimationFrame</code> 이다.</p><ul><li><code>requestAnimationFrame(callback)</code>은 브라우저에게 수행하기를 원하는 애니메이션을 알리고, 다음 리페인트가 진행되기 전에 인자로 넘겨진 <code>callback</code>함수를 호출한다.</li><li>일반적으로 requestAnimationFrame이 <strong>1초동안 실행되는 횟수</strong>는 대부분의 브라우저에서는 W3C 권장사항에 따라 <strong>디스플레이 주사율과 일치</strong>하게 된다. <ul><li>60Hz -&gt; 1초에 60회</li><li>144Hz -&gt; 1초에 144회</li><li>240Hz -&gt; 1초에 240회</li></ul></li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;실행&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// fn은 1초에 60번 실행된다.</span></span>
<span class="line"><span class="token comment">// 만약 모니터의 주사율이 144HZ 일 경우, 1초에 144번 실행될 것이다.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>어쨌든 다시 <code>requestAnimationFrame</code>을 이용하여 debounce를 다시 만들어보자.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">debounceFrame</span> <span class="token operator">=</span> <span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> nextFrameCallback <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 클로저를 이용하기 위해 debounce를 실행하면 함수를 반환한다.</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 실행이 예약된 함수(callback)가 있을 경우 캔슬한다.</span></span>
<span class="line">    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>nextFrameCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 특정시간(timer) 후에 callback이 실행되도록 한다.</span></span>
<span class="line">    nextFrameCallback <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> 야옹 <span class="token operator">=</span> <span class="token function">debounceFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;야옹&#39;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행 취소</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행 취소</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행 취소</span></span>
<span class="line"><span class="token function">야옹</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행</span></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span>야옹<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 실행</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="2"></p><p>사실 <code>setTimeout</code>을 사용하는 것과 크게 다르지 않다.</p>',62),S={class:"custom-container tip"},x=n("p",{class:"custom-container-title"},"이벤트루프",-1),j=n("li",null,[s("setTimeout과 requestAnimationFrame이 "),n("strong",null,"실행되는 시점"),s("에 대해 정확하게 이해하기 위해선 "),n("code",null,"이벤트 루프"),s(" 라는 개념에 대해 알아야한다.")],-1),_={href:"https://meetup.toast.com/posts/89",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>이러한 내용을 바탕으로 리팩토링을 진행해보자.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">debounceFrame</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> nextFrameCallback <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>nextFrameCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    nextFrameCallback <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> renderCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">debounceFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> $app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  $app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      renderCount: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>renderCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">CounterAndMeow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  renderCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>사실 <code>debounce</code>는 <code>useState</code>에 적용하기보단 <code>render</code>에 적용하는게 더 쉽고 직관적이다.</p><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/08-refactor-rendering-by-debounce/index.html"></iframe><p>일단 이정도만 적용해도 <code>useState</code>를 이용하는데 큰 어려움은 없으리라 생각한다.</p><h2 id="_3-render-함수-추상화" tabindex="-1"><a class="header-anchor" href="#_3-render-함수-추상화"><span>3. render 함수 추상화</span></a></h2><ul><li>이제 끝인줄 알았다면 매우 큰 오산!</li><li>useState는 필연적으로 render와 같이 사용된다.</li><li><s>아주 그냥 천생연분이다.</s></li><li>둘 사이를 외부에서 간섭하지 못하게 함수로 보호해주자.</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyReact</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">useState</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">MyReact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 사용할 경우 <strong>useState와 render는 내부적으로 엮기가 더 쉬워진다.</strong> 다른 변수들도 추가해보자.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyReact</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">useState</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> renderCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">MyReact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 하면 <code>currentStateKey</code>와 <code>renderCount</code>는 함수 내부에서만 사용할 수 있다. <code>useState</code>와 <code>render</code>에서만 접근 가능한 것이다.</p><p>다시 내용을 채워보자.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyReact</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 내부에서 사용되는 변수는 options에 모아놓기</span></span>
<span class="line highlighted">  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token literal-property property">currentStateKey</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token literal-property property">renderCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> key <span class="token operator">=</span> options<span class="token punctuation">.</span>currentStateKey<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span>length <span class="token operator">===</span> key<span class="token punctuation">)</span> states<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> state <span class="token operator">=</span> states<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      states<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newState<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    options<span class="token punctuation">.</span>currentStateKey <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted">  <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">MyReact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>눈치빠른 사람들(?)은 <code>render</code>가 이전 처럼 사용될 수 없으리라는 것을 알았을 것이다.</p><p>이제 <code>render</code>는 다음과 같이 사용되어야 한다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">MyReact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">CounterAndMeow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">  &lt;/div&gt;</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token function">render</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),q={href:"https://ko.reactjs.org/docs/hello-world.html",target:"_blank",rel:"noopener noreferrer"},M=p('<p><img src="'+r+`" alt="3"></p><p>어쨌든 <code>render</code>를 한 번 구성해보자.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyReact</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 내부에서 사용되는 변수는 options에 모아놓기</span></span>
<span class="line">  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">currentStateKey</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">renderCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token literal-property property">rootComponent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*생략*/</span><span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// render는 일종의 바지사장이라고 보면 될 것 같다.</span></span>
<span class="line highlighted">  <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> rootComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    options<span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line highlighted">    options<span class="token punctuation">.</span>rootComponent <span class="token operator">=</span> rootComponent<span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 내부적으로 _render를 이용하여 상태변화에 대응한다.</span></span>
<span class="line">	<span class="token keyword">const</span> _render <span class="token operator">=</span> <span class="token function">debounceFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> root<span class="token punctuation">,</span> rootComponent <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token operator">!</span>rootComponent<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    root<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">rootComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    options<span class="token punctuation">.</span>currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    options<span class="token punctuation">.</span>renderCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_render</code>라는 비선실세(?)가 <code>render</code>라는 바지사장을 세워놓고 일하는 것이다.</p>`,4),F={href:"http://program.tving.com/tvn/tvnvincenzo",target:"_blank",rel:"noopener noreferrer"},A=p(`<ul><li><code>render</code>는 <code>장한서</code>고</li><li><code>_render</code>는 <code>장준우</code> 라고 보면 될 것 같다.</li><li>비유가 좀 이상한가?</li></ul><p>이제 <code>useState</code>의 코드도 조금 변경해야한다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useState</span> <span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">currentStateKey</span><span class="token operator">:</span> key<span class="token punctuation">,</span> states <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span>length <span class="token operator">===</span> key<span class="token punctuation">)</span> states<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> state <span class="token operator">=</span> states<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    states<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newState<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 사실 이 부분만 변경되면 된다.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  options<span class="token punctuation">.</span>currentStateKey <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>전체적인 코드는 다음과 같다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">MyReact</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">currentStateKey</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">renderCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">rootComponent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">useState</span> <span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">currentStateKey</span><span class="token operator">:</span> key<span class="token punctuation">,</span> states <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span>length <span class="token operator">===</span> key<span class="token punctuation">)</span> states<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> state <span class="token operator">=</span> states<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      states<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newState<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    options<span class="token punctuation">.</span>currentStateKey <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> _render <span class="token operator">=</span> <span class="token function">debounceFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> root<span class="token punctuation">,</span> rootComponent <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token operator">!</span>rootComponent<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    root<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">rootComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>renderCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">rootComponent<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>rootComponent <span class="token operator">=</span> rootComponent<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">MyReact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CounterAndMeow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span> setCat<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;야옹! &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">countMeow</span> <span class="token punctuation">(</span><span class="token parameter">newCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCount</span><span class="token punctuation">(</span>newCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setCat</span><span class="token punctuation">(</span><span class="token string">&#39;야옹! &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>newCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">countMeow</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">countMeow</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;p&gt;고양이가 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">번 울어서 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cat<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/p&gt;</span>
<span class="line">      &lt;button onclick=&quot;increment()&quot;&gt;증가&lt;/button&gt;</span>
<span class="line">      &lt;button onclick=&quot;decrement()&quot;&gt;감소&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">debounceFrame</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> nextFrameCallback <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>nextFrameCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    nextFrameCallback <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">CounterAndMeow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">  &lt;/div&gt;</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">render</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/09-abstract-render/index.html"></iframe><p>위와 같이 잘 작동하는 것을 확인할 수 있다.</p><h2 id="_4-모듈화" tabindex="-1"><a class="header-anchor" href="#_4-모듈화"><span>4. 모듈화</span></a></h2><p>이제 모듈화를 해보자. 전체적인 디렉토리 구성은 다음과 같다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token punctuation">.</span></span>
<span class="line">├─ src</span>
<span class="line">│   ├─ components</span>
<span class="line">│   │  └─ CounterAndMeow<span class="token punctuation">.</span>js</span>
<span class="line">│   ├─ core</span>
<span class="line">│   │  └─ MyReact<span class="token punctuation">.</span>js</span>
<span class="line">│   ├─ utils</span>
<span class="line">│   │  └─ debounceFrame<span class="token punctuation">.</span>js</span>
<span class="line">│   ├─ App<span class="token punctuation">.</span>js</span>
<span class="line">│   └─ main<span class="token punctuation">.</span>js</span>
<span class="line">└─ index<span class="token punctuation">.</span>html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/index.html</code></p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>MyReact App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./src/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/src/main.js</code></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./core/MyReact.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./App.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">render</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/src/App.js</code></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CounterAndMeow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./components/CounterAndMeow.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">CounterAndMeow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">  &lt;/div&gt;</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/src/utils/debounceFrame.js</code></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debounceFrame</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> nextFrameCallback <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>nextFrameCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    nextFrameCallback <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/src/core/MyReact.js</code></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> debounceFrame <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils/debounceFrame.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">MyReact</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">currentStateKey</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">renderCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">states</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">rootComponent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">useState</span> <span class="token punctuation">(</span><span class="token parameter">initState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">currentStateKey</span><span class="token operator">:</span> key<span class="token punctuation">,</span> states <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span>length <span class="token operator">===</span> key<span class="token punctuation">)</span> states<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> state <span class="token operator">=</span> states<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      states<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newState<span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    options<span class="token punctuation">.</span>currentStateKey <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>ㅇ</span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> _render <span class="token operator">=</span> <span class="token function">debounceFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> root<span class="token punctuation">,</span> rootComponent <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token operator">!</span>rootComponent<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    root<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">rootComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>currentStateKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>renderCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">rootComponent<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>rootComponent <span class="token operator">=</span> rootComponent<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">MyReact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/src/components/CounterAndMeow.js</code></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../core/MyReact.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">CounterAndMeow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span> setCat<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;야옹! &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">countMeow</span> <span class="token punctuation">(</span><span class="token parameter">newCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCount</span><span class="token punctuation">(</span>newCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setCat</span><span class="token punctuation">(</span><span class="token string">&#39;야옹! &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>newCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">countMeow</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">countMeow</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;p&gt;고양이가 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">번 울어서 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cat<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/p&gt;</span>
<span class="line">      &lt;button onclick=&quot;increment()&quot;&gt;증가&lt;/button&gt;</span>
<span class="line">      &lt;button onclick=&quot;decrement()&quot;&gt;감소&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe class="example-frame" width="100%" src="https://junilhwang.github.io/simple-use-state/10-modularity/index.html"></iframe><p>코드에 대한 설명은 생략하겠다. 이미 앞선 과정에서 많이 다뤘기 때문이다.</p><hr><p>이렇게 <code>useState</code> 그리고 이와 강하게 엮여있는 <code>render</code>에 대해서 다뤄봤다.</p><p>여기에 diff 알고리즘까지 사용한다면 더욱더 완성도 있는 렌더링 시스템이 되리라 생각한다.</p><p>그리고 지금은 이벤트를 관리하는 방법이 무척 잘못된 상태다.</p><p>따라서 위와 같이 구성했을 때 어떤 방식으로 이벤트를 관리하면 좋은지에 대해서도 다룰 수 있을 것 같다.</p><h2 id="전체-예제코드" tabindex="-1"><a class="header-anchor" href="#전체-예제코드"><span>전체 예제코드</span></a></h2>`,30),$={href:"https://github.com/JunilHwang/simple-use-state",target:"_blank",rel:"noopener noreferrer"},T={href:"https://junilhwang.github.io/simple-use-state/01-make-state-frame/index.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://junilhwang.github.io/simple-use-state/02-only-one-state/index.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://junilhwang.github.io/simple-use-state/03-multi-state-bug/index.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://junilhwang.github.io/simple-use-state/04-multi-state-success/index.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://junilhwang.github.io/simple-use-state/05-no-state-change/index.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://junilhwang.github.io/simple-use-state/06-dont-render-no-change/index.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://junilhwang.github.io/simple-use-state/07-unnecessary-render/index.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://junilhwang.github.io/simple-use-state/08-refactor-rendering-by-debounce/index.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://junilhwang.github.io/simple-use-state/09-abstract-render/index.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://junilhwang.github.io/simple-use-state/10-modularity/index.html",target:"_blank",rel:"noopener noreferrer"},O=p('<h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><ul><li>useState에 대해 분석하기</li><li>클로저에 대한 이해</li><li>useState 최적화하기 <ul><li>값이 변경되지 않는 경우</li></ul></li><li>렌더링 최적화하기 <ul><li>동시에 setState가 실행되는 경우</li><li>debounce로 최적화하기</li><li>requestAnimationFrame 이용하기</li></ul></li><li>모듈화</li></ul>',2);function E(U,z){const a=o("ExternalLinkIcon");return l(),c("div",null,[d,v,n("div",m,[b,g,n("ul",null,[n("li",null,[n("strong",null,[n("a",h,[s("Vanilla Javascript로 웹 컴포넌트 만들기"),t(a)])])]),n("li",null,[n("strong",null,[n("a",f,[s("Vanilla Javascript로 상태관리 시스템 만들기"),t(a)])])]),n("li",null,[n("strong",null,[n("a",y,[s("Vanilla Javascript로 가상돔(VirtualDOM) 만들기"),t(a)])])])])]),w,n("div",S,[x,n("ul",null,[j,n("li",null,[s("이에 대한 내용은 "),n("a",_,[s("자바스크립트와 이벤트 루프 | NHN Clound Meetup"),t(a)]),s(" 아티클에 자세히 나와있으니 참고하면 될 것 같다.")])])]),C,n("p",null,[s("사실 위의 코드는 "),n("a",q,[s("React의 HelloWorld"),t(a)]),s(" 코드와 똑같다.")]),M,n("p",null,[s("최근에 "),n("a",F,[s("드라마 빈센조"),t(a)]),s("를 재밌게 봤는데,")]),A,n("p",null,[s("이 포스트에 사용된 모든 코드는 "),n("a",$,[s("이 저장소"),t(a)]),s(" 에서 확인할 수 있다.")]),n("ul",null,[n("li",null,[n("a",T,[s("01. state 틀 구성"),t(a)])]),n("li",null,[n("a",K,[s("02. 한 개의 state만 있을 경우"),t(a)])]),n("li",null,[n("a",R,[s("03. 여러 개의 state가 있을 경우 버그 발생"),t(a)])]),n("li",null,[n("a",H,[s("04. 여러 개의 state가 있을 경우 정상 작동"),t(a)])]),n("li",null,[n("a",J,[s("05. state 값이 동일할 경우"),t(a)])]),n("li",null,[n("a",L,[s("06. state 값이 동일할 경우 렌더링 방지"),t(a)])]),n("li",null,[n("a",V,[s("07. 불필요한 render 발생"),t(a)])]),n("li",null,[n("a",D,[s("08. debounce로 렌더링을 리팩토링"),t(a)])]),n("li",null,[n("a",N,[s("09. render 추상화"),t(a)])]),n("li",null,[n("a",I,[s("10. 모듈화"),t(a)])])]),O])}const B=e(k,[["render",E],["__file","index.html.vue"]]),W=JSON.parse('{"path":"/Javascript/Design/Vanilla-JS-Make-useSate-hook/","title":"Vanilla Javascript로 React UseState Hook 만들기","lang":"en-US","frontmatter":{"title":"Vanilla Javascript로 React UseState Hook 만들기","description":"React의 UseState Hook의 작동방식에 대해 고민해보고, 구현해보고, 최적화하는 내용을 다룹니다.","sidebarDepth":2,"date":"2021-08-25T00:00:00.000Z","tag":"javascript, vanilla"},"headers":[{"level":2,"title":"1. React의 useState","slug":"_1-react의-usestate","link":"#_1-react의-usestate","children":[{"level":3,"title":"(1) 의문을 갖기","slug":"_1-의문을-갖기","link":"#_1-의문을-갖기","children":[]},{"level":3,"title":"(2) bottom - up 분석","slug":"_2-bottom-up-분석","link":"#_2-bottom-up-분석","children":[]}]},{"level":2,"title":"2. useState 최적화","slug":"_2-usestate-최적화","link":"#_2-usestate-최적화","children":[{"level":3,"title":"(1) 변경된 값이 없을 경우","slug":"_1-변경된-값이-없을-경우","link":"#_1-변경된-값이-없을-경우","children":[]},{"level":3,"title":"(2) 동시에 여러 setState가 실행될 경우","slug":"_2-동시에-여러-setstate가-실행될-경우","link":"#_2-동시에-여러-setstate가-실행될-경우","children":[]}]},{"level":2,"title":"3. render 함수 추상화","slug":"_3-render-함수-추상화","link":"#_3-render-함수-추상화","children":[]},{"level":2,"title":"4. 모듈화","slug":"_4-모듈화","link":"#_4-모듈화","children":[]},{"level":2,"title":"전체 예제코드","slug":"전체-예제코드","link":"#전체-예제코드","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1725359553000},"filePathRelative":"Javascript/Design/Vanilla-JS-Make-useSate-hook/README.md"}');export{B as comp,W as data};
