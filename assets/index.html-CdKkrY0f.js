import{_ as a,r as e,o as p,c as t,a as n,b as i,d as l,e as c}from"./app-DMp-al8-.js";const o={},u=c(`<h1 id="자바스크립트-실행-컨텍스트" tabindex="-1"><a class="header-anchor" href="#자바스크립트-실행-컨텍스트"><span>자바스크립트 실행 컨텍스트</span></a></h1><p>실행 컨텍스트는 자바스크립트에서 가장 중요한 핵심 개념 중에 하나다. 이를 정확히 이해하는 것은 자바스크립트 개발자에게 매우 중요하다.</p><h2 id="_1-개념" tabindex="-1"><a class="header-anchor" href="#_1-개념"><span>1. 개념</span></a></h2><div class="custom-container tip"><p class="custom-container-title">실행 컨텍스트</p><ul><li><strong>실행할 코드에 제공할 환경 정보들을 모아놓은 객체</strong></li><li>자바스크립트의 동적 언어로서의 성격을 가장 잘 파악할 수 있는 개념</li></ul></div><p>자바스크립트는 실행 컨텍스트가 활성화되는 시점에 다음과 같은 현상이 발생한다.</p><ul><li>호이스팅이 발생한다(선언된 변수를 위로 끌어올린다)</li><li>외부 환경 정보를 구성한다</li><li>this 값을 설정한다.</li></ul><p>이로 인해 다른 언어에서 발견할 수 없는 특이한 현상들이 발생한다.</p><h2 id="_2-실행-컨텍스트-구성" tabindex="-1"><a class="header-anchor" href="#_2-실행-컨텍스트-구성"><span>2. 실행 컨텍스트 구성</span></a></h2><p>실행 컨텍스트는 다음과 같은 것들을 이용하면 <code>call stack</code>에 쌓이게 된다.</p><ul><li><code>전역공간</code>은 자동으로 컨텍스트로 구성된다.</li><li><code>함수</code>를 실행한다.</li><li><code>eval()</code>함수를 실행한다.</li><li><code>block</code>을 만든다 <strong>(ES6+)</strong></li></ul><p>일반적으로 <strong>함수를 이용한 실행 컨텍스트</strong>를 사용한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 전역 컨텍스트</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">outer</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// outer 컨텍스트</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">inner</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// inner 컨텍스트</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위와 같이 코드를 구성했을 때 실행 컨텍스트의 스택은 다음과 같은 순서로 실행된다.</p><ul><li>프로그램 실행: <code>[전역컨텍스트]</code></li><li>outer 실행: <code>[전역컨텍스트, outer]</code></li><li>inner 실행: <code>[전역컨텍스트, outer, inner]</code></li><li>inner 종료: <code>[전역컨텍스트, outer]</code></li><li>outer 종료: <code>[전역컨텍스트]</code></li></ul><p>그리고 이러한 실행컨텍스트를 구성할 때 생기는 것들이 있다.</p><ul><li><code>VariableEnvironment</code><ul><li>현재 컨텍스트 내의 식별자(변수)들에 대한 정보</li><li>외부 환경 정보</li><li>선언 시점의 LexicalEnvironment의 스냅샷(변경사항 반영 X)</li></ul></li><li><code>LexicalEnvironment</code><ul><li>처음에는 VariableEnvironment와 같음</li><li>변경 사항이 실시간으로 반영됨</li></ul></li><li><code>ThisBinding</code><ul><li>식별자가 바라봐야 할 대상 객체</li></ul></li></ul><h3 id="variable-environment" tabindex="-1"><a class="header-anchor" href="#variable-environment"><span>Variable Environment</span></a></h3><p>VariableEnvironment에 담기는 내용은 LexicalEnvironment와 같지만, <strong>최초 실행 시의 스냅샷을 유지</strong>한다. 실행 컨텍스트를 생서할 때 VariableEnvironment에 정보를 먼저 담은 다음, 이를 복사해서 LexicalEnvironment를 만든다.</p><p>주로 활용하는 것은 LexicalEnvironment이다. 즉, VariableEnviroment는 스냅샷 유지를 목적으로 사용한다.</p><h3 id="lexcial-environment" tabindex="-1"><a class="header-anchor" href="#lexcial-environment"><span>Lexcial Environment</span></a></h3><p>LexicalEnvironment의 내부에는 <strong>environmentRecord</strong>와 <strong>outerEnvironmentReference</strong>로 구성돼 있다.</p><ul><li>environmentRecord로 인하여 호이스팅이 발생한다.</li><li>outerEnvironmentReference로 인하여 스코프와 스코프체인이 형성된다.</li></ul><h2 id="_3-environmentrecord와-hoisting-호이스팅" tabindex="-1"><a class="header-anchor" href="#_3-environmentrecord와-hoisting-호이스팅"><span>3. environmentRecord와 Hoisting(호이스팅)</span></a></h2><p>자바스크립트는 코드를 실행하기전에 식별자를 수집한다.</p><div class="custom-container tip"><p class="custom-container-title">environmentRecord</p><p>현재 컨텍스트와 관련된 코드의 식별자 정보들이 저장된다.</p><ul><li>매개변수 식별자</li><li>함수 자체</li><li>함수 내부의 식별자</li></ul></div><div class="custom-container tip"><p class="custom-container-title">Host Object(호스트 객체)</p><ul><li>전역 실행 컨텍스트는 변수 객체를 생성하는 대신 전역 객체를 활용한다.</li><li>브라우저의 Window 객체, Node의 Global 객체 등이 이에 해당한다.</li><li>이들은 Host Object로 분류된다.</li></ul></div><p>즉, 코드가 실행 되기 전에 자바스크립트의 엔진은 이미 실행 컨텍스트에 속한 변수명들을 모두 알고 있게 되는 셈이다.</p><p><u>이 때 호이스팅이란 개념이 이용된다.</u></p><p>엔진의 실제 동작 방식 대신에 <code>자바스크립트 엔진은 식별자들을 최상단으로 끌어올려놓은 다음, 실제 코드를 실행한다</code> 라고 생각해도 코드 해석에 문제되는 것이 없기 때문이다.</p><p>중요한 점은, 자바스크립트 엔진이 실제로 변수를 끌어올리지는 않지만, <u>편의상 끌어올리는 것으로 간주하자는 것이다.</u></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> x <span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드는 다음과 같이 해석될 수 있다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 매개변수 할당</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> x <span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다시 위의 코드에서 호이스팅이 발생한다고 가정하면, 다음과 같이 해석될 수 있다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line">  x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>변수의 호이스팅은 이처럼 해석될 수 있다. 함수의 호이스팅은 조금 다르다.</p><p>다음 예를 통해 살펴보자.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>변수의 경우 정의부만 호이스팅 되지만, 함수는 <strong>함수 전체가 호이스팅 된다.</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> b<span class="token punctuation">;</span></span>
<span class="line highlighted">  <span class="token keyword">function</span> <span class="token function">b</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f b () {}</span></span>
<span class="line">  b <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 자바스크립트의 함수는 일급객체(혹은 일급시민)이기 때문에 함수 표현식이 가능하다.</p><div class="custom-container tip"><p class="custom-container-title">일급객체(일급시민)</p><p>여기 x라는 것이 있다.</p><ul><li>x를 변수에 담을 수 있다.</li><li>x를 매개변수에 넘길 수 있다.</li><li>x를 함수에서 반환할 수 있다.</li></ul><p>x를 만족할 때, 이를 일급객체라고 한다.</p><p>즉, 자바스크립트의 함수는 일급객체이므로</p><ul><li>함수를 변수에 담을 수 있다.</li><li>함수를 매개변수로 넘길 수 있다.</li><li>함수를 함수에서 반환할 수 있다.</li></ul><p>위의 같은 조건을 만족한다.</p></div><p>앞의 예제의 함수를 표현식으로 변경해보자.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// b에 익명함수를 할당했다.</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 이 코드는 다음과 같이 해석될 수 있다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line">  b <span class="token operator">=</span> <span class="token string">&#39;bbb&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb</span></span>
<span class="line highlighted">  <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// b에 익명함수를 할당했다.</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f () {}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-outerenvironmentreference와-scope" tabindex="-1"><a class="header-anchor" href="#_4-outerenvironmentreference와-scope"><span>4. outerEnvironmentReference와 Scope</span></a></h2><div class="custom-container tip"><p class="custom-container-title">scope</p><p>스코프란 식별자에 대한 유효범위이다.</p><ul><li>Scope A의 외부에서 선언한 변수는, A의 외부/내부 모두 접근 가능하다.</li><li>A의 내부에서 선언한 변수는 오직 A의 내부에서만 접근할 수 있다.</li></ul></div><p>스코프의 개념은 대부분의 언어에 존재하지만, ES5까지의 Javascript는 특이하게도 <strong>오직 함수에 의해서</strong>만 스코프가 생성된다.</p><div class="custom-container tip"><p class="custom-container-title">scope chain</p><ul><li><strong>식별자의 유효범위</strong>를 안에서 바깥으로 차례로 검색해나는 것</li><li>이를 가능하게 하는 것이 <strong>outerEnvironmentReference</strong>이다.</li></ul></div><p>outerEnvironmentReference는 <u>현재 호출된 함수가 선언될 당시의 LexicalEnvironment를 참조한다.</u><br><code>선언하다</code>라는 행위가 실제로 일어날 수 있는 시점은 <u>콜 스택 상에서 어떤 실행 컨텍스트가 활성화된 상태일 때뿐이다.</u><strong>모든 코드는 실행 컨텍스트가 활서화 상태일 때 실행되기 때문이다.</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 전역 컨텍스트</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">outer</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// outer 컨텍스트</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">inner</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// inner 컨텍스트</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inner가 실행될 때 outer의 LexcicalEnvironemnt를 outerEnvironmentReference로 참조한다.</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// outer가 실행될 때 전역 컨텍스트의 LexcicalEnvironemnt를 outerEnvironmentReference로 참조한다.</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드는 다음과 같은 scope chain을 형성한다.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">inner LexicalEnvironment {</span>
<span class="line">    식별자 a</span>
<span class="line">    outerEnvironmentReference = outer LexicalEnvironment {</span>
<span class="line">            식별자 a</span>
<span class="line">            outerEnvironmentReference = global LexicalEnvironment {</span>
<span class="line">                식별자 a</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이러한 구조적 특성 덕분에 여러 스코프에 동일한 식별자를 선언할 경우, <u>무조건 scope chain 상에서 가장 먼저 발견된 식별자에만 접근 가능하게 된다.</u></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">inner LexicalEnvironment {</span>
<span class="line"></span>
<span class="line highlighted">    식별자 a        # inner function에서 a에 접근할 때 여기에 가장 먼저 접근</span>
<span class="line"></span>
<span class="line">    outerEnvironmentReference = outer LexicalEnvironment {</span>
<span class="line"></span>
<span class="line">            식별자 a        # outer function에서 a에 접근할 때 여기에 가장 먼저 접근</span>
<span class="line highlighted">            식별자 b        # inner function에서 b에 접근할 때 여기에 가장 먼저 접근</span>
<span class="line"></span>
<span class="line">            outerEnvironmentReference = global LexicalEnvironment {</span>
<span class="line"></span>
<span class="line">                식별자 a        # 전역에서 a에 접근할 때 여기에 가장 먼저 접근</span>
<span class="line">                식별자 b        # 전역에서 b에 접근할 때 여기에 가장 먼저 접근</span>
<span class="line highlighted">                식별자 c        # inner function에서 c에 접근할 때 여기에 가장 먼저 접근</span>
<span class="line"></span>
<span class="line">            }</span>
<span class="line"></span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-this" tabindex="-1"><a class="header-anchor" href="#_5-this"><span>5. this</span></a></h2><p>실행 컨텍스트의 thisBinding에는 this로 지정된 객체가 저장된다. this는 여기에 다루기에 복잡한 내용이 많기 때문에 따로 작성할 예정이다.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><ul><li>실행 컨텍스트는 실행할 코드에 제공할 환경 정보들을 모아놓은 객체이다. <ul><li>전역 공간에서 자동으로 생성되는 전연 컨텍스트</li><li>eval함수</li><li>함수 실행에 의한 컨텍스트</li></ul></li><li>실행 컨텍스트 객체는 활성화 되는 시점에 VariableEnviroment, LexcialEnvrionment, ThisBinding의 세 가지 정보를 수집한다.</li><li>실행 컨텍스트를 생서할 때 VariableEnvironment와 LexicalEnvironment가 동일한 내용으로 구성된다.</li><li>LexicalEnvironment는 함수 실행 도중에 변경되는 사항이 즉시 반영된다.</li><li>LexicalEnvironment와 VariableEnvironment는 다음과 environmentRecord와 outerEnvironmentReference로 구성돼 있다. <ul><li>environmentRecord는 매개변수 식별자, 변수 식별자, 선언한 함수의 식별자 등을 수집한다. <ul><li>이것 때문에 호이스팅이라는 개념이 사용된다.</li><li>호이스팅은 코드 해석을 좀 더 수월하게 하기 위해 environmentRecord의 수집 과정을 추상화한 개념이다.</li><li>변수 선언부와 함수 선언문에 호이스팅이 발생한다.</li><li>함수 표현식을 사용할 경우 함수의 선언부만 호이스팅이 발생한다.</li></ul></li><li>outerEnvironmentReference는 상위(직전) 컨텍스트의 LexcicalEnviroment 정보를 참조한다. <ul><li>이것 때문에 스코프가 형성되고, 스코프 체인을 통해 상위 컨텍스트에 접근할 수 있다.</li><li>스코프는 변수의 유효범위를 말한다.</li></ul></li></ul></li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2>`,61),r={href:"http://www.yes24.com/Product/Goods/78586788",target:"_blank",rel:"noopener noreferrer"},d=n("ul",null,[n("li",null,"2장. 실행 컨텍스트")],-1);function k(v,m){const s=e("ExternalLinkIcon");return p(),t("div",null,[u,n("p",null,[n("a",r,[i("코어 자바스크립트"),l(s)])]),d])}const h=a(o,[["render",k],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/Javascript/Domain/Execution-Context/","title":"자바스크립트 실행 컨텍스트","lang":"en-US","frontmatter":{"title":"자바스크립트 실행 컨텍스트","description":"자바스크립트 실행 컨텍스트에 대해 다룹니다.","sidebarDepth":2,"date":"2020-08-01T00:00:00.000Z","tag":"javascript, domain"},"headers":[{"level":2,"title":"1. 개념","slug":"_1-개념","link":"#_1-개념","children":[]},{"level":2,"title":"2. 실행 컨텍스트 구성","slug":"_2-실행-컨텍스트-구성","link":"#_2-실행-컨텍스트-구성","children":[{"level":3,"title":"Variable Environment","slug":"variable-environment","link":"#variable-environment","children":[]},{"level":3,"title":"Lexcial Environment","slug":"lexcial-environment","link":"#lexcial-environment","children":[]}]},{"level":2,"title":"3. environmentRecord와 Hoisting(호이스팅)","slug":"_3-environmentrecord와-hoisting-호이스팅","link":"#_3-environmentrecord와-hoisting-호이스팅","children":[]},{"level":2,"title":"4. outerEnvironmentReference와 Scope","slug":"_4-outerenvironmentreference와-scope","link":"#_4-outerenvironmentreference와-scope","children":[]},{"level":2,"title":"5. this","slug":"_5-this","link":"#_5-this","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1739958092000},"filePathRelative":"Javascript/Domain/Execution-Context/README.md"}');export{h as comp,g as data};
