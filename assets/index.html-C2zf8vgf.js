import{_ as e,r as o,o as c,c as l,a as n,b as a,d as p,e as t}from"./app-4sWi44zn.js";const i={},u=n("h1",{id:"mvvm-system-개선하기-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mvvm-system-개선하기-3"},[n("span",null,"MVVM System 개선하기 (3)")])],-1),k=n("p",null,"객체지향 자바스크립트 마지막 포스팅입니다.",-1),r={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"해당 포스트는 아래의 내용들을 토대로 정리한 것입니다.",-1),v={href:"https://www.youtube.com/watch?v=5UUISCK6CL4",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="viewmodellistener-개선" tabindex="-1"><a class="header-anchor" href="#viewmodellistener-개선"><span>ViewModelListener 개선</span></a></h2><p><a href="../03-Strategy-Observer">MVVM System 개선하기 (1)</a>에서 만든 Binder의 viewmodelUpdated는 문제가 있다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Binder <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span>략</span>
<span class="line">  <span class="token comment">// .. 생략</span></span>
<span class="line">  <span class="token function">viewmodelUpdated</span> <span class="token punctuation">(</span><span class="token parameter">updated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> vmName<span class="token punctuation">,</span> el <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      items<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">type</span><span class="token punctuation">(</span>rootViewModel<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span><span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span><span class="token punctuation">,</span> el<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    updated<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> subKey<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">[</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">,</span> processor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#processors<span class="token punctuation">[</span>category<span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el <span class="token operator">||</span> <span class="token operator">!</span>processor<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">      processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드에서 <code>rootViewModel</code>은 <u>client 코드에서 생성한 전역변수(전역객체)</u> 이다. 그런데 이 전역변수를 지금 viewmodelUpdate에서 사용하고 있는 것이다. 이 부분을 개선해야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> ViewModelListener <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* 생략 */</span></span>
<span class="line highlighted">  <span class="token function">viewmodelUpdated</span> <span class="token punctuation">(</span><span class="token parameter">viewmodel<span class="token punctuation">,</span> updated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token string">&#39;override!&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> Binder <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token function">viewmodelUpdated</span> <span class="token punctuation">(</span><span class="token parameter">viewmodel<span class="token punctuation">,</span> updated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> vmName<span class="token punctuation">,</span> el <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      items<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">type</span><span class="token punctuation">(</span>viewdmoel<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span><span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span><span class="token punctuation">,</span> el<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    updated<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> subKey<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">[</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">,</span> processor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#processors<span class="token punctuation">[</span>category<span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el <span class="token operator">||</span> <span class="token operator">!</span>processor<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">      processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>viewmodelUpdated에서 <u>viewmodel을 인자로 받아오도록</u> 해야 한다. 그런데 viewmodelUpdated는 Binder에만 있는게 아니라 ViewModel에도 존재한다. <u>그리고 ViewModel에서 notify로 Binder에게 최신 정보를 보내게 된다.</u> 이 코드 또한 수정해야 한다.</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEpyb9JIx9pCyhLWZBJ2ttpKz9pU7Aooz9LSWlIor2Y2bOAPG1sRaWTcX1Ic99QWeNGbBNJi4fCoy5gC5AGKiBg3qphL9B2yaSk2o68L0Pe0aWuu0gWb910fbvwLmEG1RGaG00" alt="uml diagram"><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> ViewModel <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* 생략 */</span></span>
<span class="line">  <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">viewmodelUpdated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#isUpdated<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// ViewModel에서 실행한 viewmodelUpdated는 viewmodel 인자를 사용하지 않는다.</span></span>
<span class="line">  <span class="token function">viewmodelUpdated</span> <span class="token punctuation">(</span><span class="token parameter">viewmodel<span class="token punctuation">,</span> updated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> updated<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>그런데 <a href="../04-ISP-Visitor">MVVM System 개선하기 (2)</a>에서 만든 viewmodelUpdated는 위와 같이 단순하지가 않다. <code>ViewModelSubject</code>는 <code>notify</code>를 통해 <code>Binder</code>에게 viewmodel의 updated 내역을 알린다.</p><p>다르게 말하자면 <strong>ViewModelSubject와 Binder가 계약(의존 관계)을 맺고 있기 때문</strong>이다.</p><p>그래서 앞서 작성한 코드를 그대로 사용할 경우, Binder에서 받아들이는 viewmodel이 ViewModelSubject일 수도 있고, ViewModel일 수도 있게 된다.</p><p>따라서 Binder에서 사용하는 viewmodelUpdated가 무조건 ViewModel이 되도록 만들어야 하는데, 이를 위해 <u>ViewModelSubject에서 Binder에게 넘기는 Parameter(viewmodel)를 ViewModel에게 위임해야 한다.</u></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> ViewModelSubject <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... 생략</span></span>
<span class="line">  <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">viewmodelUpdated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>notifyTarget<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">get</span> <span class="token function">notifyTarget</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token string">&#39;must be override!&#39;</span> <span class="token punctuation">}</span> <span class="token comment">// ViewModel에게 위임한다.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> ViewModel <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelSubject <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... 생략</span></span>
<span class="line">  <span class="token keyword">get</span> <span class="token function">notifyTarget</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">}</span> <span class="token comment">// notifyTarget을 호출하면 ViewModel을 보낸다.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 ViewModelSubject에서 <code>notifyTarget</code>이라는 getter method를 통해 ViewModel에게 위임을 할 수 있다.</p><p>그리고 Binder의 코드도 다음과 같이 변경되어야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Binder <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// .. 생략</span></span>
<span class="line">  <span class="token function">viewmodelUpdated</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> updated<span class="token punctuation">,</span></span>
<span class="line highlighted">                   _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// target은 ViewModel 이여야 한다.</span></span>
<span class="line">    <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> vmName<span class="token punctuation">,</span> el <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      items<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">type</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span><span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span><span class="token punctuation">,</span> el<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    updated<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> subKey<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">[</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">,</span> processor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#processors<span class="token punctuation">[</span>category<span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el <span class="token operator">||</span> <span class="token operator">!</span>processor<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">      processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>주석에도 표기했지만, Binder가 받아들이는 viewmodel(target)은 ViewModelSubject가 아니라 ViewModel이여야 한다.</p><p><u>추상 계층을 분리하게 될 경우, 어떠한 문제가 생겼을 때 각각의 계층에서 해결하도록 만드는 것을 지향해야 한다.</u></p><h2 id="processor-개선" tabindex="-1"><a class="header-anchor" href="#processor-개선"><span>Processor 개선</span></a></h2><p>현재 Strategy Pattern을 통해서 추출한 Processor는 약간의 문제를 가지고 있다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Binder의 Render 부분</span></span>
<span class="line"><span class="token keyword">const</span> Binder <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... 생략</span></span>
<span class="line">  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">viewmodel<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>viewmodel<span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> processores <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#processors<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> vmName<span class="token punctuation">,</span> el <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>viewmodel<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span><span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span></span>
<span class="line">      processores<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>pk<span class="token punctuation">,</span> processor<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>vm<span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">          processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ViewModel</span></span>
<span class="line"><span class="token keyword">const</span> ViewModel <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelSubject <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... 생략</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&#39;styles,attributes,properties&#39;</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v <span class="token operator">||</span> <span class="token keyword">typeof</span> v <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">invalid object k: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, v:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ViewModel<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> ViewModel<span class="token punctuation">.</span><span class="token function">descriptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">ViewModel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          v<span class="token punctuation">.</span><span class="token function">_setParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Client 코드</span></span>
<span class="line">binder<span class="token punctuation">.</span><span class="token function">addProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;styles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">binder<span class="token punctuation">.</span><span class="token function">addProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">binder<span class="token punctuation">.</span><span class="token function">addProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;properties&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">binder<span class="token punctuation">.</span><span class="token function">addProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">v</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> e<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">처리기(Processor)는 데이터 구조(ViewModel)과 동기화 되어야 한다.</p><p>위 코드의 문제점은 바로 <strong>Processor는 확장 가능</strong> 하도록 만들었지만 ViewModel에서 Processor의 종류를 <code>style</code> <code>attributes</code> <code>properties</code> 등으로 <strong>제한</strong> 하고 있다는 것이다.</p><p><u>즉, ViewModel이 Processor의 확장을 제한하고 있는 것이다.</u> 그래서 이 부분을 잘 확장되도록 일반화 시켜야 한다.</p></div><p>문제를 더 깊게 살펴보면, 지금 <strong>Processor의 <code>Spec</code>이 <code>Code</code>로 정의 된 상태다.</strong> 그래서 ViewModel이 자유롭게 작성되는 것 처럼 보이지만 사실 <u>엄격하게 제한된 Spec을 기반으로 작성 되고 있다.</u> 따라서 Code를 읽지 않으면 데이터 형식을 옳바르게 작성할 수 없게 된다.</p><p>그러면 어떻게 ViewModel을 자유롭게 작성하게 할 수 있도록 만들 수 있을까? 바로 <u>어떤 형식이든 Getter와 Setter로 만드는 Parser와 Observer를 만드는 것이다.</u></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> ViewModel <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelSubject <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 모든 Key를 Observer에게 보고한다.</span></span>
<span class="line">  <span class="token function">define</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">ViewModel</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        target<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line highlighted">        target<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>ViewModel<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span>ViewModel<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> k <span class="token comment">// 상대적인 경로 표기. key의 확장</span></span>
<span class="line highlighted">        v<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        target<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>ViewModel<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">]</span><span class="token operator">:</span> target<span class="token punctuation">[</span>ViewModel<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> k <span class="token punctuation">}</span> </span>
<span class="line highlighted">        Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>ik<span class="token punctuation">,</span> iv<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> ik<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;subKey&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> target<span class="token punctuation">.</span>subKey</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token comment">// 재귀 함수는 재귀가 끝나는 조건을 명확하게 알면 된다.</span></span>
<span class="line highlighted">      <span class="token comment">// 종결 조건을 반드시 만들어야 한다.</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">ViewModel</span><span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">_setParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token parameter">_</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">,</span></span>
<span class="line">          <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token parameter">newV</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            v <span class="token operator">=</span> newV</span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewModelValue</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>subKey<span class="token punctuation">,</span> target<span class="token punctuation">[</span>ViewModel<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">[</span>ViewModel<span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">재귀 함수</p><p>기본적으로 재귀 함수는 느리고 위험성이 크다. 함수를 실행하면 <code>Call Stack</code> 이라는 것이 쌓이게 되는데, 브라우저에서는 Call Stack의 한계치가 있기 때문에 안전하다고 볼 수 없다.</p><p>* 다만 사파리의 경우 꼬리 물기 최적화가 되어 있기 때문에 다른 브라우저보단 재귀 함수의 작동이 비교적 안전하다.</p><p><u>그래서 알고리즘에 대한 이해도가 뛰어나다면, 재귀 함수 대신 stack 자료구조를 사용하여 반복문을 통해 구현 하는 것이 좋다.</u></p></div><div class="custom-container tip"><p class="custom-container-title">if Statement(조건 분기)</p><p>조건 분기의 경우 <u>Optional과 Mandatory</u> 두 가지가 있다.</p><ul><li><strong>Optional</strong> : else를 사용하지 않음</li><li><strong>Mandatory</strong> : else를 사용함</li></ul><p>조건 문의 경우 어떻게 보면 당연한 이야기지만, <u>else를 사용하고 안하고에 따라서 코드의 의도가 굉장히 달라진다.</u></p><p>재귀 함수의 경우, 재귀가 끝나는 조건이 필요하다. 그렇기 때문에 Mandatory한 분기 문을 통해서 재귀의 종료를 명시해야 한다.</p></div><p>그리고 Binder에서 Processor를 가져올 때 <strong>Category를 식별하는 로직</strong>이 필요하다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Binder <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">viewmodelUpdated</span> <span class="token punctuation">(</span><span class="token parameter">updated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> vmName<span class="token punctuation">,</span> el <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      items<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">type</span><span class="token punctuation">(</span>rootViewModel<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span><span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span><span class="token punctuation">,</span> el<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    updated<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> subKey<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line highlighted">      <span class="token keyword">const</span> <span class="token punctuation">[</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">,</span> processor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#processors<span class="token punctuation">[</span>category<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el <span class="token operator">||</span> <span class="token operator">!</span>processor<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">      processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><u>이제 특정 Key 를 규정하는 것은 Processor 밖에 없다.</u> ViewModel은 아무런 Spec도 강요하지 않게 되었다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> SetDomProcessor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomVisitor</span></span>
<span class="line">  <span class="token keyword">const</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomScanner</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// Process가 단순한 이유는 Binder가 무거워졌기 때문</span></span>
<span class="line">  <span class="token comment">// 이에 대한 의사결정은 조직에 따라 달라짐</span></span>
<span class="line">  <span class="token keyword">const</span> baseProcessors <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;styles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;properties&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">v</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> e<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">setProcessor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span> Binder<span class="token punctuation">)</span></span>
<span class="line">    baseProcessors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> binder<span class="token punctuation">.</span><span class="token function">addProcessor</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token function">SetDomProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list를-표현하기" tabindex="-1"><a class="header-anchor" href="#list를-표현하기"><span>List를 표현하기</span></a></h2><p>이제 List를 표현할 수 있도록 Processor와 Scanner를 개선해야 한다.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-viewmodel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">data-viewmodel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">data-viewmodel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contents<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line highlighted">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">data-viwmodel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line highlighted">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-template</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listItem<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-viewmodel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line highlighted">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>먼저 list를 <code>data-template</code> 이라는 attribute로 표현한다고 했을 때, 다음과 같이 Scanner를 수정하면 된다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> DomScanner <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Scanner <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">static</span> #templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">get</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#templates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">visitor<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> DomVisitor<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">scan</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> HTMLElement<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binder</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token keyword">const</span> template <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-template&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted">      <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-template&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted">        DomScanner<span class="token punctuation">.</span>#templates<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> el<span class="token punctuation">)</span></span>
<span class="line highlighted">        el<span class="token punctuation">.</span>parentElement<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token comment">// Chrome 80 부터 Optional Chaining을 사용할 수 있게 됨</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> vm <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-viewmodel&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-viewmodel&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          binder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BinderItem</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> binder</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 data-template을 사용하는 <code>Processor</code>를 만들어야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">      name <span class="token operator">=</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">&#39;no name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      data <span class="token operator">=</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">&#39;no data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token operator">=</span> vm<span class="token punctuation">.</span>template</span>
<span class="line">    <span class="token keyword">const</span> template <span class="token operator">=</span> DomScanner<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">&#39;no template&#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">&#39;invalid data:&#39;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span></span>
<span class="line">    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>vm <span class="token keyword">instanceof</span> <span class="token class-name">ViewModel</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">invalid Viewmodel: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>vm<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 여기까지가 bloack list - 검증로직</span></span>
<span class="line">    <span class="token comment">// ------------------------------</span></span>
<span class="line">    <span class="token comment">// 여기서 부터는 검증하지 않는다.</span></span>
<span class="line">    <span class="token comment">// ------------------------------</span></span>
<span class="line">    <span class="token comment">// 여기서 부터 white list - 제어로직</span></span>
<span class="line"></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">    visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>binder<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span>binder<span class="token punctuation">,</span> vm<span class="token punctuation">]</span> <span class="token operator">=</span> el<span class="token punctuation">.</span>binder</span>
<span class="line">        binder<span class="token punctuation">.</span><span class="token function">unwatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">delete</span> el<span class="token punctuation">.</span>binder</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> el<span class="token punctuation">)</span></span>
<span class="line">    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line highlighted">    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> child <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token function">setProcessor</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      el<span class="token punctuation">.</span>binders <span class="token operator">=</span> <span class="token punctuation">[</span>binder<span class="token punctuation">,</span> vm<span class="token punctuation">]</span></span>
<span class="line">      binder<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line">      el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>코드를 작성할 때 <u>BlackList 영역에서 변수에 대한 검증을 하여 검증이 완료 된 WhiteList를 만든다.</u><br> 이렇게 할 경우 <u>로직은 WhiteList로 작성할 수 있다.</u></p><p>이제 ViewModel의 Client 코드에 template 부분을 추가해줘야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> rootViewModel <span class="token operator">=</span> ViewModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... 생략</span></span>
<span class="line">  <span class="token literal-property property">list</span><span class="token operator">:</span> ViewModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;listItem&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;1,2,3,4,5,6&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> ViewModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">item</span><span class="token operator">:</span> ViewModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">styles</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">innerHTML</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">item</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="decorator-pattern-적용" tabindex="-1"><a class="header-anchor" href="#decorator-pattern-적용"><span>Decorator Pattern 적용</span></a></h2><div class="custom-container tip"><p class="custom-container-title">Decorator Pattern</p><ul><li>Decoratoer Pattern은 <u>객체의 결합 을 통해 기능을 동적으로 유연하게 확장 할 수 있게 해준다.</u></li><li>추가할 수 있는 기능의 종류가 많은 경우 사용하기 좋다.</li><li>추가 기능을 Decorator로 정의 한 후 조합 하여 설계 하는 방식이다. <ul><li>객체의 의존성이 분산 된다</li><li>각각의 객체가 하나의 의존성을 갖는다</li><li><u>의존성의 분산 = 책임의 분산</u></li></ul></li><li>Collection을 Linked List로 관리하는 것이라고 볼 수도 있다</li></ul></div><p>기존의 Processor는 Collection 형태로 관리된다. 그래서 <u>의존성이 Collection에 몰리게 되고 이에 따라 책임이 비대해진다.</u></p><p>Collection을 사용하게 되면 높은 확률로 일반화가 무너지게 된다. 특히 행위를 갖는 객체를 Collection으로 갖게 되면 문제가 발생할 확률이 높다. 행위(Method)를 갖는 다는 것은 <strong>객체마다 가지고 있는 동작이 다르다는 것</strong>인데 이걸 Collection으로 묶을 경우 <u>여러 가지 상황에 대한 대응이 힘들어질 수 밖에 없다.</u></p><p>그래서 Collection으로 관리 되고 있는 객체들을 Decoration Pattern을 사용하여 <u>Linked List로 분산</u> 시킨 다음 각각의 객체가 갖는 Method는 각자 알아서 실행하고 다음 객체를 호출하면 된다.</p><p>즉, <strong>Loop를 Object에게 위임하는 것</strong>이라고 생각할 수도 있다. 코드를 객체로 바꾸는 것이다.</p><p>이제 코드상으로 살펴보자. 먼저 <code>Processor</code>를 수정해야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Processor <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span></span>
<span class="line">  category<span class="token punctuation">;</span></span>
<span class="line">  #next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> category</span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">process</span> <span class="token punctuation">(</span>category<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span></span>
<span class="line">            _0 <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            _1 <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            _2 <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_process</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token comment">// next가 있을 경우, next의 process를 실행한다.</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#category <span class="token operator">===</span> category<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_process</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token comment">// category</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#next<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token string">&#39;override&#39;</span> <span class="token punctuation">}</span></span>
<span class="line highlighted">  <span class="token function">next</span> <span class="token punctuation">(</span><span class="token parameter">processor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#next <span class="token operator">=</span> processor</span>
<span class="line highlighted">    <span class="token keyword">return</span> processor</span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드는 다음과 같이 사용될 수 있다</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;styles&#39;</span><span class="token punctuation">)</span></span>
<span class="line">processor</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;properties&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">v</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> e<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 <code>Binder</code> 또한 고쳐줘야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">ViewModelListener</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// .. 생략</span></span>
<span class="line">  <span class="token comment">// addProcessor, #processors 삭제</span></span>
<span class="line">  #processor <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token keyword">set</span> <span class="token function">processor</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#processor <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">viewmodel<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>viewmodel<span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> vmName<span class="token punctuation">,</span> el <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>viewmodel<span class="token punctuation">[</span>vmName<span class="token punctuation">]</span><span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>category<span class="token punctuation">,</span> childVm<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>childVm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">          <span class="token keyword">this</span><span class="token punctuation">.</span>#processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">// 각각의 processorr가 category를 식별하여 실행함</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 <code>Binder</code>에 <code>Processor</code>를 주입할 땐 다음과 같이 해야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomVisitor</span></span>
<span class="line"><span class="token keyword">const</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomScanner</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span> Binder<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 첫 번째 processor 주입</span></span>
<span class="line">binder<span class="token punctuation">.</span>processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;styles&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 나머지 processor 주입</span></span>
<span class="line">binder<span class="token punctuation">.</span>processor </span>
<span class="line"><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;attributes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;properties&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">_process</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> el<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">v</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> e<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="최종-코드" tabindex="-1"><a class="header-anchor" href="#최종-코드"><span>최종 코드</span></a></h2><p>Decorator 까지 반영한 코드는 다음과 같다.</p><p>&lt;&lt;&lt; @/CodeSpitz/Object-Oriented-Javascript/05-Extension/example.html</p>`,59),b={href:"https://github.com/JunilHwang/TIL/blob/master/CodeSpitz/Object-Oriented-Javascript/05-Extension/example.html",target:"_blank",rel:"noopener noreferrer"},g=t('<h2 id="생각-정리" tabindex="-1"><a class="header-anchor" href="#생각-정리"><span>생각 정리</span></a></h2><ul><li>함부로 성급한 일반화를 하지 않기 위해선 코어(본체)를 가볍게 만들고, 뒤쪽으로 밀어내면 좋다.</li><li>코어는 안전해지고 가볍지만, 마지막 구현체에 따라서 프로젝트가 실패할 수 있다.</li><li>제어역전을 통해서 코어를 무겁게 만들면 은신의 폭이 좁아지게 된다. <ul><li>안정화된 서비스 → 잘 변하지 않음 → 제어 역전의 효과를 보기가 쉽다.</li><li>성장하는 서비스 → 잘 변함 → 제어 역전의 효과를 보기가 힘들다.</li></ul></li><li>현대의 존재하는 대부분의 프레임워크는 코어를 가볍게 만든다. <ul><li>대부분의 기능은 코어에 연결된 플러그인에게 위임한다</li><li>즉, 제어역전이 플러그인들에게 분할되어 있다.</li><li>코어 : Vue</li><li>플러그인 : VueRouter, Vuex, VueLoader</li></ul></li></ul>',2);function w(h,y){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,k,n("div",r,[d,n("p",null,[n("a",v,[a("코드스피츠 86기 5회차 동영상"),p(s)])])]),m,n("p",null,[n("a",b,[a("GitHub에서 보기"),p(s)])]),g])}const V=e(i,[["render",w],["__file","index.html.vue"]]),j=JSON.parse('{"path":"/CodeSpitz/Object-Oriented-Javascript/05-Extension/","title":"MVVM System 개선하기 (3)","lang":"en-US","frontmatter":{"title":"MVVM System 개선하기 (3)","description":"MVVM System을 최종적으로 어떻게 개선하였는지 설명합니다.","sidebarDepth":2,"date":"2020-02-28T00:00:00.000Z","tag":"코드스피츠, javascript, oop","thumbnail":"https://cphinf.pstatic.net/mooc/20171016_5/15081473670537g5Dm_PNG/title.png?type=w760"},"headers":[{"level":2,"title":"ViewModelListener 개선","slug":"viewmodellistener-개선","link":"#viewmodellistener-개선","children":[]},{"level":2,"title":"Processor 개선","slug":"processor-개선","link":"#processor-개선","children":[]},{"level":2,"title":"List를 표현하기","slug":"list를-표현하기","link":"#list를-표현하기","children":[]},{"level":2,"title":"Decorator Pattern 적용","slug":"decorator-pattern-적용","link":"#decorator-pattern-적용","children":[]},{"level":2,"title":"최종 코드","slug":"최종-코드","link":"#최종-코드","children":[]},{"level":2,"title":"생각 정리","slug":"생각-정리","link":"#생각-정리","children":[]}],"git":{"updatedTime":1739734884000},"filePathRelative":"CodeSpitz/Object-Oriented-Javascript/05-Extension/README.md"}');export{V as comp,j as data};
