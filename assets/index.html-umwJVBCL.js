import{_ as e,r as o,o as l,c,a as n,b as s,d as t,e as p}from"./app-CwTTi3hV.js";const i={},u=p('<h1 id="_2020년-9월-회고" tabindex="-1"><a class="header-anchor" href="#_2020년-9월-회고"><span>2020년 9월 회고</span></a></h1><img width="778" alt="image32" src="https://user-images.githubusercontent.com/18749057/96290347-689cbe00-1021-11eb-873c-612efe8ec1d7.png"><p>9월은 정신 없이 시간이 흘러갔다. 사실 왜 벌써 10월인지, <strong>왜 벌써 여름이 저물었고 가을이 왔는지 혼란스럽다.</strong> 9월 말에 리액트 스터디 세션을 하면서 <strong>이제 2020년이 100일도 남지 않았다는 것</strong>을 알았다. 기똥찬 한 해를 보내자고 다짐했던게 엊그제 같은데.. 언제 이렇게 시간이 흘렀는지..</p><p>각설하고, 회고 시작!</p><h2 id="공적" tabindex="-1"><a class="header-anchor" href="#공적"><span>공적</span></a></h2><p>한 달 내내 재택근무를 했는데 덕분에 회사에 대한 약간의 그리움(?)을 느꼈다.</p><h3 id="_1-크롬-확장프로그램" tabindex="-1"><a class="header-anchor" href="#_1-크롬-확장프로그램"><span>1. 크롬 확장프로그램</span></a></h3><p><img src="https://user-images.githubusercontent.com/18749057/95010212-7128e800-0662-11eb-918d-da7a31d64d7f.png" alt="크롬 확장프로그램"></p>',8),r={href:"https://zuminternet.github.io/Zum-Chrome-Extension/",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>확실히 확장프로그램을 만들면서 <strong>기술적으로 많은 생각을 하는 계기</strong>가 되었다. 일반적인 웹 서비스가 아니기 때문에 고려해야할 것도 많았고, <strong>완성도에 대한 중요성</strong> 또한 다시 한 번 깨우칠 수 있었다.</p><p><s>그런데 또 하고 싶다는 생각이 들진 않는다.</s></p><p>언젠간 <s>죽기 전에</s> 확장프로그램으로 재미난 일들을 해보고 싶다.</p><h3 id="_2-cms-qa" tabindex="-1"><a class="header-anchor" href="#_2-cms-qa"><span>2. CMS QA</span></a></h3><p>8월에 진행 하던 CMS 개발을 완료했고, 9월에는 QA를 진행하면서 각종 이슈 및 버그를 해결했다. 이번에 작업한 CMS는 약 5개 정도의 서비스와 맞물려 있기 때문에 어떤 부분을 작업했다고 하기가 조심스럽다.</p><p>그래도 그중에 꽤 인상 깊었던 작업만 적어보자면, 서비스에 노출중인 아이템의 순서를 <code>Sortable.js</code>로 변경하는 것이었다. 기존에도 <code>Sortable.js</code>를 이용하여 아이템의 순서를 변경하긴 했다. <u>그런데 <code>Sortable.js</code>는 <code>DOM</code>을 직접적으로 조작하는 라이브러리다.</u> 그래서 <code>Vue</code>와 깊게 연관되면 오작동 하는 경우가 꽤 많았다. <u><code>Vue</code>의 경우 데이터를 기반으로 <code>DOM</code>을 그린다. 즉, <code>DOM</code>이 변경되어도 데이터는 변경되지 않는 것이다.</u></p><p>덕분에 다음과 같은 문제들을 맞닥뜨렸다.</p><ul><li>Sortable.js로 DOM의 순서를 변경했다.</li><li>그러나 Vue에서 관리중인 data의 순서는 변경되지 않는다.</li><li><u>따라서 DOM을 보고 data를 업데이트 해야한다.</u></li><li>그런데 data를 업데이트하면 DOM이 꼬여버린다. 왜냐하면 <strong>현재 데이터에 바인딩 되어 있는 DOM은 변경되지 않기 때문</strong>이다.</li></ul><p>글로 읽는 것 보단 눈으로 보고 직접 체험해 보는게 제일 빠르다.</p><p>일단 다음과 같이 간단하게 Vue에 Sortablejs를 적용할 수 있다.</p><div style="display:none;"><p>::: demo [vanilla]</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  window<span class="token punctuation">.</span>loadedScript <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token string">&#39;https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">src</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p></div><p>::: demo [vanilla]</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sortable-app1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>아이템을 드래그앤 드롭으로 섞어주세요<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$sortedList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, k) in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>k<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>실제 Vue Data상의 아이템 순서: {{ JSON.stringify(items) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">loadedScript<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#sortable-app1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;item01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item04&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name">Sortable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>$sortedList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>문제는 Sort를 하여도 데이터의 변화는 없다는 점이다. 그래서 데이터를 직접 조작해야한다.</p><p>::: demo [vanilla]</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sortable-app2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>아이템을 드래그앤 드롭으로 섞어주세요<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$sortedList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, k) in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>k<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:data-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>k<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>실제 Vue Data상의 아이템 순서: {{ JSON.stringify(items) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">loadedScript<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#sortable-app2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;item01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item04&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name">Sortable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>$sortedList<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">onEnd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>$sortedList<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>위의 코드는 다음과 같은 로직을 수행한다.</p><ul><li>DOM을 섞는다.</li><li>DOM을 기준으로 items를 다시 만든다.</li><li><strong>items를 기준으로 이미 섞인 DOM을 다시 렌더링한다.</strong> (이 부분이 핵심이다.)</li></ul><p>따라서 DOM을 기준으로 items를 섞은 다음에, <strong>다시 DOM을 원상복구 해야한다.</strong></p><p>::: demo [vanilla]</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sortable-app3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>아이템을 드래그앤 드롭으로 섞어주세요<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$sortedList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, k) in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>k<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:data-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>k<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>실제 Vue Data상의 아이템 순서: {{ JSON.stringify(items) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">loadedScript<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#sortable-app3&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;item01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;item04&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> $sortedList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Sortable</span><span class="token punctuation">(</span>$sortedList<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function-variable function">onEnd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> oldIndex<span class="token punctuation">,</span> newIndex <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> newItems <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>$sortedList<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">            <span class="token comment">/* 섞인 DOM을 원상복구 하는 코드 */</span></span>
<span class="line">            <span class="token keyword">const</span> isAfter <span class="token operator">=</span> newIndex <span class="token operator">&lt;</span> oldIndex<span class="token punctuation">;</span></span>
<span class="line">            $sortedList<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span></span>
<span class="line">              $sortedList<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">li:nth-child(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">              $sortedList<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">li:nth-child(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oldIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isAfter<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> newItems<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>사실 <code>vue-sortable</code> 컴포넌트를 사용해도 되지만 생각보다 커스텀 하기가 쉽지 않았다. 그래서 <code>Sortable</code>을 그대로 사용해야 했고, 위와 같은 문제들과 맞닥뜨린 것이다. 굉장한 삽질 끝에 <code>DOM</code>을 원상복구 하는 해결 방안을 찾을 수 있었다.</p><p><s>그런데 지금 Vuepress에서 예제를 만든다고 더 삽질한 것 같다.</s></p><p>이외에도 <code>Sortable</code>을 그대로 사용하는게 아니라 <code>Swap</code>을 연동하여 사용하는 등의 과정이 있으나 글이 너무 길어질 것 같아서 이만 다음 주제로 넘어가야겠다.</p><h3 id="_3-api-관련-이슈-해결" tabindex="-1"><a class="header-anchor" href="#_3-api-관련-이슈-해결"><span>3. API 관련 이슈 해결</span></a></h3><p>8월에 <code>Mobile API</code>를 <code>Internal API</code>에서 분리시키는 작업을 했다.그리고 운영하는 과정에서 몇 가지 이슈가 있었다.</p><p>분리 작업 중 리팩토링을 진행하면서 캐싱 관련 코드를 전체적으로 수정했다. 그런데 정말 약 100개 가까이 되는 서비스 코드 중 정말 딱 한 개의 서비스 코드만 리팩토링을 진행하지 않았고 그 부분에서 에러가 터졌다.. 😢</p><p>어쨌든 전체적인 코드를 훑어볼 수 있는 기회가 되기도 했고, 한 번 더 불필요한 코드를 제거하는 등의 리팩토링을 진행했다.</p><p>그리고 <code>Internal API</code>에서 <code>Mobile API</code> 관련 코드를 모두 제거했고, <code>Sentry</code>도 연결했다. 입사 후에 계속 관리해오던 것들이라서 마음이 많이 홀가분해졌다.</p><h2 id="사적" tabindex="-1"><a class="header-anchor" href="#사적"><span>사적</span></a></h2><p>9월은 정말 정말 바쁘게 살았다.</p><h3 id="_1-black-coffee-study" tabindex="-1"><a class="header-anchor" href="#_1-black-coffee-study"><span>1. Black Coffee Study</span></a></h3><p>매달 <code>NextStep</code>에서 메일로 뉴스레터를 보내주고 있다. 그런데 눈에 띄는 항목이 보였다.</p><p><img src="https://user-images.githubusercontent.com/18749057/96161643-80594100-0f52-11eb-8254-76e542afff4c.png" alt="image01"></p><p><strong>처음으로 Javascript Study가 진행되고 있다는 내용</strong>이다. <strong>무료로 신청</strong>할 수 있었기 때문에 고민 없이 바로 신청했다.</p><div class="custom-container tip"><p class="custom-container-title">블랙 커피 스터디</p><ul><li>스터디 이름은 <code>훌륭한 의사소통은 블랙커피처럼 자극적이며, 후에 잠들기가 어렵다.</code> 라는 문장에 감명 받아 <code>블랙 커피 스터디</code>라고 짓게 되었다고 한다.</li><li>이름의 유래에서 유추할 수 있듯 <code>함께 좋은 커뮤니케이션으로 통찰을 이끌어내고, 그 통찰과 함께 성장하고, 소프트웨어 장인으로 거듭나기</code>가 목표인 스터디이다.</li><li>이 스터디는 위와 같은 목표를 달성하기 위해서 <code>페어 프로그래밍</code>과 <code>코드리뷰</code>라는 수단을 이용한다.</li></ul></div><div class="custom-container tip"><p class="custom-container-title">소프트웨어 장인이란?</p><ol><li>동작하는 소프트웨어 뿐만 아니라 정교하고 솜씨있게 만들어직 작품을</li><li>변화에 대한 대응하는것 뿐만이 아니라, 계속해서 가치를 더하는 것을</li><li>개별적으로 협력하는 것 뿐만이 아니라, 프로페셔널 커뮤니티를 조성하는 것을</li><li>고객과 협업하는 것 뿐만 아니라, 생산적인 동반자 관계를 추구한다.</li></ol></div><h4 id="_1-스터디-미션소개" tabindex="-1"><a class="header-anchor" href="#_1-스터디-미션소개"><span>(1) 스터디 미션소개</span></a></h4><p><img src="https://user-images.githubusercontent.com/18749057/96161916-d928d980-0f52-11eb-9138-b75d03d0f442.png" alt="image02" width="600"></p><p>스터디의 미션은 생각보다 간단했다.</p>`,43),d=n("code",null,"1주차",-1),v={href:"https://www.youtube.com/watch?v=1yADBI27NCg",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.youtube.com/watch?v=BYRTKmPAr8c",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.youtube.com/watch?v=u49E4_4hyeI",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,[n("code",null,"2주차"),s(" API 연동")],-1),h=n("li",null,[n("code",null,"3주차"),s(" SPA 만들기 (Router 사용하기)")],-1),y=p('<p>사실 <strong>수준 높은 코드를 만들기 위한 적합한 미션</strong>이라고 생각한다. 현재 보다 더 어려웠어도 혹은 더 쉬웠어도 <strong>설계에 집중</strong>하기가 힘들었을 것 같다.</p><p>일단 <strong>1주차 때 3주차 미션까지 모두 구현</strong>했다. 그리고 <strong>한 달 동안 계속 리팩토링</strong>만 했다.</p><h4 id="_2-스터디-진행-방식" tabindex="-1"><a class="header-anchor" href="#_2-스터디-진행-방식"><span>(2) 스터디 진행 방식</span></a></h4><p>스터디는 다음과 같이 진행되었다.</p><img src="https://user-images.githubusercontent.com/18749057/96162462-8996dd80-0f53-11eb-84bc-7bb3db19ed17.png" alt="image03" width="800"><p>요약하자면 아래와 같다.</p><ul><li><code>주 1회 온라인 세션</code>을 통한 미션 소개 및 회고</li><li><code>주 2회 페어프로그래밍</code></li><li><code>코드리뷰</code> : PR 순서대로 3명씩 묶어서 코드리뷰를 진행한다. 혹은 자유롭게 리뷰를 남겨도 상관없다.</li></ul><p><s>온라인 세션이 무척 길었지만</s> 모든 과정이 마음에 들었다. <strong>온라인 세션에서 한 주에 대한 회고</strong>를 진행하는데, 이 때 회고의 주제가 항상 달라져서 <strong>여러가지 면에서 생각</strong>할 수 있는 기회가 되어서 좋았고, 다른 사람들의 이야기를 많이 들을 수 있어서 좋았다.</p>',8),f=n("li",null,[n("code",null,"1주차"),s("에는 "),n("strong",null,"미션과 스터디에 대한 내용 위주"),s("로 세션이 진행되었다.")],-1),w=n("code",null,"2주차",-1),_=n("strong",null,"좋은 개발자에 대한 덕목",-1),q=n("li",null,"이 때 대부분의 사람들이 비슷한 이야기를 했고, 마지막 차례였던 나는 조금 다른 이야기를 했다.",-1),x=n("strong",null,"좋은 영향력을 행사",-1),T=n("strong",null,"같이 일하고 싶은 사람",-1),j={href:"https://github.com/integerous",target:"_blank",rel:"noopener noreferrer"},S={href:"https://ryan-han.com/post/memoirs/memoirs2018/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://ryan-han.com/post/memoirs/memoirs2019/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.edwith.org/sef-2019/lecture/44869/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/Integerous/goQuality-dev-contents",target:"_blank",rel:"noopener noreferrer"},C=n("li",null,[s("이런 분과 "),n("strong",null,"같은 팀에서 일할 수 있다는 것은 큰 행운"),s("이라고 생각한다.")],-1),A={href:"https://beyondj2ee.wordpress.com/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://beyondj2ee.wordpress.com/2014/05/16/%ec%a0%91%ec%86%8d-%ec%a0%9c%ea%b0%80-%ed%95%9c%eb%b2%88-%ea%b0%9c%eb%b0%9c%ec%9e%90%eb%a5%bc-%eb%a7%8c%eb%82%98-%eb%b4%a4%ec%8a%b5%eb%8b%88%eb%8b%a4-my-story/",target:"_blank",rel:"noopener noreferrer"},$=n("li",null,"항상 긍정적인 마인드로 주변을 이끌어 가는 사람과 일할 수 있는 것은 큰 행운이라고 생각한다.",-1),O=n("li",null,[s("제일 인상 깊은 내용이다. "),n("br"),s(),n("img",{src:"https://user-images.githubusercontent.com/18749057/96334105-35057680-10a9-11eb-9791-ab828a734df8.png",alt:"팀장님의 명언",width:"500"})],-1),D=n("li",null,[s("이 외에도 우리 팀에는 좋은 분들이 너무 많이 있다. "),n("strong",null,"필자 또한 긍정적인 영향력을 가진 구성원이 되는 것이 목표"),s("이다.")],-1),L=n("li",null,[n("code",null,"3주차"),s("에는 회고 주제가 기억나지 않았다. 기억나는건 공개 코드리뷰를 하면서 "),n("code",null,"Typescript"),s("에 대해 설명하고 덤으로 "),n("strong",null,[n("code",null,"intellij"),s("를 이용하여 git을 운영하는 방법과 코드리뷰를 하는 방법")]),s(" 등을 설명했다.")],-1),I=n("li",null,[n("code",null,"4주차"),s("에는 스터디 자체에 대한 회고와 "),n("strong",null,"앞으로의 계획"),s(", 그리고 그냥 각자에 대한 이야기를 했던걸로 기억한다.")],-1),H=n("h4",{id:"_3-페어프로그래밍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-페어프로그래밍"},[n("span",null,"(3) 페어프로그래밍")])],-1),B={href:"https://www.youtube.com/watch?v=ts-ErQNUGNo",target:"_blank",rel:"noopener noreferrer"},J=n("strong",null,"총 3회",-1),V=p('<p>페어프로그래밍은 요약하자면 정해진 시간동안 <code>드라이버</code> 코드를 작성하고, <code>네비게이터</code>는 <strong>드라이버가 작성하는 코드를 실시간으로 리뷰</strong>를 하면서 진행하는 것이다. 그리고 시간이 다 되거나 혹은 드라이버가 목표로하는 기능을 구현했을 때 서로 역할을 바꾸는 것이다. <u>페어프로그래밍이 끝나면 각자 짧게 회고 및 서로에 대한 피드백을 한다.</u></p><p>코로나 때문에 <code>행아웃</code>과 <code>줌</code>의 화면공유 기능을 이용하여 온라인으로 진행했다.</p><ul><li><code>1주차</code><ul><li>스터디를 여자친구와 같이 신청했다. <u>설마설마 했는데 첫 번째 페어 프로그래밍 부터 지인과 매칭이 되었다.</u></li><li>덕분에 매우 <s>조심스럽게</s> 편하게 진행할 수 있었다.</li><li><strong>15분 간격</strong>으로 역할을 바꿨고, <strong>총 3시간</strong> 정도 진행했다.</li><li>페어프로그래밍을 할 때 작성한 코드를 기준으로 <strong>다시 내 코드를 리팩토링</strong> 했다.</li></ul></li><li><code>2주차</code><ul><li>JS를 시작한지 얼마 되지 않은 분과 매칭이 되었다.</li><li>그래서 <strong>주로 네비게이터의 역할</strong>을 맡아서 했다.</li><li>피드백 시간에 스터디장님과 같이 어떤식으로 개발 공부를 하면 되고, <strong>피드백과 코드리뷰의 중요성</strong>에 대해서 열변을 토한걸로 기억한다.</li><li>확실히 같이 공부하는 사람이 많을 수록, <strong>주변에 피드백을 해주는 사람이 많을 수록 빠르게 성장</strong>할 수 있는 것 같다.</li></ul></li><li><code>3주차</code><ul><li>또 다시 지인과 매칭이 되었다.</li><li>이번에는 전체적인 기능 구현이 아닌 <strong>옵저버를 구현하기로 합의</strong>하고 진행했다. <s>내가 제안했는데, 내가 많이 헤맸다.</s></li><li>단순한 옵저버 패턴 구현이 아니라 만드는게 아니라 <code>Object.defineProperty</code>를 이용하여 <strong>자동으로 옵저빙</strong> 하는 코드를 만들었다.</li><li><u>이 때 코드가 잘 만들어졌고 이를 2주차 / 3주차 미션에 적용했다.</u> 다만 리팩토링할 부분이 너무 많아서 <strong>거의 처음부터 다시 만들었다.</strong> <s>리팩토링의 연속</s></li></ul></li></ul><p>결과적으로 <strong>페어프로그래밍을 하면서 고민했던 것들을 내 코드에 전부 녹였다.</strong> 확실히 다른 사람과 같이 무언가를 만들면 더 고민을 많이 하게 된다. <strong>당장 서로가 알아볼 수 있게 코드를 만들어야 한다는 점</strong>이 매리트라고 생각한다. 그리고 <strong>즉각적인 피드백</strong>을 주고 받기 때문에 잘못된 점을 빠르게 고칠 수 있다.</p><p>다만 한 번 하면 3시간 정도 소요되기 때문에 굉장히 피곤했다. <s>그냥 하는 일이 많아서 피곤했다.</s></p><h4 id="_4-코드리뷰" tabindex="-1"><a class="header-anchor" href="#_4-코드리뷰"><span>(4) 코드리뷰</span></a></h4><p>블랙 커피 스터디를 진행하는 동안 <s>정말 미친놈처럼</s> <strong>코드리뷰를 굉장히 많이 했다.</strong></p><img src="https://user-images.githubusercontent.com/18749057/96168601-f1512680-0f5b-11eb-8118-15e2a1a1b680.png" alt="image05" width="500"><p><code>1주차</code>에는 마지막에 올라온 5개의 PR을 제외한 모든 PR에 리뷰를 남겼다. 갯수를 세어보니 총 10개의 PR이었다.</p><img src="https://user-images.githubusercontent.com/18749057/96168541-dbdbfc80-0f5b-11eb-982a-1cc4737f53dc.png" alt="image04" width="700"><p>하루 날잡고 종일 리뷰만 했는데, JS 코드를 마음껏 볼 수 있어서 좋았다.</p><img src="https://user-images.githubusercontent.com/18749057/96169597-56f1e280-0f5d-11eb-92e6-cc2553ea10ed.png" alt="image07" width="700"><p>1주차에 올라온 코드는 대부분 비슷한 스타일로 작성되어 있어서 <strong>설계적인 측면보단 문법적인 측면의 리뷰</strong>를 많이 했던 것 같다.</p>',13),N={href:"https://github.com/next-step/js-todo-list-step1/pull/30",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/next-step/js-todo-list-step1/pull/31",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/next-step/js-todo-list-step1/pull/33",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/next-step/js-todo-list-step1/pull/34",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/next-step/js-todo-list-step1/pull/35",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/next-step/js-todo-list-step1/pull/36",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/next-step/js-todo-list-step1/pull/37",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/next-step/js-todo-list-step1/pull/38",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/next-step/js-todo-list-step1/pull/40",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/next-step/js-todo-list-step1/pull/41",target:"_blank",rel:"noopener noreferrer"},X=p('<hr><p><code>2주차</code>에는 PR을 올린 모든 사람이 코드를 굉장히 많이 개선했다.</p><img src="https://user-images.githubusercontent.com/18749057/96169303-e5199900-0f5c-11eb-8103-ea57f18594ec.png" alt="image06" width="700"><p>대부분의 사람들이 <code>Observer Pattern</code>을 이용해서 컴포넌트를 설계했다. <code>Store</code>를 구현한 사람도 있었고, 혹은 다른 사람들과 아예 다른 방식으로 설계한 사람도 있었다.</p><p>그래서 리뷰를 할 때 고민을 더 많이 했고, 내가 작성한 코드에 맡게 다른 사람이 작성한 코드를 적용했다. <strong>똑같은 기능을 구현할 때 다른 사람이 작성한 코드를 볼 수 있다는 것은 큰 행운이라고 생각한다.</strong></p><p>2주차에 올라온 PR은 전부 리뷰를 완료했다.</p>',6),nn={href:"https://github.com/next-step/js-todo-list-step2/pull/16",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/next-step/js-todo-list-step2/pull/17",target:"_blank",rel:"noopener noreferrer"},an={href:"https://github.com/next-step/js-todo-list-step2/pull/18",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/next-step/js-todo-list-step2/pull/19",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/next-step/js-todo-list-step2/pull/20",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/next-step/js-todo-list-step2/pull/22",target:"_blank",rel:"noopener noreferrer"},on={href:"https://github.com/next-step/js-todo-list-step2/pull/23",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/next-step/js-todo-list-step2/pull/24",target:"_blank",rel:"noopener noreferrer"},cn=n("ul",null,[n("li",null,[n("code",null,"#24"),s("는 자신만의 확고한 신념을 가지고 설계한게 느껴진다. 그래서 마지막으로 PR을 올린게 아닐까 싶다.")])],-1),un=n("hr",null,null,-1),rn=n("p",null,[n("code",null,"3주차"),s("에는 필자를 포함하여 4명의 사람이 PR을 올렸다.")],-1),kn=n("img",{src:"https://user-images.githubusercontent.com/18749057/96171996-b0a7dc00-0f60-11eb-8348-ca62003836c6.png",alt:"image09",width:"700"},null,-1),dn=n("p",null,[s("그래서 리뷰 자체는 어렵지 않았다. 대부분 2주차의 설계를 그대로 가져온 모습을 보였다. 나의 경우 한 분이 "),n("code",null,"typescript"),s("에 대해 언급해주셔서 스터디장님의 허락을 맡고 "),n("code",null,"typscript"),s("를 적용했다. "),n("s",null,"괜히 한 것 같다")],-1),vn=n("p",null,"사실 말이 3주차고 대부분 4주차에 코드를 올렸다.",-1),mn={href:"https://github.com/next-step/js-todo-list-step3/pull/12",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://github.com/next-step/js-todo-list-step3/pull/13",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://github.com/next-step/js-todo-list-step3/pull/16",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github.com/next-step/js-todo-list-step3/pull/17",target:"_blank",rel:"noopener noreferrer"},yn=p(`<p>이 때 PR을 올린 사람들은 <strong>1주차와 비교했을 때 굉장히 발전을 많이한게 느껴졌다.</strong> 확실히 스터디의 효과가 느껴지는 코드들이었다.</p><h4 id="_5-내가-작성한-core-코드" tabindex="-1"><a class="header-anchor" href="#_5-내가-작성한-core-코드"><span>(5) 내가 작성한 Core 코드</span></a></h4><p>나는 <code>Step3</code>를 시점으로 <code>Observer</code> <code>Component</code> <code>Router</code> <code>Store</code> <code>RestClient</code> 등 5개의 코어를 설계했다.</p><hr><p>먼저 <code>Observer.ts</code>에 대해 살펴보자.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Observer.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>debounceOneFrame<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> currentObserver<span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// observable이 observer에서 사용되었다면 observable이 변경되었을 때 observer가 저절로 실행되도록 만들었다.</span></span>
<span class="line"><span class="token comment">// 이 때 currentObserver가 observable에서 사용된다.</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">observe</span> <span class="token operator">=</span> <span class="token punctuation">(</span>observer<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  currentObserver <span class="token operator">=</span> <span class="token function">debounceOneFrame</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  currentObserver <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// obj의 key가 변하면 observe를 실행하도록 만들어주는 코드이다.</span></span>
<span class="line"><span class="token comment">// obj에 새로운 key를 할당할 때도 사용할 수 있다.</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">observableOfKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> defaultValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> observers<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> _value <span class="token operator">=</span> defaultValue <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> defaultValue <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span></span>
<span class="line">                <span class="token operator">?</span> <span class="token function">observable</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span></span>
<span class="line">                <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentObserver<span class="token punctuation">)</span> observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentObserver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> _value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      _value <span class="token operator">=</span> value <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span></span>
<span class="line">                  <span class="token operator">?</span> <span class="token function">observable</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line">                  <span class="token operator">:</span> value<span class="token punctuation">;</span></span>
<span class="line">      observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>observer <span class="token operator">=&gt;</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> obj<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// target으로 받은 object의 key를 전부 observable로 만들어서 반환한다.</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">observableOfKey</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          target</span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드는 다음과 같이 사용할 수 있다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">state.a = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">state.b = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">state.c : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">state.a + state.b = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>a <span class="token operator">+</span> state<span class="token punctuation">.</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">state.a + state.b + state.c = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>a <span class="token operator">+</span> state<span class="token punctuation">.</span>b <span class="token operator">+</span> state<span class="token punctuation">.</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">state<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">state<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">state<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span></span>
<span class="line">state<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span></span>
<span class="line">state<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span></span>
<span class="line">state<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),fn=n("img",{src:"https://user-images.githubusercontent.com/18749057/96173666-33319b00-0f63-11eb-8f29-bb8063e6433d.png",alt:"image10",widht:"500"},null,-1),wn=p(`<p>마찬가지로 <strong>컴포넌트 렌더링</strong>에 사용할 수 있다.</p><p>주목해야할 점 중에 하나가 <code>observer</code>에 <code>debounce</code>를 씌운 부분이다. <code>observable</code>에 변화가 생겼을 때 한 프레임 단위로 <code>observer</code>를 실행하도록 한 것이다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">debounceOneFrame</span> <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> timer<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드를 이용하면 한 프레임 단위로 함수를 지연시킬 수 있다.</p><hr><p>다음으로 <code>Component.ts</code>에 대해 살펴보자.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Component.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>addEventBubblingListener<span class="token punctuation">,</span> selectAllElement<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>CommonEvent<span class="token punctuation">,</span> ComponentConstructable<span class="token punctuation">,</span> PickEvent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/domains&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>observe<span class="token punctuation">,</span> observable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/_core&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 컴포넌트에서 앞서 언급한 Observer의 observe, observable을 사용한다. </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ChildrenProp</span> <span class="token punctuation">{</span></span>
<span class="line">  constructor<span class="token operator">:</span> ComponentConstructable<span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ChildrenProps</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ChildrenProp<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Component<span class="token operator">&lt;</span>Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> State <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> $state<span class="token operator">?</span><span class="token operator">:</span> State<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">protected</span> $children<span class="token operator">:</span> ChildrenProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">readonly</span> $target<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">readonly</span> $props<span class="token operator">?</span><span class="token operator">:</span> Props</span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">componentInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// state는 observable로 만들었다.</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token function">observable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$state <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// render는 observe로 만들었다.</span></span>
<span class="line">    <span class="token comment">// 따라서 state(observable)가 변경되면 자동으로 render(observe)가 실행된다.</span></span>
<span class="line">    <span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token function">buildChildren</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">selectAllElement</span><span class="token punctuation">(</span><span class="token string">&#39;[data-component]&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>target <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> componentName <span class="token operator">=</span> target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>component <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> constructor<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span>componentName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name">constructor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">componentInit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">setEvent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">componentDidMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">template</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">setState</span> <span class="token punctuation">(</span>payload<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">keyof</span> State<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token keyword">keyof</span> State<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>$state<span class="token operator">!</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token generic-function"><span class="token function">addEvent</span> <span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> CommonEvent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    ref<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">    eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> PickEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">addEventBubblingListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$target<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[data-ref=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ref<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> eventType<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 컴포넌트 코드는 다음과 같이 사용된다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Kanban <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Component <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token keyword">async</span> <span class="token function">componentInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> todoOfTeamStore<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token constant">FETCH_TEAM</span><span class="token punctuation">,</span> todoRouter<span class="token punctuation">.</span>$query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$children <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      TodoHeader<span class="token operator">:</span> <span class="token punctuation">{</span> constructor<span class="token operator">:</span> TodoHeader <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      TodoListOfTeam<span class="token operator">:</span> <span class="token punctuation">{</span> constructor<span class="token operator">:</span> TodoListOfTeam <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      TodoMemberAppendForm<span class="token operator">:</span> <span class="token punctuation">{</span> constructor<span class="token operator">:</span> TodoMemberAppendForm <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">template</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">      &lt;h1 data-component=&quot;TodoHeader&quot; id=&quot;user-title&quot;&gt;&lt;/h1&gt;</span>
<span class="line">      &lt;ul data-component=&quot;TodoListOfTeam&quot; id=&quot;todo-list-of-team&quot; class=&quot;todoapp-list-container flex-column-container&quot;&gt;&lt;/ul&gt;</span>
<span class="line">      &lt;div data-component=&quot;TodoMemberAppendForm&quot; id=&quot;member-append-form&quot;&gt;&lt;/div&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> TeamList <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Component <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">template</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> teams <span class="token punctuation">}</span> <span class="token operator">=</span> teamStore<span class="token punctuation">.</span>$state<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>teams<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">        &lt;div class=&quot;team-card-container&quot; data-id=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span>
<span class="line">          &lt;a href=&quot;#!&quot; class=&quot;card&quot; data-ref=&quot;view&quot;&gt;</span>
<span class="line">            &lt;div class=&quot;card-title&quot;&gt;</span>
<span class="line">              </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">            &lt;/div&gt;</span>
<span class="line">          &lt;/a&gt;</span>
<span class="line">        &lt;/div&gt;</span>
<span class="line">      </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      </span>
<span class="line">      &lt;div class=&quot;add-team-button-container&quot;&gt;</span>
<span class="line">        &lt;button id=&quot;add-team-button&quot; class=&quot;ripple&quot; data-ref=&quot;add&quot;&gt;</span>
<span class="line">          &lt;span class=&quot;material-icons&quot;&gt;add&lt;/span&gt;</span>
<span class="line">        &lt;/button&gt;</span>
<span class="line">      &lt;/div&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">protected</span> <span class="token function">setEvent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token string">&#39;view&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> event <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">selectParent</span><span class="token punctuation">(</span><span class="token string">&#39;[data-id]&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">      todoRouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./kanban.html?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      teamStore<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token constant">SET_OPENED_TEAM_APPEND_FORM</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 컴포넌트 코드에서 주목해야할 부분은 <code>addEventBubblingListener</code> 이다. <strong>컴포넌트가 마운트될 때 컴포넌트를 감싸는 DOM에 전체 이벤트를 버블링을 이용하여 등록</strong>한다. 따라서 이벤트를 조금 더 유연하게 관리할 수 있게 된다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> addEventBubblingListener <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> CommonEvent<span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">  parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span></span>
<span class="line">  childSelector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> PickEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">isTarget</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">selectAllElement</span><span class="token punctuation">(</span>childSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                                            <span class="token function">selectParent</span><span class="token punctuation">(</span>childSelector<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  parent<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> e <span class="token operator">=</span> event <span class="token keyword">as</span> PickEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isTarget</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그런데 <strong>이벤트의 type 때문에 무척 고생</strong>했다.</p><ul><li><strong>기본 event type 자체가 애매모호</strong> 하다. 제대로 할 수 있는게 정말 하나도 없다.</li><li><strong>event의 target이 dom을 가르키고 있지 않고 있다.</strong> 그래서 아무런 타입 선언 없이 <code>event.target</code>을 가져와서 사용하면 무조건 에러가 발생한다.</li></ul><p>즉, <strong>명시적으로 event의 type을 직접 정의</strong>해야 하고, event에서 사용되는 <strong>target의 type 또한 정의</strong>해야 제대로 사용할 수 있다. 문제는 태그의 종류도 굉장히 많고, 이벤트의 종류도 굉장히 많이 있다는 것이다.</p><p>그래서 React는 <code>React.ChangeEvent&lt;HTMLTextAreaElement&gt;</code> 이런식으로 사용할 수 있도록 <strong>모든 Event와 DOM 타입을 정의</strong>했다.</p><p>일단 그냥 <code>any</code>로 처리할까 고민했지만 그럴꺼면 <code>ts</code>를 왜쓰겠냐는 생각 때문에 조금 머리를 굴렸다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">CommonEvent<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> HTMLElement <span class="token operator">=</span> HTMLElement<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Omit<span class="token operator">&lt;</span>Event<span class="token punctuation">,</span> <span class="token string">&#39;target&#39;</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  target<span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">KeyEvent<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> HTMLInputElement <span class="token operator">=</span> HTMLInputElement<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Omit<span class="token operator">&lt;</span>KeyboardEvent<span class="token punctuation">,</span> <span class="token string">&#39;target&#39;</span><span class="token operator">|</span><span class="token string">&#39;key&#39;</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  target<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line">  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PickEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span>CommonEvent <span class="token operator">|</span> KeyEvent<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> addEventBubblingListener <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> CommonEvent<span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">  parent<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span></span>
<span class="line">  childSelector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> PickEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">isTarget</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">selectAllElement</span><span class="token punctuation">(</span>childSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">                                            <span class="token function">selectParent</span><span class="token punctuation">(</span>childSelector<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  parent<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> e <span class="token operator">=</span> event <span class="token keyword">as</span> PickEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isTarget</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token generic-function"><span class="token function">addEventBubblingListener</span><span class="token generic class-name"><span class="token operator">&lt;</span>CommonEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;priority&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> target <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드를 정리해보자면,</p><ul><li>기본 이벤트 타입에서 <code>Omit</code>을 이용하여 기존 <code>target</code>의 타입을 제거하고, 제네릭으로 받아온 타입을 <code>target</code>에 대입한다.</li><li>위와 같은 방식으로 앱 내에서 사용중인 이벤트만 커스텀하여 만든다.</li><li>커스텀으로 정의한 이벤트 중 하나를 Extract를 통하여 선택할 수 있는 새로운 타입을 정의한다 (<code>PickEvent</code>)</li><li><code>addEventBubblingListener</code>에서 <code>event</code> 파라미터의 타입을 unkown으로 정의한다.</li><li><code>addEventBubblingListener</code>의 제네릭으로 받아온 타입을 <code>event</code>에 명시적으로 타입 캐스팅을 해준다.</li></ul><hr><p>다음으로 <code>Store</code>에 대해서 살펴보자.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>observable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/_core&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Getter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Getters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Getter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Mutations<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ActionContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  state<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">commit</span><span class="token operator">:</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Actions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> ActionContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StoreProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  state<span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line">  getters<span class="token operator">?</span><span class="token operator">:</span> Getters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line">  mutations<span class="token operator">?</span><span class="token operator">:</span> Mutations<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line">  actions<span class="token operator">?</span><span class="token operator">:</span> Actions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Store<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> $state<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">readonly</span> $getters<span class="token operator">:</span> Getters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> mutations<span class="token operator">:</span> Mutations<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> actions<span class="token operator">:</span> Actions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token punctuation">,</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">:</span> StoreProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token function">observable</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$getters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span></span>
<span class="line">                          <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>getters<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> getter<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                            Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                              <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$state<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                            <span class="token keyword">return</span> getters<span class="token punctuation">;</span></span>
<span class="line">                          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mutations <span class="token operator">=</span> mutations<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>actions <span class="token operator">=</span> actions<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">commit</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">dispatch</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function-variable function">commit</span><span class="token operator">:</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      state<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$state<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Store</code>는 <code>Vuex</code>를 모방하여 만들었다. 그래서 거의 똑같이 사용했다. 따라서 위의 코드는 다음과 같이 사용할 수 있다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Store<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/_core&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>TodoService<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/services&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SET_TEAMS</span> <span class="token operator">=</span> <span class="token string">&#39;SET_TEAMS&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TeamState</span> <span class="token punctuation">{</span></span>
<span class="line">  teams<span class="token operator">:</span> TodoTeam<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> teamStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store<span class="token operator">&lt;</span>TeamState<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  state<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    teams<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  mutations<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">SET_TEAMS</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> teams<span class="token operator">:</span> TodoTeam<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      state<span class="token punctuation">.</span>teams <span class="token operator">=</span> teams<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  actions<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    async <span class="token punctuation">[</span><span class="token constant">FETCH_TEAMS</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token constant">SET_TEAMS</span><span class="token punctuation">,</span> <span class="token keyword">await</span> TeamService<span class="token punctuation">.</span><span class="token function">fetchTeams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    async <span class="token punctuation">[</span><span class="token constant">ADD_TEAM</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> TeamService<span class="token punctuation">.</span><span class="token function">addTeam</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token constant">FETCH_TEAMS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">teamStore<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token constant">SET_TEAMS</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">teamStore<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token constant">FETCH_TEAMS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">teamStore<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token constant">ADD_TEAMS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;TEAM A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> teams <span class="token operator">=</span> teamStore<span class="token punctuation">.</span>$state<span class="token punctuation">.</span>teams<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>다음으로 <code>RestClient.ts</code>를 살펴보자.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// RestClient</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>HttpMethod<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/constants&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>RequestBody<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/domains&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RestClient</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> baseURL<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token function">getUrlOf</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> slash <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>slash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>uri<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token function">request</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> method<span class="token operator">:</span> HttpMethod <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUrlOf</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> method <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token function">requestWithBody</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> method<span class="token operator">:</span> HttpMethod<span class="token punctuation">,</span> body<span class="token operator">?</span><span class="token operator">:</span> RequestBody<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> requestInit<span class="token operator">:</span> RequestInit <span class="token operator">=</span> <span class="token punctuation">{</span> method<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUrlOf</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">,</span> requestInit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">get</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">delete</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">post</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> body<span class="token operator">?</span><span class="token operator">:</span> RequestBody<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requestWithBody</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">put</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> body<span class="token operator">?</span><span class="token operator">:</span> RequestBody<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requestWithBody</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">patch</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> body<span class="token operator">?</span><span class="token operator">:</span> RequestBody<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requestWithBody</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span><span class="token constant">PATCH</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아쉬운 부분은 에러처리를 <code>RestClient</code>에서 하지 않는다는 점이다. <s>그냥 귀찮아서 안 했다.</s> 어쨌든, 위의 코드는 다음과 같이 사용할 수 있다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 먼저 Adapter를 만들어야 한다.</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> todoAdapterURL <span class="token operator">=</span> <span class="token string">&#39;https://js-todo-list-9ca3a.df.r.appspot.com/api&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> todoAdapterClient<span class="token operator">:</span> RestClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestClient</span><span class="token punctuation">(</span>todoAdapterURL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 그리고 adapter를 service에서 불러와 사용하면 된다. </span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> todoService <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"> <span class="token function">fetchTeams</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> todoAdapterClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/teams&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"> <span class="token function">fetchTeam</span> <span class="token punctuation">(</span>teamId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> todoAdapterClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/teams/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>teamId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"> <span class="token function">addTeam</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> todoAdapterClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/teams</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"> <span class="token function">addTeamMember</span> <span class="token punctuation">(</span>teamId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> todoAdapterClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/teams/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>teamId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/members</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"> <span class="token function">deleteTeam</span> <span class="token punctuation">(</span>teamId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> todoAdapterClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/teams/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>teamId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"> <span class="token function">deleteTeamMember</span> <span class="token punctuation">(</span>teamId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> memberId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> todoAdapterClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/teams/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>teamId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/members/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>memberId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>최대한 추상화를 한 코드이다. 아마 <code>axios</code>를 사용한다면 더 단축될 것이다.</p><hr><p>마지막으로 <code>Router.ts</code>를 살펴보자.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Router.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>parseQuery<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>RequestQuery<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/domains&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> $query<span class="token operator">:</span> RequestQuery <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 주소의 변경을 감지한다. 주소가 변경되면 load를 실행한다.</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function-variable function">onpopstate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// load는 현재 주소에 매칭되는 일을 수행한다.</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">load</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> uri<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$query <span class="token operator">=</span> <span class="token function">parseQuery</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// push는 주소를 변경한 해당 주소에 다음에 매칭되는 일을 수행하낟.</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">push</span> <span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> query<span class="token operator">:</span> RequestQuery <span class="token operator">=</span> <span class="token function">parseQuery</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$query <span class="token operator">=</span> query<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>로직은 매우 단순하다.</p><ul><li>주소가 변경되면 <code>Callback</code> 함수가 실행된다.</li><li><code>Callback</code>함수는 주소에 매칭되는 컴포넌트를 최상위 DOM에 렌더링하는 형태의 코드로 만든다.</li><li>혹은 <code>push</code>를 이용하여 직접 <code>Callback</code>을 호출할 수 있다.</li></ul><p>그래서 다음과 같이 사용할 수 있다.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> $app <span class="token operator">=</span> <span class="token function">selectElement</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> todoRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uri<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;kanban&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Kanban</span><span class="token punctuation">(</span>$app<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span>$app<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 현재 주소에 대한 컴포넌트 렌더링</span></span>
<span class="line">todoRouter<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 라우터 변경</span></span>
<span class="line">todoRouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/kanban&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Kanban 렌더링</span></span>
<span class="line">todoRouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Team 렌더</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,38),_n={href:"https://programmers.co.kr/competitions/383/2020-naver-fe-recruitment",target:"_blank",rel:"noopener noreferrer"},qn=n("h4",{id:"_6-정리",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-정리"},[n("span",null,"(6) 정리")])],-1),xn=n("hr",null,null,-1),Tn=n("p",null,"필자가 작성한 코드는 다음 저장소에서 볼 수 있다.",-1),jn={href:"https://github.com/JunilHwang/js-todo-list-step1",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://github.com/JunilHwang/js-todo-list-step2",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/JunilHwang/js-todo-list-step3",target:"_blank",rel:"noopener noreferrer"},Mn=n("p",null,[s("그리고 위에 있는 내용을 정리한 저장소가 별개로 존재한다. "),n("s",null,"사실 깃허브 잔디를 만들기 위해서 따로 만들었다.")],-1),Rn={href:"https://github.com/JunilHwang/black-coffee-study",target:"_blank",rel:"noopener noreferrer"},Cn=n("p",null,"데모는 다음 링크에서 확인할 수 있다.",-1),An={href:"https://junilhwang.github.io/black-coffee-study/step1/",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://junilhwang.github.io/black-coffee-study/step2/",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://junilhwang.github.io/black-coffee-study/step3/",target:"_blank",rel:"noopener noreferrer"},On=p('<hr><h4 id="_7-짧막한-회고" tabindex="-1"><a class="header-anchor" href="#_7-짧막한-회고"><span>(7) 짧막한 회고</span></a></h4><p>이렇게 다른 사람들과 <code>Javascript Study</code>를 해보는게 처음이었기 때문에 굉장히 재밌었다. 그리고 <strong>주변 사람들에게도 많이 소개</strong>했다.</p><p>먼저 팀원의 지인 중에 이 스터디에 대해 궁금해하는 사람이 있어서 최대한 자세히 설명해줬고, <strong>내가 가르치고 있는 학생들에게도 다음 기수에 꼭 신청하라고 신신당부</strong> 해놨다. <u>글을 작성하는 시점을 기준으로 3명의 학생이 4기 스터디를 신청했다.</u></p>',4),Dn={href:"https://programmers.co.kr/",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://programmers.co.kr/learn/courses/10785",target:"_blank",rel:"noopener noreferrer"},In=n("strong",null,"블랙커피 스터디의 커리큘럼이 이와 매우 유사해서",-1),Hn=n("s",null,"어디서 핑계를",-1),Bn=p('<p>나도 어떤 스터디인가 궁금해서 추천사를 봤는데,</p><img src="https://user-images.githubusercontent.com/18749057/96236182-a9231a00-0fd6-11eb-9076-d5472c201514.png" alt="image11" width="600"><p><u>블랙커피 스터디장인 임동준님도 이 스터디를 거쳐오신 것 같았다.</u> <s>사실 여부는 잘 모르겠음</s></p><p>각설하고, 이 스터디를 통해서 <strong>많은 사람들과 소통</strong>할 수 있었고 <strong>스스로에게 자극</strong>을 많이 줄 수 있어서 좋았다. <code>Javascript</code> 공부를 어떻게 시작 해야할지 모르는 사람에게 꼭 추천해주고 싶다. 그리고 <u>혼자서 공부하는 사람에게도!</u></p><p>앞서 언급했지만 <strong>개발 공부는 다른 사람들과 같이</strong> 해야한다. 개발은 절대 혼자하는게 아니기 때문이다.</p>',5),Jn=n("code",null,"Level01",-1),Vn={href:"https://edu.nextstep.camp/c/30DRya3u/",target:"_blank",rel:"noopener noreferrer"},Nn=n("strong",null,"테스트에 대한 내용",-1),Fn={href:"https://edu.nextstep.camp/c/8fWRxNWU/",target:"_blank",rel:"noopener noreferrer"},Un=p('<h4 id="_8-짧막한-목표" tabindex="-1"><a class="header-anchor" href="#_8-짧막한-목표"><span>(8) 짧막한 목표</span></a></h4><p>뒤늦게 알았지만, <u>스터디를 운영 중인 동준님이 우아한 테크코스에서 Front-end 파트를 운영하고 계셨다.</u> 사실 옛날부터 나의 직업적 꿈이 <strong>개발과 교육을 같이 하는 것</strong>이였기 때문에 동준님을 동경하게 되었다.</p><p>어쨌든 지금도 주업은 개발을 하고 있고 부업을 교육으로 하는 중이다. 매주 고등학생들을 지도하기도 하고, 인강을 찍어서 특성화고등학교의 방과후 수업에 활용하기도 하는 중이다.</p><p>지금은 주로 고등학생을 대상으로 교육을 하고 있으나, 조금 더 기회가 된다면 더 많은 사람들과 교류하며 나의 지식을 전달하는 일을 하고 싶다. 그게 꼭 동준님처럼 우아한 테크코스에서 일하는게 아닐지라도 말이다!</p><p>그럴라면 또 열심히 공부해야지!</p><h3 id="_2-부스트캠프-리뷰어-활동" tabindex="-1"><a class="header-anchor" href="#_2-부스트캠프-리뷰어-활동"><span>2. 부스트캠프 리뷰어 활동</span></a></h3>',6),Kn={href:"https://github.com/connectfoundation/review_2020",target:"_blank",rel:"noopener noreferrer"},Qn=p('<p><img src="https://user-images.githubusercontent.com/18749057/95013576-1e5c2a00-067c-11eb-8759-f7cf70cab6c7.png" alt="부스트캠프 리뷰어" width="600"> <br></p><img width="587" alt="image11" src="https://user-images.githubusercontent.com/18749057/96238793-d3c2a200-0fd9-11eb-983d-f3c5e182edd1.png"><p>본격적인 활동은 9월부터 시작했으며, <strong>매주 월요일에 온라인 세션에서 회고</strong>를 진행했다. 그런데 <strong>웹 리뷰어의 경우 격주로 리뷰</strong>하기 때문에, 회고 참여 또한 격주로 했다.</p><img src="https://user-images.githubusercontent.com/18749057/96239127-49c70900-0fda-11eb-9ff9-b1c649c864ff.png" alt="image12" width="700"><p><strong>격주</strong>로 <strong>화요일/목요일</strong>에 올라오는 PR에 리뷰를 남기면 됐는데 처음에 리뷰할 때 <strong>캠퍼들에게 대체로 위와 같은 내용의 리뷰</strong>를 남겼다. 사실 첫 리뷰만 좀 힘들었고, 그 이후의 리뷰는 힘들진 않았다. 다만 <strong>6명을 리뷰하는게 생각보다 시간이 많이 소요</strong>됐다.</p><p>그리고 <code>블랙커피 스터디</code>의 <code>온라인 세션</code>은 화요일 <code>페어프로그래밍</code>은 목요일이었기 때문에 <u>화요일/목요일에는 정말 미친듯이 피곤했다... 😭😭😭</u></p><p>어쨌든 부스트캠프에 관련된 내용은 리뷰 외에 특별한게 없었기 때문에 회고는 여기까지만 하겠다. 활동이 끝나면 다시 전체적인 내용을 정리해서 올릴 예정이다.</p><h3 id="_3-넥스트스탭-리뷰어-활동" tabindex="-1"><a class="header-anchor" href="#_3-넥스트스탭-리뷰어-활동"><span>3. 넥스트스탭 리뷰어 활동</span></a></h3><p>7월 말부터 시작한 <code>클린코드를 위한 TDD, 리팩토링 with Java 9기</code> 과정이 9월 말에 종료되었다. <strong>약 8주간의 과정</strong>이었다.</p><img width="952" alt="image12" src="https://user-images.githubusercontent.com/18749057/96241001-8e53a400-0fdc-11eb-869e-3bab4ecf7225.png"><p><strong>총 15명을 리뷰</strong>했다. 예정대로라면 각 미션당 5명, 총 20명을 리뷰해야 하는데 5명이 아예 리뷰를 신청하지 않은 것이다.</p><img width="925" alt="image13" src="https://user-images.githubusercontent.com/18749057/96241936-d4f5ce00-0fdd-11eb-98c7-d7365a440b5b.png"><p>내가 맡은 리뷰이 중 딱 <strong>한 분만 최종 미션까지 완료</strong>했다.</p><p>리뷰어를 하기 전에는 java 자체를 깊게 공부해본적이 없어서 걱정이 많았다. 그런데 TDD 과정은 <strong>대부분 설계에 대한 내용</strong>이 많았기 때문에 생각보다 수월하게 리뷰할 수 있었다.</p><p>지금은 javascript 공부에 집중하고 있는 상태라서 어느 정도 만족할 만한 수준이 된다면, java에 투자할 생각이다. <s>그게 대체 언제일까?</s></p><p>그냥.. 공부할게 너무 많다... 😭</p><h3 id="_4-기능경기대회-전국대회" tabindex="-1"><a class="header-anchor" href="#_4-기능경기대회-전국대회"><span>4. 기능경기대회 - 전국대회</span></a></h3><p>8월부터 선생님의 부탁으로 기능반 학생들을 지도했고, <strong>숙소(전주)까지 따라가서 학생들의 훈련을 도왔다.</strong></p>',18),Gn={class:"custom-container tip"},Wn=n("p",{class:"custom-container-title"},"기능경기대회",-1),Yn=p("<li>정식 명칭은 <strong>기능올림픽</strong>이다.</li><li>기능경기대회는 <strong>특성화고등학교의 수능이며 축제</strong>라고 할 수 있다.</li><li><strong>지방대회 - 전국대회 - 국가대표 선발전 - 세계대회</strong> 등의 과정이 있다.</li><li><strong>지방대회</strong>는 4월에 개최된다. 그런데 올해는 <strong>코로나 때문에 6월</strong>에 개최되었다.</li><li><strong>전국대회</strong>는 9월/10월 중에 개최된다. 올해는 <strong>9월 14일 부터 7일간</strong> 대회가 진행되었다.</li><li><strong>세계대회</strong>는 2년에 한 번씩 개최된다. 세계대회 입상 혜택은 다음과 같다. <u>올림픽 입상 혜택과 동일하다고 보면 된다.</u><ul><li>병역대체복무</li><li>신축 아파트 분양권 획득</li><li>대기업 연봉급 상금</li><li>대학 진학시 학비 전액 지원</li><li>연금</li></ul></li>",6),zn={href:"https://meister.hrdkorea.or.kr/main/main.do",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://meister.hrdkorea.or.kr/sub/3/2/1/20160512110924569100_view.do",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://meister.hrdkorea.or.kr/sub/3/3/1/20160512111525375100_view.do",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://meister.hrdkorea.or.kr/sub/3/4/1/20160512111859974100_view.do",target:"_blank",rel:"noopener noreferrer"},ss=n("p",null,[s("필자 또한 "),n("strong",null,"2012년도 경기도대회, 전국대회에서 입상"),s("을 했고 이를 계기로 본격적인 개발공부를 시작했다.")],-1),as=p('<p><strong>9월 14일</strong> 부터 대회 시작이었고, 올해는 전북에서 진행되었다.</p><div style="padding-top:40%;position:relative;"><img style="position:absolute;width:100%;height:100%;top:0;left:0;object-fit:cover;" src="https://user-images.githubusercontent.com/18749057/96245616-7717b500-0fe2-11eb-8e0a-524b36ee50bd.jpeg" alt="image19"></div><p>경기장은 <code>전북 하이텍 고등학교</code>인데 코로나 때문에 선수들만 입장 가능했다. <s>덕분에 무척 편했다.</s></p><img src="https://user-images.githubusercontent.com/18749057/96245480-52bbd880-0fe2-11eb-9a33-f2e702a8dc10.png" alt="image14" width="500"><p>나는 학생들이 경기가 끝나고 숙소에 돌아오면, 문제 풀이를 옆에서 도와주었다. <strong>며칠 동안 새벽 3시에 자거나 혹은 새벽 5시에 일어났다.</strong> 회사 일도 재택근무로 병행하고 있던 상태라서 <strong>정말 미친듯이 피곤</strong>했다.</p><img src="https://user-images.githubusercontent.com/18749057/96245578-6e26e380-0fe2-11eb-8226-0213e5fa6bd5.jpeg" alt="image15" width="600"><p>어쨌든 <strong>필자가 가르친 학생들(서울디지텍고등학교)이 올해에도 입상</strong>했다. 학생 한 명이 제출을 잘못해서 대략 30점 정도를 채점도 못하고 통으로 날려보냈다. 그래도 입상은 했으니.. 이걸 다행이라고 해야할지.. 이 때 실수한 기억은 경험상 평생 가기 때문에 괜히 안쓰럽다.</p><hr><p>그리고 이 글을 작성하는 시점을 기준(10/16)으로 <strong>다음 기수의 학생들을 가르치는 중</strong>이다. 이번 대회는 준비기간이 한 달 정도 밖에 되지 않았기 때문에 이번에 가르치는 학생들은 조금 더 차근차근 준비해서 <strong>역량 자체를 키워줄 생각</strong>이다.</p><p>기능대회는 이제 너무 꼰대같은 대회가 되어버렸다. <u>제발 제발 제발 문제 출제 기준좀 좀 변경했으면... ㅠㅠ</u></p><h3 id="_5-프로그래머스-리액트-스터디" tabindex="-1"><a class="header-anchor" href="#_5-프로그래머스-리액트-스터디"><span>5. 프로그래머스 리액트 스터디</span></a></h3><p>앞서 블랙커피 스터디를 다룰 때 언급한 프로그래머스에 올라온 스터디 목록을 쭉 보다가 <strong>리액트 스터디</strong>가 눈에 보였다.</p><img src="https://user-images.githubusercontent.com/18749057/96252260-a7645100-0fec-11eb-89da-129fe0814166.png" alt="image20" width="700"><img width="818" alt="image24" src="https://user-images.githubusercontent.com/18749057/96285184-9120ba00-1019-11eb-9304-5ca917681409.png"><p>여기서도 <strong>블랙커피 스터디장님의 추천사</strong>를 볼 수 있었다 😮</p><img src="https://user-images.githubusercontent.com/18749057/96252674-4be69300-0fed-11eb-85ec-ef0abaa09e05.png" alt="image21" width="700"><p>그래서 고민하지 않고 바로 신청했다. 이게 바로 <strong>추천사의 중요성</strong> 인가.. 🤔</p><p>스터디는 <strong>매주 목요일마다 진행되는 온라인 세션</strong>을 통해 미션 진행에 필요한 기반 지식 및 미션 내용을 숙지할 수 있었다.</p><p>첫 번째 미션을 완수하고 PR을 올렸더니 <strong>스터디 리더를 포함한 3명의 리뷰어 분들이 리뷰</strong>를 남겨주셨다.</p><p><img src="https://user-images.githubusercontent.com/18749057/96283857-c3311c80-1017-11eb-89db-6d9b3710f949.png" alt="image22" width="700"><br></p><img src="https://user-images.githubusercontent.com/18749057/96283876-cb895780-1017-11eb-9b86-1eaef07a9a9a.png" alt="image23" width="700"><p>일단 미션의 내용 자체가 굉장히 유익했기 때문에 재밌었다. 확실히 혼자 공부할 때 보다 빠르게 기술을 익히고 있다는 느낌이 들었다.</p><p>이 스터디는 4주 동안 진행된다. <strong>10월에 조금 더 상세하게 회고</strong>할 예정이다.</p><hr><p>뒤늦게 알았는데 스터디를 리드하시는 분이 프론트엔드, 백엔드, 그리고 데이터 엔지니어 업무를 겸하는 굉장히 다재다능한 분이었다. 이제 경력 13년차라고 하셨는데, 정말 꾸준히 공부를 했다는게 느껴졌다.</p><p><strong>나는 과연 10년 정도의 시간이 흐른 뒤에 어떤 모습일까?</strong></p><hr><h3 id="_6-네이버-아폴로-챌린지" tabindex="-1"><a class="header-anchor" href="#_6-네이버-아폴로-챌린지"><span>6. 네이버 아폴로 챌린지</span></a></h3>',28),ts={href:"https://programmers.co.kr/competitions/383/2020-naver-fe-recruitment",target:"_blank",rel:"noopener noreferrer"},ps=p('<img width="919" alt="image25" src="https://user-images.githubusercontent.com/18749057/96285579-199f5a80-101a-11eb-9095-1fe19d9b6123.png"><p>먼저 <strong>9월 20일에 알고리즘 테스트</strong>를 통과하면 <strong>9월 27일에 프론트엔드 테스트</strong>를 볼 수 있는 과정이었다. <strong>알고리즘은 3문제</strong>가 출제되었고 다 풀이했다. 다만 마지막 문제에서 정확성 테스트를 통과하지 못했다.</p><p>카카오 챌린지때도 두 문제만 풀었는데 통과했기 때문에 이번에도 알고리즘에서 떨어지진 않을 것이라고 생각했다. 실제로 같이 응시한 사람 중 한 명이 한 문제만 제대로 풀었는데도 통과했다.</p><p>프론트엔드 테스트는 <strong>바닐라 JS로 영화 리뷰와 관련된 SPA(Single Page APP)를 만드는 내용의 과제</strong>였다.</p><p>원래 프로그래머스에서 프론트엔드 챌린지를 볼 때 어느 정도 기본 컴포넌트 설계가 된 코드를 제공해줬는데 <strong>이번에는 아예 처음부터</strong> 만들어야 했다. 덕분에 블랙커피 스터디를 진행하면서 <strong>공부한 내용을 정말 알차게 써먹었다.</strong></p><p><code>Component</code> <code>Router</code> <code>RestClient</code> <code>Observer</code> <code>debounce</code> 등을 포함한 모든 코어를 적용했고, 결과적으로 완성도 있게 만들 수 있었다.</p><p><strong>한 달 전의 나였으면 불가능했을 일이었다.</strong><s>물론 내가 열심히 했기 때문도 있었지만</s> 이 모든것이 블랙커피 스터디 덕분이었다.</p><p>결과는 10월 말에 나오는데, 카카오 챌린지는 상위 10% 였기 때문에 <strong>이번엔 상위 5% 정도는 되리라 예상</strong>해본다.</p><blockquote><p>10월 말에 결과가 나왔고, 무려 상위 0%의 점수를 획득했다. <s>아싸가오리</s></p></blockquote><h3 id="_7-단국대-개발자-스터디" tabindex="-1"><a class="header-anchor" href="#_7-단국대-개발자-스터디"><span>7. 단국대 개발자 스터디</span></a></h3><p>이번 달도 큰 일 없이 스터디가 진행되었다.</p><img width="700" alt="image31" src="https://user-images.githubusercontent.com/18749057/96289265-b1537780-101f-11eb-91ca-d2531e50fa7a.png"><p>위의 사진 처럼 현재 이 글을 작성하는 시점을 기준으로 <strong>2,247개의 commit</strong>이 존재한다.</p><img width="700" alt="image30" src="https://user-images.githubusercontent.com/18749057/96288817-fcb95600-101e-11eb-862b-eda2980496ea.png"><p>이번 달에는 <strong>약 50개의 PR에 리뷰</strong>를 남겼다. 현재는 나만 꾸준히 리뷰를 남기고 있는데, 다른 사람들도 조금만 의욕을 가지고 서로에게 피드백을 했으면 하는 바람이 있다.</p><img width="838" alt="image31" src="https://user-images.githubusercontent.com/18749057/96289514-28890b80-1020-11eb-99bd-570a22ffc29f.png"><p>그리고 스터디장이 <u>돈을 써야 돈이 생긴다면서</u> 큰맘먹고 사비를 들여 활발하게 활동하는 사람들에게 상금을 지급했다.</p><hr>',18),es={href:"https://www.e-mirim.hs.kr/main.do",target:"_blank",rel:"noopener noreferrer"},os=n("p",null,[n("img",{src:"https://user-images.githubusercontent.com/18749057/96286371-3d16d500-101b-11eb-9d68-35a7a1694fd4.png",alt:"image26"})],-1),ls=n("p",null,"사실 내가 원해서 시작한 스터디는 아니지만, 나름 잘 굴러가고 있었고 이렇게 누군가가 모방할 만큼 성장했다는게 믿기지 않았다.",-1),cs=n("p",null,[n("img",{src:"https://user-images.githubusercontent.com/18749057/96288105-dba43580-101d-11eb-8191-3f7b9d20ed26.png",alt:"image27"})],-1),is=n("p",null,"그래서 다음과 같이 답변을 하면서 현재 운영하고 있는 방식들을 소개했다. 그리고 겸사 겸사 간간이 리뷰도 해주게 되었다.",-1),us=n("img",{width:"700",alt:"image28",src:"https://user-images.githubusercontent.com/18749057/96288516-8583c200-101e-11eb-858a-d44da5f2c612.png"},null,-1),rs=n("p",null,[n("strong",null,"한 달 동안 대략 25개의 리뷰"),s("를 남겼다.")],-1),ks=n("img",{width:"700",alt:"image29",src:"https://user-images.githubusercontent.com/18749057/96288752-e4e1d200-101e-11eb-854a-5c21c4f4e00e.png"},null,-1),ds=n("p",null,[s("고등학교 때 부터 이렇게 준비하는 이 학생들이 내심 부럽기도 하고 또 힘 닿는 만큼 도와주고 싶다는 생각도 든다. "),n("s",null,"지금 내 코가 석자인데 오지랖만 넓어지고 있다.")],-1),vs=n("hr",null,null,-1),ms={href:"https://github.com/Jaewon0702",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://github.com/DKU-STUDY/TodayReview/issues/136#issuecomment-684861911",target:"_blank",rel:"noopener noreferrer"},gs={href:"https://github.com/DKU-STUDY/TodayReview/issues",target:"_blank",rel:"noopener noreferrer"},hs=n("strong",null,"같이 스터디를 할 수 있음에 감사함을 느낀다.",-1),ys=p('<h3 id="_8-일일커밋-및-코덕" tabindex="-1"><a class="header-anchor" href="#_8-일일커밋-및-코덕"><span>8. 일일커밋 및 코덕</span></a></h3><p>이번 달에는 확실히 깃허브에 기록을 많이 남겼다.</p><img width="778" alt="image32" src="https://user-images.githubusercontent.com/18749057/96290347-689cbe00-1021-11eb-873c-612efe8ec1d7.png"><p>핵심적인 내용만 정리하자면</p><ul><li>Commit <code>770개</code></li><li>Pull Request <code>15개</code></li><li>Code Review <code>133개</code> -&gt; 사실 커밋 갯수보다 이게 더 놀랍다.</li></ul><p>그리고 <strong>글을 작성하는 시점을 기준으로 올 해에 4785개의 기여(Contributions)를 했다.</strong></p><img width="934" alt="image33" src="https://user-images.githubusercontent.com/18749057/96290964-625b1180-1022-11eb-9609-078d376126c6.png"><p><strong>원래 5000개가 목표였는데, 6000개로 늘려야겠다.</strong></p><p>이렇게 왕성하게 활동한 덕분에 8월에 이어서 <strong>9월 코덕 랭킹 1위</strong>를 달성했다.</p><img width="634" alt="image34" src="https://user-images.githubusercontent.com/18749057/96291283-c8479900-1022-11eb-92c9-f18174124dfc.png"><p>다만 이번에는 <code>우아한 테크코스</code> 그룹에게 1등을 내어주었다. <code>DKU-STUDY</code>는 2등으로 마무리했다. <s>스터디원을 더 모집해야 할까?</s></p><img width="535" alt="image35" src="https://user-images.githubusercontent.com/18749057/96291354-e1e8e080-1022-11eb-9b27-27230437b212.png"><h2 id="이쯤에서-돌아보는-스케쥴-정리" tabindex="-1"><a class="header-anchor" href="#이쯤에서-돌아보는-스케쥴-정리"><span>이쯤에서 돌아보는 스케쥴 정리</span></a></h2><ul><li><code>월요일</code> 부스트 캠프 세션 (약 2시간 정도 진행)</li><li><code>화요일</code> 블랙커피 스터디 세션 (약 2시간 정도 진행) + 부스트캠프 리뷰</li><li><code>목요일</code> 블랙커피 스터디 페어프로그래밍 (약 3시간 정도 진행) + 부스트캠프 리뷰</li></ul><p>이 외에도 다음과 같은 상시 스케쥴이 존재했다.</p><ul><li><code>블랙커피 스터디</code>에 PR 리뷰</li><li><code>클린코드를 위한 TDD, 리팩토링 with Java 9기</code> 리뷰</li><li><code>서울디지텍고등학교 기능반</code> 학생들이 올리는 코드에 대한 리뷰</li></ul><p>덕분에 본문에서 언급한 것 처럼 한 달 동안 코드리뷰만 100개 넘게 했다.. 😰</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><ul><li>확장프로그램 관련 포스팅 완료</li><li>Sortable.js 때문에 고생했음</li><li>블랙커피 스터디 덕분에 공부를 많이 했음</li><li>부스트 캠프 리뷰어 활동</li><li>넥스트 스텝 리뷰어 활동</li><li>프로그래머스 리액트 스터디</li><li>기능반 학생들 지도 및 입상</li><li>9월 코덕 랭킹 1위</li></ul><hr><p>마지막은 주인님 사진으로 마무리!</p><p><img src="https://user-images.githubusercontent.com/18749057/96334155-86ae0100-10a9-11eb-95bc-ad5d5a3f19ff.jpeg" alt="포동이"></p>',22);function fs(ws,_s){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("p",null,[s("8월에는 확장프로그램 베타 버전 배포를 했고, 9월에는 회사 기술블로그에 "),n("a",r,[s("확장프로그램에 대한 포스팅"),t(a)]),s("을 완료했다.")]),k,n("ul",null,[n("li",null,[d,s(" Todo App 만들기 "),n("ul",null,[n("li",null,[n("a",v,[s("Document Object Model"),t(a)])]),n("li",null,[n("a",m,[s("Browser Object Model"),t(a)])]),n("li",null,[n("a",b,[s("Event"),t(a)])])])]),g,h]),y,n("ul",null,[f,n("li",null,[w,s("에는 1주차에 대한 회고와 "),_,s("에 대해서 토의 하는 과정이 좋았다. "),n("ul",null,[q,n("li",null,[s("내가 생각하는 좋은 개발자의 덕목은 "),x,s("하는 것, "),T,s("이 되는 것이다. "),n("ul",null,[n("li",null,[s("현재 같은 팀 소속의 "),n("a",j,[s("체대생 개발자로 알려진 한정수 담당님"),t(a)]),s("이 그렇다. "),n("ul",null,[n("li",null,[n("a",S,[s("체대 출신 개발자의 2018년 회고"),t(a)])]),n("li",null,[n("a",E,[s("체대 출신 개발자의 2019년 회고"),t(a)])]),n("li",null,[n("a",M,[s("체대생, 개발자가 되다! (한정수ㅣ줌인터넷 포털개발팀)"),t(a)])]),n("li",null,[n("a",R,[s("고퀄리티 개발 컨텐츠 모음"),t(a)])]),C])]),n("li",null,[s("그리고 "),n("a",A,[s("우리 팀장님"),t(a)]),s(" 또한 그렇다. "),n("ul",null,[n("li",null,[n("a",P,[s("이 글"),t(a)]),s("은 팀장이 인터뷰한 내용을 정리한 것인데 읽으면서 굉장히 마음에 와닿았다.")]),$,O])])])]),D])]),L,I]),H,n("p",null,[n("a",B,[s("페어프로그래밍"),t(a)]),s("은 들어보기만 했고 실제로 해본 경험은 없었기 때문에 많이 생소했다. 결과적으로 "),J,s("를 참여했으며, 충분히 좋은 경험이 되었다고 생각한다.")]),V,n("ul",null,[n("li",null,[s("리뷰 모음 "),n("ul",null,[n("li",null,[n("a",N,[s("next-step/js-todo-list-step1#30"),t(a)])]),n("li",null,[n("a",F,[s("next-step/js-todo-list-step1#31"),t(a)])]),n("li",null,[n("a",U,[s("next-step/js-todo-list-step1#33"),t(a)])]),n("li",null,[n("a",K,[s("next-step/js-todo-list-step1#34"),t(a)])]),n("li",null,[n("a",Q,[s("next-step/js-todo-list-step1#35"),t(a)])]),n("li",null,[n("a",G,[s("next-step/js-todo-list-step1#36"),t(a)])]),n("li",null,[n("a",W,[s("next-step/js-todo-list-step1#37"),t(a)])]),n("li",null,[n("a",Y,[s("next-step/js-todo-list-step1#38"),t(a)])]),n("li",null,[n("a",z,[s("next-step/js-todo-list-step1#40"),t(a)])]),n("li",null,[n("a",Z,[s("next-step/js-todo-list-step1#41"),t(a)])])])])]),X,n("ul",null,[n("li",null,[s("리뷰 모음 "),n("ul",null,[n("li",null,[n("a",nn,[s("next-step/js-todo-list-step2#16"),t(a)])]),n("li",null,[n("a",sn,[s("next-step/js-todo-list-step2#17"),t(a)])]),n("li",null,[n("a",an,[s("next-step/js-todo-list-step2#18"),t(a)])]),n("li",null,[n("a",tn,[s("next-step/js-todo-list-step2#19"),t(a)])]),n("li",null,[n("a",pn,[s("next-step/js-todo-list-step2#20"),t(a)])]),n("li",null,[n("a",en,[s("next-step/js-todo-list-step2#22"),t(a)])]),n("li",null,[n("a",on,[s("next-step/js-todo-list-step2#23"),t(a)])]),n("li",null,[n("a",ln,[s("next-step/js-todo-list-step2#24"),t(a)]),cn])])])]),un,rn,kn,dn,vn,n("ul",null,[n("li",null,[s("리뷰 모음 "),n("ul",null,[n("li",null,[n("a",mn,[s("next-step/js-todo-list-step3#12"),t(a)])]),n("li",null,[n("a",bn,[s("next-step/js-todo-list-step3#13"),t(a)])]),n("li",null,[n("a",gn,[s("next-step/js-todo-list-step3#16"),t(a)])]),n("li",null,[n("a",hn,[s("next-step/js-todo-list-step3#17"),t(a)])])])])]),yn,fn,wn,n("p",null,[s("이렇게 만들어본 코어는 추후에 "),n("a",_n,[s("네이버 아폴로 챌린지"),t(a)]),s("에서 프론트엔드 과제를 만들 때 큰 도움이 되었다. 다만 라우터에 몇 가지 문제가 있어서 다시 개선해야 했다.. 너무 대충만들었달까.. 😅")]),qn,xn,Tn,n("ul",null,[n("li",null,[n("a",jn,[s("JunilHwang/js-todo-list-step1"),t(a)])]),n("li",null,[n("a",Sn,[s("JunilHwang/js-todo-list-step2"),t(a)])]),n("li",null,[n("a",En,[s("JunilHwang/js-todo-list-step3"),t(a)])])]),Mn,n("ul",null,[n("li",null,[n("a",Rn,[s("JunilHwang/black-coffee-study"),t(a)])])]),Cn,n("ul",null,[n("li",null,[n("a",An,[s("step1 데모"),t(a)])]),n("li",null,[n("a",Pn,[s("step2 데모"),t(a)])]),n("li",null,[n("a",$n,[s("step3 데모"),t(a)])])]),On,n("p",null,[s("그리고 같이 신청한 친구 중 한 명이 아예 활동을 안 했다. 왜 활동을 안 하냐고 물어보니 "),n("a",Dn,[s("프로그래머스"),t(a)]),s("에서 진행한 "),n("a",Ln,[s("프론트엔드 개발을 위한 자바스크립트 스터디(feat. VanillaJS)"),t(a)]),s("에 참여했었는데, "),In,s(" 일부로 하지 않았다고 한다. "),Hn]),Bn,n("p",null,[s("아 그리고 현재 스터디는 "),Jn,s("이다. "),n("a",Vn,[s("Level02"),t(a)]),s("에서는 주로 "),Nn,s("을 다루고 있다.")]),n("p",null,[s("스터디장님은 최종 레벨을 "),n("a",Fn,[s("클린코드를 위한 TDD, 리팩토링 with Java"),t(a)]),s("와 유사한 커리큘럼으로 만들어서 운영하는게 목표라고 하셨다.")]),Un,n("p",null,[s("8월에 "),n("a",Kn,[s("부스트캠프 리뷰어"),t(a)]),s("를 신청했다.")]),Qn,n("div",Gn,[Wn,n("ul",null,[Yn,n("li",null,[s("자세한 내용은 "),n("a",zn,[s("마이스터넷"),t(a)]),s(" 참고 "),n("ul",null,[n("li",null,[n("a",Zn,[s("지방대회"),t(a)])]),n("li",null,[n("a",Xn,[s("전국대회"),t(a)])]),n("li",null,[n("a",ns,[s("세계대회"),t(a)])])])])]),ss]),as,n("p",null,[s("프로그래머스에서 "),n("a",ts,[s("Naver Apollo CIC 경력 개발자 채용 - 프론트엔드 개발 챌린지"),t(a)]),s("를 신청했다.")]),ps,n("p",null,[s("이 외에 기분 좋은 이슈가 있었다. 8월 리뷰에 언급했었지만 "),n("a",es,[s("미림여자정보과학고등학교"),t(a)]),s("에서 우리 스터디를 모방하여 알고리즘 스터디를 진행 중이었다. 그런데 이 스터디를 운영하는 학생에게 메일이 한 통 왔다.")]),os,ls,cs,is,us,rs,ks,ds,vs,n("p",null,[s("그리고 스터디원 중에 굉장히 "),n("a",ms,[s("성실한 사람"),t(a)]),s("이 있다. 내용이 너무 많아서 이곳에 보여주긴 힘들고, 궁금한 사람만 "),n("a",bs,[s("이 링크"),t(a)]),s("에서 확인해보길 바란다.")]),n("p",null,[s("이러한 분량의 "),n("a",gs,[s("TodayReview"),t(a)]),s("를 거의 매일 남기고 있다. 이러한 열정이 부럽기도 하고, 존경스럽기도 하고, "),hs]),ys])}const xs=e(i,[["render",fs],["__file","index.html.vue"]]),Ts=JSON.parse('{"path":"/Review/2020-year/09-September/","title":"2020년 9월 회고","lang":"en-US","frontmatter":{"title":"2020년 9월 회고","description":"개발자 황준일의 2020년 9월 회고입니다.","sidebarDepth":2,"date":"2020-09-30T00:00:00.000Z","tag":"회고","thumbnail":"https://user-images.githubusercontent.com/18749057/96290347-689cbe00-1021-11eb-873c-612efe8ec1d7.png"},"headers":[{"level":2,"title":"공적","slug":"공적","link":"#공적","children":[{"level":3,"title":"1. 크롬 확장프로그램","slug":"_1-크롬-확장프로그램","link":"#_1-크롬-확장프로그램","children":[]},{"level":3,"title":"2. CMS QA","slug":"_2-cms-qa","link":"#_2-cms-qa","children":[]},{"level":3,"title":"3. API 관련 이슈 해결","slug":"_3-api-관련-이슈-해결","link":"#_3-api-관련-이슈-해결","children":[]}]},{"level":2,"title":"사적","slug":"사적","link":"#사적","children":[{"level":3,"title":"1. Black Coffee Study","slug":"_1-black-coffee-study","link":"#_1-black-coffee-study","children":[]},{"level":3,"title":"2. 부스트캠프 리뷰어 활동","slug":"_2-부스트캠프-리뷰어-활동","link":"#_2-부스트캠프-리뷰어-활동","children":[]},{"level":3,"title":"3. 넥스트스탭 리뷰어 활동","slug":"_3-넥스트스탭-리뷰어-활동","link":"#_3-넥스트스탭-리뷰어-활동","children":[]},{"level":3,"title":"4. 기능경기대회 - 전국대회","slug":"_4-기능경기대회-전국대회","link":"#_4-기능경기대회-전국대회","children":[]},{"level":3,"title":"5. 프로그래머스 리액트 스터디","slug":"_5-프로그래머스-리액트-스터디","link":"#_5-프로그래머스-리액트-스터디","children":[]},{"level":3,"title":"6. 네이버 아폴로 챌린지","slug":"_6-네이버-아폴로-챌린지","link":"#_6-네이버-아폴로-챌린지","children":[]},{"level":3,"title":"7. 단국대 개발자 스터디","slug":"_7-단국대-개발자-스터디","link":"#_7-단국대-개발자-스터디","children":[]},{"level":3,"title":"8. 일일커밋 및 코덕","slug":"_8-일일커밋-및-코덕","link":"#_8-일일커밋-및-코덕","children":[]}]},{"level":2,"title":"이쯤에서 돌아보는 스케쥴 정리","slug":"이쯤에서-돌아보는-스케쥴-정리","link":"#이쯤에서-돌아보는-스케쥴-정리","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"updatedTime":1725359242000},"filePathRelative":"Review/2020-year/09-September/README.md"}');export{xs as comp,Ts as data};
