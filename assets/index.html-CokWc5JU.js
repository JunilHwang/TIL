import{_ as e,r as c,o,c as i,a as n,b as s,d as p,e as t}from"./app-5lrBuCb5.js";const l={},u=n("h1",{id:"mvvm-system-개선하기-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mvvm-system-개선하기-2"},[n("span",null,"MVVM System 개선하기 (2)")])],-1),k={class:"custom-container tip"},r=n("p",{class:"custom-container-title"},"해당 포스트는 아래의 내용들을 토대로 정리한 것입니다.",-1),d={href:"https://www.youtube.com/watch?v=r4vOF7WpxgM&t=868s",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>객체지향 프로그램이란 처음에 이루고하자는 목표에서부터 <u>덩어리진 것을 차근차근 분리하고 깎아내는 과정</u> 이다. 그래서 객체지향 개발은 애자일(Agile) 소프트웨어 개발과 궁합이 좋다.</p><p>객체지향에서 코드를 깎아내는 기준은 <u>역할과 책임</u> 이다. 역할과 책임은 비슷하지만 동전의 양면과 같다.</p><div class="custom-container tip"><p class="custom-container-title">역할과 책임</p><ul><li>책임을 진다는 것은 책임에 적합한 권한도 갖고 있다는 것이다.</li><li>권한이 있다는 것은 권한에 적합한 책임도 갖고 있다는 것이다.</li><li>책임이 없는데 권한이 없거나 권한이 없는데 책임이 있다면 문제가 생긴다.</li></ul></div><p>인간의 머리는 복잡성의 한계가 있다. 그래서 객체지향을 통하여 좋은 코드를 만드는 방법은 코드를 잘 쪼개서 인간이 인식할 수 있는 복잡성 만큼 수용하는 것이다. 그런데 쪼개는 것이 어렵기 때문에 일관성 있게 쪼개는 방법이 중요하다. 그래서 <u>역할과 책임에 맡게 코드를 쪼개는 연습을 해야 한다.</u></p><p>이번에는 역할과 책임에 따라 코드를 쪼개고 깎아내는 과정을 살펴볼 것이다.</p><h2 id="인터페이스-분리-원칙-isp" tabindex="-1"><a class="header-anchor" href="#인터페이스-분리-원칙-isp"><span>인터페이스 분리 원칙 (ISP)</span></a></h2><p>먼저 ViewModel에 <u>인터페이스 분리 원칙(ISP, Interface Segregation Principle)</u> 을 적용해야 한다.</p><h3 id="역할과-책임에-따른-분석" tabindex="-1"><a class="header-anchor" href="#역할과-책임에-따른-분석"><span>역할과 책임에 따른 분석</span></a></h3><p>여태까지 만든 ViewModel은 매우 heavy 한 상태다.</p><img src="https://www.plantuml.com/plantuml/svg/NOyx3i8m44HxdsAL2aeuGGu09VJ6Euai-QVr9YX2t1rJ6AHqe_T66irOrOekCHY1Kvlc0BfxFA-P4UXbY9mLfY5bzTDsQ6trxZYGhPHEUrkMH_ZPSxUM-UAh8a4w4iIyOa_NjXk_kxV2Li6Tpz0U6TM9BvhbJoQVODvcHEBsumC0" alt="uml diagram"><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> ViewModel <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ViewModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token keyword">static</span> #subjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span></span>
<span class="line highlighted">  <span class="token keyword">static</span> #inited <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line highlighted">  <span class="token keyword">static</span> <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#inited<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#inited <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line highlighted">    <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">          vm<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line highlighted">          vm<span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line highlighted">        <span class="token punctuation">}</span></span>
<span class="line highlighted">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line highlighted">      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line highlighted">    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function-variable function">descriptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">set</span> <span class="token punctuation">(</span>newV<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      v <span class="token operator">=</span> newV</span>
<span class="line">      vm<span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewModelValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>subKey<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function-variable function">define</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> category<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span></span>
<span class="line">      obj<span class="token punctuation">,</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ViewModel<span class="token punctuation">.</span><span class="token function">descriptor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  subKey <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> parent <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">  styles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> attributes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line highlighted">  #isUpdated <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">;</span> #listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&#39;styles,attributes,properties&#39;</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v <span class="token operator">||</span> <span class="token keyword">typeof</span> v <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">invalid object k: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, v:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ViewModel<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> ViewModel<span class="token punctuation">.</span><span class="token function">descriptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">ViewModel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          v<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="line">          v<span class="token punctuation">.</span>subKey <span class="token operator">=</span> k</span>
<span class="line">          v<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    ViewModel<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">viewmodelUpdated</span> <span class="token punctuation">(</span><span class="token parameter">updated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> updated<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line highlighted">  <span class="token function">addListener</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line highlighted">  <span class="token function">removeListener</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line highlighted">  <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">viewmodelUpdated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#isUpdated<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그런데 과연 이 코드가 정말로 ViewModel에게 전부 필요한 것일까?</p><p>ViewModel의 원래 역할은 물리적인 View(DOM, Android, IOS, ..)를 대신하여 <u>순수한 메모리 객체로서의 View(가상의 View)</u> 를 만들어내는 것이다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">static</span> #subjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span></span>
<span class="line"><span class="token keyword">static</span> #inited <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#inited<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>#inited <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vm<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        vm<span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">#isUpdated <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">;</span> #listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span> <span class="token comment">// 메소드가 의존하고 있는 field</span></span>
<span class="line"><span class="token function">addListener</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token function">removeListener</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">viewmodelUpdated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#isUpdated<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 Method와 Field는 ViewModel의 역할에 적합하지 않다. 이것은 <u>Observer Pattern에서 Subject의 역할</u> 에 해당하는 부분이다. 그래서 이 Method와 이것에 의존하고 있는 field를 <strong>역할에 따라 분리</strong>시켜야 한다.</p><h3 id="isp-적용하기" tabindex="-1"><a class="header-anchor" href="#isp-적용하기"><span>ISP 적용하기</span></a></h3><p>기존의 ViewModel을 다음과 같은 형태로 변경할 것이다.</p><img src="https://www.plantuml.com/plantuml/svg/RPB1Ri8m38RlVGeBBkp00Pw01s2dQRiW3YPs8LFgLgaBGeXt9qrXILUa7fBlintvLpUjejUkSeLdeoX7n_1Z-V9P4pku5G1l-5Tt-0qqQW23dc0cjThokcYwWxFcOmROWgocFZodVtwTF19jRQiix1FqNDLddl9G3FCIoqICO_J_s0NLd62EEUjaHE_lztkzc2zu3hBgvNT3g4pFxkYEhAyZSMkyRRJsYPHMEDp25mfXkToTB17BFgdXC5RP75b1CZ4rMMTad5rsosecKVOpHoE6rgmbPjfl4RDDF2OO-91auiziYtknOQ7mIpq0" alt="uml diagram"><p>보다시피 <code>add</code>와 <code>clear</code>가 추가되었다. add와 clear를 통해서 부모(ViewModel)에게 역할을 위임하도록 만들 것이다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Javascript는 다중 상속이 불가능하기 때문에</span></span>
<span class="line"><span class="token comment">// ViewModelSubject가 ViewModelListener를 상속받아야 한다.</span></span>
<span class="line"><span class="token keyword">const</span> ViewModelSubject <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelListener <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  #info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span></span>
<span class="line">  #listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// add와 clear를 통해 부모에게 역할을 위임한다.</span></span>
<span class="line highlighted">  <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ViewModelValue<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#info<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line highlighted">  <span class="token function">clear</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#info<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">addListener</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line highlighted">    ViewModelSubject<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">removeListener</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span>size<span class="token punctuation">)</span> ViewModelSubject<span class="token punctuation">.</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">viewmodelUpdated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아직 코드상에 작성하진 않았지만 <em>addListener</em>에는 <code>ViewModelSubject.watch</code>가 생겼고, <em>removeListener</em>에는 <code>ViewModelSubject.unwatch</code>가 생겼다.</p><p>기존에는 <code>notify</code>를 통해서 데이터를 노출 시켰는데 <u>논리적으로 생각했을 때 외부에서 명시적으로 알아야 하는 것은 <code>watch</code>와 <code>unwatch</code></u> 이다. 그래서 watch와 unwatch를 노출시키고, notify는 감추도록 만들어야 한다.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>notify mechanism은 감추고, watch와 unwatch를 인터페이스로 공개한다.</p></div><p>이제 <code>notify</code>를 살펴봐야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#inited<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>#inited <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vm<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        vm<span class="token punctuation">.</span>#isUpdated<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>notify method 내부에 <code>this.#subject.add</code>가 있다. 그 의미는 notify가 두 가지의 역할을 수행하고 있다는 것이고, 이런 코드를 유지하게 될 경우 문제가 생길 수 있다. 각각의 메소드는 가능한한 한 가지의 역할만 수행하게 하여 <u>단일책임원칙(SCP, Single Responsibility Principle)이 지켜지도록</u> 해야한다</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line highlighted">  <span class="token keyword">static</span> #subjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span></span>
<span class="line">  <span class="token keyword">static</span> #inited <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>#info<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          v<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">          v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#inited<span class="token punctuation">)</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">watch</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>#inited<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>#inited <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">unwatch</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> ViewModelListener<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>#subjects<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#inited <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위에도 언급 했듯이 notify mechanism은 감추고 watch와 unwatch를 통해 interface로 제공해야 한다. 그리고 notify는 하나의 역할만 수행하도록 하여 책임을 분산시킨다.</p><h2 id="섬세한-권한-조정" tabindex="-1"><a class="header-anchor" href="#섬세한-권한-조정"><span>섬세한 권한 조정</span></a></h2><div class="custom-container tip"><p class="custom-container-title">권한 조정이 필요한 이유</p><p>java의 기본 권한은 private 이고, javascript의 기본 권한은 public이다.</p><p>그래서 javascript는 개발자가 하나하나 권한을 조정하지 않으면 기본적으로 public이 되서 엉망이 된다. getter, setter 등이 public 으로 노출되면 코드 조작이 매우 쉬워지고 문제가 생길 수 있다.</p></div><div class="custom-container tip"><p class="custom-container-title">transaction</p><p>transaction이 발견 되면 무조건 function으로 표현해야 한다. transaction이 코드에 섞여있을 경우 문제가 발생할 확률이 높다(응용 하기가 쉽지 않다).</p></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line highlighted"><span class="token keyword">const</span> ViewModel <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> ViewModelSubject <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">get</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ViewModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  styles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> attributes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  #subKey <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line highlighted">  <span class="token keyword">get</span> <span class="token function">subKey</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#subKey <span class="token punctuation">}</span> <span class="token comment">// read only</span></span>
<span class="line">  #parent <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line highlighted">  <span class="token keyword">get</span> <span class="token function">parent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#parent <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// code에서  꼭 필요한 것 : transaction.</span></span>
<span class="line highlighted">  <span class="token function">setParent</span> <span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> subKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token comment">// 함수를 통해서 transaction을 표현한다(한 번에 일어나는 일들)</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#parent <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> ViewModel<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#subKey <span class="token operator">=</span> subKey</span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function-variable function">descriptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">set</span> <span class="token punctuation">(</span>newV<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      v <span class="token operator">=</span> newV</span>
<span class="line">      vm<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewModelValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>subKey<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function-variable function">define</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> category<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span></span>
<span class="line">      obj<span class="token punctuation">,</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ViewModel<span class="token punctuation">.</span><span class="token function">descriptor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> category<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&#39;styles,attributes,properties&#39;</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v <span class="token operator">||</span> <span class="token keyword">typeof</span> v <span class="token operator">!=</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">invalid object k: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, v:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ViewModel<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> ViewModel<span class="token punctuation">.</span><span class="token function">descriptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">ViewModel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">          <span class="token comment">// transaction을 method로 분리했다.</span></span>
<span class="line highlighted">          v<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted">  <span class="token function">viewmodelUpdated</span> <span class="token punctuation">(</span><span class="token parameter">updated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> updated<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ViewModel에서 개선된 내용은 다음과 같다.</p><ul><li><u>권한 조정</u> : subKey, parent에 대한 getter와 setter를 만들었다.</li><li><u>역할/책임에 따른 인터페이스 분할(ISP)</u> : ViewModel은 ViewModelSubject를 상속하도록 변경했다.</li><li><u>tranaction 도출</u> : parent에 대한 transaction 단위를 분리했다.</li></ul><h2 id="visitor-pattern" tabindex="-1"><a class="header-anchor" href="#visitor-pattern"><span>Visitor Pattern</span></a></h2><p><code>Visitor Pattern</code>은 객체의 구조와 기능을 분리시키는 패턴이다. 이것을 이용하여 DOM에 관련된 기능을 MVVM과 분리시키는 작업을 할 것이다.</p><p>먼저 Scanner를 살펴보자.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Scanner <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">scan</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> HTMLElement<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binder</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkTiem</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> el<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>el<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> target</span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>target <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkItem</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> binder<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">checkItem</span> <span class="token punctuation">(</span><span class="token parameter">binder<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">const</span> vm <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-viewmodel&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">)</span> binder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BinderItem</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scanner의 핵심은 <u>ViewModel을 읽어들여서 Binder에 전달</u> 하는 것이다. 그리고 checkItem이 그러한 역할을 담당하고 있다.</p><p>여기서 문제되는 부분은 <code>scan method</code> 이다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token function">scan</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> HTMLElement<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binder</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkTiem</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> el<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>el<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> target</span>
<span class="line highlighted">    <span class="token keyword">while</span> <span class="token punctuation">(</span>target <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkItem</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line highlighted">      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span></span>
<span class="line highlighted">      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> binder<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DOM을 읽어 들이는 부분은 scanner의 역할이 아니고 Binder의 역할도 아니다. 그래서 Vistor를 만든 후 Vistor에게 DOM Parsing에 대한 부분을 위임해야 한다. 이럴 경우 Binder, Scanner, ViewModel 등은 DOM과 분리되고 결과적으로 현재 작성 중인 MVVM System은 <u>플랫폼(웹, 안드로이드, IOS, ...)에 대한 종속이 느슨해지게 될 것이다.</u></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Visitor : 제어를 Visitor에게 위임한다.</span></span>
<span class="line"><span class="token keyword">const</span> Visitor <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// target의 경우 HTML인지 Canvas인지 알 수 없다. 그래서 추상화 시켜야 한다.</span></span>
<span class="line">  <span class="token function">visit</span> <span class="token punctuation">(</span>action<span class="token punctuation">,</span> target<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token string">&#39;override&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> DomVisitor <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Visitor <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 자식에서 구체적인 형을 알게 되는 것 : Generic</span></span>
<span class="line">  <span class="token comment">// 언어가 어떤 기능을 지원 하느냐보단 그 개념을 어떻게 적용하느냐가 중요하다.</span></span>
<span class="line highlighted">  <span class="token function">visit</span> <span class="token punctuation">(</span>action<span class="token punctuation">,</span> target <span class="token punctuation">,</span> _0 <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _1 <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 제어의 코드가 Visitor에게 몰리기 때문에 제어 역전이 발생한다.</span></span>
<span class="line">    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> curr <span class="token operator">=</span> target<span class="token punctuation">.</span>firstElementChild</span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// loop 안에서 상호작용을 해야 한다.</span></span>
<span class="line highlighted">      <span class="token function">action</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token comment">// template method의 hook가 비슷한 역할</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Visitor를 작성했으니, Scanner의 코드를 다시 작성해야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Scanner <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span></span>
<span class="line">  #visitor</span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">visitor<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> DomVisitor<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#visitor <span class="token operator">=</span> visitor</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">scan</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> _ <span class="token operator">=</span> type9target<span class="token punctuation">,</span> HTMLElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binder</span></span>
<span class="line">    <span class="token comment">// Scanner는 ViewModel을 읽어들이기만 하면 된다.</span></span>
<span class="line highlighted">    <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token keyword">const</span> vm <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-viewmodel&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 코드의 변화 요인은 이 부분 밖에 없다</span></span>
<span class="line highlighted">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">)</span> binder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BinderItem</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// DomScan은 Visitor에게 위임한다</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> binder</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">설계라는 것</p><p>설계는 객체의 재배치가 아닌 코드의 재배치이다. 객체에 작성된 코드가 정말로 이 객체의 것인지 판단할 수 있는 능력이 중요하다.</p></div><h2 id="추상-계층-일치시키기" tabindex="-1"><a class="header-anchor" href="#추상-계층-일치시키기"><span>추상 계층 일치시키기</span></a></h2><p>의존성은 계층 관계를 보고 설정해야 한다.</p><ul><li>객체 간의 계약 = 의존성</li><li>어떤 객체를 알고 있다 = 어떤 객체의 <em>스펙</em>을 알고 있다.</li><li><u>니가(Scanner) 망한다 = 나도(Binder) 망한다</u></li></ul><p>현재 Scanner와 Binder의 경우 <u>추상 계층이 일치 하지 않는 상태다.</u></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Scanner <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span></span>
<span class="line">  #visitor</span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">visitor<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> DomVisitor<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#visitor <span class="token operator">=</span> visitor <span class="token comment">// 자식 계층(DomVisitor)을 사용하고 있다.</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">scan</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> _ <span class="token operator">=</span> type9target<span class="token punctuation">,</span> HTMLElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binder</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> vm <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-viewmodel&#39;</span><span class="token punctuation">)</span> </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">)</span> binder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BinderItem</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span>#visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token comment">// 부모 계층(Visitor)을 사용하고 있다.</span></span>
<span class="line">    <span class="token keyword">return</span> binder</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Visitor는 계층이 두 개(Visitor, DomVisitor)고, Scanner는 계층이 한 개이기 때문이다.</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILK8JaxCoqijGX9noSyDoopEBCb75eI9G9KhwDh1XQ2qWeskBf9U1Iw7rBmKe5q0" alt="uml diagram"><p>그래서 추상 계층은 서로 일치를 시켜줘야 한다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Scanner <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span></span>
<span class="line">  #visitor</span>
<span class="line">  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">visitor<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> Visitor<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#visitor <span class="token operator">=</span> visitor</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">visit</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line highlighted">  <span class="token function">scan</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">override</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">const</span> DomScanner <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Scanner <span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">visitor<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> DomVisitor<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">super</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span> <span class="token comment">// 자식은 부모를 대체할 수 있다. LSP</span></span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line highlighted">  <span class="token function">scan</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> HTMLElement<span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token keyword">const</span> binder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binder</span></span>
<span class="line highlighted">    <span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">      <span class="token keyword">const</span> vm <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-viewmodel&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">)</span> binder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BinderItem</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token punctuation">}</span></span>
<span class="line highlighted">    <span class="token function">f</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">return</span> binder</span>
<span class="line highlighted">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILLmoSyDJaxCoqijGXB4504g2yiipYp9HnQ4YK2LA-ZQmOMWj8ADhYwINWMuKgWup2A7rBmKeBi0" alt="uml diagram">`,56),m={class:"custom-container tip"},h=n("p",{class:"custom-container-title"},"도메인 패턴",-1),b=n("p",null,[n("u",null,"변하지 않는 부분과 변하는 부분을 나눠야 한다.")],-1),g=n("p",null,"추상 클래스(Scanner, Visitor)는 Native를 모르는 상태로 유지하고, Native는 구현 클래스(DomScanner, DomVisitor)에게 위임한다.",-1),w={href:"https://wikibook.co.kr/peaa/",target:"_blank",rel:"noopener noreferrer"},f=t('<ul><li>추상 레이어를 나누면 좋은점 <ul><li>새로운 변화가 생기거나 새로운 요구사항이 생겼을 때 수정이 아니라 추가로 해결한다.</li><li>코드를 고치지 않고, 코드를 추가한다.</li><li>수정하지 않고 확장한다.</li></ul></li><li>단일책임원칙(OCP, Open Close Principle)을 지키기 위해서는 추상화가 필수다.</li></ul><p><strong>SOLID 원칙은 사실 설계를 잘 했을 때 얻어지는 결과물이라고 할 수 있다.</strong></p><h2 id="전체-코드" tabindex="-1"><a class="header-anchor" href="#전체-코드"><span>전체 코드</span></a></h2><p>&lt;&lt;&lt; @/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/example.html</p>',4),y={href:"https://github.com/JunilHwang/TIL/blob/master/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/example.html",target:"_blank",rel:"noopener noreferrer"},V=t('<h2 id="설계-종합" tabindex="-1"><a class="header-anchor" href="#설계-종합"><span>설계 종합</span></a></h2><h3 id="viewmodel" tabindex="-1"><a class="header-anchor" href="#viewmodel"><span>ViewModel</span></a></h3><p>ViewModelValue의 경우 의존하는 객체가 많기 때문에 수정에 대한 위험성이 굉장히 크다</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fH2CjCBVVDJqb5vmQN9cMb9fUWYVfa5fUavgKMeGc79UQKfd9nOIXJiD7LnJGING1L5JPZTEtGxS8m0qE9We825ve8gZqEgNafm6000000" alt="uml diagram"><ul><li>단방향 의존성 지향 <ul><li>현재 상태의 장점은 <u>단 방향 의존성만 있다는 것</u> 이다.</li><li>객체를 설계 할 때 순환 의존성이 생기지 않도록 항상 주의 해야 한다.</li></ul></li><li>도메인 분리 <ul><li>ViewModel은 <u>DOM에 의존적이지 않다.</u></li><li>다른 의미로 <u>플랫폼에 종속적이지 않다.</u></li></ul></li><li>ViewModelValue에게 모여든다 <ul><li>화살표가 모인다는 것은, 무거운 객체라는 의미다</li><li>무거운 객체는 수정의 여파가 매우 크다.</li><li>즉, 쉽게 수정 하면 안 되는 객체다.</li></ul></li></ul><h3 id="scanner" tabindex="-1"><a class="header-anchor" href="#scanner"><span>Scanner</span></a></h3><p>Scanner에는 Visitor를 사용 하여 DOM과 관련된 기능을 분리했다.</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fH24vEpCjBBO9mNF9pKVXXcSMP9Va8IHYV2wfAmKPN5raJJ5ZN3guLIiDKmeGTKlDIW6u00000" alt="uml diagram"><ul><li>간접적인 의존 <ul><li>DomScanner와 DomVisitor는 _간접적으로 의존_하고 있다.</li><li>어쨌든 DomScanner는 DomVisitor를 알고 있어야 한다.</li></ul></li><li>추상 계층 일치시키기 <ul><li>Scanner와 Visitor의 추상 계층을 동일하게 만들어야 한다.</li><li>추상 계층이 일치하지 않을 경우, Method의 <strong>변화율</strong>이 달라지게 된다.</li><li>Method의 변화율이 달라질 경우, 수정이 더욱 빈번하게 발생한다.</li><li>추상 계층을 일치시키면 수정 대신 <u>기능 추가로 대체</u> 할 수 있다.</li></ul></li></ul><h3 id="binder" tabindex="-1"><a class="header-anchor" href="#binder"><span>Binder</span></a></h3><p>Binder는 상당히 위험한 객체이다.</p><img src="https://www.plantuml.com/plantuml/svg/VP9D3i8W48Ntd88BS0DZ6dLZeec9IVS8iy2qaC0qNj-6d_9NNPNtCNqCRnWSSelBF171hQGdfINOi7uAhdKI5pDNUbHEeScRbHuLVEv6mjJ8v_9wWy26tfH3A8mZ7lcqGDdL5M4E-c6D0EVISMUZXGMEa3dftEc1iRwJ5jHLUpRisBROUVmfyR8-X18Ia_My23fXxnVYZTzKcJ092QrucrhEZBBL81Ryo2MElMipRSI_MNcp4kRWjvNttPdC05gkp-qB" alt="uml diagram"><ul><li>Binder는 뻗어나간다.</li><li>화살표가 뻗어 나가는 것은, 위험한 객체라는 의미다.</li><li>Binder를 알고 있는 객체를 건드릴 경우 깨질 수 있다.</li><li>제일 민감하고 예민한 객체가 된다.</li></ul><h3 id="플랫폼-독립적-구조" tabindex="-1"><a class="header-anchor" href="#플랫폼-독립적-구조"><span>플랫폼 독립적 구조</span></a></h3><p>여태까지 작성한 MVVM System은 플랫폼에 독립적이다.</p><img src="https://www.plantuml.com/plantuml/svg/VP9D2i8m48NtEKN0TMuWKjIDe208tSTa2f4sWMIArxTj_jf4tMM-lioyladZa5iSXvu8RYKzAYt1-lD3SArZSJP3gEckuzp3LZc59Yj2lL70-sOaz7I6NG4Vu_C50WjwLGuX3KwuvVq8QvSNXC7NTsi4E1UTd8mM5ZX2ujuHgKRGFMErdH9iLT_Qi4Ffi-hnHxAKso6Ka1Ztp7Fw2I_zVFmnzg2CcFYO9fnMcOEZR6eG13zo2M-XiXa_XDji_MThcBUIzp3thTT36j1oUeCV" alt="uml diagram"><p><u>DomScanner, DomVisitor, ConcreateProcessor 이렇게 세 개만 DOM에 대한 의존성이 있다.</u> 나머지는 <code>ViewModel</code>을 만드는 것들이다. <strong>즉, MVVM의 핵심은 ViewModel을 만드는 것이다.</strong> 그래서 DomScanner, DomVisitor, ConcreateProcessor 등만 교체하면 Android, IOS 에도 사용할 수 있다.</p><p><strong>이것이 가상화(추상화) 되어 있는 렌더링 시스템이다.</strong></p><p>설계를 할 때 특정한 Domain과 관련된 부분은 격리를 하는 것을 항상 지향해야 한다.</p><h2 id="약간의-단점" tabindex="-1"><a class="header-anchor" href="#약간의-단점"><span>약간의 단점</span></a></h2><ul><li>MVVM의 핵심은 Observer Pattern이다.</li><li>Observer Pattern은 구현과 설계도 어렵고 성능 자체에 대한 비용도 있다.</li></ul><p>그래서 현실적인 대안으로 MVVM을 사용할 때 Observing을 하는 것 보다 Binder를 수동으로 calling 하는 경우가 생각보다 많다.</p>',22);function j(M,S){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("div",k,[r,n("p",null,[n("a",d,[s("코드스피츠 86기 4회차 동영상"),p(a)])])]),v,n("div",m,[h,b,g,n("p",null,[n("em",null,[s("Reference "),n("a",w,[s("엔터프라이즈 애플리케이션 아키텍처 패턴"),p(a)])])])]),f,n("p",null,[n("a",y,[s("github에서 보기"),p(a)])]),V])}const E=e(l,[["render",j],["__file","index.html.vue"]]),I=JSON.parse('{"path":"/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/","title":"MVVM System 개선하기 (2)","lang":"en-US","frontmatter":{"title":"MVVM System 개선하기 (2)","description":"ISP 원칙, Visitor Pattern 등을 적용하여 MVVM System을 더욱 개선합니다.","sidebarDepth":2,"date":"2020-02-22T00:00:00.000Z","tag":"코드스피츠, javascript, oop","thumbnail":"https://cphinf.pstatic.net/mooc/20171016_5/15081473670537g5Dm_PNG/title.png?type=w760"},"headers":[{"level":2,"title":"인터페이스 분리 원칙 (ISP)","slug":"인터페이스-분리-원칙-isp","link":"#인터페이스-분리-원칙-isp","children":[{"level":3,"title":"역할과 책임에 따른 분석","slug":"역할과-책임에-따른-분석","link":"#역할과-책임에-따른-분석","children":[]},{"level":3,"title":"ISP 적용하기","slug":"isp-적용하기","link":"#isp-적용하기","children":[]}]},{"level":2,"title":"섬세한 권한 조정","slug":"섬세한-권한-조정","link":"#섬세한-권한-조정","children":[]},{"level":2,"title":"Visitor Pattern","slug":"visitor-pattern","link":"#visitor-pattern","children":[]},{"level":2,"title":"추상 계층 일치시키기","slug":"추상-계층-일치시키기","link":"#추상-계층-일치시키기","children":[]},{"level":2,"title":"전체 코드","slug":"전체-코드","link":"#전체-코드","children":[]},{"level":2,"title":"설계 종합","slug":"설계-종합","link":"#설계-종합","children":[{"level":3,"title":"ViewModel","slug":"viewmodel","link":"#viewmodel","children":[]},{"level":3,"title":"Scanner","slug":"scanner","link":"#scanner","children":[]},{"level":3,"title":"Binder","slug":"binder","link":"#binder","children":[]},{"level":3,"title":"플랫폼 독립적 구조","slug":"플랫폼-독립적-구조","link":"#플랫폼-독립적-구조","children":[]}]},{"level":2,"title":"약간의 단점","slug":"약간의-단점","link":"#약간의-단점","children":[]}],"git":{"updatedTime":1740226066000},"filePathRelative":"CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/README.md"}');export{E as comp,I as data};
