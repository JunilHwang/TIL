import{_ as t,r as l,o,c,a as n,b as a,d as p,e}from"./app-C6WRGiqu.js";const i={},u=e('<h1 id="with-ai-typescript-a-부터-z-까지" tabindex="-1"><a class="header-anchor" href="#with-ai-typescript-a-부터-z-까지"><span>[With AI] Typescript A 부터 Z 까지</span></a></h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>본 게시물은 AI(Claude)와 함께 작성하였습니다.</p></div><h2 id="참고자료" tabindex="-1"><a class="header-anchor" href="#참고자료"><span>참고자료</span></a></h2>',3),r={href:"https://blog.insightbook.co.kr/2021/06/10/%E3%80%8A%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC%EC%9D%98-%EC%9D%B4%ED%95%B4%EC%99%80-%EA%B5%AC%EC%B2%B4/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.youtube.com/watch?v=ViS8DLd6o-E",target:"_blank",rel:"noopener noreferrer"},d={href:"https://smartstudio.tech/type-programming/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/type-challenges/type-challenges/blob/main/README.ko.md",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.youtube.com/watch?v=kMuJz6N-Grw",target:"_blank",rel:"noopener noreferrer"},b=e(`<h2 id="_1-타입스크립트-소개" tabindex="-1"><a class="header-anchor" href="#_1-타입스크립트-소개"><span>1. 타입스크립트 소개</span></a></h2><h3 id="what-타입스크립트란-무엇인가" tabindex="-1"><a class="header-anchor" href="#what-타입스크립트란-무엇인가"><span>What (타입스크립트란 무엇인가?)</span></a></h3><p>TypeScript는 Microsoft에서 개발한 오픈 소스 프로그래밍 언어로, JavaScript의 슈퍼셋입니다. 즉, 모든 JavaScript 코드는 유효한 TypeScript 코드입니다. TypeScript는 다음과 같은 특징을 가집니다:</p><ul><li>정적 타입 지원</li><li>클래스 기반 객체 지향 프로그래밍</li><li>모듈 시스템</li><li>ES6+ 기능 지원</li></ul><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// TypeScript 예시</span></span>
<span class="line"><span class="token keyword">let</span> greeting<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, TypeScript!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="why-왜-타입스크립트를-사용해야-하는가" tabindex="-1"><a class="header-anchor" href="#why-왜-타입스크립트를-사용해야-하는가"><span>Why (왜 타입스크립트를 사용해야 하는가?)</span></a></h3><ol><li>향상된 개발자 경험: <ul><li>코드 자동 완성 및 IntelliSense 지원</li><li>리팩토링 시 더 안전하고 효율적인 작업 가능</li></ul></li><li>오류 조기 발견: <ul><li>컴파일 시점에 타입 관련 오류 감지</li><li>런타임 오류 감소</li></ul></li><li>더 나은 코드 문서화: <ul><li>타입 정의를 통한 자체 문서화</li><li>코드 가독성 및 유지보수성 향상</li></ul></li><li>대규모 애플리케이션 개발에 적합: <ul><li>복잡한 시스템 설계에 유용한 타입 시스템</li><li>팀 협업 시 코드 품질 유지 용이</li></ul></li></ol><h3 id="don-t-언제-타입스크립트를-사용하지-말아야-하는가" tabindex="-1"><a class="header-anchor" href="#don-t-언제-타입스크립트를-사용하지-말아야-하는가"><span>Don&#39;t (언제 타입스크립트를 사용하지 말아야 하는가?)</span></a></h3><ol><li>소규모 또는 간단한 프로젝트: <ul><li>설정 및 컴파일 과정이 오버헤드가 될 수 있음</li><li>빠른 프로토타이핑이 필요한 경우</li></ul></li><li>팀이 TypeScript에 익숙하지 않은 경우: <ul><li>학습 곡선으로 인한 초기 생산성 저하 가능성</li></ul></li><li>런타임 성능이 극도로 중요한 경우: <ul><li>컴파일된 JavaScript가 약간의 오버헤드를 가질 수 있음</li><li>단, 대부분의 경우 성능 차이는 무시할 만한 수준</li></ul></li><li>특정 JavaScript 라이브러리와의 호환성 문제: <ul><li>타입 정의 파일이 없거나 불완전한 경우 사용이 어려울 수 있음</li></ul></li></ol><h2 id="_2-기본기" tabindex="-1"><a class="header-anchor" href="#_2-기본기"><span>2. 기본기</span></a></h2><h3 id="기본-타입" tabindex="-1"><a class="header-anchor" href="#기본-타입"><span>기본 타입</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// 기본 타입 예제</span></span>
<span class="line"><span class="token keyword">let</span> id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> company<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Acme Corp&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> isPublished<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 배열</span></span>
<span class="line"><span class="token keyword">let</span> ids<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 튜플</span></span>
<span class="line"><span class="token keyword">let</span> person<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Brad&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 열거형</span></span>
<span class="line"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span></span>
<span class="line">  Up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  Down<span class="token punctuation">,</span></span>
<span class="line">  Left<span class="token punctuation">,</span></span>
<span class="line">  Right<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="인터페이스와-타입-별칭" tabindex="-1"><a class="header-anchor" href="#인터페이스와-타입-별칭"><span>인터페이스와 타입 별칭</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// 인터페이스</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">UserInterface</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> user1<span class="token operator">:</span> UserInterface <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 타입 별칭</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pt<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="함수와-타입" tabindex="-1"><a class="header-anchor" href="#함수와-타입"><span>함수와 타입</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// 함수</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">addNum</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 선택적 매개변수</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> userId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> userId <span class="token operator">||</span> <span class="token string">&quot;Not signed in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 함수 오버로딩</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padding</span><span class="token punctuation">(</span>all<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padding</span><span class="token punctuation">(</span>topAndBottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> leftAndRight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padding</span><span class="token punctuation">(</span>top<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> bottom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">padding</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> c<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> d<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    b <span class="token operator">=</span> c <span class="token operator">=</span> d <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    c <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">    d <span class="token operator">=</span> b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    top<span class="token operator">:</span> a<span class="token punctuation">,</span></span>
<span class="line">    right<span class="token operator">:</span> b<span class="token punctuation">,</span></span>
<span class="line">    bottom<span class="token operator">:</span> c<span class="token punctuation">,</span></span>
<span class="line">    left<span class="token operator">:</span> d</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭" tabindex="-1"><a class="header-anchor" href="#제네릭"><span>제네릭</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// 제네릭 함수</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>items <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> numArray <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> strArray <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 제네릭 인터페이스</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> arg<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="타입-추론과-타입-단언" tabindex="-1"><a class="header-anchor" href="#타입-추론과-타입-단언"><span>타입 추론과 타입 단언</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// 타입 추론</span></span>
<span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// TypeScript가 x를 number로 추론</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 타입 단언</span></span>
<span class="line"><span class="token keyword">let</span> someValue<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;this is a string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> strLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-타입-유틸리티" tabindex="-1"><a class="header-anchor" href="#_3-타입-유틸리티"><span>3. 타입 유틸리티</span></a></h2><p>TypeScript는 복잡한 타입을 쉽게 조작할 수 있는 여러 유틸리티 타입을 제공합니다. 이들은 실제 개발 상황에서 매우 유용하게 사용됩니다. 주요 유틸리티 타입과 그 사용 예를 살펴보겠습니다.</p><h3 id="partial-t" tabindex="-1"><a class="header-anchor" href="#partial-t"><span><code>Partial&lt;T&gt;</code></span></a></h3><p>모든 속성을 선택적으로 만듭니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 모든 필드를 업데이트해야 함</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 일부 필드만 업데이트 가능</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 유효</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="required-t" tabindex="-1"><a class="header-anchor" href="#required-t"><span><code>Required&lt;T&gt;</code></span></a></h3><p>모든 속성을 필수로 만듭니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">  debug<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">RequiredConfig</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Config<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 결과: { debug: boolean; timeout: number; }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> config<span class="token operator">:</span> RequiredConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  debug<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  timeout<span class="token operator">:</span> <span class="token number">3000</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 모든 필드 필수</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pick-t-k" tabindex="-1"><a class="header-anchor" href="#pick-t-k"><span><code>Pick&lt;T, K&gt;</code></span></a></h3><p>특정 속성만 선택합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ProductPreview</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Product<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;price&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 결과: { name: string; price: number; }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> preview<span class="token operator">:</span> ProductPreview <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;Laptop&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  price<span class="token operator">:</span> <span class="token number">1000</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omit-t-k" tabindex="-1"><a class="header-anchor" href="#omit-t-k"><span><code>Omit&lt;T, K&gt;</code></span></a></h3><p>특정 속성을 제외합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">PublicUser</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 결과: { id: number; username: string; }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> publicInfo<span class="token operator">:</span> PublicUser <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  username<span class="token operator">:</span> <span class="token string">&quot;john_doe&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="record-k-t" tabindex="-1"><a class="header-anchor" href="#record-k-t"><span><code>Record&lt;K, T&gt;</code></span></a></h3><p>키-값 쌍의 타입을 정의합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">const</span> fruitInventory <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  apple<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  banana<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">  orange<span class="token operator">:</span> <span class="token number">15</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Fruit</span> <span class="token operator">=</span> <span class="token string">&#39;apple&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;banana&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Stock</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>Fruit<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> fruitInventory<span class="token operator">:</span> Stock <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  apple<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  banana<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">  orange<span class="token operator">:</span> <span class="token number">15</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="readonly-t" tabindex="-1"><a class="header-anchor" href="#readonly-t"><span><code>Readonly&lt;T&gt;</code></span></a></h3><p>모든 속성을 읽기 전용으로 만듭니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">  apiKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  timeout<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ReadonlyConfig</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Config<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> config<span class="token operator">:</span> ReadonlyConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  apiKey<span class="token operator">:</span> <span class="token string">&quot;my-secret-key&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  timeout<span class="token operator">:</span> <span class="token number">3000</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// config.apiKey = &quot;new-key&quot;; // 오류: 읽기 전용 속성</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="returntype-t" tabindex="-1"><a class="header-anchor" href="#returntype-t"><span><code>ReturnType&lt;T&gt;</code></span></a></h3><p>함수의 반환 타입을 추출합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fetchUser<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 결과: { id: number; name: string; age: number; }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> user<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token number">28</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parameters-t" tabindex="-1"><a class="header-anchor" href="#parameters-t"><span><code>Parameters&lt;T&gt;</code></span></a></h3><p>함수의 매개변수 타입을 튜플로 추출합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">! You are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">GreetParams</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> greet<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 결과: [string, number]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> params<span class="token operator">:</span> GreetParams <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="실제-사용-예제-복합-유틸리티-타입" tabindex="-1"><a class="header-anchor" href="#실제-사용-예제-복합-유틸리티-타입"><span>실제 사용 예제: 복합 유틸리티 타입</span></a></h3><p>여러 유틸리티 타입을 조합하여 복잡한 타입을 만들 수 있습니다:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  isAdmin<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 관리자용 사용자 정보 타입 (비밀번호 제외, 모든 필드 읽기 전용)</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AdminSafeUser</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 사용자 생성 시 필요한 정보 타입 (ID 제외, 관리자 여부 선택적)</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">CreateUserDto</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> Partial<span class="token operator">&lt;</span>Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;isAdmin&#39;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>userData<span class="token operator">:</span> CreateUserDto<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 사용자 생성 로직</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  email<span class="token operator">:</span> <span class="token string">&quot;john@example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  password<span class="token operator">:</span> <span class="token string">&quot;securepassword123&quot;</span></span>
<span class="line">  <span class="token comment">// isAdmin은 선택적</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이러한 타입 유틸리티들을 활용하면 코드의 타입 안정성을 높이고, 재사용 가능한 타입을 쉽게 정의할 수 있습니다. 실제 프로젝트에서 이들을 적절히 조합하여 사용하면 더 견고하고 유지보수가 쉬운 코드를 작성할 수 있습니다.</p><h2 id="_4-타입-추론-심화" tabindex="-1"><a class="header-anchor" href="#_4-타입-추론-심화"><span>4. 타입 추론 심화</span></a></h2><p>TypeScript의 타입 추론 기능을 잘 활용하면 명시적인 타입 선언을 줄이면서도 타입 안정성을 유지할 수 있습니다. 다음은 타입 추론을 적극적으로 활용하는 예제들입니다.</p><h3 id="변수-초기화를-통한-타입-추론" tabindex="-1"><a class="header-anchor" href="#변수-초기화를-통한-타입-추론"><span>변수 초기화를 통한 타입 추론</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// 명시적 타입 선언 없이도 TypeScript가 타입을 추론합니다.</span></span>
<span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// string으로 추론</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment">// number로 추론</span></span>
<span class="line"><span class="token keyword">let</span> isStudent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// boolean으로 추론</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 배열의 경우 요소 타입을 추론합니다.</span></span>
<span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// number[]로 추론</span></span>
<span class="line"><span class="token keyword">let</span> mixed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// (string | number)[]로 추론</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="함수-반환-타입-추론" tabindex="-1"><a class="header-anchor" href="#함수-반환-타입-추론"><span>함수 반환 타입 추론</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token comment">// 반환 타입이 number로 추론됨</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>  <span class="token comment">// 반환 타입이 string으로 추론됨</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="객체-리터럴과-타입-추론" tabindex="-1"><a class="header-anchor" href="#객체-리터럴과-타입-추론"><span>객체 리터럴과 타입 추론</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token comment">// 객체 리터럴의 속성 타입이 자동으로 추론됩니다.</span></span>
<span class="line"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    isAdmin<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    roles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;editor&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// user의 타입은 다음과 같이 추론됩니다:</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//     id: number;</span></span>
<span class="line"><span class="token comment">//     name: string;</span></span>
<span class="line"><span class="token comment">//     age: number;</span></span>
<span class="line"><span class="token comment">//     isAdmin: boolean;</span></span>
<span class="line"><span class="token comment">//     roles: string[];</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭과-타입-추론" tabindex="-1"><a class="header-anchor" href="#제네릭과-타입-추론"><span>제네릭과 타입 추론</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> arg<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">&quot;myString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// output의 타입이 string으로 추론됨</span></span>
<span class="line"><span class="token keyword">let</span> numOutput <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// numOutput의 타입이 number로 추론됨</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="콜백-함수의-매개변수-타입-추론" tabindex="-1"><a class="header-anchor" href="#콜백-함수의-매개변수-타입-추론"><span>콜백 함수의 매개변수 타입 추론</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// item의 타입이 number로 추론됨</span></span>
<span class="line">numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 명시적 타입 선언 없이도 value의 타입이 number로 추론됨</span></span>
<span class="line"><span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="구조-분해-할당과-타입-추론" tabindex="-1"><a class="header-anchor" href="#구조-분해-할당과-타입-추론"><span>구조 분해 할당과 타입 추론</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// destructured의 타입이 { x: number, y: number }로 추론됨</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">printCoord</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Coordinate: (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">printCoord</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="조건부-타입과-타입-추론" tabindex="-1"><a class="header-anchor" href="#조건부-타입과-타입-추론"><span>조건부 타입과 타입 추론</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 타입 인수를 명시적으로 지정하지 않아도 TypeScript가 추론</span></span>
<span class="line"><span class="token keyword">const</span> isNumberArray<span class="token operator">:</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// true로 추론</span></span>
<span class="line"><span class="token keyword">const</span> isStringArray<span class="token operator">:</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// false로 추론</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="복합-예제-타입-추론을-활용한-유틸리티-함수" tabindex="-1"><a class="header-anchor" href="#복합-예제-타입-추론을-활용한-유틸리티-함수"><span>복합 예제: 타입 추론을 활용한 유틸리티 함수</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createUser</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>defaults<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> override<span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>defaults<span class="token punctuation">,</span> <span class="token operator">...</span>override <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> defaultUser <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&quot;Guest&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    isAdmin<span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// user의 타입이 { name: string; age: number; isAdmin: boolean; }로 추론됨</span></span>
<span class="line"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">createUser</span><span class="token punctuation">(</span>defaultUser<span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { name: &quot;John&quot;, age: 30, isAdmin: false }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-제네릭-심화" tabindex="-1"><a class="header-anchor" href="#_5-제네릭-심화"><span>5. 제네릭 심화</span></a></h2><p>제네릭을 사용하면 타입을 마치 함수의 매개변수처럼 사용할 수 있어, 재사용 가능하고 유연한 코드를 작성할 수 있습니다. 다음은 제네릭을 적극적으로 활용하는 다양한 예제들입니다.</p><h3 id="기본-제네릭-함수" tabindex="-1"><a class="header-anchor" href="#기본-제네릭-함수"><span>기본 제네릭 함수</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> arg<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> output1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;myString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 타입을 명시적으로 지정</span></span>
<span class="line"><span class="token keyword">let</span> output2 <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 타입 추론 사용</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭-인터페이스" tabindex="-1"><a class="header-anchor" href="#제네릭-인터페이스"><span>제네릭 인터페이스</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭-클래스" tabindex="-1"><a class="header-anchor" href="#제네릭-클래스"><span>제네릭 클래스</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span>zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token function-variable function">addFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> zeroValue<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> addFn<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> stringNumeric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span>zeroValue<span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;test&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> numberNumeric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberNumeric<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 15</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭-제약조건" tabindex="-1"><a class="header-anchor" href="#제네릭-제약조건"><span>제네릭 제약조건</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span></span>
<span class="line">    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 이제 .length 속성이 있다고 확신할 수 있습니다</span></span>
<span class="line">    <span class="token keyword">return</span> arg<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 성공</span></span>
<span class="line"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 성공</span></span>
<span class="line"><span class="token comment">// loggingIdentity(3);  // 오류, number에는 .length가 없습니다</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭과-타입-추론을-활용한-factory-함수" tabindex="-1"><a class="header-anchor" href="#제네릭과-타입-추론을-활용한-factory-함수"><span>제네릭과 타입 추론을 활용한 Factory 함수</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Factory<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BeeKeeper</span> <span class="token punctuation">{</span></span>
<span class="line">    hasMask<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ZooKeeper</span> <span class="token punctuation">{</span></span>
<span class="line">    nametag<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Mikle&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    numLegs<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bee</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    keeper<span class="token operator">:</span> BeeKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeeKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    keeper<span class="token operator">:</span> ZooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> bee <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>Bee<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lion <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>Lion<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭-타입-매핑" tabindex="-1"><a class="header-anchor" href="#제네릭-타입-매핑"><span>제네릭 타입 매핑</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Nullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NullableUser</span> <span class="token operator">=</span> Nullable<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 결과: { name: string | null; age: number | null; }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="조건부-타입과-제네릭" tabindex="-1"><a class="header-anchor" href="#조건부-타입과-제네릭"><span>조건부 타입과 제네릭</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">NonNullable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">null</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 결과: string | number</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="복합-예제-제네릭을-활용한-상태-관리-시스템" tabindex="-1"><a class="header-anchor" href="#복합-예제-제네릭을-활용한-상태-관리-시스템"><span>복합 예제: 제네릭을 활용한 상태 관리 시스템</span></a></h3><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">StateManager<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> state<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> initialState<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">S</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token operator">...</span>newState <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">UserState</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    isLoggedIn<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userStateManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateManager<span class="token operator">&lt;</span>UserState<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&quot;Guest&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    isLoggedIn<span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userStateManager<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { name: &quot;Guest&quot;, age: 0, isLoggedIn: false }</span></span>
<span class="line"></span>
<span class="line">userStateManager<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userStateManager<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { name: &quot;John&quot;, age: 30, isLoggedIn: false }</span></span>
<span class="line"></span>
<span class="line">userStateManager<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isLoggedIn<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userStateManager<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { name: &quot;John&quot;, age: 30, isLoggedIn: true }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-react와-typescript" tabindex="-1"><a class="header-anchor" href="#_6-react와-typescript"><span>6. React와 TypeScript</span></a></h2><p>React와 TypeScript를 함께 사용할 때 특히 유용한 타입 유틸리티들을 소개합니다. 이들은 컴포넌트와 props를 더 정확하고 유연하게 타입화하는 데 도움을 줍니다.</p><h3 id="componentprops-t" tabindex="-1"><a class="header-anchor" href="#componentprops-t"><span><code>ComponentProps&lt;T&gt;</code></span></a></h3><p>컴포넌트의 props 타입을 추출합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;some-ui-library&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ButtonProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 다른 모든 props를 수동으로 정의해야 함</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;some-ui-library&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ButtonProps</span> <span class="token operator">=</span> ComponentProps<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Button<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="propswithchildren-p" tabindex="-1"><a class="header-anchor" href="#propswithchildren-p"><span><code>PropsWithChildren&lt;P&gt;</code></span></a></h3><p>props 타입에 children을 추가합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CardProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> PropsWithChildren <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">CardProps</span> <span class="token operator">=</span> PropsWithChildren<span class="token operator">&lt;</span><span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cssproperties" tabindex="-1"><a class="header-anchor" href="#cssproperties"><span>CSSProperties</span></a></h3><p>인라인 스타일 객체의 타입을 정의합니다.</p><p><strong>AS-IS:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">StyledDiv</span><span class="token punctuation">(</span><span class="token punctuation">{</span> style <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TO-BE:</strong></p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CSSProperties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">StyledDiv</span><span class="token punctuation">(</span><span class="token punctuation">{</span> style <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> CSSProperties <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-종합-예제-5가지" tabindex="-1"><a class="header-anchor" href="#_7-종합-예제-5가지"><span>7. 종합 예제 5가지</span></a></h2><h3 id="재귀적-타입을-이용한-json-파서" tabindex="-1"><a class="header-anchor" href="#재귀적-타입을-이용한-json-파서"><span>재귀적 타입을 이용한 JSON 파서</span></a></h3><p>이 예제는 TypeScript의 재귀적 타입을 사용하여 JSON 구조를 타입으로 표현합니다.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">JSONValue</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token builtin">number</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token builtin">boolean</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token operator">|</span> JSONValue<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> JSONValue <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">JSONObject</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> JSONValue <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">parseJSON</span><span class="token punctuation">(</span>json<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> JSONValue <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">stringifyJSON</span><span class="token punctuation">(</span>value<span class="token operator">:</span> JSONValue<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 사용 예</span></span>
<span class="line"><span class="token keyword">const</span> jsonString <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30,&quot;isStudent&quot;:false,&quot;hobbies&quot;:[&quot;reading&quot;,&quot;coding&quot;]}&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token function">parseJSON</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> stringified <span class="token operator">=</span> <span class="token function">stringifyJSON</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringified<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="조건부-타입을-이용한-유틸리티-함수" tabindex="-1"><a class="header-anchor" href="#조건부-타입을-이용한-유틸리티-함수"><span>조건부 타입을 이용한 유틸리티 함수</span></a></h3><p>이 예제는 조건부 타입을 사용하여 객체의 특정 속성만 선택하는 유틸리티 함수를 구현합니다.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">pickByType</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token keyword">type</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token keyword">keyof</span> PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token constant">U</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result <span class="token keyword">as</span> PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 사용 예</span></span>
<span class="line"><span class="token keyword">const</span> mixedObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">  birthDate<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;1990-01-01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token punctuation">{</span> street<span class="token operator">:</span> <span class="token string">&quot;Main St&quot;</span><span class="token punctuation">,</span> city<span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> dateProperties <span class="token operator">=</span> <span class="token function">pickByType</span><span class="token punctuation">(</span>mixedObject<span class="token punctuation">,</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dateProperties<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { birthDate: Date }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="제네릭과-매핑된-타입을-이용한-깊은-읽기-전용-변환기" tabindex="-1"><a class="header-anchor" href="#제네릭과-매핑된-타입을-이용한-깊은-읽기-전용-변환기"><span>제네릭과 매핑된 타입을 이용한 깊은 읽기 전용 변환기</span></a></h3><p>이 예제는 제네릭과 매핑된 타입을 사용하여 객체를 깊은 수준에서 읽기 전용으로 변환합니다.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> DeepReadonlyArray<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">?</span> DeepReadonlyObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">:</span></span>
<span class="line">  <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">DeepReadonlyArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ReadonlyArray<span class="token operator">&lt;</span>DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">DeepReadonlyObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">makeDeepReadonly</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> obj <span class="token keyword">as</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 사용 예</span></span>
<span class="line"><span class="token keyword">const</span> mutableObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    street<span class="token operator">:</span> <span class="token string">&quot;Main St&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    city<span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;reading&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;coding&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> readonlyObject <span class="token operator">=</span> <span class="token function">makeDeepReadonly</span><span class="token punctuation">(</span>mutableObject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// readonlyObject.name = &quot;Jane&quot;; // 오류</span></span>
<span class="line"><span class="token comment">// readonlyObject.address.city = &quot;Boston&quot;; // 오류</span></span>
<span class="line"><span class="token comment">// readonlyObject.hobbies.push(&quot;gaming&quot;); // 오류</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="인터섹션-타입과-유니온-타입을-이용한-복잡한-상태-관리" tabindex="-1"><a class="header-anchor" href="#인터섹션-타입과-유니온-타입을-이용한-복잡한-상태-관리"><span>인터섹션 타입과 유니온 타입을 이용한 복잡한 상태 관리</span></a></h3><p>이 예제는 인터섹션 타입과 유니온 타입을 사용하여 복잡한 애플리케이션 상태를 모델링합니다.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UserRole</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;user&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;guest&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">BaseState</span> <span class="token punctuation">{</span></span>
<span class="line">  isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  error<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">GuestState</span> <span class="token keyword">extends</span> <span class="token class-name">BaseState</span> <span class="token punctuation">{</span></span>
<span class="line">  userRole<span class="token operator">:</span> <span class="token string">&quot;guest&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">UserState</span> <span class="token keyword">extends</span> <span class="token class-name">BaseState</span> <span class="token punctuation">{</span></span>
<span class="line">  userRole<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">AdminState</span> <span class="token keyword">extends</span> <span class="token class-name">BaseState</span> <span class="token punctuation">{</span></span>
<span class="line">  userRole<span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  adminToken<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AppState</span> <span class="token operator">=</span> GuestState <span class="token operator">|</span> UserState <span class="token operator">|</span> AdminState<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">updateState</span><span class="token punctuation">(</span>currentState<span class="token operator">:</span> AppState<span class="token punctuation">,</span> update<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>AppState<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> AppState <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>currentState<span class="token punctuation">,</span> <span class="token operator">...</span>update <span class="token punctuation">}</span> <span class="token keyword">as</span> AppState<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 사용 예</span></span>
<span class="line"><span class="token keyword">let</span> state<span class="token operator">:</span> AppState <span class="token operator">=</span> <span class="token punctuation">{</span> isLoading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> userRole<span class="token operator">:</span> <span class="token string">&quot;guest&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">state <span class="token operator">=</span> <span class="token function">updateState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> isLoading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> userRole<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> username<span class="token operator">:</span> <span class="token string">&quot;john_doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">state <span class="token operator">=</span> <span class="token function">updateState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> userRole<span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> adminToken<span class="token operator">:</span> <span class="token string">&quot;secret_token&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="타입-추론과-제네릭을-이용한-함수-합성기" tabindex="-1"><a class="header-anchor" href="#타입-추론과-제네릭을-이용한-함수-합성기"><span>타입 추론과 제네릭을 이용한 함수 합성기</span></a></h3><p>이 예제는 타입 추론과 제네릭을 사용하여 함수 합성을 타입 안전하게 구현합니다.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Func<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">compose</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fn1<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">compose</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fn1<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">compose</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fn1<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> fn2<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">compose</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token punctuation">,</span> <span class="token constant">T3</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">  fn1<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  fn2<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">T3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  fn3<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 사용 예</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toUpperCase</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">exclaim</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> shout <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>exclaim<span class="token punctuation">,</span> toUpperCase<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;HELLO!&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">square</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> addAndSquare <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> add<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addAndSquare</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 49</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,146);function g(h,y){const s=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[a("이펙티브 타입스크립트: 동작 원리의 이해와 구체적인 조언 62가지"),p(s)])]),n("p",null,[n("a",k,[a("[8월 우아한테크세미나] 우아한 타입스크립트"),p(s)])]),n("p",null,[n("a",d,[a("타입스크립트에서 타입 프로그래밍하기: SmartEditor에서 타입을 다루는 방법 - Naver SmartStudio Blog"),p(s)])]),n("p",null,[n("a",v,[a("type-challenges/README.ko.md at main · type-challenges/type-challenges"),p(s)])]),n("p",null,[n("a",m,[a("[10분 테코톡] 시지프의 타입스크립트 도약하기"),p(s)])]),b])}const w=t(i,[["render",g],["__file","index.html.vue"]]),x=JSON.parse(`{"path":"/with-ai/typescript-a-to-z/","title":"Typescript A 부터 Z 까지","lang":"en-US","frontmatter":{"title":"Typescript A 부터 Z 까지","description":"typescript와 관련된 내용을 AI와 함께 정리한 내용입니다.","sidebarDepth":1,"date":"2024-7-23","tag":"typescript, with-ai"},"headers":[{"level":2,"title":"참고자료","slug":"참고자료","link":"#참고자료","children":[]},{"level":2,"title":"1. 타입스크립트 소개","slug":"_1-타입스크립트-소개","link":"#_1-타입스크립트-소개","children":[{"level":3,"title":"What (타입스크립트란 무엇인가?)","slug":"what-타입스크립트란-무엇인가","link":"#what-타입스크립트란-무엇인가","children":[]},{"level":3,"title":"Why (왜 타입스크립트를 사용해야 하는가?)","slug":"why-왜-타입스크립트를-사용해야-하는가","link":"#why-왜-타입스크립트를-사용해야-하는가","children":[]},{"level":3,"title":"Don't (언제 타입스크립트를 사용하지 말아야 하는가?)","slug":"don-t-언제-타입스크립트를-사용하지-말아야-하는가","link":"#don-t-언제-타입스크립트를-사용하지-말아야-하는가","children":[]}]},{"level":2,"title":"2. 기본기","slug":"_2-기본기","link":"#_2-기본기","children":[{"level":3,"title":"기본 타입","slug":"기본-타입","link":"#기본-타입","children":[]},{"level":3,"title":"인터페이스와 타입 별칭","slug":"인터페이스와-타입-별칭","link":"#인터페이스와-타입-별칭","children":[]},{"level":3,"title":"함수와 타입","slug":"함수와-타입","link":"#함수와-타입","children":[]},{"level":3,"title":"제네릭","slug":"제네릭","link":"#제네릭","children":[]},{"level":3,"title":"타입 추론과 타입 단언","slug":"타입-추론과-타입-단언","link":"#타입-추론과-타입-단언","children":[]}]},{"level":2,"title":"3. 타입 유틸리티","slug":"_3-타입-유틸리티","link":"#_3-타입-유틸리티","children":[{"level":3,"title":"Partial<T>","slug":"partial-t","link":"#partial-t","children":[]},{"level":3,"title":"Required<T>","slug":"required-t","link":"#required-t","children":[]},{"level":3,"title":"Pick<T, K>","slug":"pick-t-k","link":"#pick-t-k","children":[]},{"level":3,"title":"Omit<T, K>","slug":"omit-t-k","link":"#omit-t-k","children":[]},{"level":3,"title":"Record<K, T>","slug":"record-k-t","link":"#record-k-t","children":[]},{"level":3,"title":"Readonly<T>","slug":"readonly-t","link":"#readonly-t","children":[]},{"level":3,"title":"ReturnType<T>","slug":"returntype-t","link":"#returntype-t","children":[]},{"level":3,"title":"Parameters<T>","slug":"parameters-t","link":"#parameters-t","children":[]},{"level":3,"title":"실제 사용 예제: 복합 유틸리티 타입","slug":"실제-사용-예제-복합-유틸리티-타입","link":"#실제-사용-예제-복합-유틸리티-타입","children":[]}]},{"level":2,"title":"4. 타입 추론 심화","slug":"_4-타입-추론-심화","link":"#_4-타입-추론-심화","children":[{"level":3,"title":"변수 초기화를 통한 타입 추론","slug":"변수-초기화를-통한-타입-추론","link":"#변수-초기화를-통한-타입-추론","children":[]},{"level":3,"title":"함수 반환 타입 추론","slug":"함수-반환-타입-추론","link":"#함수-반환-타입-추론","children":[]},{"level":3,"title":"객체 리터럴과 타입 추론","slug":"객체-리터럴과-타입-추론","link":"#객체-리터럴과-타입-추론","children":[]},{"level":3,"title":"제네릭과 타입 추론","slug":"제네릭과-타입-추론","link":"#제네릭과-타입-추론","children":[]},{"level":3,"title":"콜백 함수의 매개변수 타입 추론","slug":"콜백-함수의-매개변수-타입-추론","link":"#콜백-함수의-매개변수-타입-추론","children":[]},{"level":3,"title":"구조 분해 할당과 타입 추론","slug":"구조-분해-할당과-타입-추론","link":"#구조-분해-할당과-타입-추론","children":[]},{"level":3,"title":"조건부 타입과 타입 추론","slug":"조건부-타입과-타입-추론","link":"#조건부-타입과-타입-추론","children":[]},{"level":3,"title":"복합 예제: 타입 추론을 활용한 유틸리티 함수","slug":"복합-예제-타입-추론을-활용한-유틸리티-함수","link":"#복합-예제-타입-추론을-활용한-유틸리티-함수","children":[]}]},{"level":2,"title":"5. 제네릭 심화","slug":"_5-제네릭-심화","link":"#_5-제네릭-심화","children":[{"level":3,"title":"기본 제네릭 함수","slug":"기본-제네릭-함수","link":"#기본-제네릭-함수","children":[]},{"level":3,"title":"제네릭 인터페이스","slug":"제네릭-인터페이스","link":"#제네릭-인터페이스","children":[]},{"level":3,"title":"제네릭 클래스","slug":"제네릭-클래스","link":"#제네릭-클래스","children":[]},{"level":3,"title":"제네릭 제약조건","slug":"제네릭-제약조건","link":"#제네릭-제약조건","children":[]},{"level":3,"title":"제네릭과 타입 추론을 활용한 Factory 함수","slug":"제네릭과-타입-추론을-활용한-factory-함수","link":"#제네릭과-타입-추론을-활용한-factory-함수","children":[]},{"level":3,"title":"제네릭 타입 매핑","slug":"제네릭-타입-매핑","link":"#제네릭-타입-매핑","children":[]},{"level":3,"title":"조건부 타입과 제네릭","slug":"조건부-타입과-제네릭","link":"#조건부-타입과-제네릭","children":[]},{"level":3,"title":"복합 예제: 제네릭을 활용한 상태 관리 시스템","slug":"복합-예제-제네릭을-활용한-상태-관리-시스템","link":"#복합-예제-제네릭을-활용한-상태-관리-시스템","children":[]}]},{"level":2,"title":"6. React와 TypeScript","slug":"_6-react와-typescript","link":"#_6-react와-typescript","children":[{"level":3,"title":"ComponentProps<T>","slug":"componentprops-t","link":"#componentprops-t","children":[]},{"level":3,"title":"PropsWithChildren<P>","slug":"propswithchildren-p","link":"#propswithchildren-p","children":[]},{"level":3,"title":"CSSProperties","slug":"cssproperties","link":"#cssproperties","children":[]}]},{"level":2,"title":"7. 종합 예제 5가지","slug":"_7-종합-예제-5가지","link":"#_7-종합-예제-5가지","children":[{"level":3,"title":"재귀적 타입을 이용한 JSON 파서","slug":"재귀적-타입을-이용한-json-파서","link":"#재귀적-타입을-이용한-json-파서","children":[]},{"level":3,"title":"조건부 타입을 이용한 유틸리티 함수","slug":"조건부-타입을-이용한-유틸리티-함수","link":"#조건부-타입을-이용한-유틸리티-함수","children":[]},{"level":3,"title":"제네릭과 매핑된 타입을 이용한 깊은 읽기 전용 변환기","slug":"제네릭과-매핑된-타입을-이용한-깊은-읽기-전용-변환기","link":"#제네릭과-매핑된-타입을-이용한-깊은-읽기-전용-변환기","children":[]},{"level":3,"title":"인터섹션 타입과 유니온 타입을 이용한 복잡한 상태 관리","slug":"인터섹션-타입과-유니온-타입을-이용한-복잡한-상태-관리","link":"#인터섹션-타입과-유니온-타입을-이용한-복잡한-상태-관리","children":[]},{"level":3,"title":"타입 추론과 제네릭을 이용한 함수 합성기","slug":"타입-추론과-제네릭을-이용한-함수-합성기","link":"#타입-추론과-제네릭을-이용한-함수-합성기","children":[]}]}],"git":{"updatedTime":1739734662000},"filePathRelative":"with-ai/typescript-a-to-z/README.md"}`);export{w as comp,x as data};
