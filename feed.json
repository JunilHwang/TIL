{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "개발자 황준일",
  "home_page_url": "https://junilhwang.github.io/TIL/TIL/",
  "feed_url": "https://junilhwang.github.io/TIL/TIL/feed.json",
  "description": "Today I leanred",
  "items": [
    {
      "title": "Typescript A 부터 Z 까지",
      "url": "https://junilhwang.github.io/TIL/TIL/with-ai/typescript-a-to-z/",
      "id": "https://junilhwang.github.io/TIL/TIL/with-ai/typescript-a-to-z/",
      "summary": "typescript와 관련된 내용을 AI와 함께 정리한 내용입니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>본 게시물은 AI(Claude)와 함께 작성하였습니다.</p>\n</div>\n<h2>참고자료</h2>\n<p><a href=\"https://blog.insightbook.co.kr/2021/06/10/%E3%80%8A%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC%EC%9D%98-%EC%9D%B4%ED%95%B4%EC%99%80-%EA%B5%AC%EC%B2%B4/\" target=\"_blank\" rel=\"noopener noreferrer\">이펙티브 타입스크립트: 동작 원리의 이해와 구체적인 조언 62가지</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=ViS8DLd6o-E\" target=\"_blank\" rel=\"noopener noreferrer\">[8월 우아한테크세미나] 우아한 타입스크립트</a></p>\n<p><a href=\"https://smartstudio.tech/type-programming/\" target=\"_blank\" rel=\"noopener noreferrer\">타입스크립트에서 타입 프로그래밍하기: SmartEditor에서 타입을 다루는 방법 - Naver SmartStudio Blog</a></p>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/main/README.ko.md\" target=\"_blank\" rel=\"noopener noreferrer\">type-challenges/README.ko.md at main · type-challenges/type-challenges</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=kMuJz6N-Grw\" target=\"_blank\" rel=\"noopener noreferrer\">[10분 테코톡] 시지프의 타입스크립트 도약하기</a></p>\n<h2>1. 타입스크립트 소개</h2>\n<h3>What (타입스크립트란 무엇인가?)</h3>\n<p>TypeScript는 Microsoft에서 개발한 오픈 소스 프로그래밍 언어로, JavaScript의 슈퍼셋입니다. 즉, 모든 JavaScript 코드는 유효한 TypeScript 코드입니다. TypeScript는 다음과 같은 특징을 가집니다:</p>\n<ul>\n<li>정적 타입 지원</li>\n<li>클래스 기반 객체 지향 프로그래밍</li>\n<li>모듈 시스템</li>\n<li>ES6+ 기능 지원</li>\n</ul>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// TypeScript 예시</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> greeting<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, TypeScript!\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>Why (왜 타입스크립트를 사용해야 하는가?)</h3>\n<ol>\n<li>향상된 개발자 경험:</li>\n</ol>\n<ul>\n<li>코드 자동 완성 및 IntelliSense 지원</li>\n<li>리팩토링 시 더 안전하고 효율적인 작업 가능</li>\n</ul>\n<ol start=\"2\">\n<li>오류 조기 발견:</li>\n</ol>\n<ul>\n<li>컴파일 시점에 타입 관련 오류 감지</li>\n<li>런타임 오류 감소</li>\n</ul>\n<ol start=\"3\">\n<li>더 나은 코드 문서화:</li>\n</ol>\n<ul>\n<li>타입 정의를 통한 자체 문서화</li>\n<li>코드 가독성 및 유지보수성 향상</li>\n</ul>\n<ol start=\"4\">\n<li>대규모 애플리케이션 개발에 적합:</li>\n</ol>\n<ul>\n<li>복잡한 시스템 설계에 유용한 타입 시스템</li>\n<li>팀 협업 시 코드 품질 유지 용이</li>\n</ul>\n<h3>Don't (언제 타입스크립트를 사용하지 말아야 하는가?)</h3>\n<ol>\n<li>소규모 또는 간단한 프로젝트:</li>\n</ol>\n<ul>\n<li>설정 및 컴파일 과정이 오버헤드가 될 수 있음</li>\n<li>빠른 프로토타이핑이 필요한 경우</li>\n</ul>\n<ol start=\"2\">\n<li>팀이 TypeScript에 익숙하지 않은 경우:</li>\n</ol>\n<ul>\n<li>학습 곡선으로 인한 초기 생산성 저하 가능성</li>\n</ul>\n<ol start=\"3\">\n<li>런타임 성능이 극도로 중요한 경우:</li>\n</ol>\n<ul>\n<li>컴파일된 JavaScript가 약간의 오버헤드를 가질 수 있음</li>\n<li>단, 대부분의 경우 성능 차이는 무시할 만한 수준</li>\n</ul>\n<ol start=\"4\">\n<li>특정 JavaScript 라이브러리와의 호환성 문제:</li>\n</ol>\n<ul>\n<li>타입 정의 파일이 없거나 불완전한 경우 사용이 어려울 수 있음</li>\n</ul>\n<h2>2. 기본기</h2>\n<h3>기본 타입</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// 기본 타입 예제</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> company<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Acme Corp\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> isPublished<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 배열</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> ids<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 튜플</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> person<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Brad\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 열거형</span></span>\n<span class=\"line\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  Up <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  Down<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  Left<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  Right<span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>인터페이스와 타입 별칭</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// 인터페이스</span></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserInterface</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">readonly</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> user1<span class=\"token operator\">:</span> UserInterface <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 타입 별칭</span></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> pt<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>함수와 타입</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// 함수</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 선택적 매개변수</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> userId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> userId <span class=\"token operator\">||</span> <span class=\"token string\">\"Not signed in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 함수 오버로딩</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>all<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>topAndBottom<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> leftAndRight<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> bottom<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> d <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    b <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> d <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    d <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    top<span class=\"token operator\">:</span> a<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    right<span class=\"token operator\">:</span> b<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    bottom<span class=\"token operator\">:</span> c<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    left<span class=\"token operator\">:</span> d</span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// 제네릭 함수</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getArray</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>items <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> numArray <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">getArray</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> strArray <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">getArray</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 제네릭 인터페이스</span></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> myIdentity<span class=\"token operator\">:</span> GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> identity<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>타입 추론과 타입 단언</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// 타입 추론</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeScript가 x를 number로 추론</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 타입 단언</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>3. 타입 유틸리티</h2>\n<p>TypeScript는 복잡한 타입을 쉽게 조작할 수 있는 여러 유틸리티 타입을 제공합니다. 이들은 실제 개발 상황에서 매우 유용하게 사용됩니다. 주요 유틸리티 타입과 그 사용 예를 살펴보겠습니다.</p>\n<h3><code>Partial&lt;T&gt;</code></h3>\n<p>모든 속성을 선택적으로 만듭니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 모든 필드를 업데이트해야 함</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 일부 필드만 업데이트 가능</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 유효</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>Required&lt;T&gt;</code></h3>\n<p>모든 속성을 필수로 만듭니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  debug<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  timeout<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredConfig</span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span>Config<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 결과: { debug: boolean; timeout: number; }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> RequiredConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  debug<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  timeout<span class=\"token operator\">:</span> <span class=\"token number\">3000</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 모든 필드 필수</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>Pick&lt;T, K&gt;</code></h3>\n<p>특정 속성만 선택합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  price<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ProductPreview</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Product<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'price'</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 결과: { name: string; price: number; }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> preview<span class=\"token operator\">:</span> ProductPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Laptop\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  price<span class=\"token operator\">:</span> <span class=\"token number\">1000</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>Omit&lt;T, K&gt;</code></h3>\n<p>특정 속성을 제외합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PublicUser</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 결과: { id: number; username: string; }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> publicInfo<span class=\"token operator\">:</span> PublicUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  username<span class=\"token operator\">:</span> <span class=\"token string\">\"john_doe\"</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>Record&lt;K, T&gt;</code></h3>\n<p>키-값 쌍의 타입을 정의합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> fruitInventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  apple<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  banana<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  orange<span class=\"token operator\">:</span> <span class=\"token number\">15</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fruit</span> <span class=\"token operator\">=</span> <span class=\"token string\">'apple'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'banana'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Stock</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span>Fruit<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> fruitInventory<span class=\"token operator\">:</span> Stock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  apple<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  banana<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  orange<span class=\"token operator\">:</span> <span class=\"token number\">15</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>Readonly&lt;T&gt;</code></h3>\n<p>모든 속성을 읽기 전용으로 만듭니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  apiKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  timeout<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReadonlyConfig</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>Config<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> ReadonlyConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  apiKey<span class=\"token operator\">:</span> <span class=\"token string\">\"my-secret-key\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  timeout<span class=\"token operator\">:</span> <span class=\"token number\">3000</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// config.apiKey = \"new-key\"; // 오류: 읽기 전용 속성</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>ReturnType&lt;T&gt;</code></h3>\n<p>함수의 반환 타입을 추출합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> fetchUser<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 결과: { id: number; name: string; age: number; }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  age<span class=\"token operator\">:</span> <span class=\"token number\">28</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>Parameters&lt;T&gt;</code></h3>\n<p>함수의 매개변수 타입을 튜플로 추출합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">! You are </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">GreetParams</span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> greet<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 결과: [string, number]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> params<span class=\"token operator\">:</span> GreetParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>실제 사용 예제: 복합 유틸리티 타입</h3>\n<p>여러 유틸리티 타입을 조합하여 복잡한 타입을 만들 수 있습니다:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  isAdmin<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 관리자용 사용자 정보 타입 (비밀번호 제외, 모든 필드 읽기 전용)</span></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AdminSafeUser</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>Omit<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 사용자 생성 시 필요한 정보 타입 (ID 제외, 관리자 여부 선택적)</span></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CreateUserDto</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span> Partial<span class=\"token operator\">&lt;</span>Pick<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> <span class=\"token string\">'isAdmin'</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>userData<span class=\"token operator\">:</span> CreateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 사용자 생성 로직</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  email<span class=\"token operator\">:</span> <span class=\"token string\">\"john@example.com\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  password<span class=\"token operator\">:</span> <span class=\"token string\">\"securepassword123\"</span></span>\n<span class=\"line\">  <span class=\"token comment\">// isAdmin은 선택적</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이러한 타입 유틸리티들을 활용하면 코드의 타입 안정성을 높이고, 재사용 가능한 타입을 쉽게 정의할 수 있습니다. 실제 프로젝트에서 이들을 적절히 조합하여 사용하면 더 견고하고 유지보수가 쉬운 코드를 작성할 수 있습니다.</p>\n<h2>4. 타입 추론 심화</h2>\n<p>TypeScript의 타입 추론 기능을 잘 활용하면 명시적인 타입 선언을 줄이면서도 타입 안정성을 유지할 수 있습니다. 다음은 타입 추론을 적극적으로 활용하는 예제들입니다.</p>\n<h3>변수 초기화를 통한 타입 추론</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// 명시적 타입 선언 없이도 TypeScript가 타입을 추론합니다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string으로 추론</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number로 추론</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> isStudent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// boolean으로 추론</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 배열의 경우 요소 타입을 추론합니다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number[]로 추론</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (string | number)[]로 추론</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>함수 반환 타입 추론</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 반환 타입이 number로 추론됨</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 반환 타입이 string으로 추론됨</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>객체 리터럴과 타입 추론</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// 객체 리터럴의 속성 타입이 자동으로 추론됩니다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    name<span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"editor\"</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// user의 타입은 다음과 같이 추론됩니다:</span></span>\n<span class=\"line\"><span class=\"token comment\">// {</span></span>\n<span class=\"line\"><span class=\"token comment\">//     id: number;</span></span>\n<span class=\"line\"><span class=\"token comment\">//     name: string;</span></span>\n<span class=\"line\"><span class=\"token comment\">//     age: number;</span></span>\n<span class=\"line\"><span class=\"token comment\">//     isAdmin: boolean;</span></span>\n<span class=\"line\"><span class=\"token comment\">//     roles: string[];</span></span>\n<span class=\"line\"><span class=\"token comment\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭과 타입 추론</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// output의 타입이 string으로 추론됨</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> numOutput <span class=\"token operator\">=</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// numOutput의 타입이 number로 추론됨</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>콜백 함수의 매개변수 타입 추론</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// item의 타입이 number로 추론됨</span></span>\n<span class=\"line\">numbers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 명시적 타입 선언 없이도 value의 타입이 number로 추론됨</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> doubled <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=&gt;</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>구조 분해 할당과 타입 추론</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// destructured의 타입이 { x: number, y: number }로 추론됨</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Coordinate: (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>조건부 타입과 타입 추론</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 타입 인수를 명시적으로 지정하지 않아도 TypeScript가 추론</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> isNumberArray<span class=\"token operator\">:</span> IsArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true로 추론</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> isStringArray<span class=\"token operator\">:</span> IsArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false로 추론</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>복합 예제: 타입 추론을 활용한 유틸리티 함수</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">createUser</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>defaults<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> override<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>defaults<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>override <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> defaultUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Guest\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    age<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// user의 타입이 { name: string; age: number; isAdmin: boolean; }로 추론됨</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>defaultUser<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { name: \"John\", age: 30, isAdmin: false }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>5. 제네릭 심화</h2>\n<p>제네릭을 사용하면 타입을 마치 함수의 매개변수처럼 사용할 수 있어, 재사용 가능하고 유연한 코드를 작성할 수 있습니다. 다음은 제네릭을 적극적으로 활용하는 다양한 예제들입니다.</p>\n<h3>기본 제네릭 함수</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> output1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 타입을 명시적으로 지정</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> output2 <span class=\"token operator\">=</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 타입 추론 사용</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭 인터페이스</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> myIdentity<span class=\"token operator\">:</span> GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> identity<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭 클래스</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericNumber<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    zeroValue<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>zeroValue<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">addFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>zeroValue <span class=\"token operator\">=</span> zeroValue<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> addFn<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> stringNumeric <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericNumber<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringNumeric<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stringNumeric<span class=\"token punctuation\">.</span>zeroValue<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"test\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> numberNumeric <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericNumber<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numberNumeric<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 15</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭 제약조건</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lengthwise</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">loggingIdentity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Lengthwise<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 이제 .length 속성이 있다고 확신할 수 있습니다</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">loggingIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 성공</span></span>\n<span class=\"line\"><span class=\"token function\">loggingIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 성공</span></span>\n<span class=\"line\"><span class=\"token comment\">// loggingIdentity(3);  // 오류, number에는 .length가 없습니다</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭과 타입 추론을 활용한 Factory 함수</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">create</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>Factory<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BeeKeeper</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    hasMask<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ZooKeeper</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    nametag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Mikle\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    numLegs<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    keeper<span class=\"token operator\">:</span> BeeKeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeeKeeper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lion</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    keeper<span class=\"token operator\">:</span> ZooKeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> bee <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Bee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> lion <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Lion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭 타입 매핑</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Nullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NullableUser</span> <span class=\"token operator\">=</span> Nullable<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 결과: { name: string | null; age: number | null; }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>조건부 타입과 제네릭</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">null</span></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 결과: string | number</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>복합 예제: 제네릭을 활용한 상태 관리 시스템</h3>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StateManager<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> state<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>initialState<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>newState<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserState</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    isLoggedIn<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> userStateManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StateManager<span class=\"token operator\">&lt;</span>UserState<span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Guest\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    age<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userStateManager<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { name: \"Guest\", age: 0, isLoggedIn: false }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">userStateManager<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userStateManager<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { name: \"John\", age: 30, isLoggedIn: false }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">userStateManager<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userStateManager<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { name: \"John\", age: 30, isLoggedIn: true }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>6. React와 TypeScript</h2>\n<p>React와 TypeScript를 함께 사용할 때 특히 유용한 타입 유틸리티들을 소개합니다. 이들은 컴포넌트와 props를 더 정확하고 유연하게 타입화하는 데 도움을 줍니다.</p>\n<h3><code>ComponentProps&lt;T&gt;</code></h3>\n<p>컴포넌트의 props 타입을 추출합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'some-ui-library'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 다른 모든 props를 수동으로 정의해야 함</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'some-ui-library'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ComponentProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token operator\">=</span> ComponentProps<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Button<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3><code>PropsWithChildren&lt;P&gt;</code></h3>\n<p>props 타입에 children을 추가합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CardProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  children<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PropsWithChildren <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CardProps</span> <span class=\"token operator\">=</span> PropsWithChildren<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>CSSProperties</h3>\n<p>인라인 스타일 객체의 타입을 정의합니다.</p>\n<p>AS-IS:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">StyledDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> style <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> style<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>TO-BE:</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CSSProperties <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">StyledDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> style <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> style<span class=\"token operator\">:</span> CSSProperties <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>7. 종합 예제 5가지</h2>\n<h3>재귀적 타입을 이용한 JSON 파서</h3>\n<p>이 예제는 TypeScript의 재귀적 타입을 사용하여 JSON 구조를 타입으로 표현합니다.</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">JSONValue</span> <span class=\"token operator\">=</span></span>\n<span class=\"line\">  <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span></span>\n<span class=\"line\">  <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span>\n<span class=\"line\">  <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span></span>\n<span class=\"line\">  <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span>\n<span class=\"line\">  <span class=\"token operator\">|</span> JSONValue<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\">  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> JSONValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">JSONObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> JSONValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseJSON</span><span class=\"token punctuation\">(</span>json<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> JSONValue <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">stringifyJSON</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> JSONValue<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 사용 예</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">'{\"name\":\"John\",\"age\":30,\"isStudent\":false,\"hobbies\":[\"reading\",\"coding\"]}'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token function\">parseJSON</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> stringified <span class=\"token operator\">=</span> <span class=\"token function\">stringifyJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>조건부 타입을 이용한 유틸리티 함수</h3>\n<p>이 예제는 조건부 타입을 사용하여 객체의 특정 속성만 선택하는 유틸리티 함수를 구현합니다.</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PickByType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">pickByType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PickByType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> result<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>PickByType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token keyword\">type</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      result<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">as</span> <span class=\"token keyword\">keyof</span> PickByType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> result <span class=\"token keyword\">as</span> PickByType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 사용 예</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> mixedObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  birthDate<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1990-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  address<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> street<span class=\"token operator\">:</span> <span class=\"token string\">\"Main St\"</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">:</span> <span class=\"token string\">\"New York\"</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> dateProperties <span class=\"token operator\">=</span> <span class=\"token function\">pickByType</span><span class=\"token punctuation\">(</span>mixedObject<span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dateProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { birthDate: Date }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>제네릭과 매핑된 타입을 이용한 깊은 읽기 전용 변환기</h3>\n<p>이 예제는 제네릭과 매핑된 타입을 사용하여 객체를 깊은 수준에서 읽기 전용으로 변환합니다.</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span></span>\n<span class=\"line\">  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> DeepReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Function</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> DeepReadonlyObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">  <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DeepReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReadonlyArray<span class=\"token operator\">&lt;</span>DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;&gt;</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepReadonlyObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">makeDeepReadonly</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> obj <span class=\"token keyword\">as</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 사용 예</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> mutableObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  address<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    street<span class=\"token operator\">:</span> <span class=\"token string\">\"Main St\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    city<span class=\"token operator\">:</span> <span class=\"token string\">\"New York\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  hobbies<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"reading\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"coding\"</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> readonlyObject <span class=\"token operator\">=</span> <span class=\"token function\">makeDeepReadonly</span><span class=\"token punctuation\">(</span>mutableObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// readonlyObject.name = \"Jane\"; // 오류</span></span>\n<span class=\"line\"><span class=\"token comment\">// readonlyObject.address.city = \"Boston\"; // 오류</span></span>\n<span class=\"line\"><span class=\"token comment\">// readonlyObject.hobbies.push(\"gaming\"); // 오류</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>인터섹션 타입과 유니온 타입을 이용한 복잡한 상태 관리</h3>\n<p>이 예제는 인터섹션 타입과 유니온 타입을 사용하여 복잡한 애플리케이션 상태를 모델링합니다.</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UserRole</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"user\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseState</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  isLoading<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  error<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GuestState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseState</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  userRole<span class=\"token operator\">:</span> <span class=\"token string\">\"guest\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseState</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  userRole<span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AdminState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseState</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  userRole<span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  adminToken<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AppState</span> <span class=\"token operator\">=</span> GuestState <span class=\"token operator\">|</span> UserState <span class=\"token operator\">|</span> AdminState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span>currentState<span class=\"token operator\">:</span> AppState<span class=\"token punctuation\">,</span> update<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>AppState<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AppState <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>currentState<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>update <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> AppState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 사용 예</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> state<span class=\"token operator\">:</span> AppState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userRole<span class=\"token operator\">:</span> <span class=\"token string\">\"guest\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">state <span class=\"token operator\">=</span> <span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isLoading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> userRole<span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">\"john_doe\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">state <span class=\"token operator\">=</span> <span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> userRole<span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> adminToken<span class=\"token operator\">:</span> <span class=\"token string\">\"secret_token\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>타입 추론과 제네릭을 이용한 함수 합성기</h3>\n<p>이 예제는 타입 추론과 제네릭을 사용하여 함수 합성을 타입 안전하게 구현합니다.</p>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Func<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">compose</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>fn1<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">compose</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>fn1<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">compose</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>fn1<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> fn2<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">compose</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  fn1<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  fn2<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T3</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  fn3<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>fns<span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Func<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> fns<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 사용 예</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpperCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">exclaim</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> shout <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>exclaim<span class=\"token punctuation\">,</span> toUpperCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"HELLO!\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> addAndSquare <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addAndSquare</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 49</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Start with why 서평",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/start-with-why/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/start-with-why/",
      "summary": "특히 요즘들어 많이 느끼는 감정(생각?)이랄까. 어떤 결정이나 판단을 할 때 논리적인 여러가지 이유가 있지만, 이보다 더 우선순위가 높은 말로 표현할 수 없는 감정이나 가치가 뒤따라온다.",
      "content_html": "<p></p>\n<p><a href=\"https://www.yes24.com/Product/Goods/104263930\" target=\"_blank\" rel=\"noopener noreferrer\">스타트 위드 와이 (START WITH WHY) 30만부 기념 블랙에디션 - 예스24</a></p>\n<p>2024년에 읽은 첫 번째 도서다. <s>인생경영클럽이 아니였으면 시도하지 못했을...</s></p>\n<h2>밑줄 친 문장</h2>\n<ul>\n<li>\n<p>행동에 영향을 주는 방법은 딱 두가지다. 조정하거나 열의를 불어 넣는 것이다.</p>\n</li>\n<li>\n<p>조종은 경영에서 정치에 이르기까지 모든 형태의 영업과 마케팅에 만연해있다. 전형적인 조종의 예로는 가격인하, 프로모션 그리고 공포 마케팅이나 동조압력, 소비자 열망을 이용한 마케팅 등이 있다.</p>\n</li>\n<li>\n<p>고객이 왜 자사를 선택하는지 확실히 모르는 조직은 조종 전략을 과도하게 많이 사용해 원하는 바를 이룬다.</p>\n</li>\n<li>\n<p>조종은 효과가 있지만 비용이 든다. 그것도 아주 많이 든다.</p>\n</li>\n<li>\n<p>조종이 위험한 이유는 효과가 있기 때문이다.</p>\n</li>\n<li>\n<p>사람들에게 동기를 주기 위해 조종 대신 열의를 불어넣는 방식을 택한 리더들이 있다.</p>\n</li>\n<li>\n<p>골든서클(WHY / HOW / WHAT)은 우리가 하는 행동에 이유가 있다는 사실을 알려주는 개념이다. 이는 일을 시작하기 전에 “왜?” 라는 질문을 먼저 한다면 얼마나 많은 것을 성취할 수 있는지 보여주는 증거가 된다.</p>\n</li>\n<li>\n<p>모든 일은 공통적으로 골든서클 안에서 시작해 밖으로 뻗어나간다.</p>\n<ul>\n<li><strong>WHAT:</strong> 많은 회사와 조직은 현재 그들이 “무엇을” 하는지 잘 알고 있다.</li>\n<li><strong>HOW:</strong> 일부 회사와 사람들은 자기들이 무엇을 어떻게 하는지 알고 있다. 하지만 HOW로 문제를 모두 해결할 수 는 없다.</li>\n<li><strong>WHY:</strong> 자신이 하는 일의 목적을 명확하게 말할 수 있는 사람이나 회사는 극히 드물다. WHY는 돈이 아니다. 돈은 오히려 나중에 따라오는 결과에 가깝다. WHY는 일의 목적이나 대의, 신념이다.\n<ul>\n<li>회사는 왜 존재하는가?</li>\n<li>내가 하루를 시작하는 이유는 무엇인가?</li>\n<li>그리고 사람들은 왜 이런 질문에 관심을 가져야 하는가?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>사람은 소속감을 느끼려는 욕구가 강한 나머지 이를 얻기 위해 무엇이든 하는 경향을 보일 때도 있다.</p>\n</li>\n<li>\n<p>대뇌의 구조와 골든서클</p>\n<ul>\n<li>\n<p><strong>변연계(감정의 뇌)</strong> -&gt; WHY</p>\n<ul>\n<li>신뢰감, 충성심 등의 감정을 담당한다.</li>\n<li>모든 행동과 의상결정을 주관한다.</li>\n<li>언어를 처리하지는 못한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>신피질(사고의 뇌)</strong> -&gt; WHAT, HOW</p>\n<ul>\n<li>이성적이고 분석적인 생각과 언어를 담당하는 부위</li>\n</ul>\n</li>\n<li>\n<p>감정을 주관하는 뇌 부위에는 언어 능력이 없다. 그래서 감정을 말로 표현하기는 어려운 것이다. 배우자와 결혼한 이유나 배우자를 사랑하는 진정한 이유를 언어로 구체화하지 못하는 것도 이 때문이다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>분명 누군가와 사랑에 빠질 때는 성격이나 능력 외에 다른 이유가 존재한다.</p>\n</li>\n<li>\n<p>마음이 가는 대로 결정했을 때는 특히나 이유를 말로 설명하기 어렵다.</p>\n</li>\n<li>\n<p>직감적인 결정은 마음으로 내리며, 그렇게 해야 할 것 같다는 느낌에서 비롯된다.</p>\n</li>\n<li>\n<p>직감으로 판단하는 일은 결코 우연이 아니다.</p>\n</li>\n<li>\n<p>사람들에게 뇌의 이성적인 부분으로 결정을 내리도록 하면 대부분 과도하게 고민만 하다 끝내 결정을 내리지 못한다는 것이다.</p>\n</li>\n<li>\n<p>변연계를 이용해 직감으로 결정을 내릴 때 속도가 빠르며 결과가 더 나은 경우도 상당하다.</p>\n</li>\n<li>\n<p>우리는 직감적으로 어떤 행동을 하지 않는 것이 좋겠다고 느끼면 자기 판단을 의심하며 실증적인 근거를 찾는데, 이는 행동의 이유를 언어로 구체화할 능력이 없기 때문이다.</p>\n</li>\n<li>\n<p>사람들은 WHAT이 아니라 WHY로 인해 구매를 결정한다.</p>\n</li>\n<li>\n<p>감성과 지성을 모두 사로잡는 일은 쉽지 않다. “예술과 과학” 이라는 표현 역시 마찬가지다. 왜 항상 예술을 과학보다 먼저 말할까? 이는 언어 능력이 없는 대뇌변연계조차 타인을 이끌기 위해서는 감성을 놓치지 말아야 하며 반드시 WHY가 먼저 나와야 한다는 사실을 말하고 있는지도 모른다.</p>\n</li>\n<li>\n<p>위대한 리더는 직감의 영역을 중요시한다. 그들은 과학보다 예술이 먼저라는 사실을 이해한다. 그리고 지성보다 감성을 먼저 쟁취한다. 그들은 WHY로 시작하기 때문이다.</p>\n</li>\n<li>\n<p>대뇌변연계의 힘은 놀랍다. 변연계는 감각적인 결정을 주관할 뿐 아니라 비논리적이거나 비합리적으로 보이는 일을 하도록 유도하기도 한다.</p>\n</li>\n<li>\n<p>인류가 모두 이성적이었다면 아무도 무일푼으로 사업을 시작하거나 탐험을 떠나지 않았을 것이다.</p>\n</li>\n<li>\n<p>소비자를 대상으로 한 시장조사 결과를 살펴보면 뛰어난 품질과 서비스, 다양한 기능을 합리적인 가격에 제공하는 제품을 이용하겠다고 응답한 사람이 가장 많다. 하지만 고객 충성도가 높은 회사 중에 이 모든 요소를 충족하는 곳은 거의 없다.</p>\n</li>\n<li>\n<p>제품은 회사 신념뿐 아니라 충성도 높은 고객의 신념까지도 상징한다.</p>\n</li>\n<li>\n<p>진정성에 필요한 세가지: 말과 행동은 신념을 보여준다. 신념은 WHY다. HOW는 신념을 현실화하기 위한 실천이다. WHAT은 실천의 결과, 즉 내가 하는 말과 행동이다.</p>\n<ul>\n<li>WHY의 명확성</li>\n<li>HOW라는 행동원칙</li>\n<li>WHAT의 일관성</li>\n</ul>\n</li>\n<li>\n<p>자신이 판매하는 제품을 진심으로 믿는 사람은 진정성 있는 설명을 한다. 영업을 잘하는 조직은 진정성을 바탕으로 관계를 형성한다.</p>\n</li>\n<li>\n<p>진정성이 성공의 필수요건은 아니다. 하지만 성공을 오래 지속하고 싶다면 반드시 진정성을 갖춰야 한다. 자신이 믿는 대로 이야기하고 실천하는 일이 바로 진정성이다.</p>\n</li>\n<li>\n<p>WHY가 없는 상태에서는 아무리 진정성을 갖추려 노력해도 항상 진심이 느껴지지 않는 상태로 끝나고 만다.</p>\n</li>\n<li>\n<p>충성심까지 형성하려면 사람들에게 진정한 열의를 불어넣어야 한다. 조직의 WHY가 분명하고 사람들이 이에 공감한다면 진정한 충성심은 자연스레 형성될 것이다.</p>\n</li>\n<li>\n<p>진정한 감정적 가치인 충성심은 판매자의 행동 유도가 아니라 <strong>구매자의 가치 판단에서 비롯된다.</strong></p>\n</li>\n<li>\n<p>화자는 매번 달라지지만 청자는 언제나 개인이다.</p>\n</li>\n<li>\n<p>WHAT은 의사를 결정하도록 만드는 요소가 아니라 WHY를 뒷받침하는 근거로 사용되어야 한다.</p>\n</li>\n<li>\n<p>이성적 범주에 속하는 WHAT은 WHY에서 느껴지는 감정을 겉으로 보여주는 근거 역할을 한다. 어떤 직감으로 결정을 내렸는지 말로 표현할 수 있고 자신의 WHY를 명확히 설명할 수 있으면 주변 사람들에게 결정을 내린 이유를 분명히 이해시킬 수 있다.</p>\n</li>\n<li>\n<p>기업 구조상 가장 아래쪽에 있는 사람은 보통 고객이다.</p>\n</li>\n<li>\n<p>신뢰란 자신의 이익 그 이상의 가치를 추구하는 개인이나 조직을 바라볼 때 형성된다.</p>\n</li>\n<li>\n<p>WHY가 뚜렷하고 사람들이 이를 쉽게 이해할 수 있으면 신념이 같은 사람들이 모여든다.</p>\n</li>\n<li>\n<p>회사를 단단하게 만드는 힘은 문화다.</p>\n</li>\n<li>\n<p>회사 목표는 능력 있는 사람이 아니라 신념이 같은 사람을 채용하는 일이 되어야 한다.</p>\n</li>\n<li>\n<p>“위험한 여정에 함께할 대원 모집. 적은 보수, 혹한의 추위, 몇 달간 이어지는 어둠을 견뎌야 함. 전 일정 위험하며 무사 귀환 보장 불가. 그러나 탐험에 성공하면 영광과 명예를 누릴 수 있음”</p>\n</li>\n<li>\n<p>소속감을 가진 직원들이 열심히 일하고 혁신적인 해결책을 찾는 이유는 회사가 아니라 자기 자신의 신념을 위해서이다.</p>\n</li>\n<li>\n<p>“능력이 아니라 마음가짐을 보고 직원을 뽑아야 한다. 능력은 가르치면 된다.”</p>\n</li>\n<li>\n<p>어떤 직원이 회사에 잘 어울리는지 알아낸 뒤 그런 사람을 더 많이 발견하는 체계를 만들어야 한다.</p>\n</li>\n<li>\n<p>아이팟, 아이튠즈, 아이폰에 대한 아이디어를 떠올린 사람은 스티브 잡스가 아니라 애플 직원들이었다. 잡스는 혁신이 일어날 수 있도록 직원들에게 새로운 기준과 맥락을 제공하고 목적의식을 심어줬다.</p>\n</li>\n<li>\n<p>WHY가 모호한 회사는 타사의 성과에 집착하지만, WHY가 분명한 회사는 경쟁사에 연연하지 않는다.</p>\n</li>\n<li>\n<p>우리는 잘 모르는 지역 출신에 이력이 화려한 전문가보다 같은 동네에 살며 가치관과 신념이 비슷한 사람을 신뢰한다. <strong>이 신뢰는 인생에서 가장 소중한 존재도 맡길 수 있게 한다.</strong></p>\n</li>\n<li>\n<p>묘기가 극도로 위험하다면 곡예사는 안전망을 설치해달라고 요구할 수 있다. 안전망은 그가 떨어졌을 때 다치지 않도록 보호하는 일 외에도 <strong>심리적인 안정감을 준다는 장점</strong>이 있다.</p>\n</li>\n<li>\n<p>위험의 크기와 상관없이 모험을 즐기는 유형은 어디에나 있다. 하지만 그런 스타플레이어가 기울인 노력이 개인이나 조직에 좋은 영향을 주더라도 이익은 그리 오래가지 못할 것이다. 평범한 사람들이 서로를 신뢰하도록 하는 편이 장기적으로 나은 전략이다. 상호간의 신뢰는 위대한 조직을 만든다.</p>\n</li>\n<li>\n<p>사람들은 왜 당신을 신뢰해야 하는가?</p>\n</li>\n<li>\n<p>우리는 아무나 믿지 않으며 가치관과 신념이 같은 사람을 더욱 신뢰하는 경향이 있다.</p>\n</li>\n<li>\n<p>조종은 효과가 있더라도 충성심을 형성하지 않으며 비용이 많이 들고 연관된 사람들의 스트레스를 가중한다.</p>\n</li>\n<li>\n<p>전체 시장 15~18% 사이에 있는 그래프 곡선 앞쪽 고객의 마음을 사로잡아야 대중시장에서 성공을 거둘 수 있다. 이들은 회사와 가치관을 공유하고 기업의 메시지나 제품, 서비스를 자기 삶의 WHY를 뒷받침하는 WHAT으로 여긴다.</p>\n</li>\n<li>\n<p>“나에게는 꿈이 있고 그에게는 계획이 있습니다.”</p>\n</li>\n<li>\n<p>비관주의자는 보통 옳은 말을 하지만 정작 세상을 바꾸는 사람은 낙관주의자다.</p>\n</li>\n<li>\n<p>WHY 유형은 미래를 내다볼줄 안다. HOW 유형은 현실주의자이며 실용적인 일에 더 명확한 판단력을 보인다. 대부분의 사람은 HOW 유형이다.</p>\n</li>\n<li>\n<p>사업은 구조다. 그러므로 체계와 절차를 구조화하는 일이 중요하다. 이런 요소를 구축하는 데 능숙한 사람은 HOW 유형이다.</p>\n</li>\n<li>\n<p>가치를 달성하고 판도를 바꾸는 기업이 되려면 WHY를 아는 한 사람과 HOW를 아는 여러 사람이 특별한 파트너 관계를 형성해야 한다.</p>\n</li>\n<li>\n<p>위대한 조직은 영혼을 자극한다.</p>\n</li>\n<li>\n<p>개인에게 힘을 실어주는 일은 애플의 WHY이자 존재 이유다.</p>\n<ul>\n<li>아이폰에서 I는 “나”를 의미한다. 애플은 개인의 창조적인 정신을 지지하는 회사이며 제품과 서비스, 마케팅이 신념을 증명하고 있다 <strong>(모든 광고에서 개인이 주인공이다)</strong></li>\n</ul>\n</li>\n<li>\n<p>WHY는 의사결정의 분명한 기준이 된다.</p>\n</li>\n<li>\n<p>성취란 도달하거나 획득하는 일이다. 성공은 느낌이나 상태다. 성공은 깊숙한 내면의 감정이 동기가 되는데 뇌는 이 감정을 말로 표현하지 못한다.</p>\n</li>\n<li>\n<p>조직이 겪는 어려움은 바로 성공이다.</p>\n</li>\n<li>\n<p>WHY를 측정해야 한다. 그러나 안타깝게도 WHY의 명확성을 측정해주는 지표는 거의 없다.</p>\n</li>\n<li>\n<p>돈은 제품이나 서비스 가격을 측정하는 확실한 수단이다. 그러나 가치를 정확히 환산하지는 못한다. 여기서 말하는 가치는 계산할 수 있는 숫자가 아니라 감정이다. 가치는 인식하는 것이다.</p>\n</li>\n<li>\n<p>사람들이 어떤 회사의 신념을 명확하게 표현하고 기업의 눈으로 볼 수 없는 가치를 이야기한다면 이는 회사가 분기점을 무사히 통과했다는 증거라고 할 수 있다.</p>\n</li>\n<li>\n<p>WHY는 발명이 아니라 발견해나가는 과정이다.</p>\n</li>\n<li>\n<p>자신을 이기려고 노력하는 사람은 많은 이의 도움을 받을 것이다.</p>\n</li>\n</ul>\n<br>\n<h2>리뷰</h2>\n<p>처음에는 개인에 대한 내용인줄 알았는데, 기업에 대한 이야기였다. 하지만 개인의 삶에도 충분히 적용할 수 있는 내용들이라 재밌게 읽을 수 있었다.</p>\n<p>이렇게 블로그에 책 리뷰를 남기는게 처음이다보니 어떤식으로 전개를 해야 좋을까 고민이다. 몇 가지 키워드를 기준으로 내 생각을 적어보면 되지 않을까?</p>\n<p>책에서 제일 인상깊게 와닿았던 내용은 다음과 같다.</p>\n<ul>\n<li>감정을 주관하는 뇌 부위에는 언어 능력이 없다. 그래서 감정을 말로 표현하기는 어려운 것이다. 배우자와 결혼한 이유나 배우자를 사랑하는 진정한 이유를 언어로 구체화하지 못하는 것도 이 때문이다.</li>\n<li>사람들은 생각보다 더 비합리적이고 객관적이지 못하다. 객관적인 사실을 기반으로 판단을 하고 결정을 하기보단 직관과 감정을 기반으로 판단하는 경우가 빈번하다. (나 스스로의 모습을 볼 때 격하게 인정하는 사실이다)</li>\n<li>조종은 효과가 있더라도 충성심을 형성하지 않으며 비용이 많이 들고 연관된 사람들의 스트레스를 가중한다.</li>\n<li>돈은 제품이나 서비스 가격을 측정하는 확실한 수단이다. 그러나 가치를 정확히 환산하지는 못한다. 여기서 말하는 가치는 계산할 수 있는 숫자가 아니라 감정이다. 가치는 인식하는 것이다.</li>\n</ul>\n<p>특히 요즘들어 많이 느끼는 감정(생각?)이랄까. 어떤 결정이나 판단을 할 때 논리적인 여러가지 이유가 있지만, 이보다 더 우선순위가 높은 말로 표현할 수 없는 감정이나 가치가 뒤따라온다.\n여기서 중요한건 <strong>“말로 표현할 수 없는”</strong> 이다. (사실 내가 F라서 그런 걸수도..)</p>\n<p>이 책을 읽기 이전에도, 내가 어떤 생각을 하거나 행동할 때 이에 대한 이유를 찾아보곤 했다.\n책에서는 WHY를 먼저 생각해야해! 라고 하지만, 나는 거꾸로 어떤 행동을 했을 때(WHAT, HOW) 이에 대한 이유(WHY)를 추론하는 방식이다.\n그러면서 자연스럽게 내가 가진 가치관이나 신념을 찾아내곤 했다.</p>\n<p>다시 상기해보는 나의 신념은, <strong>“세상을 바꿀 순 없겠지만, 한 사람의 세상을 바꾸는 데 작게나마 기여하자”</strong> 이다.\n근데 이건 있어블하게 포장한 문장이고, 조금 더 간단하게 표현해보면 <strong>“지금 할 수 있는 것들을 하자”</strong> 가 맞는 것 같다.\n거창한 목표 대신에 실현 가능한(정말?) 현실적인 목표랄까?\n오늘 하루도 지금 당장 내가 할 수 있는 것들에 집중했다.\n이렇게 살아가는게 여러모로 스트레스를 덜 받기도 하고, 의욕이 생기기도 하고.</p>\n<p>그냥, 난 그런 사람이구나 싶다.</p>\n<p>근데 또 작성하면서 생각해보니까 이걸 신념이라고 이야기할 수 있을까? 조금 더 고민해봐야할 것 같다.</p>\n",
      "date_published": "2024-02-12T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2024년 1월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2024-year/01/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2024-year/01/",
      "summary": "1년치 목표를 정하는건 너무 어려운 일이다. 내가 되고 싶은 모습과, 그 모습이 되었음을 증명하는 것, 참 어렵다.",
      "content_html": "\n<blockquote>\n<p>나름 만족스러운 한 달이었다.</p>\n</blockquote>\n<ul>\n<li>팀 내에서는 주로 목표 설계에 힘을 많이 썼다. 하지만 1년치 목표를 정하는건 너무 어려운 일이다. 내가 되고 싶은 모습과, 그 모습이 되었음을 증명하는 것. 참 어렵다.</li>\n<li>1월 초에 폭풍 같은 결정(?)을 많이 했다. 무엇을 해야할지 정리하다보면 지금 당장 할 수 있는 것들이 눈에 보인다. 그것들을 하면 된다.</li>\n<li>아키텍트는 뭘까 생각해봤다. 될 수 있을까?</li>\n</ul>\n<blockquote>\n<p>2월에는 뭘 하면 좋을까?</p>\n</blockquote>\n<ul>\n<li>회고가 아니라, <strong>2월 TIL 이라는 포스트를 만들어서 올린 다음에 매일매일 업데이트 하면 어떨까?</strong> 블로그를 조금 더 잘 활용해보고 싶다.</li>\n<li>리팩토링에 대한 글을 하나 올리면 어떨까?</li>\n<li>시간을 정해서 책을 읽어보자. 일단 읽는 것 부터 시작하기.</li>\n</ul>\n<br>\n<h2>(1) nBilly</h2>\n<h3>1) 모듈화</h3>\n<ul>\n<li>nBilly에서 만들어진 것들 중에 공용화 할 수 있는 것들을 모듈화 하는 작업을 진행했다.</li>\n<li>지금은 이미지, 동영상 업로더와 렌더러에 대해서만 모듈화를 진행했는데 생각보다 고려할게 많아서 이게 진자로 쓰일 수 있을지는 앞으로 어떻게 하냐에 달렸다.\n<ul>\n<li>호환성도 신경써야 하고, 인터페이스도 다양하게 뚫어줘야 하고, 업데이트도 주기적으로 해야 하고, 이슈도 주기적으로 대응해야 하고.</li>\n<li>신경써야 할게 참 많다.</li>\n</ul>\n</li>\n<li>그런데 이 과정이 나름(?) 재밌다.\n<ul>\n<li>똑같은 관심사를 다루는 코드 조각을 모아서 응집도 있게 만들고</li>\n<li>이 과정에서 코드를 리팩토링 하고 테스트 코드를 작성하고.</li>\n<li>문서도.. 작성하고..?</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>2) 문서 작업</h3>\n<ul>\n<li>팀에서 관리하는 문서들이 꽤 오랫동안 방치되어서 모듈화 관련 문서를 작성하면서 어느 정도 업데이트를 했는데 해도 해도 끝이 없다.</li>\n<li>처음에는 한 문서에 모든 내용을 담았는데 크게 혼나고(?) 리더님이 소개해주신 <a href=\"https://documentation.divio.com/introduction.html\" target=\"_blank\" rel=\"noopener noreferrer\">문서화 가이드</a>를 기반으로 개선했다.\n<ul>\n<li>미디어 모듈을 사용에 대한 튜토리얼 (특정 미디어 모듈로 목표를 달성하기 위해 해야되는 과정들)</li>\n<li>미디어 모듈을 사용할 때 필요한 레퍼런스 (팀 내 위키로 이관)</li>\n<li>미디어 모듈의 목적과 설명 (핵심개념)</li>\n</ul>\n</li>\n</ul>\n<p>개인적으로, 피드백을 주기적으로 받을 수 있으면 좋긴 하지만 어쨌든 처음부터 끝까지 일단 다 진행해보는 것도 중요하다고 생각한다. 정석으로 목표를 향해 달려가는 방법도 좋지만, 조금 돌아가더라도 이것 저것 경험해보는\n것도 좋지 않을까? 비효율적이라는게 문제지만… 비효율적인 경험도 해봐야 뭐가 효율적인지 알 수 있는 것 같다.</p>\n<p><strong>쓰다가 든 생각은, 난 똥인지 된장인지 먹어봐야 아는 사람인가보다... 된장… <s>과연 나는 이 험난한 세상을 잘 살아갈 수 있을까?</s></strong></p>\n<br>\n<h3>3) KPI 작성</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">goals-signals-metrics 프레임워크</p>\n<p>리더님이 <a href=\"https://linkedin.github.io/dph-framework/goals-signals-metrics.html\" target=\"_blank\" rel=\"noopener noreferrer\">링크드인이 개발한 goals-signals-metrics 프레임워크</a>를 소개해주셨고, 이를 기반으로 2024년의 목표에 대해 생각해보는 시간을 가졌다.</p>\n<ul>\n<li>\n<p>개념</p>\n<ul>\n<li>Goals: 구체적인 목표를 작성해야 한다. 그리고 목표는 측정할 수 있어야 한다.</li>\n<li>Signals: 목표를 달성하고 있다는 것을 알 수 있는 신호에 대해 정의하는 것.</li>\n<li>Metrics: 목표를 측정할 수 있는 숫자.</li>\n</ul>\n</li>\n<li>\n<p>작성해보기</p>\n<ul>\n<li>Goals: 팀의 허리 역할을 할 수 있는 <code>아키텍트</code> 가 되고 싶다. (지금 생각해보면 이게 측정 가능한 목표는 아닌 것 같다.)</li>\n<li>Signals: 팀원들이 나에게 아키텍쳐 설계에 대한 질문을 많이 할 때. 내가 제시한 설계가 수용될 때</li>\n<li>Metrics: 아키텍처 설계 관련 질문 빈도, 질문 유형, 답변의 유용성을 수집하고 기록해서 점수를 부여하고 변경 요청 건수, 수용률을 추적하기</li>\n</ul>\n</li>\n</ul>\n</div>\n<ul>\n<li>\n<p>팀 KPI에 대해 리뷰하는 시간을 가지고, 여기에 정렬된 나의 역할/목표/성과지표 등을 작성하는 시간을 많이 가졌다. <s>많이 가지면 뭐하나, 잘 작성해야지.</s></p>\n</li>\n<li>\n<p>제일 많이 들은 피드백은 목표를 구체적으로 작성하라는 것. 누구나 상상하기 쉬운 목표가 좋다는 것. <br>\n<strong>[X]</strong> 아키텍트가 되자. <br>\n<strong>[O]</strong> 아키텍트가 뭐하는 사람이야? 에 대해 1시간 정도는 거뜬하게(?) 설명할 수 있는 상태가 되자. <br>\n<strong>[X]</strong> 영어 공부를 하자. <br>\n<strong>[O]</strong> 영어로 1시간 정도는 대화할 수 있는 상태가 되자. <br></p>\n</li>\n<li>\n<p>그 다음은 목표를 잘 달성했는지를 점검할 수 있는 지표를 산출하는 것. <br>\n<strong>[목표]</strong> 백오피스 제작에 필요한 기술적난제를 해결하는 아키텍처를 리서치하여 팀에 방향성을 제시하고, 아키텍처를 실현하여 문제를 주도적으로 해결한다<br>\n<strong>[지표]</strong> 에픽 단위의 기술적 난제에 대해 문제 식별부터 해결책 리서치, 제시, 문제해결까지 기여한 사례를 3건 이상의 사례 만들기</p>\n</li>\n<li>\n<p>KPI를 작성할 때 GPT의 도움을 많이 받았다. 확실히 GPT가 생겨서 생각을 표현하기가 수월하달까? 나처럼 추상적인걸 구체적인걸로 표현하는 능력이 부족한 사람에게 너무나 좋은 친구다.</p>\n</li>\n</ul>\n<p>아키텍트가 되고자 하는 목표 자체가... 너무 높은 난이도인 것 같기도 하고. <s>일단 지금 하는 일 부터 잘 해야 하지 않을까?</s></p>\n<p>나는 산을 오르고자 할 때 꼭대기를 바라보며 걸어가기 보단, 중간 지점이나 바로 위의\n계단을 보면서 올라가는 편이다. 그러다보니 이런 장기 목표와 되고 싶은 모습을 상상하고 설계하고 나아가는게 너무 어색하고 어려운 것 같다.</p>\n<br>\n<h3>4) 디바이스 모드 전환시 성능 최적화</h3>\n<p>| before                   | after                    |\n|</p>\n",
      "date_published": "2024-02-03T18:30:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2023년을 돌아보며 생각한 개발자로 취업하기",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%B7%A8%EC%A4%80/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%B7%A8%EC%A4%80/",
      "summary": "개발자로 취업을 하기 위해선 어떤 방식으로 준비를 해야 좋을까?",
      "content_html": "\n<p>2023년 말에 휴가를 몰아썼습니다.\n푹 쉬면서 올해 있었던 일들을 곱씹어봤는데 저와 상담했던 수많은 취준생과 후배들이 생각났습니다.\n그러면서 제가 꾸준히 전달해온 내용들을 한 번은 정리를 하고 넘어가야 마음이 편해질 것 같았고 정말 오랜만에 글을 써봅니다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">핵심 내용 요약</p>\n<p><strong>(1) 양 보단 질, 속도 보단 방향, 넓게 보단 깊게</strong></p>\n<ul>\n<li>어떻게해서든 사용자를 확보할 것.</li>\n<li>무엇을(what) 왜(why) 어떻게(how) 했고 어떤 결과(result)를 만들어냈는지.</li>\n<li>결과보단 과정을 잘 기록할 것.</li>\n</ul>\n<p><strong>(2) 혼자서 할 수 있는 것과 할 수 없는 것</strong></p>\n<ul>\n<li>공부는 혼자서 할 수 있지만 커뮤니케이션은 혼자서 할 수 없다.</li>\n<li>인간적으로 매력적인 사람이 될 것.</li>\n<li>나에 대해서 잘 인지할 것</li>\n</ul>\n<p><strong>(3) 학습 그 자체</strong></p>\n<ul>\n<li>내가 제일 좋아하는 방법으로 공부하기.</li>\n<li>공부는 즐겁고 행복해야 한다.</li>\n</ul>\n</div>\n<br>\n<h2>1. 양 보단 질 속도 보단 방향 넓게 보단 깊이</h2>\n<h3>(1) 경험의 질이 중요하다</h3>\n<p>저는 고등학생 때 프로그래밍을 시작했습니다.\n초등학교 때 막연하게 프로그래머가 되어야겠다 생각했고 그러다보니 자연스럽게 코딩을 할 수 있는 기회가 있을 때 이를 잡을 수 있었습니다.\n전문계 고등학교를 진학했고 학교에서 코딩을 하는 동아리에 들어갔고 대회에 나갔고 입상도 했습니다.</p>\n<ul>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\">유년시절 이야기 1편</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\">유년시절 이야기 2편</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\">유년시절 이야기 3편</a></li>\n</ul>\n<p><strong>어찌보면 또래 친구들보다 빠르게 시작했고 꽤 괜찮은 성과도 있던거죠.</strong>\n20살의 저는 쉽게 말해서 콧대가 높았습니다.\n대학교에 입학하고 1학년 때 프로그래밍을 수업을 들으면서</p>\n<blockquote>\n<p>\"이렇게 쉬운 내용을 배울라고 내가 대학교에 온건가?\"</p>\n</blockquote>\n<p>라는 같잖은 생각을 했죠.\n이미 코딩 자체에 익숙하고 쉬웠기 때문입니다.\n하지만 2학년 때 다양한 전공수업을 들으면서 대학교에 오길 참 잘했다고 생각했어요.</p>\n<p><strong>문제는 \"깊게\" 공부하지 않았어요.</strong></p>\n<p><code>PHP</code> <code>Javascript</code> <code>Typescript</code> <code>Node.js</code> <code>Python</code> <code>Java</code> <code>C</code> <code>C++</code> <code>C#</code> <code>Swift</code> 등 정말 다양한 언어를 공부했고 이것들로 무언가를 구현하라는 요구를 받았을 때 다른 사람들보다 빠르게 결과물을 만들어낼 수 있었습니다.</p>\n<p><code>django</code> <code>flask</code> <code>spring</code> <code>react</code> <code>vue</code> <code>jquery</code> <code>nestjs</code> <code>express</code> 등 프론트엔드/백엔드 가리지 않고 프레임워크도 꽤 많이 공부했습니다</p>\n<p>수업을 들으면서 수 없이 많은 팀프로젝트를 할 때도, 개인 과제를 할 때도, 연구실에 들어가서 학부생들과 여러가지 프로젝트를 할 때도, 대부분의 프로젝트에 큰 비중으로 기여했습니다.\n<strong>하지만 저는 \"구현\"과 \"결과물\"에 모든 관심이 쏠려있었습니다.</strong></p>\n<p>위에서 언급한 제가 학습했던 언어들이</p>\n<ul>\n<li>\"왜\" 만들어졌는지</li>\n<li>어떤 \"문제\"를 해결하기 위해 만들어졌는지</li>\n<li>그 과정에서 각 언어별로 어떤 차이와 특성을 가지게 되었는지</li>\n<li>어떤 상황에 어떤 언어를 사용하는게 적합한지</li>\n</ul>\n<p><strong>등 꼭 필요한 고민을 아예 해본적이 없었습니다.</strong></p>\n<p>그렇게 시간이 흘러 4학년이 되었고 부랴부랴 취준을 하기 시작했고 여러 기업에 지원했고 어찌저찌 코딩테스트를 통과 후에 기술면접도 볼 수 있었습니다.\n정말 다양한 질문을 받았는데 내가 정말 공부를 이상하게 했구나 느낀 질문이 있었습니다.</p>\n<blockquote>\n<p>Java와 Node.js 둘 다 학습하셨네요. 그럼 혹시 블록킹 논블록킹의 차이점에 대해 알고 있나요? 혹은 File I/O에는 어떤 언어를 사용하는게 더 효과적인가요?</p>\n</blockquote>\n<p>한 대 맞은 기분이었습니다. <strong>정말 단 한 번도 고민해본적이 없었으니까요.</strong></p>\n<p>18살 때 부터 26살 때 까지 군대에 있던 시간을 제외하면 6년을 거의 매일 공부했는데, 참 허탈했고 너무 바보 같았고 너무 한심했습니다.\n하지만 덕분에 <strong>앞으로 어떻게 공부해야 좋을지 인지하는 계기</strong>가 되기도 했습니다. (이 글을 읽는 분들도 그랬으면 좋겠네요!)</p>\n<p>어떤 언어를 공부하든 상관 없습니다.\n<strong>단 하나의 언어를 공부하더라도 \"깊게\" 하는게 중요합니다.</strong></p>\n<p>언어를 공부할 때 처럼 프로젝트를 할 때도 마찬가지입니다.\n저의 경우 학교를 다니면서 꽤 많은 프로젝트를 진행했는데 돌이켜보면 매리트가 없었습니다.</p>\n<p>대부분의 현업자 입장에서 제일 중요한건 \"서비스 운영\"입니다.\n하나의 서비스를 출시하는 것 보다 <strong>출시 후에 운영하는 게 훨씬 더 큰 미션</strong>입니다.\n개발자가 필요로 하는 대부분의 지식은 \"서비스를 출시 후 운영\" 하기 위한 것들에 초점이 맞춰져 있습니다.</p>\n<p>극단적으로 표현하자면 \"팀 프로젝트를 해서 어떤 서비스를 출시했다\"는 큰 의미가 없습니다.\n왜냐하면 너무 뻔하거든요.</p>\n<ul>\n<li>어차피 java + spring이나 Node + express 같은 프레임워크를 사용해서 CRUD를 만들었을 것이고</li>\n<li>javascript + react 같은 것들을 이용해서 UI를 구성했을테니까요.</li>\n</ul>\n<p>서비스 개발에 투입된 인원이 언제 어떻게 교체될지 모르는 상황에서 혹은 서비스가 어떻게 확장될지 모르는 상황에서 \"프레임워크\"라는 틀이 있다면 어느 정도 속도감 있게 인원 투입 및 교체가 가능합니다.\n즉 \"규격\"을 맞추기 위해 공부한다고 보면 좋습니다.\n정해진 규격의 물품은 언제든 쉽게 교체할 수 있으니까요.\n\"프레임\" 이라는 단어에 대한 이미지를 생각해보면 와닿으리라 생각합니다.</p>\n<p>다시 본론으로 돌아와서 제일 중요한건 \"깊게\" 파고들어가는 일입니다.</p>\n<p>그래서 프로젝트를 통해 서비스를 출시해보는 경험은 당연한 것이고, 더 나아가서 <code>서비스 운영</code>을 해봐야합니다.\n어떻게든 사용자를 만들어야 합니다.\n주제는 크게 중요하지 않아요.\n<strong>사용자를 확보하고 장애를 겪어보고 사용자의 불폄함을 들어보고 개선해봐야 합니다.</strong></p>\n<p>서버 개발자라면 서버가 수 없이 많이 죽어봐야 합니다.\n그래서 어떻게 해야 서버를 계속 살려놓을 수 있는지 고민해야 합니다.\n이 때 전공지식이 이용됩니다.</p>\n<ul>\n<li>안정적이고 유지보수가 용이한 서비스를 만들기 위해 소프트웨어 공학이 필요합니다.</li>\n<li>장애가 발생하고 찾아내기 위해서는 다양한 리눅스 명령어를 알아야 하고</li>\n<li>이 때 원인이 어디에 있을지 추측하기 위해 컴퓨터 구조 네트워크 등을 이해해야 합니다.</li>\n<li>주어진 자원으로 문제를 효과적으로 풀어내기 위해선 자료구조와 알고리즘을 알아야 합니다.</li>\n</ul>\n<p>그리고 \"사용자\"가 필요한 이유는 \"문제\"를 겪어보기 위함이라고 보면 좋습니다.\n그 과정에서 내가 어떤 방식으로 문제 찾아냈고 그게 왜 문제였는지 인지를 하고 어떻게 해결했는지 기록을 하고 공유를 하고 긍정적인 영향력을 전파하는 것이 좋습니다.</p>\n<br>\n<h3>(2) 문제해결</h3>\n<p>더 본질적인 이야기를 해보자면 결국 개발자에게 필요한 역량은 \"문제해결\" 입니다.</p>\n<p>어쩌면 살아가는 것은 문제해결의 연속입니다.\n문제해결을 하기 위해선 문제를 정의할 수 있어야합니다.\n문제를 정의하기 위해선 문제를 인지(발견)해야합니다.</p>\n<ol>\n<li>내가 어떻게 문제를 발견했고</li>\n<li>그게 왜 문제인지 정의할 수 있어야 하고</li>\n<li>그 문제를 어떻게 해결할 수 있었고</li>\n<li>어떤식으로 1 ~ 3의 과정을 사람들에게 이를 공유했는지 ( 영향력을 행사했는지 )\n<ul>\n<li>블로그 글이 될 수도 있고</li>\n<li>기술 공유(발표)가 될 수도 있고</li>\n</ul>\n</li>\n<li>결과적으로 어떤 성과를 만들어 낼 수 있었고\n<ul>\n<li>사실 회사에서는 이게 가장 중요합니다.</li>\n<li><strong>시간(돈)을 사용해서 해결할만한 문제였는지. 그리고 그게 우리 조직에 얼마나 큰 이익 혹은 효과를 가져다줬는지.</strong></li>\n</ul>\n</li>\n</ol>\n<p>사실 이건 <strong>개발자 뿐만 아니라 모든 직군, 모든 사람에게 해당된다고 생각해요.</strong>\n그냥 인생을 살아가면서 굉장히 당연한 일입니다.</p>\n<ul>\n<li>여러분은 왜 개발자가 되고 싶은가요?</li>\n<li>왜 코딩을 하는 건가요?</li>\n<li>이 과정의 어떤 것들이 여러분을 즐겁게 혹은 힘들게 만들고 있나요?</li>\n<li>여러분은 \"개발\"이라는 행위 혹은 수단으로 달성하고 싶은 궁극적인 목표가 무엇인가요?</li>\n<li>이 일을 하는게 정말 여러분을 행복하게 혹은 즐겁게 만들고 있나요?</li>\n<li>...</li>\n</ul>\n<p>위와 같은 질문에 꼭 답을 해야하는 것은 아닙니다.\n이런 질문에 대한 답이 없어도 개발을 할 수 있고, 코드를 작성할 수 있고, 문제를 해결할 수 있으니까요.\n하지만 이런 질문에 대한 답이 없다면, 목적이 없다면, 목표가 없다면, 더 빠르게 지치고 더 느리게 회복할 가능성이 무척 높습니다.</p>\n<p>어차피 우리는 살아가면서 평생 일을 해야합니다.\n평생 문제해결을 해야합니다.\n평생 살아가야 합니다.</p>\n<p>이 과정에서 묙표, 목적, 본질 등은 무척 중요하다고 생각해요. 그게 우리가 삶을 <strong>능동적으로 그리고 행복하게 살아가는 뿌리</strong>가 되어줄테니까요.</p>\n<p>엉뚱한 방향으로 이야기를 하게된 것 같은데 어쨌든 문제해결에 대한 딥다이브를 경험해볼 수 있는 제일 좋은 수단이 바로 팀프로젝트입니다.\n기술적인 문제도 많이 겪어볼 수 있고, 기술 외의 문제도 많이 더 깊게 겪어볼 수 있으니까요.\n이에 대한 이야기는 뒤에서 다루도록 하겠습니다.</p>\n<br>\n<h2>2. 혼자서 할 수 있는 것과 혼자서 할 수 없는 것</h2>\n<h3>(1) 소프트스킬</h3>\n<p>공부는 혼자서도 할 수 있습니다.</p>\n<p>가령 Java, Javascript 같은 프로그래밍 언어는 혼자서도 학습할 수 있습니다.\n전공 과목에 대한 지식은 혼자서도 학습할 수 있습니다.\n그렇게 학습한 지식들은 <strong>현업에서 일을 하거나 문제를 해결할 때 사용</strong>됩니다.\n일종의 \"도구\" 인거죠.</p>\n<p><strong>현업에서 일을 하거나 문제를 해결할 때 사용</strong>할 수 있는건 여러가지가 있습니다. 그렇다면 일의 주체는 무엇일까요?</p>\n<p>당연하지만 저는 <strong>사람</strong> 이라고 생각합니다.</p>\n<p>우리가 혼자서 학습하는 지식은 일을 하기 위한 <strong>도구</strong>일 뿐입니다.\n도구보다 더 중요한건 일을 하는 사람 그 자체입니다.</p>\n<p>대부분의 조직에서 목표 달성을 하는 주체는 사람이고,\n<strong>다양한 도구와 수단을 이용해서 많은 사람들과 효과적이고 효율적으로 일을 하여 성과를 내는 것이 회사에서 하는 일</strong>입니다.</p>\n<p>그래서 우리는 일을 시작하면 거의 모든 과정에 <strong>소프트스킬</strong>이 사용됩니다.\n소프트스킬은 일의 종류와 상관 없이 매우 중요합니다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">소프트스킬</p>\n<ul>\n<li>개인이 보유한 고유한 속성, 성격 특성, 의사소통 역량을 의미합니다.</li>\n<li>정량화할 수 없지만, 업무에 영향을 미치는 기능을 말합니다.</li>\n<li>대인관계, 커뮤니케이션, 인성, 태도 등 특정 업무에 대한 기술은 아니지만, 일하는 데 영향을 미치는 기능을 말합니다.</li>\n<li>행동, 태도, 가치에 뿌리를 두고 있습니다.</li>\n<li>직장에서 인간적인 유대를 쌓고 문화적, 공동체적 의식을 확립할 때 그 기반이 되어줍니다.</li>\n<li>업무의 결과물에도 긍정적인 영향을 미칩니다.</li>\n<li>대표적으로 다음과 같은 소프트스킬이 존재합니다.\n<ul>\n<li>감성지능</li>\n<li>커뮤니케이션 능력</li>\n<li>리더십</li>\n<li>시간 관리 능력</li>\n<li>문제 해결 능력</li>\n</ul>\n</li>\n<li>소프트스킬은 범용적 성격을 띠어 대부분의 직무에 적용되고, 상식적인 부분이 많아 한 사람의 기본기로 간주되기도 합니다.</li>\n</ul>\n<p>개인적으로 소프트스킬은 일을 할 때만 중요한게 아니라 <strong>우리가 사회 구성원으로 살아갈 때 필요한 것</strong>들이라고 생각합니다.</p>\n</div>\n<p>다양한 소프트스킬 중에서 특히 개인적으로 중요하다고 생각하는 것은 <strong>커뮤니케이션</strong>입니다.</p>\n<ul>\n<li><strong>설득</strong>: 내가 원하는게 있고 이를 달성하기 위해서 어떻게 이야기를 끌고가야 다른 사람을 움직이게 만들 수 있는지.</li>\n<li><strong>전달</strong>: 내가 생각하는 것들을 정확하게 전달하기 위해서 어떻게 이야기를 해야 좋은지.</li>\n<li><strong>공감</strong>: 내가 상대방의 생각을 이해하고 있다는 것을 인지시키기 위해 어떻게 해야 좋은지.</li>\n<li><strong>성장</strong>: 내가 어떤 피드백을 받았을 때 효과적이고, 내 주변 사람에게는 내가 어떤 피드백을 줬을 때 효과가 좋았는지.</li>\n</ul>\n<p>결국 일은 사람이 하는 것이고 사람들을 잘 움직이게 만드는 게 무엇보다 중요합니다.</p>\n<h3>(2) 같이 일하고 싶은 사람</h3>\n<p>회사에서 면접을 보는 이유가 뭘까요?\n그것도 한 번이 아니라 여러 번 보는 이유가 뭘까요?</p>\n<p>단순히 지원자가 가진 성적이나 스펙 같은 수치적인 것들이 아니라\n우리와 같이 일을 하게 될 사람이 풍기는 느낌 대화하는 방식 생각하는 방식 가치관 철학 등 \"사람\" 자체를 구체적으로 보고 판단하기 위해서입니다.</p>\n<p>조금 더 극단적으로 생각해보자면, 사실 스펙은 중요하지 않을 수도 있습니다.\n개발자가 되기 위해서 개발 지식 자체는 지금 당장 필요하지 않을 수도 있습니다.</p>\n<p>실제로 생각보다 빈번하게 보는 사례가</p>\n<ul>\n<li>지원자가 굉장히 많은 분야의 지식을 공부했으나 결국 면접에서 떨어지는 경우</li>\n<li>지원자가 회사에서 일을 할 때 필요한 지식을 많이 공부하지 않은 상태임에도 불구하고 붙는 경우</li>\n</ul>\n<p>사실 제가 했던 경험이기도 합니다.</p>\n<p>제가 면접관일 때 합격을 판단하는 기준이기도 했고, 반대로 제가 지원자일 때 \"내가 왜 붙었지?\"에 대한 고민의 답이기도 했습니다.</p>\n<p>면접이나 이력서나 자기소개서 혹은 블로그 글 등을 통해서 이미 \"같이 일하고 싶은 사람\"에 대한 모습이 존재한다고 생각합니다.\n지금 당장 내가 지식이 없어도 어차피 회사에서 들어와서 프로젝트에 투입이 되면 자연스럽게 공부하게 됩니다.</p>\n<p>한 우물을 깊게 파본 사람이라면 그 분야가 어떻게 되었든 그 사람이 관심만 가지게 된다면 똑같이 한 우물을 깊게 파고들어갈 확률이 높습니다.</p>\n<p>무언가를 한 가지라도 깊게 몰입해본 사람이라면 그게 무엇이 되었든 관심만 있다면 딥다이브할 확률이 높습니다.\n그래서 일에 대해서 깊게 깊게 고민하고 몰입할 확률도 높은거죠.\n반대로 뭘 하든 얕게만 해보고 금방 실증을 내는 사람이라면 코딩을 해도 일\"을 해도 얕게만 할 확률이 높지 않을까요?\n이런 가능성과 성향을 판단하기 위해 면접이라는 장치가 있다고 생각합니다.</p>\n<ul>\n<li>내가 어떤 사람인지</li>\n<li>어떤 생각을 하는지</li>\n<li>어떤 장단점이 있고</li>\n<li>어떤걸 잘하며 어떤걸 할 때 몰입하는지</li>\n<li>어떤 문제들을 겪었고 어떻게 해결해왔는지</li>\n</ul>\n<p>자기 자신에 대해 구체적으로 이야기할 수 있어야합니다.\n나에 대한 구체적인 정보가 많을수록, 나와 같이 일하는 사람들은 일을 할 때 예측하기가 쉬워집니다.\n목표를 설정할 때 이를 잘 활용할 수도 있으며\n서로간의 문제가 있을 때 어떻게 풀어나가야 좋을지 알 수 있습니다.</p>\n<p>주절주절 떠들었는데, 결국 하고 싶은 이야기는 내가 <strong>같이 일하고 싶은 매력적인 사람</strong>이 되어야 하는거죠.\n이건 회사마다 다를 수 있지만 매력을 보여줄 수 있는 꽤 많은 것들은 소프트스킬이라고 생각합니다.</p>\n<p>공부는 혼자서도 할 수 있지만 다른 사람과의 상호작용을 통해서 \"나\"를 형성하는 과정은 절대 혼자서는 불가능합니다.\n그래서 저는 다양한 사람들과 다양한 경험을 하면서 나만의 가치관과 철학을 만들어 놓는게 무엇보다 중요하다고 생각합니다.\n이런 경험은 <strong>팀프로젝트</strong>, <strong>스터디</strong>, <strong>동아리</strong> 등을 통해서 시도해볼 수 있겠죠?</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">스스로에 대해 알아가는 과정</p>\n<p>대학생이라면 학교에 있는 다양한 상담 프로그램을 이용해보세요.\n저는 학교를 다니면서 꽤 많은 심리 상담을 받았습니다.\n다양한 심리학 수업을 통해서 받아보기도 했고 집단 심리 상담을 신청해서 받아보기도 했고 수없이 많은 적성검사를 받았습니다.</p>\n<p>그 과정에서 내가 어떤 사람인지 어떤 사람들을 좋아하는지 어떤 상황에 어떤 일을 할 때 행복한지 어떤 가치관을 가지고 있는지 등 다양한 모습을 알게 되었습니다.</p>\n<p><strong>글을 작성하는 지금도 가능하면 매일 1시간 이상 산책을 하면서 오늘의 나는 어제의 나와 어떤 점들이 달라졌는지 고민을 하고 있습니다.</strong></p>\n</div>\n<br>\n<h3>(3) 나에게 맞는</h3>\n<p>앞선 이야기를 토대로, 저는 처음부터 회사에 나 스스로를 맞추려고 하기 보단 나에게 제일 잘 맞는 회사를 찾아내길 바랍니다.\n<s>그게 제일 어렵다는게 문제지만요</s></p>\n<p>사람들이 대기업을 선호하는 이유는 보편적으로 <strong>내 가치관에 맞아들어가기 때문</strong>입니다.\n내가 100% 만족할 순 없지만 <strong>70% 정도는 맞기 때문</strong>입니다.</p>\n<p>반대로 대부분의 회사가 나에게 맞지 않는거죠.</p>\n<p>나와 맞지 않는 회사에 다니고 싶지 않은거고 그런 곳에서 일을 할 때 <strong>즐겁지 않고 행복하지 않기 때문</strong>입니다.</p>\n<p>역발상을 해보자면 나에게 100%까진 아니여도 90%는 들어맞는 회사가 분명히 있습니다.\n그런 회사를 찾아내기 위해선 결국 나 자신에 대해 잘 알아야 하는거죠.</p>\n<p><strong>회사가 여러분에게 아예 안 맞을 수도 있습니다.</strong>\n그렇다면 회사가 아닌 다른 길을 찾아야겠죠?\n혹은 회사에서 채울 수 없는 것들이 굉장히 많이 있습니다.\n그걸 알아야 하는 것도 결국 나의 몫인거죠.</p>\n<br>\n<h2>3. 학습 그 자체</h2>\n<h3>(1) 내가 좋아하는 공부 방법</h3>\n<p>마지막으로 <strong>학습하는 방법</strong>에 대한 이야기입니다.\n앞에서 방향성을 제시했는데요 저는 무엇보다 <strong>공부 그 자체가 제일 중요하다고</strong> 생각합니다.</p>\n<p>여러분은 공부가 즐겁나요?</p>\n<p>저는 즐거워야 한다고 생각합니다.\n공부가 즐겁지 않다면 그건 무언가 잘못된거라고 생각해요.</p>\n<p>저는 책을 읽는 것도 안 좋아하고 인강을 보는 것도 안 좋아합니다.\n<strong>코딩을 할 때가 제일 재밌습니다.</strong></p>\n<p>책을 읽고 있으면 코딩이 하고싶어지고 인강을 보고 있어도 코딩이 하고싶어집니다.\n그래서 코딩을 하면서 학습할 수 있는 스터디나 미션형 강의 등을 토대로 방대한 양의 내용을 단시간에 익히고 활용할 수 있는 방식으로 성장했습니다.</p>\n<p>하지만 이렇게 한다고 누구도 뭐라하지 않아요. 일을 할 때 필요한 최소한의 기초지식을 제외하곤 대부분의 지식은 필요할 때 배우면 됩니다.</p>\n<p>중요한건 내가 얼마나 <strong>학습에 대해 몰입하고 잘할 수 있는가</strong> 입니다.</p>\n<p>누군가는 혼자서 공부하는게 더 좋을 수도 있고 누군가는 친구들과 같이 공부하는게 더 좋을 수도 있습니다.\n누군가는 아침에 공부를 하는게 누군가는 저녁에 공부를 하는게 좋을 수도 있습니다.</p>\n<p><strong>나에게 딱 맞는 학습 방법을 찾아내는 게 제일 중요합니다.</strong></p>\n<p>이전 파트에서 이야기한 맥락과 이어지는 것 같은데</p>\n<blockquote>\n<p>도대체 나는 어떤 사람인가?</p>\n</blockquote>\n<p>를 고민해보는거죠. 어떤 상황에 몰입을 하는지 공부를 하는지.</p>\n<p>그리고 주변 사람이 같이 일하는 사람이 나의 이런 모습을 알아야합니다.\n그래야 내가 어떤 방식으로 학습하고 몰입하고 일을 하는지, 그걸 어떻게 성과로 연결할 수 있는지 알 수 있으니까요.</p>\n<p>일은 사람과 사람이 같이 하는 것이고 <strong>리더의 입장에서는 구성원이 어떤 상황에 몰입하는지 알고 있다면 팀이 좋은 성과를 낼 때 무척 유리합니다.</strong></p>\n<br>\n<h3>(2) 성공의 목적과 수단</h3>\n<blockquote>\n<p>행복한 사람이 성공하는 걸까? 성공한 사람이 행복한 걸까?</p>\n</blockquote>\n<p>이건 목적과 수단에 대한 이야기입니다.</p>\n<p>목적은 행복이고 수단이 성공이라면,\n<strong>성공이 꼭 행복의 수단이 될 필요는 없는거죠.</strong></p>\n<ul>\n<li>하고 싶은 공부를 하면서</li>\n<li>하고 싶은 일을 하면서</li>\n<li>즐거움과 행복을 느끼면서</li>\n</ul>\n<p>그렇게 성공 혹은 목표에 도달할 수도 있습니다.</p>\n<p>그리고 꾸준히 행복한 사람은 성공할 확률이 더 높다고 합니다.\n<strong>하지만 저는 행복한 사람들은 성공을 향해 달려간다고 생각하지 않아요.</strong>\n이미 행복하기 때문에 그냥 그 일을 계속 하는거죠.\n그러다보니 남들이 이야기 하는 \"성공\"에 도달해 있는거죠.\n남들이 이야기 하는 \"성공\"에 도달하지 못하다고 하더라도 이미 행복하면 그만이니까요!</p>\n<p>어차피 인생은 성공하기 위해 살아간다기보단 많이 그리고 자주 행복하기 위해 살아가는게 아닐까요?</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">100억</p>\n<p>요즘 주변 사람들에게 \"100억이 있다면 뭘 하고 싶어?\" 라는 질문을 자주 던집니다. 사실 제가 다른 사람들에게 들었던 질문이기도 합니다.</p>\n<p>저를 포함하여 대부분의 사람은 결국 이에 대한 답변으로 <strong>진정으로 자기가 하고 싶은 일</strong>에 대해 이야기합니다.</p>\n<p>반대로 생각해보면, 진정으로 하고 싶은 일을 지금도 하고 있는 사람은 100억이라는 가치를 깔고 앉아 있는 것과 같지 않을까요? <strong>누군가는 100억이 있어야 하는 일을 이미 하고 있는거니까요.</strong></p>\n</div>\n<br>\n<h2>Summary</h2>\n<p>길게 여러가지 이야기를 한 것 같은데 다시 요약해보자면 다음과 같습니다.</p>\n<h3>(1) 깊이</h3>\n<ul>\n<li>넓게 깊게 질적으로 공부할 것.</li>\n<li>어떤 언어를 공부할 때도 프로젝트를 할 때도 하나를 깊게 하는게 중요하다.</li>\n<li>프로젝트는 만들고 출시해보고 사용자 유입을 유도하고 다양한 장애 상황을 겪어보고 이 과정에서 다양한 문제 상황을 겪어보고 해결하고 정리하는 과정이 필요하다.</li>\n</ul>\n<h3>(2) 소프트스킬</h3>\n<ul>\n<li>우리가 취업을 위해서 공부하는 것들은 대부분 하드스킬이고 일을 하기 위해 필요한 \"도구\"이다.</li>\n<li>그렇다면 \"일을 잘 하는 방법\"에 대해서도 알고 있으면 좋다.</li>\n<li>일을 잘 하기 위해선 \"사람\"에 대해 이해하는게 무척 중요하다.</li>\n<li>일단 나 자신에 대해 이해하고 설명하는 게 제일 중요하다.</li>\n<li>같이 일하는 사람이 내가 몰입하는 상황과 환경에 대해 알 수 있게 해야 한다.</li>\n</ul>\n<h3>(3) 메타인지</h3>\n<ul>\n<li>목적과 수단을 항상 인지하자. 무엇(what)을 왜(why) 어떻게(how) 해야 하는지.</li>\n<li>어떤 과정을 겪었고 어떤 결과가 있었는지 이야기하고 생각해볼 수 있어야 한다.</li>\n</ul>\n",
      "date_published": "2024-01-13T23:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2023년 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2023-year/end/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2023-year/end/",
      "summary": "나 자신에 대해 참 많은 것들을 알 수 있었던 1년",
      "content_html": "\n<p>2022년 회고를 쓴게 정말 엊그제 같은데 벌써 1년이 지났다. 더닝크루거 곡선이 생각나는 일년이었달까?</p>\n<p>올해는 개발자로서의 성장 폭이 크지 않았던 것 같다.\n개발 외에 해야할 것도 생각해야 할 것도 해결해야할 것도 너무 많았다.\n인생은 정말 한치 앞도 알 수 없다는걸 참 많이 생각하게된 일년이다.</p>\n<p>작년까지는 회고를 작성할 때 타인에게 어필하고 싶은 내용들을 많이 담았다.\n앞으로는 못난 점들을 많이 담고 싶다.\n난 이전에도 못났고 지금도 못났고 앞으로도 못날 것 같지만, 느리고 더디고 힘들어도 성장 중이다.</p>\n<p>그래서 다른 사람에게 보여주기 위해서 작성하는게 아닌 내가 기록하고 싶은 내가 간직하고 싶은 나의 모습들을 덤덤하게 작성하고 싶다.</p>\n<h2>2023년 목표 달성 점검</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\">  미라클 모닝\n<ul>\n<li>대실패</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  운동\n<ul>\n<li>특별하게 많은 운동을 했던건 아니지만, 광교로 이사온 이후에 하루에 한 번 산책을 했다.</li>\n<li>가을까지는 하루 평균 11km 정도 걸어다녔고, 날이 추워지면서 조금 뜸하지만.. 결론적으로 하루 평균 9km 정도 걸어다녔다.</li>\n<li>산책이 심신의 건강을 유지하는데 지대한 역할을 했다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\">  <s>인강촬영</s>\n<ul>\n<li>시도는 했으나… 결론적으론 실패</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  청소하기\n<ul>\n<li>복잡한 생각을 하고 있을 때 집안일을 하면 마음이 편해진다. 주변을 정돈하면서 마음도 정돈한달까?</li>\n<li>이 글을 작성하고 있는 시점에도 아침에 2시간 정도 청소를 했다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  SNS 줄이기\n<ul>\n<li>숏츠 같은 무의미한(?) 것들은 많이 줄인 것 같다.</li>\n<li>인스타그램에는 대체로 고양이를 올리거나 산책할 때 찍은 것들을 올리거나?</li>\n<li>유튜브는 MBTI + 자기계발 영상으로 도배됐다. 그만큼 올해는 인간으로서의 성장에 대해 고민을 많이 했다는 점</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  바른자세 유지하기\n<ul>\n<li>몸이 펴졌다</li>\n<li>목, 어깨, 허리에 통증이 거의 없어졌다.</li>\n<li>자세는 원래도 바르게 유지하려고 했으나.. 운동(산책)의 영향이 컸달까</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  계획적으로 살기\n<ul>\n<li>1개월, 1년 단위의 계획을 설정하진 않았고 매일매일 해야할 일에 대한 계획을 설정했다.</li>\n<li>작은 것부터 시도해보니 어쨌든 계획을 하긴 하더라.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  독서\n<ul>\n<li>엄~~청 많은 책을 읽었다곤 할 수 없지만, 작년과 비교하면 장족의 발전이다.</li>\n<li>대략 10권 이상의 책을 읽은 것 같다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  이사\n<ul>\n<li>우여곡절이 조금 있었찌만, 결론적으로 10년 전부터 살고 싶었던 동네(광교)로 이사왔다.</li>\n<li>대만족!</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  어떻게 돈을 벌어야 좋을까 고민해보기\n<ul>\n<li>말 그대로 고민만 했다.</li>\n<li>다른 일들을 할 여력이 없었다.</li>\n</ul>\n</li>\n</ul>\n<p>사실 별 생각 없었는데, 돌이켜보니 달성이 된게 많았다. 일단 계획을 세우고 목표를 설정하면 시도를 하게 되고, 뭐라도 하게 되는게 아닐까?</p>\n<h2>1. nBilly</h2>\n<br>\n<h3>(1) 간단한 소개</h3>\n<p>nBilly는 팀 이름이면서 동시에 제품 이름이다.</p>\n<ul>\n<li>팀으로서의 nBilly: 웹 UI 제작 기술을 연구·개발 → 비즈니스의 성장을 돕는 <strong>기술 조직</strong></li>\n<li>제품으로서의 nBilly: WYSIWYG 으로 웹 UI 를 만들고 배포할 수 있는 도구</li>\n</ul>\n<p></p>\n<p>우리 팀이 추구하는 가치나 목표나 전략 등 다루고 싶은 내용이 참 많지만, 이곳에 언급할 내용은 아닌 것 같다. 내가 제일 중요하게 생각하는 부분은 팀과 팀원의 성장을 무척 중요하게 생각하고 있으며 이를 달성하기 위한 다양한 시스템이 구축되어 있으며 항상 고민을 하는 부분이라는 것. 이런 조직에서 일할 수 있다는게 참 행운이라고 생각한다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=zncmO90s0sk\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.youtube.com/watch?v=zncmO90s0sk</a></p>\n<p>올해 초에 같은 팀의 훈민님께서 우리 팀이 어떤식으로 아키텍쳐를 정의하고 개선했는지 deview에서 발표하셨다.  (팀에 대한 구구절절한 내용을 다루기보단 위의 영상으로 대체해도 되지 않을까!?)</p>\n<p>영상에 대한 후속으로 <a href=\"https://smartstudio.tech/bringing-consistency-to-broken-ui-layer/\" target=\"_blank\" rel=\"noopener noreferrer\">https://smartstudio.tech/bringing-consistency-to-broken-ui-layer/</a> 이런 글도 있다.</p>\n<p>제품으로서의 nBilly는 아직 계속 발전중이며, 소수의 인원으로 고군분투를 하고 있기 때문에 성장 방향에 따라 제품의 모습이 많이 달라질 것 같다.</p>\n<p>올해에 nBilly로 만들어진 사이트는 이런 것들이 있다.</p>\n<ul>\n<li><a href=\"https://campaign.nbilly.naver.com/nwec2023\" target=\"_blank\" rel=\"noopener noreferrer\">https://campaign.nbilly.naver.com/nwec2023</a></li>\n<li><a href=\"https://campaign.nbilly.naver.com/navergenerativeai\" target=\"_blank\" rel=\"noopener noreferrer\">https://campaign.nbilly.naver.com/navergenerativeai</a></li>\n<li><a href=\"https://campaign.nbilly.naver.com/whatsonyournetflix\" target=\"_blank\" rel=\"noopener noreferrer\">https://campaign.nbilly.naver.com/whatsonyournetflix</a></li>\n<li><a href=\"https://campaign.nbilly.naver.com/clova-for-writing-with-smarteditor\" target=\"_blank\" rel=\"noopener noreferrer\">https://campaign.nbilly.naver.com/clova-for-writing-with-smarteditor</a></li>\n<li><a href=\"https://campaign.nbilly.naver.com/ncfd23\" target=\"_blank\" rel=\"noopener noreferrer\">https://campaign.nbilly.naver.com/ncfd23</a></li>\n</ul>\n<p>여기에는 다룰 수 없지만 지금도 nBilly로 만들어지고 있는 사이트가 무척 많이 있고, 많이 오픈될 예정이다.</p>\n<p>nBilly에 대한 자세한 내용은 뒤로 미루고 (별도의 포스트로 작성하는게 더 좋겠다는 판단을 했다), 이 포스트에서는 개인적으로 했던 것들을 짤막하게 다뤄보고 싶다.</p>\n<br>\n<h3>(2) 기술적 성장, 시도, 난관.</h3>\n<p>길게 이야기 하면 끝이 없기 때문에, 최대한 간단하게 정리해보고자 한다.</p>\n<br>\n<h4><strong>&lt;모델 마이그레이션 자동화 + 모델 검증 자동화&gt;</strong></h4>\n<p>제품의 스펙이 변할 때 모델도 같이 변하는 경우가 무척 빈번했다. 모델이 변하면 DB에 있는 것들도 같이 변경해야 하고 모델에 대한 검증 코드도 같이 변경되어야 한다. 당연하지만 모델을 변경했을 때의 사이드 이펙트가 무척 크고 이를 해결하기 위해 사람이 하나하나 다 작업하는 것이 매우 비효율적이다.</p>\n<p>그래서 모델 변경에 최대한 자동으로 대응할 수 있는 방법에 대해 고민했고 적용했다.</p>\n<ul>\n<li>모델 마이그레이션\n<ul>\n<li>PR을 올릴 때, github actions로 현재 코드에 대한 모델 정합성을 검사한다.</li>\n<li>모델 정합성을 통과하지 못하면, 마이그레이션 스크립트를 작성해서 푸시해야 한다. 혹은 미리 해당 PR에 포함되어 있어야 한다.</li>\n<li>PR이 머지되면 일단 개발용 DB에 마이그레이션이 적용되고, 작성된 마이그레이션 스크립트는 별도의 폴더에 차곡차곡 쌓인다.</li>\n<li>릴리즈를 하는 시점에 마이그레이션이 완료된 스크립트를 기준으로 다시 리얼 DB에 적용한다.</li>\n</ul>\n</li>\n<li>모델 검증\n<ul>\n<li>typescript를 json schema로 바꿔주는 도구 → <code>ts-json-schema-generator</code></li>\n<li>json을 json schema로 validation 하는 도구 → <code>ajv</code></li>\n<li>모델(typescript)이 변경될 때 json schema를 만들어주고, 이를 토대로 사이트를 저장하거나 발행할 때 검증할 수 있도록 한다.</li>\n</ul>\n</li>\n</ul>\n<p>이러한 작업들은 github actions에 의존적인 작업이 많았고 덕분에 github actions에 대해 다방면으로 학습할 수 있었다. 다만… 마이그레이션이 잘못되었을 경우에 대한 조치가 현재 되어있지 않아서 이를 보완해야 한다. 마이그레이션을 실행하기 전에 DB를 백업하고 있지만, 실패하는 경우에만 복원하고 있기 때문에 실패를 하지 않더라도 의도한대로 마이그레이션이 되지 않았을 때에도 복원할 수 있도록 만들어 놓아야 한다.</p>\n<p>github actions에서 백업해놓은걸 어떻게 해야 다운 받을 수 있을지 고민이다. 찾으면 나오겠지만…? 짜투리 시간에 미리 찾아놓으면 되겠지?</p>\n<br>\n<h4><strong>&lt;애니메이션 기능 추가&gt;</strong></h4>\n<p></p>\n<p>사용자가 각각의 개체(페이지/섹션/컨테이너/블록)에 애니메이션을 적용할 수 있도록 만들었다. 애니메이션을 적용하는 부분은 사실 큰 문제가 아니었다. 제일 고민이 많이 되는 부분은 \"어플리케이션 계층에서 주입\" 하는 것. 애니메이션의 트리거가 다양하게 존재하고, 애니메이션의 형태도 다양하게 존재할 때 이를 잘 관리할 수 있는 방법을 생각하는게 무척 힘들었다.</p>\n<p>어떻게 할까 고민하다가, 어플리케이션의 설정 파일에서 애니메이션에 대한 keyframe과 trigger 함수를 정의하도록 했다.</p>\n\n<p>이러한 고민 덕분에 어플리케이션 계층에서 주입하거나 제거하거나 수정할 수 있기 때문에 손쉽게 애니메이션을 제어할 수 있게 되었다. 다만 이벤트 트리거에서 오류나 버그가 있을 때 이를 깔끔하게 해결하기가 어려웠다.</p>\n<p>그래도 이러한 작업을 하면서 이벤트에 대해 딥다이브 할 수 있었달까? 사실 이렇게 에디터를 만드는 작업 자체가 이벤트에 대한 딥다이브를 할 수 밖에 없다고 생각한다.</p>\n<p>또 갑자기 생각난건 에디터에서 애니메이션을 리플레이 하는 것. 에디터와 인스펙터가 코드상으로 멀리 있기 때문에, 인스펙터가 애니메이션을 의도적으로 재생시킬 때 어떤 방법을 사용해야 좋을지 무척 고민이 많았다. 결론만 이야기 하자면, 일종의 커스텀 이벤트 매니저를 이용하여 해결했다.</p>\n<p>다만 이런 도구를 남용할 경우 나중에 문제가 발생했을 때 트래킹을 하는게 무척 어렵고 힘들 수 있기 때문에 최대한 사용을 지양하고 있다.</p>\n<br>\n<h4><strong>&lt;와이드 영역 대응&gt;</strong></h4>\n<p></p>\n<p>개체가 화면을 꽉 채울 수 있는 기능을 만들었다. 꽉 채우는 방법은 여러가지가 있지만, 어떤 방식이 제일 효과적일지 찾아보고 적용하는 과정이 필요했다.</p>\n<p>이럴 때 밑바닥부터 어떻게 만들지 고민하기보단 이미 잘 만들어진 것들을 모방하는게 효과적이라는 것! 그래서 여러 웹 빌더를 찾아보다가 SqureSpace를 모방하여 와이드 영역의 1/2 만큼 진입하면 확장이 되도록 했다.</p>\n<p>이 때 <code>display: grid</code> 의 속성을 이용해서 와이드 영역의 너비를 지정하고, 와이드 영역에 진입시 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area\" target=\"_blank\" rel=\"noopener noreferrer\">grid-area</a>값을 변경하면 자동으로 반영되도록 만들었다. (예시: <code>grid-area: 1 / 2 / 1 / 2</code>)</p>\n<p>다만, 이 기능을 만들고 적용했을 때 사이드 이펙트가 정말 어마어마했다. 전부다 나열하기는 손가락이 아프기 때문에 스킵.</p>\n<p>기능을 작성한 다음에 테스트 코드로 어느 정도 보완할 수 있었을텐데, 기존에 테스트 케이스가 많이 부족했다.</p>\n<p>지금 돌이켜 생각해보면, QA에서 문제가 발견될 때 마다 테스트 케이스를 추가 및 보완해야 할 것 같은데… 참 안일하게 생각했다. <s>언젠간 업보로 돌아오겠지</s></p>\n<p>항상 기능을 개발할 때는 데드라인 때문에 급하게 만들고, 결국 QA에 더 많은 시간을 쓰게 된다. 투입되는 총 시간은 오히려 테스트 케이스를 작성하여 보완하는게 더 적을텐데… 물론 모든 케이스를 테스트로 잡기는 힘들겠지만, 항상 테스트 코드를 작성할 때 이런 점들을 고려해야겠구나 싶다.</p>\n<p>일년을 돌이켜보면 개발할 때 영혼이 좀 없었나 싶기도 하고?</p>\n<br>\n<h4><strong>&lt;캐로셀 컨테이너&gt;</strong></h4>\n<p></p>\n<p>기존의 <code>페이지 → 섹션 → 블록</code> 계층에서 <code>페이지 → 섹션 → 컨테이너 → 블록</code> 처럼 \"컨테이너\" 계층을 새로 만들고, \"캐로셀 컨테이너\" 라는 개체를 만들었다. 컨테이너는 블록보다 더 복잡한 UX/UI를 표현할 수 있으며 블록을 가질 수 있는 계층이다.</p>\n<p>일단 컨테이너라는 계층을 너무 급하게 만들어서 지금도 사이드 이펙트가 크게 남아있다. <s>손봐야 할 곳이 참 많은 친구다</s>. 처음에는 swiper.js로 캐로셀을 구현했는데… swiper에 자잘한 버그가 많고, 인스펙터 영역에서 캐로셀을 컨트롤할 때 의도대로 되지 않는 것들이 참 많았다.</p>\n<p>어떻게 할까 고민하다가 사내에서 만든 eg-js의 flicking을 이용해서 구현했는데, 해당 라이브러리가 처음부터 리액트 기반으로 만들어진게 아니기 때문에 캐로셀의 상태를 관리할 때 무척 힘들었다. 사실 단순하게 사용하면 큰 문제가 없으나… 인스펙터에서 캐로셀을 컨트롤 할 때 발생하는 무수히 많은 사이드 이펙트가 존재했다.</p>\n<p>결국 고심 끝에 직접 캐로셀을 구현했고 스와이프 기능은 <code>react-swipeable</code> 을 이용해서 적용했다.</p>\n<p>이 작업을 하면서 \"어렵고 귀찮아서 시도하지 않는 것\"에 대한 생각이 많았다. 내가 어떤 일을 할 때 \"어렵고 귀찮다\"는 판단이 들면서 망설이게 된다는 것. 이걸 깨기 위해 의식적인 노력을 많이 했는데, 여전히 내가 재미를 느끼고 관심이 가는 일이 아니면 하기 망설여지는 마음이 있다.</p>\n<p>더 근본적인 문제는, 내가 가진 시야가 참 편협하다. 작고 자잘한 것들은 잘 살펴보려고 하지만, 크고 넓은 것들에 대해서는 생각하기가 힘들고 생각만 해도 스트레스를 참 많이 받는다.</p>\n<br>\n<h4><strong>&lt;스냅 그리드 좌표계 → 절대 좌표계 전환&gt;</strong></h4>\n<p></p>\n<p>처음에 nBilly를 출시할 때는 grid-area를 이용하여 8px, 6px, 4px 단위로 이동 및 크기 조절을 할 수 있도록 만들었다. 다만, 이렇게 했을 때 사용자의 다양한 요구사항을 충족시키기가 어려웠고, 억지로 요구사항을 맞추려고 하다보니 복잡한 코드들이 만들어졌다. 그래서 고심 끝에 절대 좌표계로 편집 시스템을 전환했다.</p>\n<p></p>\n<p>편집의 기저를 변경하는 과정이였기 때문에 무척 오래 걸렸고, 사이드 이펙트도 굉장히 많았다. 하고 싶은 말도, 담고 싶은 내용도 정말 너무 많지만… 결과적으로 2달 가까이 QA를 하는 사태가 발생했다.</p>\n<p>제일 이슈가 되었던 부분은 멀티 디바이스 대응이었던 것 같다. Desktop 모드에서는 편집이 잘 되거나 해도 Tablet이나 Mobile 모드에서는 잘 안 되거나, 일관성이 없거나, 좌표가 이상하거나, 기타 등등…. 정말…. 너무 많은 문제가 있었다.</p>\n<br>\n<h4><strong>&lt;에디터 편집 성능 최적화&gt;</strong></h4>\n<p>제일 몰입을 많이 했던 일이 성능 최적화였다. 성능 최적화 작업을 할 때는 하루 종일 일 생각만 하지 않았나 싶다.</p>\n<p>일어났을 때, 씻을 때, 밥먹을 때, 산책할 때, 자기 직전 등 거의 모든 순간을 \"어떻게 해야 성능이 좋아질까?\" 에 대해 고민했다. 그만큼 재미도 있었고 보람도 있었고 힘들기도 했고.</p>\n<p></p>\n<p></p>\n<p>기존에 Context와 Store를 모든 영역에서 남발하여 사용하고 있었다. 덕분에 편집 인터랙션이 발생하면, 모든 컴포넌트가 리렌더링 되는 현상이 발생했다. 프로파일을 해보면 모든 영역에서 렌더링이 발생하는걸 확인할 수 있었다.</p>\n<p></p>\n<p>각각의 컴포넌트가 알아야 하는 Context의 Scope를 제한하고, Store의 경우 필요한 값만 가져와 사용하는 방식으로 이를 개선했다.</p>\n<p></p>\n<p>편집 중(개체가 이동 중이거나 리사이즈 중)일 때는 context만 변경되기 때문에, 렌더링 비용이 조금 더 낮았고</p>\n<p></p>\n<p>편집이 완료되는 시점에 store에 업데이트를 하는데, 이 때에도 store를 참조하는 컴포넌트들이 정말 꼭 필요한 값만 가져다 사용하도록 하고, 값이 변경되지 않았을 경우 렌더링이 되지 않도록 하여 최적화를 했다.</p>\n<p>이 외에 뷰어 성능 최적화도 했는데, 크게 기여하진 않았기 때문에 일단 생략. <s>(쓰기 귀찮아서 그런건 절대 아니다)</s></p>\n<br>\n<h4><strong>&lt;테스트코드 보완&gt;</strong></h4>\n<p></p>\n<p>앞에서 언급한 편집 좌표계 전환 + 성능 최적화 작업을 하면서 테스트 코드의 커버리지를 50%에서 65% 정도로 끌어올렸다.</p>\n<p>이전에는 테스트 코드를 작성할 때 막연한 두려움이 있었는데 (일종의 어렵고 귀찮은…?), 계속 작성하다보니까 생각보다 재밌기도 하고, 숙련도가 높아지니까 속도가 붙었다. 이쁘게 잘 작성하는건 둘째치고 일단 만들어놔야 뭐라도 되지 않을까 하는 생각으로 작성했던 것 같다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">무언가를 잘 하기 위해선 일단 익숙해져야한다.</p>\n<ul>\n<li>몸을 잘 쓰기 위해선, 몸을 쓰는게 익숙해야 한다.</li>\n<li>머리를 잘 쓰기 위해선, 머리를 쓰는게 익숙해야 한다.</li>\n<li>코딩을 잘 하기 위해선, 코딩을 하는게 익숙해야 한다.</li>\n<li>설계를 잘 하기 위해선, 설계를 하는게 익숙해야 한다.</li>\n<li>테스트를 잘 짜기 위해선, 테스트 코드를 작성하는게 일단 익숙해야 한다.</li>\n</ul>\n</div>\n<p>마음만 조급해선 안 된다는걸, 요즘들어 참 많이 느끼고 있다.\n빨리 가는 길이 있을 수 있지만, <strong>결국 밑바닥부터 차곡차곡 쌓아가지 않으면 안 되는 영역이 존재한다.</strong>\n다른 사람은 어떨지 몰라도 일단 나는 그런 사람이다.</p>\n<p>타고난 재능도 없고, 특출나게 잘하는 것도 없고, 그저 남들에게 지금은 \"잘 하는 것 처럼 보일 수 있는 영역\"은 무수히 많은 시간을 투자해서 조금이나마 그럴듯해 보이는 것들이다.</p>\n<p>어려운 일도, 힘든 일도, 일단 부딪혀보고 익숙해져야 한다.</p>\n<p>24년의 목표이기도 하고, 다짐이기도 하고?</p>\n<br>\n<h4><strong>&lt;비디오 업로드 추가 + 모듈화&gt;</strong></h4>\n<p></p>\n<p>단순해보이는 이 기능을 만들기 위해 생각보다 많은 삽질을 했다. 온전히 모든 기능을 직접 구현하는게 아니라 외부 의존이 존재했기 때문에, 관련 자료들을 꼼꼼하게 수집해야 했으나 그러질 못했다.</p>\n<p>다른 티켓을 작업할 때도 그렇지만, 이 티켓을 작업하면서 나의 단점과 나의 부족한 부분이 너무 많이 보였다.</p>\n<p>나는 시야가 좁다. 정확히는, 멀리 봐야 되는데 멀리 보질 못한다. 생각이 거기까지 뻗어나가질 못한달까..</p>\n<p>다른 사람들에게는 커뮤니케이션의 중요성을 이야기 하곤 하지만, 정작 내가 이걸 제대로 못하고 있었다. 내 상태와 내가 하고 있는 일의 상태를 주기적으로 팀 내에 공유하는 것이 매우 중요하다는 것. 문제 해결을 주도하는 사람, 리딩하는 사람에게는 \"예측\"이 중요하다. 그게 일이든 사람이든 어느 정도는 예측이 되거나 관리가 되어야 하는데, 그걸 위해선 직접 확인을 하거나 혹은 보고가 오거나.</p>\n<p>나의 경우 이 일을 진행하면서 확인을 하지도 않았고, 관리자에게 이야기를 하지도 않았다. <s>최악이다</s></p>\n<p>나는 사람 활용을 잘 못하는 편이다. 일단 잘 안 풀릴 때, \"도와주세요!\" 라고 쉽게 이야기를 할 수 있어야 하는데 그게 참 어렵다. 주변에 나를 도와줄 수 있는 사람이 참 많은데, 혼자서 끙끙 앓는걸 참 오래 한다. <s>사실 어릴 때부터 그렇게 살아온게 익숙한게 제일 크다.</s></p>\n<p>어쨌든, 더 적극적으로 나에게 주어진 모든 자원을 활용해보고 싶다.</p>\n<br>\n<h4><strong>&lt;생애 첫 TF&gt;</strong></h4>\n<p>어쩌다보니 23년 하반기에 어쩌다보니 TF 팀에 착출(?)이 되었다. 자세한 내용을 이야기할 수는 없지만, 입사 후에 nBilly 팀이 아닌 다른 사람들과 같이 일을 해본게 처음이라 무척 신선한 경험이었다.</p>\n<p>어떻게 목표를 설정해야 하고, 내가 가진 생각을 어떤식으로 정제해서 전달해야 효과적인지에 대해 매일 생각했던 것 같다.</p>\n<p>이런 고민을 할 당시에 팀 내에서 \"사용자 스토리\" \"예제를 활용한 명세\" 등의 책으로 스터디를 하고 있었다. 커뮤니케이션을 할 때 전문용어로 이야기를 하기보단, 예제나 사용자 스토리는 그 자체가 목표 혹은 목적이 되고, 이를 달성하기 위해 필요한 것들로 연결지어 설명했을 때 효과가 좋은 것 같다.</p>\n<p>그래서 \"우리가 만드는 서비스 혹은 도구를 사람들은 어떻게 사용할까?\" 를 기준으로 자료를 만들고, 이를 기반으로 우리가 해야되는 것들에 대해 이야기를 하고자 했다.</p>\n<p>이 외에도 초기 개발환경 구성, 인프라 구성, 배포환경 구성, 피그마 플러그인 프로토타입 개발 등 자잘한 것들을 했었는데 꽤 재밌었다.</p>\n<p>하지만 nBilly 지원이 더 급했기 때문에 TF에서는 두 달 정도만 참여하고 복귀했다.</p>\n<br>\n<h3>(3) 무수히 많은 아쉬운 점들</h3>\n<p>팀에서의 내 모습을 생각해보면 전체적으로 불만족스럽다. 올해는 거의 매일 산책을 하면서 내가 하는 일에 대해서, 우리 팀에 대해서 고민을 꽤 많이 했다. <strong>일을 잘 하고 싶어서 고민을 많이 했으나 잘하긴 개뿔… 맨날 털린다.</strong></p>\n<p>우리 팀은 좋은 문화를 성숙한 문화를 만들어왔고, 앞으로도 더 좋아질 것이다. <strong>하지만 팀이 아니라 황준일이라는 개인을 놓고 보면 참 문제 투성이다.</strong></p>\n<p>23년에는 팀의 목표가 회사의 방향성에 맞춰서 유기적으로 변했으나, 팀의 목표에 맞춰서 나의 목표가 변하지 못했고, 큰 흐름을 쫓아가지 못했다. 못한게 참 많다. 못한걸까 안한걸까 생각해보면 안 한 것에 가깝지 않을까?</p>\n<p>앞으로 어떻게 해야 좋을지 연말 연휴 때 꽤 깊게 생각했고 결론을 내렸고 방향성도 정했다고 생각했는데, 글을 쓰는 지금 시점에는 또 모호해진 것 같다. 사실 방향성이라는게 나 혼자 정한다고 끝이 아니라 팀에 align이 되어야 한다. 그래서 내가 생각한 방향성이 맞는지 1월 중으로 확인해보고 싶다. <s>일단 급한불부터 끄고</s></p>\n<p>그리고 또 한 가지 내가 크게 잘못한 점을 생각해보면, <strong>\"일\"이 아니라 \"사람\"에 대해 너무 많이 고민을 했다는 것.</strong> 일을 잘 하고 싶으면 일 자체에 대해 고민을 하는게 맞을텐데 그러질 않았다.</p>\n<p>각각의 사람들이 어떤 행동을 했을 때 그런 행동을 하는 이유들이 궁금했고, 다른 사람들이 가지고 있는 장점과 단점에 대해 생각하는게 재밌었고, 나와 비교해보면서 나는 또 어떤 사람인지 알아가는게 재밌었다.</p>\n<p>팀에 대해 생각하고 → 개개인에 대해 생각하고 → <strong>다시 나에 대해 생각하고.</strong></p>\n<p>이게 꼭 팀에 국한된게 아니라, 올해에 내가 만났던 모든 사람들에 대해 꽤 깊게 생각했다.</p>\n<p>가족, 친구, 동료, 후배, 제자, 그리고 짧게 스쳐간 다양한 인연들.</p>\n<p>올해는 내가 \"황준일\" 이라는 존재를 다방면에서 잃어버렸었다. 난 왜 이모양일까, 왜 이런 사람일까, 왜 이런 생각을할까 궁금했다. 나를 둘러싸고 있는 사람들과 그 속에서의 내 모습을 조립해보며 <strong>나를 찾아가는 시간들</strong>이었다.</p>\n<p>아마 이건 해가 바뀌어도 달라지지 않을 것 같다. 오늘도 그랬고, 어제도 그랬다. 사실 진작에 했어야 하는 생각들이 아니었을까?</p>\n<p>삼천포로 빠진 것 같은데, 어쨌든 23년의 nBilly에서의 내 모습을 정리해보면 아래와 같다.</p>\n<ul>\n<li>커뮤니케이션을 잘 하지 못했고</li>\n<li>생각만 많았고</li>\n<li>주저한 행동이 많았고</li>\n<li>기술적인 성장이 더디고</li>\n<li>주도성이 부족했고</li>\n<li>많은 사람들을 답답하게 했고</li>\n<li>나를 잘 드러내지 못했고</li>\n<li>기대에 부응하지 못했고</li>\n<li>문제 정의를 잘 하지 못했고</li>\n<li>목표 설정을 잘 하지 못했고</li>\n<li>큰 그림을 보질 못했고</li>\n<li>멀리 보질 못했고</li>\n<li>프로 의식이 부족했고</li>\n<li>팀원을 잘 활용하질 못했고</li>\n</ul>\n<p>내년엔 조금 더 나아질 수 있기를 🙏</p>\n<br>\n<h3>(4) 24년에 대한 짧은 다짐</h3>\n<ul>\n<li>제일 하고 싶은건 제품의 퀄리티를 높이는 것.\n<ul>\n<li>팀의 목표와는 별개로, 그냥 내가 참 하고 싶은 일이다.</li>\n<li>그러기 위해선 더 분주하게 움직여야 하고, 해야 하는 일을 잘 마무리를 하고, 내가 하고 싶은 일을 틈틈이 해야되겠지?</li>\n</ul>\n</li>\n<li><strong>가파른 성장은 결국 단단하게 쌓아올리는 것들 위에서 이루어진다.</strong> 제일 효율적으로 성장하는 방법은 결국 \"시도\"하는 것. 빠른 길은 정직하게 가는 길.</li>\n<li>사람에 대해 고민하는게 아니라 그 사람이 하는 고민에 대해 같이 고민을 해야한다는 것. 팀원들이 하는 고민을 나도 같이 해보고 그걸 습관화 해보자.</li>\n<li>내 상태와 내가 하는 일의 상태를 주기적으로 공유하는 것.\n<ul>\n<li>\"힘들어요! 도와주세요!\"</li>\n<li>\"제가 도울 일이 없을까요?\"</li>\n<li>\"이러저러한 것들에 대해 고민을 해봤어요.\"</li>\n</ul>\n</li>\n<li>목표에 대해 매일매일 점검하기.\n<ul>\n<li>23년에는 KPI가 그냥 무조건 싫었는데, 이제는 왜 중요한지 왜 필요한지 인지했고 이걸 잘 활용해보고 싶다.</li>\n<li>습관화가 되어야 한다.</li>\n<li>어렵다고 힘들다고 회피하는게 아니라 부딪혀야 한다.</li>\n</ul>\n</li>\n</ul>\n<p><br><br></p>\n<h2>2. 활동</h2>\n<h3>(1) 오글오글(오글거려도, 오늘의 글쓰기)</h3>\n<p>네이버에 입사해서 제일 잘한 일 중에 하나가 바로 \"오글오글(오늘의 글쓰기)\" 이라는 사내동아리에 가입한 것이다. 어떤 주제든 상관 없이, 분량도 상관 없이, 일단 작성을 하면 된다. 덕분에 이전에는 항상 \"남들에게 보여주기 위한 글\"을 작성했다면, 이제는 <strong>\"내가 쓰고 싶은 글\"</strong> 을 작성하고 있다.</p>\n<p>더불어서 다른 사람이 작성한 글을 보며 느끼는게 참 많이 있다. 다양한 간접 경험을 할 수 있달까? 인생에 대해, 삶에 대해, 일에 대해, 같은 회사 사람들이 남기는 글들을 보고 있으면 <strong>그냥 이 자체가 삶이구나</strong> 생각이 든다.</p>\n<br>\n<h4><strong>&lt;수치로 보자&gt;</strong></h4>\n<p>| 1월 - 23글 | 2월 - 22글 | 3월 - 8글 | 4월 - 21글 | 5월 - 23글 | 6월 - 23글 |\n|</p>\n",
      "date_published": "2024-01-09T10:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "프레임워크 없이 만드는 SSR",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Server-Side-Rendering/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Server-Side-Rendering/",
      "summary": "프레임워크를 사용하지 않고 SSR과 CSR을 적용해보면서 프론트엔드에서의 SSR에 대해 학습합니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>✒️ 본 게시물은 줌인터넷에 재직할 때 작성한 <a href=\"https://zuminternet.github.io/vue-ssr/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue SSR 제대로 적용하기 (feat. Vanilla SSR)</a>의 <strong>프레임워크 없이 적용해보기(Vanilla SSR)</strong> 파트를 조금 더 고도화한 것입니다.</p>\n</div>\n<h2>1. SSR과 CSR</h2>\n<br>\n<h3>(1) SSR(Servier Side Rendering)이란 무엇인가?</h3>\n<p></p>\n<p>SSR은 쉽게 말해서 <strong>“서버에서 HTML을 문자열로 만들어주는 것”</strong> 이라고 할 수 있다.\n사실 렌더링이란 표현이 무척 어색하다.\n렌더링이라기보단, 문자열을 만들어 주는 것이다.\n아마 Client Side Rendering 이라는 표현의 대비로 만든 표현이 아닐까?</p>\n<p>나는 2011년도에 PHP라는 언어로 웹 개발에 입문했다.\nPHP는 Hypertext Preprocessor(HTML 전처리기)를 의미한다.\n<a href=\"https://ko.wikipedia.org/wiki/PHP\" target=\"_blank\" rel=\"noopener noreferrer\">위키백과</a>에 있는 표현을 빌리자면\n<strong>“동적 웹 페이지를 만들기 위해 설계되었으며 이를 구현하기 위해 PHP로 작성된 코드를 PHP 엔진에서 html 파일과 같이 처리하여 작성자가 원하는 웹 페이지를 생성”</strong> 하는 언어이다.\nHTML 문자열을 서버에서 동적으로 만들어낸다는 것이다.</p>\n<p><code>index.html</code>은 정적인 한 개의 페이지를 의미하고, <code>index.php</code>는 수 십, 수 백, 수 천개의 페이지를 “동적”으로 보여줄 수 있는 페이지가 될 수 있다.</p>\n<p></p>\n<p>즉, 서버에서 정의한 규칙에 따라 HTML 문자열을 동적으로 만들어낼 수 있었고, 원래는 이게 웹 개발의 자연스러운 모습이었다.\n<strong>웹 개발자들은 SSR이라는걸 인지하지 않고 SSR을 하고 있었다는 것이다.</strong></p>\n<br>\n<h3>(2) CSR의 등장하기 까지</h3>\n<p>웹 사이트는 쉽게 말해서 <strong>문서(Document)</strong> 이다.\nHTML을 이용하여 텍스트에 의미와 규칙을 부여하여 문서를 구성하고, 웹 브라우저를 이용해 이를 출력(렌더링) 되도록 만든 것이다.</p>\n<p></p>\n<p>그러다 웹 브라우저에 이미지도 넣고, 동영상도 넣고, 플래시도 넣고, 넣을 수 있는 미디어는 다 넣을 수 있게 되었다.\n어렸을 때는 웹 사이트에 올라와있는 플래시 게임들을 즐겼었다.</p>\n<p>이 외에도 웹 사이트에서 할 수 있는 것들이 점점 많아졌는데,\n가령 구글에서 <code>ajax(Asynchronous Javascript And XML)</code>라는 웹 API를 이용하여 gmail과 google map을 만들었다.\n즉, <strong>페이지 이동 없이</strong> 서버의 데이터를 불러올 수 있게 된 것이다. 필자는 처음 Ajax를 사용했을 때 무척 신기했다.\n브라우저에서 직접 서버의 데이터를 가져올 수 있다는 것이,\n그래서 페이지의 새로고침 없이 사용자에게 새로운 정보(UI)를 보여줄 수 있다는 것이 굉장히 세련된 기술이라고 느꼈다.</p>\n<p></p>\n<p>그러다 <strong>아이폰</strong>과 아이폰에서 실행되는 <strong>모바일 앱</strong> 이라는 것들이 등장했다.\n그리고 구글에서는 <strong>안드로이드 OS</strong>를 만들었으며, 그렇게 스마트폰이 전세계적으로 보급되고, <strong>모바일 앱은 소프트웨어 산업의 큰 축</strong>이 되었다.</p>\n<p>그래서 사람들은, 기업들은 <strong>앱 개발</strong>을 하기 시작했다. 아니, 앱 개발을 해야만 했다. 그래야 자본주의 시장에서 돈을 벌 수 있고 생존할 수 있었으니까.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">앱과 웹</p>\n<p>뜬금없이 앱 개발을 언급하는 이유는, <strong>웹의 폭발적인 발전은 앱의 등장 이후라고 생각하기 때문</strong>이다.</p>\n<p>일단 앱 개발을 한다고 치면, 적어도 두 개(iOS와 Android) 이상의 OS에서 동작하도록 만들어야했다. 그래야 사용자를 잘 확보할 수 있기 때문이다.</p>\n</div>\n<p></p>\n<p>그래서 Android 개발자와 iOS 개발자를 채용해야 했고, 심지어 모바일 웹도 만들 수 있게 웹 개발자도 필요했다.</p>\n<p>가령, 필자가 근무하고 있는 네이버를 예로 들자면</p>\n<ul>\n<li>데스크톱 웹(naver.com)</li>\n<li>모바일 웹(m.naver.com)</li>\n<li>모바일 앱(iOS, Android)</li>\n<li>…</li>\n</ul>\n<p>이런 식으로 서비스를 사용자들에게 다양한 형태로 보급하고 있다.\n옛날에는 웹 개발자 한 명만 있으면 됐었는데, 이제 앱 개발자 + 웹 개발자 모두 필요한 것이다.\n기업 입장에서는 <strong>비용에 대한 생각</strong>을 할 수 밖에 없을 것이다.</p>\n<p>그리고 모바일 앱의 경우 업데이트가 쉽지 않다.\n웹은 서버에 배포하면 끝이지만,\n앱은 업데이트를 할 경우 검수도 받아야 하고,\n사용자가 직접 배포된 앱에 대해 업데이트를 실행해야 새로운 기능들을 이용할 수 있는 것이다.</p>\n<p>이 때 문제가 되는 것은, <strong>어플리케이션에 치명적인 문제가 있어서 당장 업데이트를 해야되는 상황</strong> 일 때 이다.\n단순히 작은 버그일 수도 있고, 보안과 관련된 문제일 수도 있고, 혹은 서비스 유지비에 구멍이 있어서 이를 막아야 하는 경우일 수도 있다.\n하지만 어떤식으로든 <strong>모바일 앱은 사용자가 업데이트를 해야</strong> 최신화가 된다.</p>\n<p>다시 기업(서비스 제공자)의 입장에서 할 수 있는 핵심 고민거리를 나열해보자.</p>\n<ul>\n<li>어떻게 해야 최대한 적은 돈으로 서비스를 제공할 수 있을까?</li>\n<li>어떻게 해야 모바일 앱을 즉시 업데이트할 수 있을까?</li>\n</ul>\n<p>이렇게 두 가지 축이라고 생각하는데, 이를 해결해줄 수 있는 수단이 바로 \"웹\"이다.\n<strong>꼭 네이티브로 구성하지 않아도 되는 부분을 웹 뷰로 제공한다면,</strong> 이슈가 생겼을 때 바로 업데이트할 수도 있으며 많은 수의 앱 개발자들을 필요로 하지 않을 것이다.</p>\n<p>대신 웹에서 네이티브 앱까지의 퍼포먼스까지는 아니더라도 어떻게든 <strong>네이티브 앱과 유사한 사용성</strong>을 만들어내야 했다.\n그래서 등장한 것이 Angular, Vue, React 같은 프론트엔드 프레임워크라고 생각한다.\nUI에 대한 관리포인트가 많아질수록 과거의 SSR 방식이 발목을 잡았을 것이며, 이를 해결하기 위해 프론트엔드를 전문적으로 다루는 개발자와 프레임워크가 생겨난 것이다.</p>\n<p><strong>웹(Client)에서 렌더링을 어떻게 빠르게 할 수 있을지, 정교하게 관리할 수 있을지 고민하기 시작했고, CSR(Client Side Rendering)이란 개념을 만들어냈다.</strong></p>\n<p>이제 서버에서는 REST API로 JSON이나 XML를 만들고, 웹 브라우저에서 Javascript로 UI를 그리는 현재의 모습이 된 것이다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">정리</p>\n<ol>\n<li>과거에는 원래 SSR이 자연스러웠다.</li>\n<li>스마트폰과 모바일 앱이 등장했다.</li>\n<li>모바일 앱은 개발 비용과 유지 비용이 많이 든다. (iOS + Android + 검수 + 업데이트)</li>\n<li>이를 해결하기 위해 앱에 웹을 불러오는 하이브리드 방식의 앱을 만들기 시작했다.</li>\n<li>다만 웹은 앱에 비해 무척 느리고 무거웠기 때문에, 앱과 유사한 사용성을 제공하기 위해 많은 연구가 이루어졌고, 브라우저가 발전해갔으며 자연스럽게 프론트엔드 개발자들이 생겼고, 프론트엔드 프레임워크도 생겼다.</li>\n<li>지금은 브라우저에서 오직 Javscript만 이용하여 UI를 만드는 것(CSR)이 자연스러운 모습으로 자리잡혔다.</li>\n</ol>\n</div>\n<br>\n<h3>(3) 왜 SSR이 필요한가?</h3>\n<p>개발자는 항상 “왜”를 생각해야 한다.</p>\n<ul>\n<li>이 기술을 “왜” 써야 할까?</li>\n<li>“왜” SSR이 필요한걸까?</li>\n<li>“왜” CSR로는 충분하지 않을걸까?</li>\n<li>…</li>\n</ul>\n<p>CSR을 한다는 것은 <strong>자바스크립트 파일이 비대해진다</strong>는 것이다. 그래서 브라우저는 자바스크립트 파일을 파싱하여 화면에 렌더링하기 까지의 시간이 늘어난다.</p>\n<p></p>\n<p>브라우저가 서버에서 받아오는 최초의 HTML은 고작 <code>&lt;div id=\"app\"&gt;&lt;/div&gt;</code> 혹은 <code>&lt;div id=\"root\"&gt;&lt;/div&gt;</code> 한 줄 인데,\n이렇게 될 경우 <strong>검색엔진이 사이트의 내용을 파악하여 색인하는 것이 불가능</strong> 해진다.</p>\n<p></p>\n<p>쉽게 말해서 CSR은 <strong>사용성</strong>과 <strong>사용자 유입</strong>에 대한 <strong>손실</strong>이 있다. 이를 해결하기 위해 SSR(Server Side Rendering)을 해야 하는 것이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">정리</p>\n<ul>\n<li>브라우저가 자바스크립트 파일을 해석하여 렌더링 하기 전에, Server에서 내려준 HTML 문자열을 토대로 렌더링을 한다. (사용성 확보)</li>\n<li>검색 엔진이 웹 페이지에 접근했을 때 HTML 문자열을 해석하여 색인(인덱싱)이 가능해진다.</li>\n</ul>\n</div>\n<p></p>\n<p>필요한 이유(Why)는 알았는데, 문제는 과거의 SSR 방식으로는 이 문제를 해결할 수 없다는 것이다. 어떻게(How) 이 문제를 해결할 수 있을까?</p>\n<br>\n<h3>(4) 관심사 분석 및 분리</h3>\n<p>\"관심사\" 라는 용어를 많이 들어봤을 것이다. 우리가 작성하는 코드들의 <strong>목적</strong>을 잘 분석해보면 어떨까?\njavascript로 간단하게 할 일 목록을 만들어서 출력하는 코드를 작성해보자.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Todo List<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">$app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;ul&gt;</span>\n<span class=\"line\">    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;/ul&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 작성한 코드를 한 번 분석해보자.</p>\n<ul>\n<li>data</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이 코드는 브라우저에 종속적이지 않은 자바스크립트 코드이다. 그냥 “배열”이다.</p>\n<ul>\n<li>view</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">$app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;ul&gt;</span>\n<span class=\"line\">    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;/ul&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 코드는, data를 토대로 DOM을 만들고 있다. 즉, “브라우저에 종속적”인 코드이다. 그런데 잘 보면 “브라우저에 독립”적인 코드가 보인다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이 부분은 DOM이 아닌 “문자열”을 만드는 코드이다. 그래서 전체적으로 다음과 같이 분리해볼 수 있을 것 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token doc-comment comment\">/*********** 브라우저에 독립적인 코드 ***********/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Data</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Component</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token doc-comment comment\">/*********** 브라우저에 독립적인 코드 ***********/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token doc-comment comment\">/*********** 브라우저에 종속적인 코드 ***********/</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">$app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token doc-comment comment\">/*********** 브라우저에 종속적인 코드 ***********/</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>이렇게 관심사를 분리해볼 수 있을 것이다.\n여기서 <strong>브라우저에 독립적인 코드</strong>는 Node.js로 만들어진 서버에서 <strong>재사용</strong>할 수 있지 않을까?\nSSR이 가능해지지 않을까?</p>\n<p>이에 대한 검증은 뒤에서 자세히 다뤄보도록 하겠다.</p>\n<h2>3. MVVM Pattern</h2>\n<p>뜬금없지만 MVVM Pattern을 짚고 넘어가야 SSR을 더 잘 설명할 수 있을 것 같다.</p>\n<p>MVVM은 <code>Model</code> - <code>View</code> - <code>ViewModel</code> 이라는 관심사로 이루어진 패턴이다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">MVVM Pattern</p>\n<ol>\n<li>\n<p>Model을 토대로 ViewModel(실제 View는 아니지만, View의 모습을 본뜬 것)을 구성한다.</p>\n</li>\n<li>\n<p>ViewModel에 변화가 생기면 View에 반영한다.</p>\n</li>\n<li>\n<p>ViewModel은 Runtime(브라우저, 서버, 앱)에 독립적이다. React에서 쓰는 JSX(VirtualDOM)이 이에 해당한다.</p>\n</li>\n<li>\n<p>View는 브라우저, 서버, 앱 등 런타임에 종속적이다.</p>\n<ul>\n<li>브라우저 → DOM(Document Object Model)</li>\n<li>서버 → 표준입출력, 콘솔 등</li>\n<li>앱 → Native View</li>\n</ul>\n</li>\n</ol>\n</div>\n<p>어떤 내용인지 아직 감이 잡히지 않을 것이다.</p>\n<p>그럼 앞에서 작성한 코드를 토대로 MVVM이 무엇인지 자세하게 살펴보자.</p>\n<br>\n<h3>1) Model</h3>\n<p></p>\n<p>Model은 데이터와 데이터를 변경하는 각종 서비스(비즈니스) 로직이 이에 해당한다.\n앞에서 작성한 <code>todoItems</code>가 이에 해당한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>여기에 비즈니스 로직을 추가해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> todoItems<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">itemCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> todoItems<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchItemsInPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">5</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> page <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> size<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>todoItems라는 데이터와, 이를 변경하거나 가져오는 함수 혹은 메소드가 Model에 해당하는 것이다.</strong></p>\n<br>\n<h3>2) ViewModel</h3>\n<p>ViewModel은 View와 비슷한 구조를 가진 객체인데, <strong>쉽게 말해서 jsx 같은 것</strong>이다.\n그런데 앞에서 작성한 코드는 “객체”가 아니라 “문자열”을 반환한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이걸 객체로 표현하고 싶다면, 다음과 같이 작성해보면 된다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createViewModel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> createViewModel<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 미관상 좋지 않기 때문에(?) jsx라는 것을 사용하여 VirtualDOM을 표현한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>React나 Vue에서 이렇게 작성된 VirtualDOM을 RealDOM으로 변경해주는 것이다. (ViewModel을 View로 변환)</p>\n<br>\n<h3>3) View</h3>\n<p>프론트엔드 개발자에게 View는 보통 “브라우저(DOM)”를 의미한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">그런데 만약에 “테트리스”라는 게임을 만든다고 한다면 어떨까 🤔</p>\n<p>테트리스의 UI로 <code>canvas</code> <code>svg</code> <code>html</code> 등을 선택할 수 있을 것이다.\n즉, View가 달라지는 것이다.</p>\n<p>혹은 브라우저 콘솔이 될 수도 있고, OS의 표준 출력이 될 수도 있다.</p>\n</div>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// ViewModel</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// View</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">$app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이를 조금 더 변형해보자면, 다음과 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// View</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>만약에 사용자의 동작을 통해서 아이템을 만든다고 한다면 어떨까?</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// View</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;button id=\"delete\"&gt;아이템 삭제&lt;/button&gt;</span>\n<span class=\"line\">    &lt;button id=\"add\"&gt;아이템 추가&lt;/button&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\">   $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'아이템 추가'</span> <span class=\"token operator\">+</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">   <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   </span>\n<span class=\"line\">   $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">deleteItem</span><span class=\"token punctuation\">(</span>itemCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">   <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>model에서 작성한 서비스 로직을 수행하고, ViewModel에 반영하고, View로 변환하는 과정이라고 볼 수 있다.</p>\n<p>ViewModel을 문자열이 아닌 객체로 표현하고, 이를 변환하는 과정까지 최소한으로 작성해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createViewModel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewModel</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> viewModel <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// text node를 만들어서 반환한다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// tag에 대한 element를 만든다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 정의한 속성을 삽입한다.</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">.</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> $el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// node의 children viewModel을 dom으로 변환한다.</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 즉, 모든 viewModel을 순회한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>createElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// $el에 변환된 children을 추가한다.</span></span>\n<span class=\"line\">  children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> $el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> $el<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createViewModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createViewModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createViewModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token function\">createViewModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'추가'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'삭제'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'아이템 추가'</span> <span class=\"token operator\">+</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">deleteItem</span><span class=\"token punctuation\">(</span>itemCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 Model을 ViewModel로 관리하고, ViewModel을 View로 변환하는 과정에 대해 간단하게 살펴봤다.\n그런데 이게 도대체 SSR이랑 무슨 상관이 있는지 의문이 들 수 있다.</p>\n<p>핵심은 Model과 ViewModel인데, <strong>ViewModel을 DOM이 아닌 string으로 변환</strong>해보면 어떨까?</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createViewModel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createViewModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createViewModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convertViewModelToString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewModel</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> viewModel <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> viewModel<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> attrs <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> tagAndAttrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> childrenString <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>convertViewModelToString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tagAndAttrs<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>childrenString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&gt;</span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// &lt;ul&gt;&lt;li&gt;hello&lt;/li&gt;&lt;li&gt;world&lt;/li&gt;&lt;/ul&gt;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">convertViewModelToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>서버에서는 이렇게 html 문자열로 변환된 response를 내려주면 되는 것이다.</p>\n<p><strong>사실, SSR만 생각한다면 그냥 Template literal을 쓰는게 더 편할 수 있다.</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// &lt;ul&gt;&lt;li&gt;hello&lt;/li&gt;&lt;li&gt;world&lt;/li&gt;&lt;/ul&gt;</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 글의 목적은 MVVM이 아닌 SSR이기 때문에 <strong>이제부터 ViewModel(vdom)에 대한 언급은 따로 하지 않을 것</strong>이다.</p>\n<br>\n<h3>4) 정리하며</h3>\n<p>이렇게 MVVM을 다뤘던 이유는 프론트엔드 프레임워크에서 다루는 관심사가 무엇인지 이해가 필요했기 때문이다.\n정리해보자면 프론트엔드 개발에서는 다음과 같은 관심사를 가진다.</p>\n<p></p>\n<ol>\n<li>UI를 그릴 때 필요한 “데이터”와 이 데이터를 다루는 “서비스 로직”</li>\n<li>데이터를 “어떤 모습으로 그려질 것인가”를 표현하는 객체 (JSX 같은)</li>\n<li>실제 UI (DOM, EventHandler)</li>\n</ol>\n<p>그리고 <strong>SSR과 CSR은 1번과 2번의 코드를 공유</strong>할 수 있고, 이를 공유할 수 있는 형태로 코드를 작성해야 한다는 것이다.\n당연한 이야기지만, 이게 잘 구분이 되어있으면 <strong>테스트</strong>를 하기도 편해진다.</p>\n<p></p>\n<h2>4. Vanilla Javascript SSR</h2>\n<br>\n<h3>1) 무작정 만들어보기</h3>\n<p>앞에서 장황하게 설명했으니  이제 본격적으로 Server Side Rendering을 직접 구현해보자.</p>\n<p>일단 프로젝트를 구성해야 하기 때문에, express를 설치해야한다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\">$ <span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span></span>\n<span class=\"line\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> express</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>package.json에 server.js를 node로 실행해주는 npm script를 작성하고</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"01-simply\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"server.js\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node server.js\"</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>server.js를 만들고 코드를 작성해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">    &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">    &lt;head&gt;</span>\n<span class=\"line\">      &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">      &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">    &lt;/head&gt;</span>\n<span class=\"line\">    &lt;body&gt;</span>\n<span class=\"line\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line\">      &lt;ul&gt;</span>\n<span class=\"line\">        &lt;li&gt;SSR이 뭔데?&lt;/li&gt;</span>\n<span class=\"line\">        &lt;li&gt;CSR은 뭔데?&lt;/li&gt;</span>\n<span class=\"line\">        &lt;li&gt;이게 왜 필요한건데?&lt;/li&gt;</span>\n<span class=\"line\">        &lt;li&gt;MVVM은 또 뭐야?&lt;/li&gt;</span>\n<span class=\"line\">        &lt;li&gt;공부해야 할게 왜이렇게 많아?&lt;/li&gt;</span>\n<span class=\"line\">      &lt;/ul&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">    &lt;/body&gt;</span>\n<span class=\"line\">    &lt;/html&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>서버에 요청이 들어오면 html을 문자열을 통째로 만들어서 넘겨주는 방식이 Server Side Rendering 이다.</p>\n<p>그리고 정상적으로 나오는지 실행해보자.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\">$ <span class=\"token function\">npm</span> run start</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p> </p>\n<p>“소스보기”에서 모든 HTML 문자열이 정상적으로 내려왔는지 확인해볼 수 있고, 렌더링도 정상적으로 되었다.</p>\n<br>\n<h3>2) 관심사 분리</h3>\n<p>앞에서 작성한 코드에서 “서버에 독립적인 코드”와 “서버를 구성하는 코드”를 구분할 수 있다. 이를 토대로 코드를 다시 작성해보자.</p>\n<p></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line highlighted\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line highlighted\">  &lt;head&gt;</span>\n<span class=\"line highlighted\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line highlighted\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line highlighted\">  &lt;/head&gt;</span>\n<span class=\"line highlighted\">  &lt;body&gt;</span>\n<span class=\"line highlighted\">  &lt;div id=\"app\"&gt;</span>\n<span class=\"line highlighted\">    &lt;ul&gt;</span>\n<span class=\"line highlighted\">      &lt;li&gt;SSR이 뭔데?&lt;/li&gt;</span>\n<span class=\"line highlighted\">      &lt;li&gt;CSR은 뭔데?&lt;/li&gt;</span>\n<span class=\"line highlighted\">      &lt;li&gt;이게 왜 필요한건데?&lt;/li&gt;</span>\n<span class=\"line highlighted\">      &lt;li&gt;MVVM은 또 뭐야?&lt;/li&gt;</span>\n<span class=\"line highlighted\">      &lt;li&gt;공부해야 할게 왜이렇게 많아?&lt;/li&gt;</span>\n<span class=\"line highlighted\">    &lt;/ul&gt;</span>\n<span class=\"line highlighted\">  &lt;/div&gt;</span>\n<span class=\"line highlighted\">  &lt;/body&gt;</span>\n<span class=\"line highlighted\">  &lt;/html&gt;</span>\n<span class=\"line highlighted\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>html</code> 이라는 변수는 단순한 문자열을 담고 있다. 즉, 서버를 구성할 때 필요한 코드가 아니기 때문에 아예 분리해볼 수 있을 것 같다.</p>\n<p><code>html</code> 의 값에서 목록을 표현하는 부분도 분리해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MVVM은 또 뭐야?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'공부해야 할게 왜이렇게 많아?'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> TodoList <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;ul&gt;</span>\n<span class=\"line\">    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;/ul&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">  &lt;div id=\"app\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>TodoList<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>지금은 단순하게 “문자열”로 표현하고 있는데, 이걸 함수로 변환하여 이렇게 표현할 수 있다. 이렇게 함수로 분리할 경우, items에 대한 관리를 유연하게 할 수 있을 것이다. 전역에 있는 item을 사용해도 되고, 필요할 때 만들어서 사용할 수도 있다. 테스트가 가능해지는 것이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MVVM은 또 뭐야?'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'공부해야 할게 왜이렇게 많아?'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">items</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItems</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">  &lt;div id=\"app\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이걸 다시 router에 적용해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이제 Server에 독립적인 코드를 모듈화해서 관리할 수 있지 않을까?</p>\n<p><code>/src/model.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'MVVM은 또 뭐야?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'공부해야 할게 왜이렇게 많아?'</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>먼저 model(data)를 관리하는 부분을 아예 분리했다. 기존에는 todoItems라는 문자열로 표현했는데, 이렇게 명확하게 model이라고 명시해주는게 좋을 것 같다.</p>\n<p><code>/src/components.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">items</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 코드들은 html 문자열을 구성하는 각각의 컴포넌트이기 때문에 별도의 파일로 분리했다.</p>\n<p><code>/src/ssr.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TodoList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">  &lt;div id=\"app\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/div&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>generateHTML</code>함수도 별도의 파일로 분리한 이유는, Server에 독립적이라고 하더라도 Client에서는 사용될 일이 없을 것 같기 때문이다. 즉, 코드 자체는 Server에 독립적이지만, 이 코드의 관심사는 Server에서 HTML 문자열을 만드는 것에 초점이 있기 때문에 아예 ssr이라는 파일로 분리했다. ssr에 관련된 것들은 이 파일에서 관리하면 될 것이다.</p>\n<p><code>/server.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> generateHTML <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/ssr.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>앞에서 작성한 모듈을 조합하여 Server의 코드를 구성해주면 된다. <code>/</code> 페이지에 요청(Request)가 들어오면 html 문자열을 만들어서 응답(Response)하는 것이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">현재 전체적인 파일 및 폴더 구조는 다음과 같다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">.</span>\n<span class=\"line\">├── package.json</span>\n<span class=\"line\">├── server.js</span>\n<span class=\"line\">└── src</span>\n<span class=\"line\">    ├── components.js</span>\n<span class=\"line\">    ├── model.js</span>\n<span class=\"line\">    └── ssr.js</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></div>\n<br>\n<h3>3) 데이터 추가/삭제</h3>\n<p>여태까지는 이미 있는 데이터를 표현하는 수준으로만 다뤘다. 만약에 데이터를 추가하거나 삭제하는 경우가 생긴다면 어떻게 해야 좋을까? 이를 최대한 심플하게 표현해보자.</p>\n<p></p>\n<p><code>/src/model.js</code></p>\n<p>먼저 model에 todoItem을 추가/삭제하는 메소드를 추가해야한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'MVVM은 또 뭐야?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'공부해야 할게 왜이렇게 많아?'</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/src/components.js</code></p>\n<p>간단하게 버튼을 표현할 수 있는 컴포넌트를 추가해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;button id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/button&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/src/ssr.js</code></p>\n<p>generateHTML에 아이템을 추가/삭제 할 수 있는 버튼을 하나 만들자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TodoList<span class=\"token punctuation\">,</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line highlighted\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 추가'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 삭제'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">    &lt;script&gt;</span>\n<span class=\"line highlighted\">      document.querySelector('#add').onclick = () =&gt; {</span>\n<span class=\"line highlighted\">        fetch('/api/todo-items', {</span>\n<span class=\"line highlighted\">          method: 'post',</span>\n<span class=\"line highlighted\">          body: JSON.stringify({ content: '추가된 아이템' }),</span>\n<span class=\"line highlighted\">          headers: {</span>\n<span class=\"line highlighted\">            'Content-Type': 'application/json',</span>\n<span class=\"line highlighted\">          }</span>\n<span class=\"line highlighted\">        }).then(() =&gt; location.reload())</span>\n<span class=\"line highlighted\">      }</span>\n<span class=\"line highlighted\">  </span>\n<span class=\"line highlighted\">      document.querySelector('#delete').onclick = () =&gt; {</span>\n<span class=\"line highlighted\">        fetch('/api/todo-items/0', { method: 'delete' }).then(() =&gt; location.reload())</span>\n<span class=\"line highlighted\">      }</span>\n<span class=\"line\">    &lt;/script&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>추가 버튼, 삭제 버튼을 만들었고 해당 버튼을 클릭하면 서버에 요청을 보낸 뒤 새로고침을 하는 방식이다.</p>\n<p><code>/server.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> generateHTML <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/ssr.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todo-items\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">app<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todo-items/:index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>서버에는 todoItems를 추가/삭제할 수 있는 route를 추가했다.</p>\n<p>서버를 다시 시작해서 확인해보면 이렇게 동작하는 것을 확인할 수 있다.</p>\n<p></p>\n<p>소스보기를 하면 다음과 같다.</p>\n<p></p>\n<h2>5. SSR에 CSR 덧붙이기 ( Hydration )</h2>\n<p></p>\n<p>이제부터가 제일 중요한데, <strong>SSR로 만들어진 HTML 페이지에 CSR을 덧씌우는 작업(hydration)</strong> 이 필요하다.</p>\n<br>\n<h3>1) ssr에서 static 파일 불러오기</h3>\n<p></p>\n<p>CSR을 같이 하기 위해서 javascript 파일을 client(browser)에서도 사용할 수 있게 정적파일(static)으로 등록하는 과정이 필요하다. 지금은 클라이언트(브라우저)에서 src 폴더에 있는 파일들에 접근할 수 없는 상태이다.</p>\n\n<p>일단 위의 문제를 해결해야 한다.</p>\n<p><code>/server.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> generateHTML <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/ssr.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token comment\">// static 파일 등록</span></span>\n<span class=\"line highlighted\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/src\"</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todo-items\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todo-items/:index\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 하면 클라이언트에서 <code>/src</code> 폴더에 있는 정적 파일들에 접근할 수 있게 된다.</p>\n<p></p>\n<p>이제 <code>ssr.js</code>에 있던 이벤트 등록 코드를 분리해보자.</p>\n<p><code>/src/main.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/todo-items'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'추가된 아이템'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/todo-items/0'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 이 파일을 SSR을 할 때 불러오도록 만들 수 있다.</p>\n<p><code>/src/ssr.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TodoList<span class=\"token punctuation\">,</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 추가'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 삭제'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line highlighted\">    &lt;script src=\"./src/main.js\" type=\"module\"&gt;&lt;/script&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>정상적으로 동작하는 것도 확인할 수 있다.</p>\n<p></p>\n<p>여기서 살펴봐야할 부분은, 변경된 데이터를 불러오기 위해 <strong>새로고침을 하고 있다는 점</strong>이다.\n<strong>렌더링을 오직 Server에 의존</strong>하고 있기 때문에 Client에서도 데이터를 받아와서 렌더링할 수 있는 코드가 있어야 이 문제를 해결할 수 있다.\n한 번 작성해보자.</p>\n<br>\n<h3>2) Client Side Rendering 덧붙이기</h3>\n<p></p>\n<p>일단 ssr.js에 있던 일부 코드를 분리해서 components에 작성해보자.</p>\n<p><code>/src/components.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;button id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/button&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItems</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 추가'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 삭제'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>App 컴포넌트가 server와 client 양쪽에서 쓰일 수 있기 때문에 ssr에서 분리해서 components에 다시 정의했다.</p>\n<p><code>/src/ssr.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">model</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line highlighted\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">    &lt;script src=\"./src/main.js\" type=\"module\"&gt;&lt;/script&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>ssr.js의 generateHTML에 방금 작성한 App 컴포넌트를 적용해주고</p>\n<p><code>/src/main.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'새로운 아이템'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>main.js에도 App를 DOM으로 변환하고 이벤트를 바인딩 해주는 render 함수를 만들었다. 이제 사이트가 로딩 되면 CSR로 UI를 다시 그려준다.</p>\n<p></p>\n<p>보이는 것 처럼, <strong>CSR로 렌더링을 하기 때문에 새로고침을 하지 않는다.</strong> 다만 새로고침을 하면 <strong>데이터가 초기화되는 모습</strong>을 확인할 수 있다. 이제 이 문제를 해결해보자.</p>\n<br>\n<h3>3) Server의 데이터를 Client에 동기화 하기</h3>\n<p></p>\n<p>동기화하는 방법이 어렵진 않다. <strong>model data를 전역에 등록해서 관리</strong>하면 된다.</p>\n<p><code>/src/model.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token string\">'SSR이 뭔데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'CSR은 뭔데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'이게 왜 필요한건데?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'MVVM은 또 뭐야?'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string\">'공부해야 할게 왜이렇게 많아?'</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoItems <span class=\"token operator\">=</span> initialModel<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>먼저 model에 init이라는 메소드를 추가했다. 새로운 todoItems을 받아와서 교체해주는 메소드이다. <strong>이걸 server와 client에서 각각 사용할 것</strong>이다.</p>\n<p><code>/src/ssr.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todoItems <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line highlighted\">    &lt;script&gt;window.__INITIAL_MODEL__ = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> todoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/script&gt;</span>\n<span class=\"line\">    &lt;script src=\"./src/main.js\" type=\"module\"&gt;&lt;/script&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> </span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>핵심은</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">window<span class=\"token punctuation\">.</span>__INITIAL_MODEL__ <span class=\"token operator\">=</span> $<span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> todoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이 코드인데, client의 <strong>window 객체에 server에 있는 model 값을 할당</strong>하여 넘겨주는 것이다.\n그 후에 <strong>main.js에서 client에 있는 model에 이를 동기화</strong>해주며 될 것이다.</p>\n<p><code>/src/main.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'새로운 아이템'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>__INITIAL_MODEL__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 <strong>server에서 내려주는 데이터를 client에 동기화</strong>시킬 수 있다.\n한 번 server.js에서 임의의 데이터를 넘겨주고 어떻게 렌더링을 하는지 확인해보자.</p>\n<p><code>/src/server.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> generateHTML <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/ssr.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/src\"</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>16번째 줄에서 server에서 정의한 todoItems가 출력된 것을 확인할 수 있으며</p>\n<p></p>\n<p>client에 정상적으로 동기화 되는 것을 확인할 수 있다.\n다만, <strong>client에서 데이터를 변경한 다음에 새로고침을 하면 데이터가 날라가는 것</strong>을 확인할 수 있다.</p>\n<p>이제 client에서 데이터가 변했을 때 server에 이를 넘겨주도록 해보자.</p>\n<br>\n<h3>4) 양방향 동기화 (Server ←→ Client)</h3>\n<p></p>\n<ol>\n<li>model의 변화를 api를 통해 server에 알리고</li>\n<li>server에서 model의 값을 변경하고</li>\n<li>변경된 값을 다시 client에게 넘겨주는 방식이다.</li>\n</ol>\n<p><code>/server.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> generateHTML <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/ssr.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/src\"</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todo-items\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>todoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 <code>PUT /api/todo-items</code>에 새로운 todoItems을 보내고, 이를 서버에서 관리하는 model에 덮어쓰도록 해야한다. 클라이언트에서 이 API를 호출하면 될 것이다.</p>\n<p><code>/src/main.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateTodoItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItems</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> todoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/todo-items'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">syncServerModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> newTodoItems <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">updateTodoItems</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> newTodoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'새로운 아이템'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">syncServerModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">syncServerModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>__INITIAL_MODEL__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>아이템을 추가하거나 삭제하면 api를 호출하고, 새로운 아이템을 받아오고, 이를 동기화시키는 형태이다.</p>\n<p></p>\n<p>이제 <strong>새로고침을 해도 데이터가 보존되는 것</strong>을 확인할 수 있다.</p>\n<br>\n<h3>5) 정리</h3>\n<p></p>\n<ol>\n<li>model과 component를 작성한다. 이 때 model과 component는 런타임(브라우저 혹은 서버)에 독립적인 코드여야 한다.</li>\n<li>browser가 server에 요청을 보내면, server에서 component와 model을 조합하여 html 문자열을 만들어서 응답으로 보내준다.</li>\n<li>browser는 server에서 내려준 html을 토대로 사용자에게 유의미한 화면(UI)을 보여주고, model과 component를 조합하여 다시 렌더링(DOM을 그려줌)한다.</li>\n<li>client와 server 사이에는 데이터 동기화 작업이 필요하다. 이 때 window 객체를 이용할 수 있다.</li>\n</ol>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">주의할 점</p>\n<p>model과 component에 런타임에 종속적이 코드가 있을 경우 문제가 발생할 수 있다는 점이다.\n이를 해결하기 위해서는 <code>jsdom</code> 같은 라이브러리로 가상의 window, document 객체를 만들어서 억지로라도 코드가 돌아고도록 만드는 방법이 있다.\n테스트를 할 때도 <code>jsdom</code>이 이용된다.</p>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">폴더구조</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">.</span>\n<span class=\"line\">├── package.json</span>\n<span class=\"line\">├── server.js</span>\n<span class=\"line\">└── src</span>\n<span class=\"line\">    ├── components.js</span>\n<span class=\"line highlighted\">    ├── main.js          # 이 파일이 새로 생겼다.</span>\n<span class=\"line\">    ├── model.js</span>\n<span class=\"line\">    └── ssr.js</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></div>\n<h2>6. Router 동기화</h2>\n<p></p>\n<p>한 가지 더 고려할 것은 바로 Router 이다.\n메인페이지와 서브페이지 모두 SSR을 적용해야 한다면, <strong>페이지에 따라 서로 다른 데이터를 내려주는 방식</strong>으로 작성해야 할 것이다.</p>\n<p>한 번 간단하게 서브페이지와 메인페이지를 구성해보자.</p>\n<p><code>/src/components.js</code></p>\n<p></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;ul&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>TodoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;button id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/button&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Home</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItems</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 추가'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'아이템 삭제'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DefaultLayout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">children</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;main&gt;</span>\n<span class=\"line\">    &lt;h1&gt;Todo App&lt;/h1&gt;</span>\n<span class=\"line\">    &lt;header&gt;</span>\n<span class=\"line\">      &lt;nav&gt;</span>\n<span class=\"line\">        &lt;a href=\"/\"&gt;메인페이지&lt;/a&gt;</span>\n<span class=\"line\">        &lt;a href=\"/sub\"&gt;서브페이지&lt;/a&gt;</span>\n<span class=\"line\">      &lt;/nav&gt;</span>\n<span class=\"line\">    &lt;/header&gt;</span>\n<span class=\"line\">    &lt;section style=\"margin: 30px 0\"&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>children<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/section&gt;</span>\n<span class=\"line\">    &lt;footer&gt;</span>\n<span class=\"line\">      &lt;p&gt;Copyright &amp;copy; 2023 황준일&lt;/p</span>\n<span class=\"line\">    &lt;/footer&gt;</span>\n<span class=\"line\">  &lt;/main&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> model</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">===</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">return</span> <span class=\"token function\">DefaultLayout</span><span class=\"token punctuation\">(</span><span class=\"token function\">Home</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">===</span> <span class=\"token string\">\"/sub\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">return</span> <span class=\"token function\">DefaultLayout</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p&gt;서브페이지 입니다.&lt;/p&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">return</span> <span class=\"token function\">DefaultLayout</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p&gt;404&lt;/p&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>먼저 기존에 있던 <code>App</code> 컴포넌트의 이름을 <code>Home</code>으로 변경하고, <code>DefaultLayout</code>을 만들어서 Header와 Footer를 삽입했다. App은 다시 정의하여 path에 대응하는 컴포넌트를 반환하도록 했다.</p>\n<p><code>/src/main.js</code></p>\n<p></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateTodoItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todoItems</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> todoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/todo-items'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">syncServerModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> newTodoItems <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">updateTodoItems</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> newTodoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$a</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    $a<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> $a<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">===</span> path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">      event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">!==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">addTodoItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'새로운 아이템'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">syncServerModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    model<span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodoItem</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">syncServerModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>__INITIAL_MODEL__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 뒤로가기를 했을 때도 렌더링을 다시 실행함</span></span>\n<span class=\"line highlighted\">  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popstate'</span><span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><s>render가 무척 비대해지고 있는데, 이를 깔끔하게 분리하는건 독자의 몫이라고 생각한다</s></p>\n<p>render 내부에 간단하게 router를 표현할 수 있도록 만들었다. a 태그를 클릭했을 때 원본 이벤트를 제거하고 <code>history.pushState</code>로 브라우저의 주소를 바꾸고, 다시 렌더링을 실행한다. 동적으로 페이지를 렌더링 하는 것이다.</p>\n<p><code>/server.js</code></p>\n<p></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> generateHTML <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/ssr.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./src/model.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/src\"</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todo-items\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  model<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>todoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 정규식을 통해 모든 url과 매칭되도록 했다.</span></span>\n<span class=\"line highlighted\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listen to http://localhost:8000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>express에서는 route의 등록 순서로 주소를 핸들링한다.</p>\n<p>그러니까 request path가  <code>/src/**</code> → <code>/api/todo-items</code> → <code>/*</code> 순서로 매칭 되는지 탐색하는 것이다. 이제 사용자가 접근하는 모든 페이지는</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/.*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이 router에 매칭될 것이다.</p>\n<p><code>/src/ssr.js</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> model</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;!DOCTYPE html&gt;</span>\n<span class=\"line\">  &lt;html lang=\"en\"&gt;</span>\n<span class=\"line\">  &lt;head&gt;</span>\n<span class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</span>\n<span class=\"line\">    &lt;title&gt;Todo List&lt;/title&gt;</span>\n<span class=\"line\">  &lt;/head&gt;</span>\n<span class=\"line\">  &lt;body&gt;</span>\n<span class=\"line\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line highlighted\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">    &lt;script&gt;window.__INITIAL_MODEL__ = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> model<span class=\"token punctuation\">.</span>todoItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/script&gt;</span>\n<span class=\"line\">    &lt;script src=\"./src/main.js\" type=\"module\"&gt;&lt;/script&gt;</span>\n<span class=\"line\">  &lt;/body&gt;</span>\n<span class=\"line\">  &lt;/html&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>generateHTML에서는 model 뿐만 아니라 path도 같이 받아오도록 했다. path에 따라 App 내부적으로 어떤 layout을 그릴지 판단하도록 하기 위함이다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">정리</p>\n<ol>\n<li>클라이언트에서 동적으로 현재 주소에 대한 컴포넌트를 그리고</li>\n<li>사용자가 새로고침을 하거나, 사이트에 접근했을 때 주소를 토대로 SSR을 한다.</li>\n<li>404 페이지 또한 SSR을 토대로 표현한다.</li>\n</ol>\n</div>\n<h2>Summary</h2>\n<p>다시 핵심적인 내용만 정리해보면 다음과 같다.</p>\n<p><u>1. CSR과 SSR 양쪽에서 사용 가능한 코드를 분리해서 관리해야 한다.</u></p>\n<p></p>\n<br>\n<p><u>2. SSR에서는 model과 component를 조합해서 문자열로 만들어서 응답을 해준다.</u></p>\n<p></p>\n<br>\n<p><u>3. CSR에서는 model과 component를 조합해서 DOM으로 만들어준다.</u></p>\n<p></p>\n<br>\n<p><u>4. SSR과 CSR은 데이터를 동기화해야 한다.</u></p>\n<p></p>\n<br>\n<p><u>5. SSR과 CSR은 같은 페이지에 대해 같은 UI를 그려야 한다.</u></p>\n<p></p>\n<br>\n<h2>소스코드 확인</h2>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-ssr/tree/master/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Github Repository</a></li>\n<li><a href=\"https://github.dev/JunilHwang/simple-ssr/tree/master/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Github Codespaces</a></li>\n</ul>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.bsidesoft.com/8267\" target=\"_blank\" rel=\"noopener noreferrer\">[react] 리액트 훅 MVVM #1 - Bsidesoft co.</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/CodeSpitz/Object-Oriented-Javascript/02-MVVM/\" target=\"_blank\" rel=\"noopener noreferrer\">MVVM System 만들기</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 웹 컴포넌트 만들기</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 가상돔(VirtualDOM) 만들기</a></li>\n<li><a href=\"https://zuminternet.github.io/vue-ssr/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue SSR 제대로 적용하기 (feat. Vanilla SSR)</a></li>\n</ul>\n",
      "date_published": "2023-02-12T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "주니어 개발자의 2022년 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2022-year/end/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2022-year/end/",
      "summary": "줌인터넷과의 작별, 네이버 입사, 그리고 부스트캠프",
      "content_html": "\n<p>벌써 2022년이 저물었다.\n올해는 생각보다 많이 버거웠다고 느끼는 중이다.\n긴 글이 될까? 짧은 글이 될까? 일단 한 번 써보자.</p>\n<p>여태까지 썼던 회고들은 나를 위한 글이라기보단 다른 사람들에게 보여주기 위한 성격의 글이었다.\n이번에는 온전히 나 스스로를 위한 글을 써보고자 한다.</p>\n<h2>1. 안녕, 줌인터넷</h2>\n<p></p>\n<p>2019년에 줌인터넷에 입사했고, <strong>2022년 5월에 퇴사</strong>했다.\n퇴사를 하면서 기술블로그에 회고를 작성했는데, 그 후에 한 동안 다른 글이 안 올라와서 그런지 없어졌다.\n<s>아디오스..</s></p>\n<h3>백엔드 개발</h3>\n<p>줌인터넷에서는 프론트엔드 개발보단 백엔드 개발을 더 많이했다.\n처음에 프로젝트 코드를 보면서 정말 많이 감탄했다.\n신세계가 펼쳐진 기분이었달까… 좋은 사수와 좋은 코드가 있었기에 빠르게 성장할 수 있었다.\n개인적인 노력도 꽤 많이 했지만, <strong>좋은 환경이 뒷받침 되었기 때문에 노력의 효과를 볼 수 있었다고</strong> 생각한다.</p>\n<h3>프론트엔드 개발</h3>\n<p>2021년 하반기에 프론트엔드 개발파트가 신설되었고, 이 때 부터 아예 프론트엔드 개발을 전담했다.\n돌이켜보면 자동화에 완전히 무신경했다.\nCI/CD, 정적분석, 테스트 및 기타 등등 리스크를 관리할 수 있는 수단이 많이 있었을텐데, 이 당시에는 <strong>코드 자체에 대한 고민</strong>에 꽂혀있었다.\n뭐랄까… 고민의 방향이 엉뚱했나 싶기도하지만, 덕분에 <strong>나만의 컨텐츠</strong>를 만들어낼 수 있었던 것 같기도 하고.</p>\n<p>그래서 요즘 부트캠프를 통해 학습한 사람들과 비교했을 때 스스로에 대한 아쉬움을 많이 느낀다.\n개발을 위한 도구와 수단이 이렇게 많은데 왜 나는 그런 것들에 관심을 갖지 않았을까 하는.</p>\n<p>반대로 <strong>나는 야생학습에 특화된 사람이 아닐까?</strong> 공부하고자 한다면, 공부할 수 있고, 실천할 수 있고, 몰입할 수 있다.\n내가 가진 것들을 통해서 가지지 못한 것을 흡수해보자.</p>\n<h3>파트리더</h3>\n<p>어쩌다보니 파트리더를 하게 되었고, 잘 하고 싶어서 꽤 많은 노력을 했지만 결론적으로 나는 좋은 파트리더가 아니였다.\n체계를 만드려고 했으나, 좋은 체계를 만들지 못했다.\n팀원들이 성장할 수 있는 환경, 같이 일할 수 있는 환경, 팀 단위로 일할 수 있는 환경을 만들지 못했다.</p>\n<p>나는 줌인터넷에서 큰 폭으로 성장했으나, <strong>내가 팀원을 성장시킨 사람이었나 물어본다면 당당하게 No! 라고 말할 수 있다.</strong></p>\n<p>앞으로 어딘가에서 리더를 하게 된다면, 나의 성장 보다는 팀원 혹은 구성원을 성장할 수 있는 방법에 더 많이 투자하고 싶다.\n근데 그게 가능하기 위해선 일단 내 경험의 폭이 깊고 넓어야할 것 같다.</p>\n<h3>퇴사</h3>\n<p>어쨌든 퇴사를 했다.\n많은 것을 배울 수 있는 동료들이 있었으며(다 떠났고..?), 밀도 있는 경험을 많이 했다.\n그래서 줌인터넷이라는 회사가 정말 간절하게 잘 되길 바란다.</p>\n<h2>2. 안녕, 네이버</h2>\n\n<p>우여곡절 끝에 네이버라는, 나에게 참 과분한 기업에 그리고 <a href=\"https://smartstudio.tech/homebuilder/\" target=\"_blank\" rel=\"noopener noreferrer\">뛰어난 동료들이 있는 팀(HomeBuilder)</a>에 합류하게 되었다.</p>\n<h3>합류하기 까지</h3>\n<p>이직을 하겠다고 마음 먹은 후에 모든 헤드헌터와 리쿠르터의 제안을 수락했다.\n아마 한 달 동안 지원한 곳이 어림잡아 10개 이상 되는 것 같다.\n하필 면접이 포진해있는 기간에 코로나에 걸려서 컨디션이 최악이었던게 참 아쉽다.</p>\n<p>꽤 많은 면접 경험에서 느낀 제일 큰 줄기가 한 가지 있다.\n<strong>기술면접까진 내가 노력하면 어느 정도는 커버가 가능 하지만 그 이후는 천운이다.</strong>\n팀의 핏에, 더 상위 조직의 핏에, 기업의 핏에 내가 맞아야 하는 것이다.\n이건 조직마다 다르고, 면접에 들어오는 면접관의 가치관마다 다르다.\n그래서 기술면접에서 떨어지면 더 공부를 했고, 기술면접 이후에 떨어지면 크게 아쉬워하지 않았고 나랑 안 맞는 기업이었구나 생각했다.</p>\n<p><strong>면접 때는 나를 온전히 드러내야 하고, 그렇게 드러낸 나의 모습과 회사와 조직이 맞지 않다고 생각하면 담담하게 받아들여야 한다.\n맞지 않는 조직에서 일하는 것은 나에게도 조직에게도 해가될 뿐이다.</strong></p>\n<p>네이버의 면접은 나의 역량을 최대한 끌어내기 위한 질문들이었고, 그게 정말 너무 좋았다.\n코로나에 걸렸을 때 며칠 밤을 제대로 못 잤는데, 밤새도록 네이버에 아니 이 팀에 정말 꼭 합류하고 싶다는 생각을 했다.\n그렇게 총 세 번의 면접을 봤고, 합격 메일을 받았고, 이 때가 2022년 최고의 순간이었다.</p>\n<h3>함께 일하기</h3>\n<p>내가 생각하는 우리 팀의 최고 강점은 “함께 일하기” 그리고 “집단 지성” 이다.</p>\n<p>같은 팀의 <a href=\"https://huns.me/2022-12-29-44-%EB%84%A4%EC%9D%B4%EB%B2%84%EC%97%90%EC%84%9C%20%EB%B3%B4%EB%82%B8%202%EB%85%84%EA%B3%BC%202023%EB%85%84\" target=\"_blank\" rel=\"noopener noreferrer\">훈민님께서 작성한 회고</a> 일부를 발췌해보자면,</p>\n<blockquote>\n<p>팀의 변화를 가장 잘 보여주는 상징은 ‘와인바 미팅’이다.\n와인바는 게더타운에 만든 회의 공간이다.\n문제가 잘 안 풀리면 슬랙에 도움을 요청한다.\n조금 기다리면 하나둘 와인바로 사람이 모이고 문제를 같이 논의한다.\n규칙이나 장치를 만들지 않았다.\n누가 하자고 한 적도 없다.\n그냥 자연스레 문화가 생겼다.\n와인바는 우리 팀의 문화를 보여주는 상징이다.\n동료들은 이제 우리 팀의 장점으로 ‘집단 지성’을 꼽는다.</p>\n</blockquote>\n<p>내가 합류한 시점에 집단 지성으로 문제를 해결하는 문화가 자리잡혀있는 상태였다.\n자연스럽게 의견을 이야기하고, 같이 고민하고, 같이 해결하는 것이 제일 인상 깊었다.</p>\n<p>단순히 이런 문화가 신기한게 아니라, <strong>이런 문화를 만들어 가는 역량을 가진 팀</strong>이라서 좋았다.\n네이버니까 기술은 당연히 뒷받침 될 것이고, 제품을 잘 만들기 위해 더 좋은 수단, 더 좋은 문화를 찾아서 적응한다는 것이 시사하는 바가 무척 큰 것이다.</p>\n<p>그래서 나는 <strong>훈민님과 일하게 된 것이 2022년의 제일 큰 행운</strong>이라고 생각한다.</p>\n<p>사실 모든 팀원의 역량이 너무 뛰어나서 나같은 찌끄레기는 따라가기가 벅찬 수준이다.\n누군가에겐 이게 부담일 수 있겠지만, 난 이 상황이 참 좋다.\n배우고 싶은, 배울 수 있는 사람들이 무척 많다. 주위에 있는 모든 사람이 존경스럽고 멋있고 닮고 싶다.\n내가 딱 원하던 상황이랄까..!? 나는 이렇게 뛰어난 분들과 일하고 싶어서 네이버라는 기업에 오고 싶었던 것 같다.</p>\n<h3>오글오글</h3>\n<p></p>\n<p>내가 입사한지 얼마 되지 않았을 때 <code>Club Greeny</code> 라는게 생겼다.\n쉽게 말해서 사내 동아리인데, 어떤 동아리를 해볼까 고민하다가 오글오글(오늘의 글쓰기 x 2)이라는 동아리에 가입했다.</p>\n<p>꽤 버거운 회사 생활의 한 줄기 빛이랄까? 고민을 늘어놓고, 들어주고, 공감할 수 있는 공간이 생겼고 꽤 적극적으로 활용했다.</p>\n<p>9월 ~ 11월까지는 활동을 적극적으로 했는데, 12월은 거의 하지 않았다.\n연말이라서 마음이 허한 것도 있었고, 매일 매일 글을 쓰다보니 소재도 많이 떨어졌다.</p>\n<p>2023년에는 더 적극적으로 활동할 예정!</p>\n<h3>MBTI</h3>\n<p>새로운 조직에 합류하고, 새로운 사람들을 만나면서 MBTI에 대해 과몰입했다.\n사실 지금도 과몰입 중이다.\n빨리 적응하기 위해선 주변 환경, 주변 사람에 대한 이해가 필요했는데 MBTI가 좋은 지표가 된다고 생각했다.\n그리고 우리 조직에 어울리는 MBTI는 뭘까도 많이 고민했다.</p>\n<p>결론은… 난 계획형 인간이 아니고, 적어도 우리 조직에 잘 적응하기 위해선 어느 정도의 잘 정리된 계획이 필요하다.\n그래서 <strong>2023년의 목표는 의식적인 계획형 인간이 되는 것</strong>이다.\n<s>안 되면 별 수 없고?</s></p>\n<p>약 3년 동안 ESFJ로 고정되어 살아왔는데, 글을 작성하는 시점에는 ESFJ, ENFJ, ENFP, ESFP를 왔다갔다 하고 있다.\n<s>계획형을 한참 벗어났다.</s>\n아마 9일 동안의 휴식을 거쳐오니 이런게 아닌가 싶다.\n나는 일을 할 때는 그나마 J가 되는 것 같은데… 쉴 때, 놀 때는 아무리 봐도 P가 된다.\n무계획으로 노는 것을 좋아한달까?\n생각하면서 놀고 싶지 않다.\n생각 없이 놀고 싶다.</p>\n<h3>개발이 아닌, 일을 잘 하기</h3>\n<p>결국 개발이라는 행위는 돈을 벌기 위한 수단이고 도구이다.\n개발을 잘 하는 것은 \"일을 하기 위한\" 필요 충분 조건이다.\n이제 \"일을 <strong>잘</strong> 하기 위한\" 필요 충분 조건들에 대해 고민을 해야 하고, 이걸 잘 하는 사람이 기업에 더 많은 이윤을 가져오고 성과를 내는 것이 아닐까?</p>\n<p>일을 잘 하기 위해선 일을 <strong>왜</strong> 하는지 알아야하고, 왜 하는지 알 수 없다면 할 필요가 없다.\n개발자들은 꽤 많은 연봉을 받는다.\n내가, 우리가 쓰는 시간이 사실 다 돈 덩어리인 것이다.\n그렇기 때문에 일을 시작하기 전에 일을 해야 하는 이유를 명확히 해야하며, 효율적으로 효과적으로 할 수 있어야 한다.</p>\n<p>이게 머릿속에는 콕 박혀있는데, 자연스럽게 하기가 참 어렵다.</p>\n<p>2022년의 나는 일을 잘 했을까? 아니면 그냥 했을까? 그냥 한 것에 가깝지 않을까?</p>\n<p><strong>2023년에는 일을 “잘” 하기 위한 고민들을 하고, 실천 할 수 있기를 바란다.</strong></p>\n<h2>3. 부스트캠프</h2>\n<p></p>\n<p>부스트캠프에 5기(2020)에는 리뷰어로, 6기(2021)에는 리뷰어와 멘토로 참여했는데, 어쩌다보니(?) 7기에는 마스터로 참여하게 되었다.</p>\n<p>부스트캠프는 챌린지 → 멤버쉽 → 팀프로젝트 등 3개의 과정이 존재하고, 나는 마스터로서 멤버쉽과 팀프로젝트에 기여할 수 있었다.</p>\n<p>2시간씩 총 14번의 온라인 강의를 했는데, 이게 참… 많이 버거웠다.\n내가 경험한 도메인의 폭이 좁았고(포털 서비스에 국한된 도메인…), 정답을 최대한 제시하지 않는 방식으로 내용을 전달 하는 것이 부스트캠프 운영 목표였기 때문에 전달하고 싶은 내용이 많아도 이를 전달하기가 쉽지 않았다.\n떡밥만 계속 던져줘야 하는데 이게 강의를 하는 나도, 강의를 듣는 캠퍼들도 참 많이 답답했다.</p>\n<p>멤버쉽 교육 과정을 설계할 때도, 새로운 시도를 많이 하고 싶었는데 결국 대부분 전 기수의 콘텐츠를 많이 활용했다.\n돌이켜 생각해보면, 조금 무리를 해서라도 콘텐츠를 엎어버리고 새로운 시도를 했으면 어땠을까 하는 아쉬움이 있다.\n이번 기수의 콘텐츠는… 깊은 몰입이 쉽지 않았을 것 같다.\n너무 많은 기술이 있고, 심지어 풀스택으로 해야 하고, 리뷰어에게 리뷰를 받는 것도 쉽지 않은 콘텐츠였다.\n그래서 주제를 작은 단위로 쪼개서 더 깊게 몰입할 수 있도록 했으면 더 좋았으리라 생각한다.\n사실 캠퍼들의 역량이 뛰어나기 때문에 어떤 콘텐츠를 던져줘도 어떻게해서든 잘 흡수해서 성장했을 것 같다.</p>\n<p>내년에도 나에게 기회가 있을지 모르겠으나, 기회가 있다면 더 적극적으로 개선해보고 싶다.\n사실 끝나서 이런 생각을 하는거지 아마 다시 하라고 하면 힘들어서 못할 것 같기도..?</p>\n<p>어쨌든 나는 내가 가진 역량에 비해 너무 많은 관심을 받았고, 그게 참 부담스러우면서도 감사했다.\n그래도 나라는 존재가 이들에게 조금이나마 도움이 되었다는 것에, 도움을 줄 수 있었다는 것에, 이런 기회가 생겼다는 것에 깊은 감사함을 느낀다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">To. 부스트캠프 캠퍼여러분</p>\n<p>부스트캠프라는 이 힘든 과정을 끝까지 완수한 여러분을 마음 깊이 존경하고 있어요!</p>\n<p>\"황준일\"이라는 사람은 아마 여러분이 기대한 마스터의 모습보다 경험도 역량도 많이 부족했으리라 생각합니다.\n그럼에도 불구하고 과분한 관심을 주셔서 감사하고, 함께할 수 있어서 즐거웠고, 행복했습니다.</p>\n<p>수료식 때 이야기했던 것 처럼, 이 과정은 여러분의 시작입니다.\n부스트캠프는 개발자로 살아남기 위한 코어 근육을 만들어준 시간들이었습니다.\n여러분이 지쳐 쓰러져도, 이 시간들이 다시 일으켜 세워줄 수 있으리라 생각합니다.\n아마 앞으로 보낼 대부분의 시간들은 부스트캠프의 과정보단 덜 힘들지 않을까요!?</p>\n<p>2023년은 여러분의 노력이 결실을 맺는 해가 되길 바랍니다!</p>\n</div>\n<h2>4. 넥스트스텝</h2>\n<p>2022년에는 <a href=\"https://edu.nextstep.camp/c/BRaNdTQx\" target=\"_blank\" rel=\"noopener noreferrer\">자바스크립트 클린코드 과정</a>에 총 3번 리뷰어로 참여했다.\n자바 클린코드 과정의 리뷰어로 참여할 때 보단 부담은 줄었고, 재미는 늘었다.\n2023년에는 리액트 과정이 열린다고 하니 기대 중이다.</p>\n<p>그리고 <a href=\"https://edu.nextstep.camp/c/lk9FrBtw\" target=\"_blank\" rel=\"noopener noreferrer\">교육자 양성과정</a>에 수강생으로 참여했는데, 어떤 교육이 좋은 교육인지 꽤 많이 고민할 수 있었다.\n고민의 기회가 된 것 자체가 소중한 경험이었다.\n다만 강사로서의 내 모습은… 만족스럽지 못했다.\n<s>재능이 없는 것 같기도</s></p>\n<iframe width=\"560\" height=\"315\" style=\"max-width: 100%\" src=\"https://www.youtube.com/embed/t40dyHxJVPY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n<p><strong>어떤 서비스는 고객이 좋은 가치를 제공해주기도 한다.</strong>\n나는 넥스트스텝이라는 교육 플랫폼이 이에 해당한다고 생각한다.\n단순히 교육을 받는 수동적인 고객이 아니라, 교육에 기여할 수 있는 능동적인 고객들이 넥스트스텝에 많이 있다.\n어떻게보면 양질의 교육에 비해 규모가 작다고 생각할 수도 있지만 그만큼 <strong>넥스트스텝의 수강생들은 굉장히 많은 가치를 만들고 있다.</strong>\n교육자와 수강생의 시너지가 좋다고 해야할까?</p>\n<p>그래서 나는 넥스트스텝이라는 이 플랫폼이 너무 마음에 들고, 여기에 기여할 수 있다는 사실에 감사함을 느낀다.</p>\n<h2>5. 기능경기대회</h2>\n<p></p>\n<p>매년 여름에 보는 서울디지텍고등학교의 풍경이다.</p>\n<p>2022년에도 어김없이 대회가 열렸고, 학생들을 가르쳤고, 기대한 것 이상으로 학생들이 잘 해주었다.\n특히 이번에 가르쳤던 학생들은 성장에 대한 욕심을 많이 보여서 좋았다.</p>\n<p>2023년에는 이 친구들을 활용해서 체계적인 대회 교육 시스템을 만들어 보고 싶은데… 나에게 그럴 여유가 있을지 모르겠다.\n없으면 만들어야겠지? <s>계획형 인간이 된다면 가능할꺼야!</s></p>\n<p>반은 농담, 반은 진담이다.\n이게 가능해진다면, 시스템을 만들 수 있다면, <strong>정말 많은 학생들에게 양질의 기회를 제공할 수 있을 것 같다.</strong></p>\n<h2>6. 개인적인 생각</h2>\n<h3>아무말 대잔치</h3>\n<p>2022년은 꽤 버거웠고 힘들었다.\n심신이 2021년과 비교해보면 많이 지치고 망가진 것 같다.</p>\n<p>이직이라는게 생각보다 더 에너지를 많이 쓰는 일이었고, 부스트캠프는 즐거움과 부담감이 정비례했다.</p>\n<p>이 나이가 되어서 그런걸까? 어쩌다보니 장례식에 많이 갔고, 그럴 때 마다 어떻게 살아가야 혹은 어떻게 죽어가야 잘 살았다고 이야기 할 수 있는지에 대해 생각했다.</p>\n<ul>\n<li>내가 개발자이기 때문에 개발을 열심히 하는게 잘 살아가는걸까?</li>\n<li>회사에, 팀에 기여하는게 잘 살아가는걸까?</li>\n<li>돈을 잘 버는게 잘 살아가는걸까?</li>\n<li>친구들, 연인, 가족 등 다양한 인간관계 속에서 좋은 관계를 만드는게 그런걸까?</li>\n<li>무언가를 열심히 한다는 것이 그만큼의 의미가 있는 일일까?</li>\n<li>이렇게 애쓰는 이유가 뭘까?</li>\n<li>무엇을 위해서 살아가는걸까?</li>\n</ul>\n<p>나는</p>\n<ul>\n<li>의도치않게 웹 개발을 시작했고,</li>\n<li>다른 것들에는 더 큰 재미를 느끼지 못해서 이 길을 택했고,</li>\n<li>어쩌다보니 개발 열풍이 불었고,</li>\n<li>이에 대한 사이드 이펙트로 많은 기회가 내 앞에 놓여졌다.</li>\n</ul>\n<p><strong>그래서 내가 손에 쥔 것들이(많은 것들을 쥐었다고 할 순 없겠지만) 가끔은 비현실적으로 느껴진다.</strong></p>\n<p>이 시대의 청년들이 했던 노력과 비교해보면, 내가 했던 노력은 노력이라고 하기에 우수운 수준이다.</p>\n<p>그래서 나는 내 인생이 내 예상보다 잘 풀리는 만큼 다른 사람들의 인생도 잘 풀렸으면 하고, 이를 위해서 내가 할 수 있는 것들은 최대한 해보려고 한다.</p>\n<p>나만의 방식으로 다른 사람들을 도울 수 있다면, 그것 만으로도 꽤 만족스러운 인생이지 않을까? 아마 앞으로는 이런 생각들과, 생각을 구체화하려는 시도를 많이 할 것 같다.</p>\n<h3>만남</h3>\n<p>2022년에는 정말 다양한 사람들을 만났다.\n그러면서 인사이트도 많이 생겼는데, 이런 인사이트를 내 것으로 온전히 융화하지 못했고 그게 참 아쉽다.</p>\n<p>지금 내가 무언가를 받아들이기엔 안정적인 상태가 아닌 것 같다.\n그래서 꾸준히 나를 표현하고, 털어내고, 채워넣고 싶다.</p>\n<p><strong>버리자, 버려야 채울 수 있다.\n그게 물건이 될 수도 있고, 마음이 될 수도 있고.</strong></p>\n<h3>나의 강점과 단점</h3>\n<p>여자친구와 대화하다가 생각해본 나의 최대 장점은 <strong>실행력</strong>이다.\n무언가 하고자 마음 먹었을 때 어떻게든 실행한다.</p>\n<p>내가 계획을 세우진 않지만, 남이 세워 놓은 계획을 잘 따르는 편이랄까?\n그리고 이를 실현하기 위해 무던히 애쓴다.</p>\n<p>또 다른 강점은, 감정 기복이 많이 없는 편인데 감성적이다.\n<s>말이야 방구야</s></p>\n<p>긍정적인 생각을 많이 하고, 긍정적인 상태를 꽤 오래 유지한다.\n이런 점은 교육이나 멘토링을 할 때 효과가 좋은 편이다.</p>\n<p>그리고 장점이다 단점은 과하게 몰입한다는 것.\n현재의 컨텍스트에 몰입을 잘 하는 편인데, 문제는… 몰입을 하는 순간 그 외의 것에 신경을 많이 못 쓰는 편이다.</p>\n<p>그래서 일을 하다가 회의가 있으면 회의에 잘 몰입하지 못할 때가 많고,\n나의 일에 몰입하다보면 다른 사람의 일을 잘 파악하지 못할 때가 많다.</p>\n<p>이를 잘 조절하기 위해 어떻게 해야 좋을까? 에 대한 생각을 많이 했었는데, 주변의 계획형인 사람들의 이야기를 들어보니 몰입을 계획적으로 한다고… (그게 가능한거야!?)</p>\n<p>잘 될지 모르겠으나 시도는 해봐야할 것 같다.</p>\n<p>그냥 단점이라고 부를 수 있는 것은, 창의력이 부족하다는 것..</p>\n<p>무언가를 만들거나 개선할 때 이게 큰 걸림돌이 된다.\n틀을 잘 깨지 못한달까?</p>\n<p>그래서 나같은 사람은 최대한 많은 것들을 읽는게 좋다.\n책도 좀 읽고, 아티클도 좀 읽고, 오픈소스도 좀 보자.</p>\n<h2>7. 계묘년</h2>\n<h3>2023년의 목표</h3>\n<ul>\n<li>\n<p>인강 촬영</p>\n<ul>\n<li>올해는 꼭!!</li>\n<li>가능하면 1분기 이내로</li>\n</ul>\n</li>\n<li>\n<p>미라클 모닝</p>\n<ul>\n<li>5시에 일어나서 12시 이전에 잠들기</li>\n<li>오후 시간은 내가 아닌 주변을 더 신경 쓰기</li>\n<li>오전 시간에 나를 위한 일을 하기\n<ul>\n<li>독서/운동/사이드잡</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>유튜브와 SNS 적당히 하기</p>\n<ul>\n<li>빈 틈이 생기면 인스타를 키는 내 모습… 좋지 않아.</li>\n<li>대신 스트레칭이라도 해보면 어떨까?</li>\n</ul>\n</li>\n<li>\n<p>항상 청소하기</p>\n<ul>\n<li>2023년은 재택근무를 해야 하기 때문에 항상 깔끔한 상태를 유지해보기</li>\n</ul>\n</li>\n<li>\n<p>바른자세 유지하기</p>\n<ul>\n<li>이미 거북목이라서, 더 이상 악화되지 않게끔..</li>\n</ul>\n</li>\n<li>\n<p>운동하기</p>\n<ul>\n<li>출퇴근 시간이 없어지는 만큼 나머지는 운동에 시간을 투자해보면 어떨까?</li>\n</ul>\n</li>\n<li>\n<p>계획적으로 살기 ★★</p>\n<ul>\n<li>2022년에 절실히 깨달은 한 가지가 나는 무계획형 인간이라는 것</li>\n<li>나에게 주어진 시간을 조금 효과적으로 사용할 수 있는 것은 계획을 세우는 것</li>\n<li>계획은 논리와 근거를 만들어준다.\n<ul>\n<li>계획을 세우는 것에 스트레스 받지 않을 수 있을까?</li>\n<li>계획을 세우는 계획을 계획해보자 (이게 뭔소린지)\n<ul>\n<li>하루에 30분 정도는 투자할 수 있지 않을까?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>노션을 최대한 활용해보자</li>\n</ul>\n</li>\n<li>\n<p>웹툰 대신 독서</p>\n<ul>\n<li>당당하게 말하던 나의 취미… 웹툰, 웹소설…</li>\n<li>대신 독서를 해보면 어떨까?</li>\n<li><s>오늘부터 취미는 독서!!</s></li>\n</ul>\n</li>\n<li>\n<p>이사 준비</p>\n<ul>\n<li>과연… 어디로 갈 것인가! <s>(나에게 선택권이 없을 뿐)</s></li>\n</ul>\n</li>\n</ul>\n<h3>목표를 달성을 위한 액션 플랜</h3>\n<ul>\n<li>\n<p>평일</p>\n<ul>\n<li>\n<p>필수로 써야하는 시간 = 16시간</p>\n<ul>\n<li>수면 6시간</li>\n<li>회사일 8시간</li>\n<li>식사 2시간 (점심/저녁)</li>\n</ul>\n</li>\n<li>\n<p>자유 시간 = 2시간</p>\n<ul>\n<li>뭘 하든 자유</li>\n</ul>\n</li>\n<li>\n<p>남는 시간 = 6시간</p>\n<ul>\n<li>운동 1시간</li>\n<li>독서 1시간 (23:00 ~ 24:00)</li>\n<li>오글오글 30분</li>\n<li>사이드잡 ( 글쓰기, 멘토링, 코드리뷰, 인강 및 기타 등등 ) 2시간</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>주말</p>\n<ul>\n<li>가능하면 온전한 휴식을 추구하기..?</li>\n</ul>\n</li>\n<li>\n<p>매월</p>\n<ul>\n<li>월 초 → 이번 달 목표 세우기</li>\n<li>월 말 → 목표 달성 여부 확인 및 회고</li>\n</ul>\n</li>\n<li>\n<p>1분기</p>\n<ul>\n<li>남는 시간은 인강 촬영에 최대한 투자해보기</li>\n</ul>\n</li>\n<li>\n<p>2분기 ~</p>\n<ul>\n<li>사실 뭘 할지 모르겠음..</li>\n<li>아마 기능대회 관련 콘텐츠를 만들어야 하지 않을까?</li>\n</ul>\n</li>\n</ul>\n<h2>8. 더 장기적인, 더 이상적인 목표</h2>\n<ul>\n<li>우리는 일을 왜 할까? 결국엔 행복해지려고, 잘 살려고 하는게 아닐까?</li>\n<li>회사에 종속된 상태에서는 얼마나 행복해질 수 있을까?</li>\n<li>얼마나 자유로운 인생을 살 수 있을까?</li>\n<li>나는 회사에, 그리고 일에 종속적인 삶만 살 수 있는걸까?</li>\n<li>일에 종속적인 인생을 살아야 한다면, 정말 내가 좋아하는 사랑하는 일을 해야 하지 않을까?</li>\n<li>그렇다면 나는 개발자라는 직업을 얼마나 좋아하고 있을까?</li>\n<li>그냥 관성 때문에 개발자가 된게 아닐까?</li>\n</ul>\n<p>그래서 나의 최종 목표는, <strong>의존성 역전을 하는 것.</strong></p>\n<ul>\n<li>회사라는 거대한 컨텍스트에, 개발자라는 인스턴스에 나를 주입하지 않는 것.</li>\n<li>내가 가진 인터페이스를 많이 찾아내는 것.</li>\n<li>내가 협력할 수 있는 사람들을 더 많이 찾아내는 것.</li>\n</ul>\n<p>지금은 스케치만 해놓은 상태다.\n<strong>2023년 회고에서는 청사진이 되어 있기를.</strong></p>\n<h2>Summary</h2>\n<ul>\n<li>2022년, 꽤 힘들었다.</li>\n<li>2023년, 더 잘 해보고 싶다.</li>\n</ul>\n",
      "date_published": "2023-01-01T23:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "인프런 심야 FE 네트워킹 후기",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%8B%AC%EC%95%BC-FE-%ED%9B%84%EA%B8%B0/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%8B%AC%EC%95%BC-FE-%ED%9B%84%EA%B8%B0/",
      "summary": "인프런의 심야 FE 네트워킹에 참여했습니다. 발표를 보면서 생각했던 내용과 네트워킹에 대한 내용을 다룹니다.",
      "content_html": "\n<p><img src=\"https://user-images.githubusercontent.com/18749057/174490151-0aa33935-a28c-4157-a7ae-07ec3f506d62.jpg\" alt=\"썸네일\"></p>\n<p>본 포스트는 <a href=\"https://www.inflearn.com/pages/midnight-fe-2205\" target=\"_blank\" rel=\"noopener noreferrer\">인프런 심야 FE 네트워킹</a>에 대한 후기이다.\n주로 필자가 받았던 질문과 이에 대한 답변을 추려서 작성할 것이다.</p>\n<h2>진행 과정</h2>\n<p>오프라인 행사였고, 네트워킹 전에 <a href=\"https://jojoldu.tistory.com/\" target=\"_blank\" rel=\"noopener noreferrer\">인프런 CTO 이동욱</a>님이 행사의 포문을 열고, 인프런의 FE 개발자인 빠삐코님이 <code>어떻게 랠릿을 만들었을까?</code>에 대한 내용을 발표하고, 카카오 엔터테인먼트의 FE 리드 개발자인 김성호님이 <code>뽑히는 주니어의 조건</code> 이라는 주제로 발표를 해주셨다.</p>\n<p>세션에 대한 내용은 상세하게 작성해주신 분들이 많기 때문에 여기서는 크게 다루진 않을 것이다.</p>\n<ul>\n<li><a href=\"https://onlydev.tistory.com/152\" target=\"_blank\" rel=\"noopener noreferrer\">인프런 네트워킹에 다녀오다 - 김병연님</a></li>\n<li><a href=\"https://velog.io/@oneook/%EC%9D%B8%ED%94%84%EB%9E%A9-FE-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9-%EB%8D%B0%EC%9D%B4%EC%97%90-%EB%8B%A4%EB%85%80%EC%99%94%EC%8A%B5%EB%8B%88%EB%8B%A4\" target=\"_blank\" rel=\"noopener noreferrer\">인프랩 심야 FE 네트워킹 데이 참여 후기 - 이원국님</a></li>\n</ul>\n<h2>어떻게 랠릿을 만들었을까?</h2>\n<p><img src=\"https://cdn.inflearn.com/public/files/pages/07527f0b-23d4-4642-8384-477acee84d69/blog02.jpg\" alt=\"빠삐코 bn\"></p>\n<p>주로 랠릿을 만들면서 어려웠던 부분들에 대해 발표해주셨다.\n조금 아쉬운 점을 이야기해보자면, 의사결정 과정에서 <code>왜?</code> 에 대한 부분을 저 자세히 다뤄줬으면 좋았을 것 같다.\n랠릿 서비스에 대한 내용은 <strong>인프런 기술블로그에 자세히 공유될 예정</strong>이라고 한다.</p>\n<ul>\n<li>어떤 기술 스택을 사용했는지</li>\n<li>프로젝트를 진행하면서 어려웠던 점들</li>\n<li>그리고 이걸 어떤 방식으로 해결했는지</li>\n<li>그래서 지금은 괜찮은지</li>\n<li>앞으로는 어떤 방식으로 진행할 것인지</li>\n</ul>\n<p>아마 이런 내용들 위주일 것 같다.</p>\n<p>되도록 빨리 볼 수 있었으면 좋겠다.\n<s>보고 있나요 빠삐고님!?</s></p>\n<h2>뽑히는 주니어의 조건</h2>\n<p><img src=\"https://cdn.inflearn.com/public/files/pages/0af951de-0747-4394-804d-a6b14b98a87f/blog01.jpg\" alt=\"김성호님 bn\"></p>\n<p>필자도 리더의 역할을 수행하며 <a href=\"https://zuminternet.github.io/zum-front-recurit-review/\" target=\"_blank\" rel=\"noopener noreferrer\">채용을 경험해본 입장</a>에서 나만의 생각을 곁들여 이야기해볼 것이다.</p>\n<h3>(1) 개발자의 능력치</h3>\n<p>김성호님은 개발자의 능력치를 게임 캐릭터의 스탯으로 비유했다.</p>\n<p>스탯창이 전부 기억나는건 아닌데..</p>\n<ul>\n<li>리더쉽</li>\n<li>커뮤니케이션</li>\n<li>엔지니어링(개발)</li>\n</ul>\n<p>일단 이렇게 세 개가 있었고 한 가지는 기억나질 않는다.</p>\n<p>리더쉽과 대비되는 능력으로는 팔로우쉽이 있다고 생각한다.</p>\n<p>내가 생각하는 팔로우쉽은</p>\n<ul>\n<li>우리 조직과 리더가 생각하는 것, 의도하는 것들을 잘 인지하는지</li>\n<li>인지하고 있다면, 이에 대해 적절한 방향으로 행동하고 있는지</li>\n</ul>\n<p>이렇게 두 가지 이다.</p>\n<p>처음부터 리드하는 사람이 떡밥을 잘 던져주면 좋겠지만(?) 누군가는 리딩하는 능력치가 낮을 수도 있고, 또 리더가 잘 신경쓰지 못하는 부분도 있다.</p>\n<p>그렇기 때문에 내가 리더의 입장에서 내 역할을 잘 인지하고 잘 따라줄 수 있는 능력도 꼭 필요하다고 생각한다.</p>\n<p>필자는 페이스북을 많이 한다.\n페이스북의 콘텐츠를 소비하는 입장이랄까? 제일 유익하게 느끼는 것은 <a href=\"https://www.facebook.com/shinsoojungceo\" target=\"_blank\" rel=\"noopener noreferrer\">신수정</a>님이 작성해주신 글들이다.\n주옥같은 글이 무척 많이 있다.\n<a href=\"https://www.linkedin.com/in/soojung-shin-30398b75/\" target=\"_blank\" rel=\"noopener noreferrer\">링크드인</a>에도 자주 올려주신다.</p>\n<p>각설하고, 무척 인상 깊었던 내용 중 하나를 간략하게 소개해보자면, <code>스스로 뛰어난 리더가 되기 위해선 무능력한 리더 밑에서도 일을 해봐야 한다</code> 는 내용이다.</p>\n<p>커뮤니케이션 능력이 안 좋을 수도 있고, 개발자라면 개발 능력 자체가 미스일 수도 있을 것이다.\n중요한 것은 이런 상황을 극복하고 성과를 내는 것이다.\n이를 극복하는 능력치 중 하나가 <code>팔로우쉽</code>이라고 생각한다.</p>\n<h3>(2) 이력서</h3>\n<p>이력서 부분을 무척 길게 이야기 해주셨는데, 기억나는건 다음과 같다.</p>\n<ul>\n<li>단순 기술스택 나열을 최악이다.</li>\n<li>해당 기술로 어떤 문제를 해결했는지 작성하면 좋다.</li>\n<li>길이도 중요하다.</li>\n<li>해당 회사에서 권장하는 양식을 사용하는게 좋다.\n<ul>\n<li>가끔 첨부파일로만 이력서를 제출하는 사람이 있는데..</li>\n<li>이럴 때 무심코 넘어갈 수 있다.</li>\n</ul>\n</li>\n<li>스펙은 중요하지 않다.</li>\n<li>프로젝트에 대한 성과를 이력서에 드러내야한다.\n<ul>\n<li>보통 신입 개발자는 무엇이 성과인지 모르는 경우가 많다.</li>\n<li>객관적인 지표가 필요하다.</li>\n<li>이건 필자의 생각인데, <code>사용성이 좋은 서비스</code> 를 만들었다고 한다면, 어떻게 사용성이 좋다는 것을 증명할 것인가? 이에 대한 고민이 필요하다.</li>\n</ul>\n</li>\n</ul>\n<p>여기에 필자의 생각을 곁들이자면,</p>\n<h4>1) <strong>문제 해결 과정</strong>에 대한 내용이 드러나야 한다.</h4>\n<p>현재 시장에 있는 FE 개발자의 경우 <code>전공자</code>를 찾기가 무척 드물다.\n필자도 1년 이라는 시간 동안 1000개 가까이 되는 이력서를 봤는데 그 중에 전공자를 찾기가 무척 드물었다.</p>\n<p>일단 전공자를 찾는 이유는 <code>컴퓨터 공학적인 사고</code>를 가지고 있을 확률이 높기 때문이다.\n단순히 전공과목(운영체제, 컴퓨터구조, 자료구조, 알고리즘, 객체지향 프로그래밍 등)을 공부했기 때문이 아니라 전공과목을 학습하는 과정에서 왜 이런 이론들이 등장했는지, 이런 해결 방법을 사용했는지 배우기 때문이다.\n즉, 비전공자보다 <code>문제 해결 과정에 대해 시간 투자를 했다</code>고 생각하기 때문이다.</p>\n<p>중요한 포인트를 다시 짚어보자면 필자는 <code>문제 해결을 했다</code> 가 아니라 <code>문제 해결을 위해 어떤 방식으로 접근</code> 했는지를 더 중요하게 생각한다.\n이럴 경우, 답을 모르거나 답이 없는 상황에서도 크게 당황하지 않고 침착하게 문제 해결을 위한 사고를 할 수 있기 때문이다.</p>\n<p>그래서 굳이 전공자가 아니더라도, 문제 해결을 위해 접근하는 과정에 대한 연습이 잘 되어 있거나 그게 자연스러운 사람이라면 어떤 문제가 발생하더라도 이를 해결할 수 있으리라고 생각한다.</p>\n<h4>2) 차별점이 있어야 한다.</h4>\n<p>앞서 언급했던 것 처럼 1000개 정도의 이력서를 보면서 느낀 점은, 너무 획일화 되었다는 것이다.\n현재 대부분의 FE 취준생은 <code>부트캠프</code>를 거친다.</p>\n<ul>\n<li>프로그래머스 데브코스</li>\n<li>코드스테이츠</li>\n<li>위코드</li>\n<li>원티드</li>\n<li>바닐라 코딩</li>\n<li>우아한테크코스</li>\n<li>우아한테크캠프</li>\n<li>부스트캠프</li>\n<li>코드스쿼드</li>\n<li>서울 42</li>\n<li>싸피</li>\n<li>소프트웨어마에스트로</li>\n<li>패스트캠퍼스</li>\n<li>항해99</li>\n<li>멋쟁이사자들</li>\n</ul>\n<p>굉장히 많지 않은가? 오히려 독학으로 공부하는 경우는 정말 드물다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">부트캠프에 대한 고찰</p>\n<p>사실 요즘 들어 드는 생각은 독학으로 FE를 공부 했다고 한다면 기술적인 문제보단 커뮤니케이션에 대한 문제 때문에 같이 일하기가 힘들 수 있다는 생각을 하고 있다.\n필자가 생각하는 부트캠프의 제일 큰 의의는 <strong>커뮤니케이션</strong>이다.\n공부는 혼자서도 충분히 할 수 있다.\n<strong>하지만 프로젝트를 하면서 다른 사람과 의견을 나누고 맞춰가는 과정은 혼자서 습득할 수 없기 때문</strong>이다.</p>\n</div>\n<p>대부분의 FE 취준생이 부트캠프 출신이고, 대부분의 사람이 똑같은 기술을 익히는 이 상황에서(Javascript, Typescript, React, Redux, …) 어떻게 내가 다른 사람보다 같이 일하기에 더 좋은 사람이라는 것을 어필할 수 있을까?</p>\n<p>필자가 생각하는 수단은 다음과 같다.</p>\n<ul>\n<li>\n<p>블로그</p>\n<ul>\n<li>단순히 기술을 정리하는 것은 불필요하다.</li>\n<li>내가 어떤 사람인지를 블로그를 통해서 드러내야 한다.\n<ul>\n<li>개발을 할 때 어떤 생각을 하는지</li>\n<li>어떤 방식으로 공부했는지</li>\n<li>어떤 것들을 공부하고 있는지</li>\n<li>실패 혹은 성공에 대한 회고를 하는지</li>\n</ul>\n</li>\n<li>예시\n<ul>\n<li>단순 ES6 스펙 나열 → X</li>\n<li>ES6가 <code>왜</code> 등장했고, 스펙은 어떻게 되고, 어떤 장단점이 있는지 → O</li>\n</ul>\n</li>\n<li>필자는 항상 <code>왜(why)</code> 에 대한 키워드가 필요하다고 생각한다.</li>\n</ul>\n</li>\n<li>\n<p>스스로를 표현하는 내용이 많을 수록 좋다.</p>\n<ul>\n<li>결국 같이 일하고 싶은 사람을 뽑는 것이다.</li>\n<li>나에 대해 더욱더 궁금하게 해야한다.</li>\n<li>내가 어떤 가치관을 가지고 있는지</li>\n<li>어떤 철학을 가지고 있는지</li>\n<li>개발을 배워서 뭘 하고 싶은지, 뭘 하고 있는지</li>\n</ul>\n</li>\n<li>\n<p>github</p>\n<ul>\n<li>github의 잔디가 없는 것 보단 있는게 낫다.</li>\n<li>꾸준히 하는 것도 장점이도</li>\n<li>특별한 것을 하는 것도 장점이다</li>\n<li>결국 개발자이기 때문에 코드로 표현하는 것이 아닐까?</li>\n</ul>\n</li>\n</ul>\n<p>하고 싶은 이야기는..\n무척 많지만 일단 이정도에서 마무리해야할 것 같다.\n나중에 아예 <code>내가 같이 일하고 싶은 개발자</code>에 대한 주제로 글을 쓰면 될듯..?</p>\n<h3>(3) 채용 과제</h3>\n<p>과제에 대한 내용도 다뤄주셨다.</p>\n<ul>\n<li>필수 기능을 구현할 것</li>\n<li>구조를 신경쓸 것</li>\n<li>네이밍 신경쓸 것</li>\n<li>완성도 높일 것</li>\n<li>node_modules 제거</li>\n</ul>\n<p>요약하자면 이정도?</p>\n<p>필자도 채용 과제를 출제했던 입장에서 무척 공감되는 내용이었다.\n다만 조금 다른 시야를 가지고 있는데, 필수 기능 구현 보단 코드의 퀄리티나 구조에 대해 더 높이 평가한다.</p>\n<p>똑같은 기능을 구현하더라도 난이도가 천차만별이기 때문이다.\n<strong>그래서 과제에서 스스로가 보여줄 수 있는 모든 역량을 보여주는 것</strong>이 좋다고 생각한다.</p>\n<h3>(4) 기술 면접</h3>\n<p>기술 면접에 대한 이야기는 사실 후기도 많고, 인터뷰 질문도 많기 때문에 대부분의 개발자가 아는 내용이었으리라고 생각한다.</p>\n<p>다만, 채용을 했던 입장에서 고민해보자면 김성호님도 이야기 하셨지만, 면접을 보면 볼수록 사람을 판단하기가 어려워진다.\n일정 수준 이상을 만족하는 개발자는 많지만 정말 주옥 같은 분을 모셔오는 것은 다른 차원의 문제라고 생각하기 때문이다.</p>\n<p>우리 조직에서 수용할 수 있는 제일 좋은 인력을 뽑는 것이 채용 담당자의 제일 큰 성과가 아닐까?</p>\n<p>그리고 그런 성과를 내기 위해서 더욱 더 주도면밀하게 사람을 파악해야 하는데..\n1~2시간을 통해서 사람을 파악하는 것 자체가 모순적이기 때문이다.</p>\n<p>특히, 필자가 김성호님께 드렸던 질문이 <code>성장성을 높게 평가해서 채용했던 적이 있는가</code> 였는데, 이게 제일 어렵다고 이야기 주셨다.</p>\n<p>신입 개발자의 경우, 취준 과정에서 공부했던 내용들은 사실 실무를 접하게 되면 여태까지 했던 것들은 티끌에 불과했구나 깨닿게 된다.\n일단 필자는 그랬다.\n내가 아는 것은 정말 티끌에 불과하구나..를 절실하게 깨달았다.</p>\n<p>그래서 1년차였던 2020년에 정말 죽어라 공부했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">2020년 깃허브 로그</p>\n<p><img src=\"https://junilhwang.github.io/TIL/assets/thumbnail.c9a1d3e1.jpg\" alt=\"https://junilhwang.github.io/TIL/assets/thumbnail.c9a1d3e1.jpg\"></p>\n<p>정말..\n정말 열심히 공부했다.\n공부 과정이 <a href=\"https://junilhwang.github.io/Review/2020-year/12-December/\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a> 클릭!</p>\n</div>\n<p>다만, 내가 입사할 당시에 꽤 매력적인 사람이었는가? 를 봤을 때는..\n잘 모르겠다.\n내가 채용 담당자였다면 나를 안 뽑았을 것이다.\n그렇기 때문에, 스스로 부족한 점을 인지하고 이를 매꾸기 위해서 무던히 노력했던 것이다.</p>\n<p>그렇기 때문에 나는 <strong>내가 어떤 사람인지 면접 전에 다양한 방법으로 채용 담당자에게 전달</strong> 하는 것이 무척 중요하다고 생각한다.\n지금 당장은 부족하더라도 내가 잘 성장할 수 있음을, 포텐셜이 있음을 보여주는 것이다.</p>\n<p>그리고 기술 면접에서 모르는 내용이 있더라도, 외웠던 내용을 뒤적거리며 답변하기 보단, 유추하려고 노력하는 것이 중요하다고 생각한다.</p>\n<p>사실 모르면 그냥 검색해서 적용하면 된다.\n그런데 내가 겪고 있는 문제가 검색해서 안나오면 어떻게 할 것인가? 그런 상황에서 어떻게 대처할 수 있는지를 보여줘야 하지 않을까?</p>\n<h3>(5) 마지막으로, 나의 생각</h3>\n<p>마지막으로 필자가 다룰 내용은 <code>먼저 연락이 오게 만드는 것</code> 이다.</p>\n<p>필자는 스스로가 많이 부족한 개발자라고 생각한다.\n세상엔 잘하는 사람이 너무 너무 많기 때문이고, 나는 그들에 비하면 티끌에 불과하다.</p>\n<p>다만 내가 가진 지식을 잘 표현하고, 전달하고, 공유하는 것은 또 다른 문제다.</p>\n<p>필자는 의도했던, 의도하지 않았던 내가 가진 것들을 잘 활용했다고 생각한다.</p>\n<p>그 수단 중 하나가 <code>블로그</code> 였다.</p>\n<p>필자의 경우 <a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Store/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 상태관리 시스템 만들기</a> 라는 글을 작성 했을 때, 이번에 행사에 연사로 참여해주신 <code>김성호</code> 님이 제일 먼저 같이 이야기해보면 좋겠다고 이야기를 주셨는데..\n필자가 김칫국 한 사발 드링킹 하고 지금은 줌인터넷에서 할 일이 있으니 현재 하는 일에 집중하겠다며 거절 의사를 밝혔다.\n그 때로 다시 돌아간다면 성호님을 만나뵙고 다양한 이야기를 나눠보면 더 좋았을 것 같다는 생각이 든다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">패기 넘치던 후회 가득한 답장</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/174490535-423904c7-3fac-4f18-96c8-f648336cd77b.png\" alt=\"메일 답장\"></p>\n</div>\n<p>어쨌든 그 다음에 더 잘써보자는 생각으로 <a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 가상돔(VirtualDOM) 만들기</a>와 <a href=\"https://zuminternet.github.io/zum-front-recurit-review/\" target=\"_blank\" rel=\"noopener noreferrer\">주니어 프론트엔드 개발자의 채용 프로세스 참여 후기</a>를 작성했다.</p>\n<p>이런 글을 보고 네이버, 우아한형제들, 토스 등 정말 내가 갈 수 있을까? 싶은 기업의 리쿠르터 분들과 여러 스타트업의 리쿠르터 분들이 연락을 주셨다.</p>\n<p>그 당시에는 줌인터넷 프론트엔드 파트를 빌딩한지 얼마 안 된 시점이었기 때문에 눈물을 머금고(?) 지금 당장은 지원하지 않겠다는 의사를 각 기업의 담당자분들께 전달드렸다.</p>\n<p>각설하고, 필자가 괜찮은 방향으로 나아가고 있다는 생각을 가지게 된 계기가 김성호님 덕분이었다.</p>\n<p>그래서 이번 행사에 무척 참여하고 싶었고, 또 직접 인사드리고 싶었는데..\n발표가 끝나자 마자 칼퇴근을 하셔서 인사를 드리지 못한게 제일 아쉬웠다.</p>\n<p>사실 필자는 글을 작성하고 나서 방치한게 아니라 꽤 다양한 방식으로 여러 플랫폼에 홍보했다.</p>\n<ul>\n<li>페이스북 페이지\n<ul>\n<li>생활코딩</li>\n<li>프론트엔드 개발자 그룹</li>\n<li>VueJS 개발자 그룹</li>\n<li>React 개발자 그룹</li>\n<li>Javascript 개발자 그룹</li>\n</ul>\n</li>\n<li>오픈채팅방\n<ul>\n<li>출퇴근길 개발 읽기</li>\n</ul>\n</li>\n<li>슬랙, 디스코드 채널\n<ul>\n<li>블랙커피 스터디</li>\n<li>부스트캠프</li>\n</ul>\n</li>\n<li>에브리타임(대학교 커뮤니티)</li>\n<li>링크드인</li>\n</ul>\n<p>그리고 작성한 글이 정말 퀄리티가 좋을 때는 필자가 아닌 독자 분들이 다양한 플랫폼을 통해 공유를 해주는 경우도 많았다.</p>\n<p>먼저 글의 퀄리티를 높여야 하고, 스스로 작성한 글에 자신이 있다면 이를 제대로 홍보할 줄 알아야 한다.\n그렇게 <code>여기 이런 사람이 있다</code> 고 알릴 수록 기회가 많아지는 것이다.</p>\n<p>그리고 필자가 선택한 또 다른 수단은 <code>스터디 형태의 강의</code> 플랫폼이다.\n사실 대부분의 부트캠프가 <code>스터디 형태의 강의</code> 라고 할 수 있는데, 부트캠프 외에도</p>\n<ul>\n<li>코드숨</li>\n<li>넥스트스텝</li>\n<li>프로그래머스</li>\n</ul>\n<p>등을 통해 참여할 수 있다.</p>\n<p>강의형 스터디에서 미션이 주어질 때 마다 <code>제일 빨리 끝내자</code> <code>리뷰를 제일 많이 하자</code> 같은 목표를 정해서 미션이 임했다.\n이런 과정을 통해서 <code>내가 꽤 개발을 괜찮게 한다</code> 라는 점을 어필하는 것이다.</p>\n<p>강의를 하는 사람도, 강의에 리뷰어로 참여하는 사람도 기업에 근무하는 경우가 대부분이며, 대부분의 기업은 채용을 한다.</p>\n<p>열심히 하는 사람일수록 기억에 강렬하게 남을 수 밖에 없는 것이다.\n그래서 필자는 어떤 과정을 참여하든 최대한 적극적으로, 최대한 많은 시간을 투자했다.</p>\n<p>마찬가지로, 이런 경험을 토대로 부스트캠프, 넥스트스텝, 항해99 같은 교육 과정(혹은 플랫폼)에 리뷰어나 멘토로 참여할 수 있었고, 또 이에 대한 회고를 쓰고, 다시 내가 이런 사람이라고 필자의 글을 읽는 사람에게 알릴 수 있었다.</p>\n<p>그리고 이 글 또한 필자는 수단이라고 생각한다.</p>\n<ul>\n<li>나는 이런 생각을 가지고 있다.</li>\n<li>나는 이런 자세로 개발을 하고 있다.</li>\n<li>나는 이런 사람과 일하고 싶다.</li>\n<li>나는 이런 역량을 가지고 있다.</li>\n</ul>\n<p>라고 직접적이 아닌 <strong>간접적으로 전달</strong>하는 것이다.</p>\n<p>물론, 필자가 이야기 하는 것이 정답이 될 순 없다.\n어떻게 보면 속 빈 강정이 될 수도 있고, 빈 수레가 요란하다는 말의 표본이 될 수도 있다.</p>\n<p>그럼에도 불구하고 하지 않는 것 보단 하는 게 더 좋다고 생각한다.</p>\n<h2>네트워킹</h2>\n<p>원래 네트워킹에 대한 내용을 제일 길게 작성할 생각이었는데 급발진(?)을 해서 앞의 내용이 길어졌다..\n<s>갑자기 쓰기 귀찮아지기 시작하네</s></p>\n<h3>(1) 어떤 일을 얼마나 했나요?</h3>\n<p>라는 질문을 제일 많이 들었다.</p>\n<p>필자는 대학교 1학년이 끝나고 휴학한 다음에 군대에 가기 전까지 <code>서울디지텍고등학교</code> 라는 곳에서 웹 개발 강사를 했었다.</p>\n<p>필자는 웹 개발을 고등학교 2학년 때 처음 접했다.\n구구절절 이야기하면 너무 길어지기 때문에 궁금하다면 이 글들을 읽어주시길..</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\" rel=\"noopener noreferrer\">유년시절 이야기 (1)</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\" rel=\"noopener noreferrer\">유년시절 이야기 (2)</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\" rel=\"noopener noreferrer\">유년시절 이야기 (3)</a></li>\n</ul>\n<p>어쨌든 21살에 PHP, MySQL, 포토샵(?), javascript, jQuery 등을 고등학생들을 대상으로 교육했다.\n약 10개월 정도 했었다.\n더불어서 프리랜서를 하면서 다양한 외주를 맡아서 했었는데..\n덕분에 입대하는 날 아침까지 개발을 했었다.</p>\n<p>우여곡절 끝에(?) 전역을 하고 복학하기 전까지 일이나 해보자 라는 생각으로 집앞에 있는 에이전시 회사에 지원했는데, 면접을 보고 내일부터 출근하라고 해서 감사합니다! 하고 일했다.</p>\n<p>당시에는 월급을 150만원 받으면서 일했는데, 첫날 9시까지 야근했다.\n첫 날 부터 너무 열심히해서 <code>준일씨 때문에 퇴근하는게 눈치보이잖아요!</code> 라는 이야기를 들었던 기억이 난다(진심은 아니고 장난으로 한 이야기였다 ㅋㅋ)</p>\n<p>그렇게 6개월 정도 일하다가 복학할 때가 되어서 그만두겠다고 이야기 했더니 회사는 안 나와도 좋으니 원격근무로 일하자고 제안주셔서 덮썩 물었고, 1년을 더 일했다.</p>\n<p>에이전시마다 다르겠지만..\n내가 맡았던 업무는 그누보드 + 워드프레스로 쇼핑몰이나 회사사이트를 만들고 반응형으로 구축하는게 대부분이었다.\n어쩌다 한 번 스프링으로 된 프로젝트도 진행해보고, Vue.js 같은 프레임워크를 써보기도 했는데 어쨌든 쉽게 말해서 재미도 없고 의욕도 없었다.\n그래서 그만 뒀다.</p>\n<p>그렇게 학업에 집중 아닌 집중을 했고, 우여곡절 끝에 막학기에 줌인터넷에 합류하여 2년 6개월을 근무했다.</p>\n<p>사실 프론트엔드를 전문으로 하기 시작한 것은 1년이 안 된다.\n줌인터넷에 입사할 때는 서비스 개발자였고, 백엔드 API를 만드는 일을 더 많이 했다.\n그래서 Java와 관련된 학습을 꽤 많이 했다.</p>\n<p>그러다 갑자기 프론트엔드 파트가 생겼고, 갑자기 리딩을 하게 되면서 프론트엔드 개발자로 전향하게 된 것이다.</p>\n<p>어쨋든 위와 같은 과정을 통해서 하고 싶은 이야기는, 대학교를 다니면서 굳이 일을 하지 않아도 된다는 점이다.\n같은 조에 대학교를 다니면서 일을 하시는 분이 있었는데 내 과거와 겹쳐졌다.\n물론 일했던 경험 자체는 도움이 되지만, 이게 학업의 경험보다 도움이 된다고 이야기 한다면 아니라고 생각한다.\n(관점의 차이가 있다)</p>\n<p>제일 큰 이유 중 하나는, 일은 평생 하게 될 것이다.\n그렇기 때문에 여건만 된다면 그냥 학교 생활 자체를 즐기는게 인생을 길게 놓고 봤을 때 더 큰 활력이 되리라 생각한다.</p>\n<p>필자는 대학교를 다닐 때가 제일 힘들었다.</p>\n<p>일은 일대로 하고, 수업은 수업대로 듣고, 과제도 하고 시험도 보고, 시험 끝나면 다시 일하고를 반복했다.\n대학교 복학 후 3년 동안 평균 수면 시간이 4시간~5시간 사이였다.</p>\n<p>차라리 그 시간에 마음 맞는 친구들과 프로젝트를 했다면, 동아리를 했다면, 혹은 부스트캠프 같은 교육 과정을 알아보고 준비해서 참여할 수 있었다면 지금보다 더 많은 분들을 뵙고 개발이라는 것의 본질에 더 일찍 다가갈 수 있지 않을까? 하는 생각이 든다.</p>\n<p>후회를 한다고 해도..\n사실 필자에게는 별다른 선택지가 없었다.\n스스로 학비와 생활비를 벌어야 했기 때문이다.\n공부를 해서 시험을 잘 보고 장학금을 받는다고 해도 생활비까지 나오는건 아니기 때문에..\n울며 겨자먹기로 일을 했다.\n어떤 날은 내가 왜 이렇게 살아야하지? 하는 생각에 서러움에 북받쳐서 눈물을 쏟아낸적도 있었다.\n정말 필자 처럼 어쩔 수 없는 상황이 아니라면, 굳이 일할 필요는 없다고 생각한다.\n대학교에서 할 수 있는 값진 경험이 너무 많기 때문이다.</p>\n<h3>(2) Vanilla Javascript에 대한 글을 왜 쓰게 되었나요?</h3>\n<p>필자는 프레임워크 라는 것은 내가 아닌 다른 사람이 내 자리를 대체하기 쉽게 만드는 도구라고 생각했다.\n즉, 내가 React를 해다가 퇴사했을 때 다른 React 개발자를 구하면 된다.\n그런데 내가 React 외적으로 무엇인가 더 중요한 일을 할 수 있다면, 내가 퇴사한다고 했을 때 사측에서는 한 번 이상의 고민을 하게 되지 않을까?</p>\n<p><code>이 사람을 대체 할 수 있다</code> 가 아니라 <code>이 사람을 대체할 수 있을까?</code> 로 생각할 수 있게 만들어야 한다고 생각했다.</p>\n<p>그래서 쉽게 대체할 수 없는 개발자가 되어야 한다고 생각했다.\n그 수단으로 필자는 프레임워크의 기저에 깔린 개념들을 학습해보자는 생각으로 공부를 했다.\n내가 프레임워크를 만들 수준이 된다면, 프레임워크에 얽매이는 개발자가 아니라 더 난이도가 높은 일도 할 수 있으리라고 생각했다.</p>\n<h3>(3) 사용성이 좋다는 것을 어떻게 판단할 것인가?</h3>\n<p>이건 필자가 다른 분들에게 질문드린 내용이다.\n<code>김성호</code> 님이 UX를 더 신경쓰는 개발자가 되어라 라고 이야기해주셨는데, 그렇다면 UX가 더 좋다는 것을 어떻게 알 수 있을까? 에 대한 질문도 필요하다고 생각했다.</p>\n<p>내가 만든 서비스가 사용성이 좋다는 것을 객관적으로 알 수 있는 방법이 있을까?</p>\n<p>객관적인 지표를 도출해내는 방법을 생각해보자.</p>\n<ul>\n<li>사용자가 브라우저 내에서 발생시키는 이벤트가 존재할 것이다.</li>\n<li>어떤 페이지를 조회하는지</li>\n<li>어디를 많이 클릭을 하는지</li>\n<li>어떤 영역에서 많이 머무르는지</li>\n</ul>\n<p>이에 대한 정보를 수집할 수 있지 않을까? 그리고 이를 수치화 하면 어떨까?</p>\n<p>그럼 이런 생각도 있을 것이다.</p>\n<ul>\n<li>A라는 UI와 B라는 UI 중에 어떤 UI를 더 많이 쓸까?</li>\n</ul>\n<p>이를 동시에 측정하기 위한 방법도 있지 않을까?</p>\n<p>이에 대해 여기서 자세히 다루진 않겠다.\n스스로 한 번 고민해보고, 찾아보는 것을 권유드린다.</p>\n<h3>(4) 개발자의 역할은 무엇일까?</h3>\n<p>결국 IT 서비스는 인력 사업이다.\n가령, 스마트폰을 만든다고 했을 때 스마트폰에 대한 설계도 필요하고 스마트폰에 들어가는 부품도 필요할 것이다.</p>\n<p>그런데 소프트웨어는 어떠한가?</p>\n<p>누구나 컴퓨터만 있다면, 스마트폰만 있다면 웹서비스를 이용할 수 있다.\n혹은 앱을 다운받아 사용할 수도 있을 것이다.</p>\n<p>개발자는 현실세계에는 없는, 손에 잡히지 않는 무형의 것을 만드는 직업이다.</p>\n<p>거의 모든 것이 인력사업이라는 것이다.</p>\n<blockquote>\n<p>이에 대해 자세한 내용은 <a href=\"https://www.bsidesoft.com/8035\" target=\"_blank\" rel=\"noopener noreferrer\">구멍가게 개발사의 이야기</a>를 통해 보면 더욱 좋다.</p>\n</blockquote>\n<p>필자가 하고 싶은 이야기는, 개발자라는 직업 자체가 <code>돈먹는 하마라는 것</code>이다.</p>\n<p>앞서 언급한 프레임워크에 대한 이야기도 여기서 출발한다.\n개발자를 채용하고 교육하고 투입하는 것 자체가 돈이다.\n그래서 프레임워크를 통해서 획일화 하는 것이다.\n최소한의 시간으로 최대의 퍼포먼스를 내려고 하는 것이다.</p>\n<p>그렇다면, 개발자가 시간을 낭비하지 않기 위해서 해야 하는 것은 무엇이 있을까?</p>\n<p>대표적인 수단이 <code>코드리뷰</code> <code>클린코드</code> <code>리팩토링</code> 같은 것들이다.\n우리는 왜 좋은 코드를 작성해야 하는가? 그건 <code>나를 대체할 수단</code>을 만들기 위함이라고 생각한다.</p>\n<p>내가 없더라고 회사가 굴러갈 수 있도록, 내가 없더라도 지장이 없도록, 내가 아닌 누군가가 들어오더라도 이 조직에 금방 적용할 수 있도록 하는 것이다.</p>\n<p>이런 수단이 <code>잘 작성된 코드</code>와 이를 검증하기 위한 <code>코드리뷰</code> 등으로 드러나는게 아닐까?</p>\n<p>그리고 <code>최소한의 돈(인력/인프라)으로 서비스를 굴리는 것</code> 이라고 생각한다.\n똑같은 서비스를 만들어도, 확장하더라도, 유지하더라도 어떤 기술 스택을 사용하냐에 따라 유지비용이 달라진다.</p>\n<p>가령, 요즘 프론트엔드 개발자는 대부분 웹뷰를 만든다.\n그런데 왜 웹뷰를 쓰는걸까?</p>\n<p>네이티브 앱을 만들면 속도도 훨씬 빠르고 사용성도 좋다.</p>\n<p>앞서 언급한 것 처럼 사용성이 프론트엔드 개발자에게 중요한 비중을 가진다면, 어째서 앱을 만들 때 네이티브로 모든 기능을 구현하는게 아니라 웹뷰를 활용하는 것일까?</p>\n<p>이유는 <code>돈과 시간</code> 때문이라고 생각한다.</p>\n<p>네이티브로 앱을 만들 경우 안드로이드와 iOS 개발자를 각각 채용해야 한다.\n기능 하나를 수정할 때 양쪽 개발자와 커뮤니케이션을 해야 하고, QA를 해야 한다.\n무엇보다 앱을 업데이트 하려면 검수과정도 거쳐야 하고, 바로 반영되지도 않는다.</p>\n<p>무언가 문제가 발생했을 때 즉각적으로 대처할 수 있을까? 그렇지 않은 경우가 대부분일 것이다.\n변화에 취약한 것이다.</p>\n<p>그러나 웹뷰를 사용한다면 이런 문제 대부분을 해결할 수 있다.\n그래서 많은 IT 회사들이 소수의 앱 개발자를 채용하고, 다수의 프론트엔드 개발자를 채용하면서 최소한의 인력으로 최대한의 효과를 보려고 하는 것이다.</p>\n<p>그리고 웹이 많은 플랫폼에서 사용될 수록 웹의 스펙 또한 추가 되는 것이고, 그럴 수록 프론트엔드 개발자가 공부할 것들이 많아지는 것이다.</p>\n<p>우리가 회사에서 일한다는 것은 결국 수익 창출을 위함이다.\n최소한의 자본으로 최대한의 이윤을 보기 위함이다.\n스스로 이윤을 추구하는 개발자라고 할 수 있을까? 한 번 고민해볼 필요가 있다.</p>\n<h2>마치며</h2>\n<p>코로나 때문에 대부분의 대외 활동을 온라인으로만 해서 아쉬웠는데, 이렇게 오프라인 행사를 참여할 수 있어서 무척 재밌고 즐거웠습니다.\n특히 제가 작성한 글을 생각보다 더 많은 분들이 읽어주셨고, 덕분에 별다른 소개를 하지 않아도 알아봐주고 인사해주시는 분들도 무척 많습니다.\n저는 한 인간으로서 나는 그렇게 잘난 사람도 뛰어난 사람도 아니기 때문에 이런 관심 자체는 무척 부끄럽고 부담스럽지만 동시에 더 많이 노력하고, 더 열심히 하자는 생각도 할 수 있게 되었습니다.</p>\n<p>그래도 더 많은 분들과 이야기 할 수 있었는데, 제가 조금 더 적극적이였다면 어땠을까 하는 아쉬움도 있습니다 😭</p>\n<p>그리고 이야기 하고 싶었으나 다 이야기 하지 못했던 것들도 있었고, 다시 한 번 이야기 하고 싶었던 것들도 있었습니다.\n그렇게 글을 작성했는데 아쉬운 점도 있지만 어쨌든 제가 전달하고 싶은 이야기는 글에 대부분 담은 것 같습니다 😁</p>\n<p>다음에 이런 자리에 참여하게 된다면 더 많은 분들과 소통하고 싶네요!</p>\n<p>긴 글 읽어주셔서 감사합니다 🙇‍♂️</p>\n",
      "image": "https://user-images.githubusercontent.com/18749057/174490151-0aa33935-a28c-4157-a7ae-07ec3f506d62.jpg",
      "date_published": "2022-06-19T21:45:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "주니어 개발자의 이직 후기",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/Turnover/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/Turnover/",
      "summary": "줌인터넷에 입사하고 네이버로 이직하기 까지의 과정을 다룬 글입니다.",
      "content_html": "\n",
      "date_published": "2022-06-12T13:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "단국대학교 강의 시간표를 제공하는 서비스를 만들자",
      "url": "https://junilhwang.github.io/TIL/TIL/side-project/dku-schedule-manager/",
      "id": "https://junilhwang.github.io/TIL/TIL/side-project/dku-schedule-manager/",
      "summary": "단국대학교 재학생들을 타겟팅하는 간단한 사이드 프로젝트를 진행했다. 이에 대한 내용을 정리하는 글이다.",
      "content_html": "\n\n<blockquote>\n<p>본 게시물은 이 사이드 프로젝트를 시작하게 된 계기와 어떤 부분에 대해서 고민했는지 다루고 있습니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://junilhwang.github.io/dku-schedule-manager/\" target=\"_blank\" rel=\"noopener noreferrer\">단국대학교 강의 시간표 만들기</a></li>\n<li><a href=\"https://github.com/junilHwang/dku-schedule-manager\" target=\"_blank\" rel=\"noopener noreferrer\">소스코드</a></li>\n</ul>\n<h2>0. 간단한 요약</h2>\n<ul>\n<li>대학교 시간표를 긁어서 직접 시간표를 구성할 수 있는 서비스를 만들었다. <s>근데 왜 대학교측에서는 이런 기능을 안만들어주는걸까?</s></li>\n<li>별도의 API서버가 없어도 되도록 구성했다.</li>\n<li>대신에 Github Actions을 이용했다.</li>\n<li>Github Actions을 실행하여 시간표를 1시간마다 읽어들여서 json 파일로 저장한다.</li>\n<li>저장된 json 파일을 이용하여 FE에서 시간표를 구성할 수 있게 만들었다.</li>\n<li>Github Pages로 호스팅했다.</li>\n</ul>\n<h2>1. 번뜩</h2>\n<p>대학교 재학 시절, 방학 때 마다 언제 시간표가 올라오나 기다렸고, 시간표가 올라와도 언제 <a href=\"https://everytime.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">에브리타임</a>에 업로드되나 또 기다렸다. <s>그 시절에는 왜 직접 시간표 서비스를 만들 생각을 하지 않았을까?</s></p>\n<p>에브리타임은 전국의 모든 대학교를 대상으로 서비스하기 때문에 누군가가 누군가가 에브리타임 측에 시간표를 정리해서 보내지 않으면 아무도 에브리타임 내에서 시간표를 만들 수 없었다. 이건 지금도 마찬가지인 상황이다.</p>\n\n<p>여기서 중요한 점은 에브리타임은 모든 학교를 대상으로 완전 자동화 하기가 힘들다는 것이다. 그래서 나는 내 모교인 단국대학교를 타겟팅하여 시간표 서비스를 만들어야겠다고 생각했다.</p>\n<h2>2. 시간표 긁어오기</h2>\n<p>처음에는 아예 API 서버를 만들까 고민했었는데, 서버를 만들게 될 경우 골치아픈 상황이 많을 것 같아서 일단 보류했다. 그래도 API 서버가 있으면 할 수 있는 일이 무척 많아진다. 내가 재학생이 아니라서 웹 포털의 모든 기능을 사용할 수 없는게 아쉬울뿐..</p>\n<p>만약에 API 서버가 있다는 가정 하에 할 수 있는 일들을 나열해보자면</p>\n<ul>\n<li>서비스에서 만든 시간표를, 그대로 대학교 웹 포털에 등록하기</li>\n<li>시간표 공유\n<ul>\n<li>지금도 이미지 기반으로 가능하긴 함</li>\n</ul>\n</li>\n<li>실시간 채팅</li>\n<li><s>등록된 시간표를 기반으로 수강신청</s>\n<ul>\n<li>하면 잡혀감. 철컹철컹</li>\n<li>이론상 가능하긴 함</li>\n</ul>\n</li>\n<li>기타 등등..?</li>\n<li>사실 지금 당장 생각나는게 딱히 없다.</li>\n<li>할 수 있는게 무궁무진 하긴 하다.</li>\n</ul>\n<p>어쨌든 별도의 서버가 없는 상태에서, 단국대 포털에 시간표가 올라오자마자 이를 읽어들이고 서비스로 제공해야 한다.</p>\n<p>강의 시간표는 <a href=\"https://webinfo.dankook.ac.kr/tiac/univ/lssn/lpci/views/lssnPopup/tmtbl.do\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>에서 검색해볼 수 있는데, 검색 조건을 설정하고 전송하면 다음과 같은 네트워크 요청을 보낸다.</p>\n<p></p>\n<p>이 때 다음과 같이 크롬에서 발생한 네트워크 전송을 cURL 요청으로 복사하여 확인해볼 수 있다.</p>\n<p></p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token function\">curl</span> <span class=\"token string\">'https://webinfo.dankook.ac.kr/tiac/univ/lssn/lpci/views/lssnPopup/tmtbl.do'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Connection: keep-alive'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Cache-Control: max-age=0'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'sec-ch-ua: \" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"97\", \"Chromium\";v=\"97\"'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'sec-ch-ua-mobile: ?0'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'sec-ch-ua-platform: \"macOS\"'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Upgrade-Insecure-Requests: 1'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Origin: https://webinfo.dankook.ac.kr'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/x-www-form-urlencoded'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Sec-Fetch-Site: same-origin'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Sec-Fetch-Mode: navigate'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Sec-Fetch-User: ?1'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Sec-Fetch-Dest: document'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Referer: https://webinfo.dankook.ac.kr/tiac/univ/lssn/lpci/views/lssnPopup/tmtbl.do'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7,ru;q=0.6'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">$'Cookie: _ga=GA1.3.323624598.1551946103; __utmz=245676305.1610941513.125.87.utmcsr=github.com|utmccn=(referral)|utmcmd=referral|utmcct=/; WMONID=MVr1R3I7eJH; CMS_JSESSIONID=AgULShDkdidZumNdj8LOsNh8LDcEccprVFI60NfwaeKApnjVnoe0<span class=\"token entity\" title=\"\\u0021\">\\u0021</span>-364676328; __utma=245676305.323624598.1551946103.1642701274.1643112161.150; __utmc=245676305; __utmt=1; __utmb=245676305.1.10.1643112161; TIS_JSESSIONID=VI19I6y0L0R7XxBoRlrUsUoOE4UMUpFRmZf0gopY5exZg2z5Kt5g<span class=\"token entity\" title=\"\\u0021\">\\u0021</span>-1807917221'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  --data-raw <span class=\"token string\">'yy=2022&amp;semCd=1&amp;qrySxn=2&amp;curiCparCd=&amp;lesnPlcCd=1&amp;mjSubjKnm=&amp;mjDowCd=&amp;grade=&amp;pfltNm='</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">--compressed</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위에서 불필요한 파라미터를 날려버리고, 필요한 부분만 추출하면 다음과 같다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># content-type, accept, data-raw(request body)를 제외한 나머지는 모두 제거한다.</span></span>\n<span class=\"line\"><span class=\"token function\">curl</span> <span class=\"token string\">'https://webinfo.dankook.ac.kr/tiac/univ/lssn/lpci/views/lssnPopup/tmtbl.do'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/x-www-form-urlencoded'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  --data-raw <span class=\"token string\">'yy=2022&amp;semCd=1&amp;qrySxn=2&amp;curiCparCd=&amp;lesnPlcCd=1&amp;mjSubjKnm=&amp;mjDowCd=&amp;grade=&amp;pfltNm='</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 curl 명령어를 실행해보면 다음과 같은 결과를 볼 수 있다.</p>\n<p></p>\n<p>혹시 직접 실행해보았는가? 그렇다면 검색된 시간표가 HTML로 출력되는 것을 확인할 수 있을 것이다.</p>\n<p>그런데 갑자기 accept를 <code>application/json</code> 으로 수정해보고 싶었다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># 수신 방식(accept)은 application/json 으로</span></span>\n<span class=\"line\"><span class=\"token comment\"># 전송 데이터는 다음과 같음</span></span>\n<span class=\"line\"><span class=\"token function\">curl</span> <span class=\"token string\">'https://webinfo.dankook.ac.kr/tiac/univ/lssn/lpci/views/lssnPopup/tmtbl.do'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/x-www-form-urlencoded'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept: application/json'</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\">  --data-raw <span class=\"token string\">'yy=2022&amp;semCd=1&amp;qrySxn=2&amp;curiCparCd=&amp;lesnPlcCd=1&amp;mjSubjKnm=&amp;mjDowCd=&amp;grade=&amp;pfltNm='</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그랬더니 응답값을 JSON으로 보내줬다.</p>\n<p></p>\n\n<p>혹시나 해서 시도해봤는데, JSON으로 보내줬다. <s>개이득</s></p>\n<p>왜 그런가 추측해봤는데 spring의 controller에서 ModelAndView를 사용해서 endpoint를 구성하면 accept에 따라서 응답값의 형태가 달라지는 것 같다. <s>아마 맞을 것 같은데 알아보기가 귀찮다.</s></p>\n<p>어쨌든 결과적으로 HTML을 파싱해야 하는 수고를 덜었기 때문에 기분이 좋아졌다.</p>\n<p>필요한 HTTP 요청을 확인했으니, 직접 코드로 만들어보자. 필자는 프론트엔드 개발자로 일하고 있기 때문에 NestJS를 이용해서(<s>무슨상관인데?</s>) 프로젝트를 구성했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">NestJS</p>\n<ul>\n<li>Nest(NestJS)는 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기 위한 프레임워크입니다.</li>\n<li>프로그레시브 JavaScript를 사용하고 TypeScript로 구축되고 완벽하게 지원하며, OOP, FP, FRP의 요소를 결합하여 사용할 수 있습니다.</li>\n<li>내부적으로 Nest는 Express(기본값)와 같은 강력한 HTTP 서버 프레임워크를 사용하며 선택적으로 Fastify도 사용하도록 구성할 수 있습니다.</li>\n<li>Nest는 이러한 일반적인 Node.js 프레임워크(Express/Fastify)보다 높은 수준의 추상화를 제공하지만 해당 API를 개발자에게 직접 노출합니다.</li>\n<li>이를 통해 개발자는 기본 플랫폼에서 사용할 수 있는 수많은 타사 모듈을 자유롭게 사용할 수 있습니다.</li>\n</ul>\n<p>라고  <a href=\"https://docs.nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a>에 나와있다.</p>\n</div>\n<p>NestJS는 webserver 뿐만 아니라 <a href=\"https://docs.nestjs.com/standalone-applications\" target=\"_blank\" rel=\"noopener noreferrer\">standalone application</a>으로도 사용할 수 있다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/core'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.module'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createApplicationContext</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> appService<span class=\"token operator\">:</span> AppService <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>AppService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  appService<span class=\"token punctuation\">.</span><span class=\"token function\">saveSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// appService에서 데이터를 저장함</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위와 같이 <code>NestFactory.createApplicationContext</code> 으로 만들 경우 단순하게 Nest로 구성된 코드를 실행해준다. 많은 기능이 필요 없기 때문에 appService에 schedule을 저장하는 코드를 구성했다.</p>\n<p><a href=\"https://github.dev/JunilHwang/dku-schedule-manager/blob/master/.packages/dku-schedule-cralwer/src/app.service.ts\" target=\"_blank\" rel=\"noopener noreferrer\">&gt; 전체 코드 보기 &lt;</a></p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> payloads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    yy<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 년도</span></span>\n<span class=\"line highlighted\">    semCd<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 학기</span></span>\n<span class=\"line highlighted\">    qrySxn<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 1: 전공, 2: 교양</span></span>\n<span class=\"line highlighted\">    lesnPlcCd<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1: 죽전캠, 2: 천안캠</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 위의 양식에 따라 2021년 2학기 ~ 2022년 1학기 페이로드를 작성함 */</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppService</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> scheduleClient<span class=\"token operator\">:</span> AxiosInstance<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> scheduleClient <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"https://webinfo.dankook.ac.kr\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    scheduleClient<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scheduleClient <span class=\"token operator\">=</span> scheduleClient<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">saveSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> dataPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">INIT_CWD</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 2021년 2학기와 2022년 1학기에 대한 모든 시간표 정보를 저장한다.</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>payloadMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> lectures<span class=\"token operator\">:</span> Lecture<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchSchedule</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dataPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 원래 더 복잡한 로직이지만, 일단 간단하게 표현했음</span></span>\n<span class=\"line highlighted\">        <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>lectures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">        <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 시간표를 가져오기 위한 API 요청</span></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">fetchSchedule</span><span class=\"token punctuation\">(</span>payload<span class=\"token operator\">:</span> PayloadBody<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Lecture<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scheduleClient <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"/tiac/univ/lssn/lpci/views/lssnPopup/tmtbl.do\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> response<span class=\"token operator\">:</span> ScheduleResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> scheduleClient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">      url<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      data<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      config<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 원래 response에 별에별 정보가 다 들어있으나.. 딱 시간표 정보만 추출함</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>lctTmtblDscMjList<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>코드로 보면 좀 복잡해보일 수 있는데, 요약하자면 다음과 같은 기능을 수행하는 것이다.</p>\n<ul>\n<li>\n<p>단국대 포털에서 다음과 같은 데이터를 가져온다.</p>\n<ul>\n<li>죽전 캠퍼스의 2021년 2학기 교양 시간표</li>\n<li>천안 캠퍼스의 2021년 2학기 교양 시간표</li>\n<li>죽전 캠퍼스의 2021년 2학기 전공 시간표</li>\n<li>천안 캠퍼스의 2021년 2학기 전공 시간표</li>\n<li>죽전 캠퍼스의 2022년 1학기 교양 시간표</li>\n<li>천안 캠퍼스의 2022년 1학기 교양 시간표</li>\n<li>죽전 캠퍼스의 2022년 1학기 전공 시간표</li>\n<li>천안 캠퍼스의 2022년 1학기 전공 시간표</li>\n</ul>\n</li>\n<li>\n<p>2021년 데이터는 테스트를 위해서 가져온다고 보면 된다.</p>\n</li>\n<li>\n<p>시간표를 가져온다음에 JSON 파일로 저장한다.</p>\n<p></p>\n<ul>\n<li><s>음.. 그렇다. 별거 없다.</s></li>\n<li>그런데 여기서부터가 제일 중요하다.</li>\n<li><strong>API 서버를 만들지 않기 위해서 github repository를 적극적으로 사용하는 것</strong>이다.</li>\n</ul>\n</li>\n<li>\n<p>github actions을 이용하여 위의 프로세스를 주기적으로 실행한다.</p>\n<ul>\n<li>1시간 주기로 실행하면 적당할 것 같다.</li>\n</ul>\n</li>\n<li>\n<p>json파일이 만들어지면</p>\n<ul>\n<li>commit 후에</li>\n<li>github repository에 push한다. → 이게 제일 중요하다.</li>\n</ul>\n</li>\n<li>\n<p>push가 되는 순간, github pages가 호스팅 된다.</p>\n</li>\n<li>\n<p>github pages에서 json 파일을 읽어들인 후에 시간표를 구성할 수 있도록 만든다.</p>\n<ul>\n<li>여기서부터는 frontend의 영역이라고 보면 된다.</li>\n</ul>\n</li>\n</ul>\n<p>조금 흐름이 끊긴 감이 없지않아 있지만, 어쨌든 github actions을 구성해보자.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Github Actions</p>\n<ul>\n<li>Github Actions = Workflow 자동화 도구</li>\n<li>Github Actions를 사용하면 이제 세계적 수준의 CI/CD를 통해 모든 소프트웨어 워크플로를 쉽게 자동화할 수 있습니다.</li>\n<li>Github에서 바로 코드를 빌드, 테스트 및 배포하세요. 코드 검토, 분기 관리 및 문제 분류가 원하는 방식으로 작동하도록 합니다.</li>\n</ul>\n<p>라고 공식문서에 나와있다.</p>\n</div>\n<p>project root를 기준으로 <code>.github/workflows/main.yml</code> 폴더를 만들거나 그냥 github actions에서 workflow를 추가해도 된다.</p>\n<p></p>\n<p>actions tab으로 이동한 다음에 <code>New workflow</code> 버튼을 클릭하면 만들어진다.</p>\n<p>그리고 다음과 같이 작성했다.</p>\n<div class=\"language-yaml line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"yml\" data-title=\"yml\"><pre><code><span class=\"line\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Schedule Save\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\">  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\">    <span class=\"token comment\"># 1시간 마다 실행</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0 */1 * * *'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\">  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\">    <span class=\"token comment\"># ubuntu imageFmf tkdydgksek.</span></span>\n<span class=\"line\">    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest</span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\">      <span class=\"token comment\"># 현재 repository로 checkout</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master</span>\n<span class=\"line\">        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\">          <span class=\"token key atrule\">ref</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.head_ref <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token comment\"># node를 사용한다.</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2</span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token comment\"># 패키지를 설치하고, build하고, build된걸 실행하는 과정이라고 보면 된다.</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Data Save</span>\n<span class=\"line\">          <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"></span>\n<span class=\"line\">          cd .packages/dku-schedule-cralwer</span>\n<span class=\"line\">          yarn install</span>\n<span class=\"line\">          yarn build</span>\n<span class=\"line\">          yarn start:prod</span>\n<span class=\"line\">          cd ../..</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token comment\"># 저장된 json파일을 github repository에 push 한다.</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Commit And Push</span>\n<span class=\"line\">        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions<span class=\"token punctuation\">-</span>js/push@master</span>\n<span class=\"line\">        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span></span>\n<span class=\"line\">          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">          <span class=\"token key atrule\">author_email</span><span class=\"token punctuation\">:</span> junil.h@kakao.com</span>\n<span class=\"line\">          <span class=\"token key atrule\">author_name</span><span class=\"token punctuation\">:</span> JunilHwang</span>\n<span class=\"line\">          <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>기본적으로 1시간 마다 실행되도록 구성했으며, 필요하다면 직접 workflow를 실행해도 된다.</p>\n<p></p>\n<p>글을 작성하고 있는 날짜에 시간표가 계속 업데이트 되고 있어서 commit 내역이 자동으로 많아지고 있다. <s>개이득</s></p>\n<h2>3. FE</h2>\n<p></p>\n<p>회사에서 신규 프로젝트를 Vue3 + Vite + Typescript로 진행할 예정이여서, 사이드 프로젝트에도 똑같은 기술 스택을 적용했다.</p>\n<p>참고로 vite의 장점은 다음과 같다.</p>\n<p></p>\n<ul>\n<li>번들링을 하지 않기 때문에 실행 속도가 무척 빠르다.\n<ul>\n<li>브라우저 모듈을 사용한다.\n<ul>\n<li>내부적으로 rollup을 사용한다.</li>\n<li>브라우저 모듈을 사용하기 때문에 프로젝트 규모와 상관 없이 로딩 속도가 일정하다.</li>\n</ul>\n</li>\n<li>즉, IE는 지원하지 않는다.</li>\n<li>억지로 지원할 수 있도록 환경을 구성할 순 있지만, 그렇다면 vite를 사용하는 이유가 없다.</li>\n</ul>\n</li>\n<li>핫 모듈 시스템이 빠르게 작동한다.\n<ul>\n<li>파일이 변경되고 서버가 다시 실행되는 과정이 정말 빠르다.</li>\n<li>웹팩이랑 비교 불가</li>\n</ul>\n</li>\n<li>vue, react 등의 프레임워크를 사용하기 위한 템플릿을 제공한다.</li>\n</ul>\n<h3>프로젝트 구성</h3>\n<p>vite 프로젝트 구성은 다음과 같이 할 수 있다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">yarn</span> create vite <span class=\"token punctuation\">[</span>프로젝트 이름<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">--template</span> <span class=\"token punctuation\">[</span>템플릿 이름<span class=\"token punctuation\">]</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>vite template은 <code>vanilla</code> <code>vanilla-ts</code> <code>vue</code> <code>vue-ts</code> <code>react</code> <code>react-ts</code> <code>preact</code> <code>preact-ts</code> <code>lit</code> <code>lit-ts</code> <code>svelte`` svelte-ts</code> 등이 존재한다. 자세한건 <a href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a>에서 확인해볼 수 있다.</p>\n<p>어쨌든 나는 <code>vue-ts</code>로 구성했다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">yarn</span> create vite dku-schedule-client <span class=\"token parameter variable\">--template</span> vue-ts</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>추가로 vue-router도 설치했다. vue3와 같이 사용하기 위해선 최신 버전 router를 설치해야 한다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> vue-router@next</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>그러면 다음과 같이 <code>package.json</code>이 구성될 것이다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dku-schedule-client\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-tsc --noEmit &amp;&amp; vite build\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"preview\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite preview\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"vue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.2.25\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"vue-router\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.0.12\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"@vitejs/plugin-vue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.4.4\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"vite\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.7.2\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"vue-tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.29.8\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>Vue3의 script setup</h3>\n<p>vue3에서 제일 신기했던(?) 것은 <code>&lt;script setup&gt;</code> 이다. 따로 export를 하지 않아도 되고, 선언된 변수를 template 내부에서 그냥 사용하면 된다.</p>\n<div class=\"language-vue line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"vue\" data-title=\"vue\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'Hello!'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ msg }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 react의 useEffect 같은 hook도 있다.</p>\n<div class=\"language-vue line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"vue\" data-title=\"vue\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> watchEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $root <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>This is a root element<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>template ref를 사용하려면 위와 같은 방식으로 사용해야 정상적으로 작동한다.</p>\n<h3>디자인시스템</h3>\n<p>디자인 시스템은 ElementUI Plus를 사용했다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> element-plus @element-plus/icons-vue</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ul>\n<li>element ui plus의 icon을 사용하기 위해서 별도의 패키지를 추가로 설치해야 한다.</li>\n</ul>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"element-plus/dist/index.css\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"./styles/reset.scss\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 한글어팩 적용</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> ko <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus/es/locale/lang/ko\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementPlus<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> locale<span class=\"token operator\">:</span> ko <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// App에 등록</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그러면 다음과 같이 사용할 수 있다.</p>\n<p></p>\n<div class=\"language-vue line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"vue\" data-title=\"vue\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ts<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token comment\">// icon 관련 component를 가져온다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Download<span class=\"token punctuation\">,</span> Search<span class=\"token punctuation\">,</span> Share <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@element-plus/icons-vue\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button-group</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">:icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Search<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emit('search')<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">round</span> <span class=\"token attr-name\">plain</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      검색</span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span></span>\n<span class=\"line\">      <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{ label, value } in conditions<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">:type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value === condition ? 'primary' : 'default'<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emit('select-semester', value)<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">round</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      {{ label }}</span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button-group</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button-group</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shares<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-popover</span></span>\n<span class=\"line\">      <span class=\"token attr-name\">placement</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top-start<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">:width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">trigger</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hover<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>클립보드에 시간표 URL을 복사합니다.<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">    <span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">#reference</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emit('share')<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Share<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">round</span> <span class=\"token attr-name\">plain</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">          시간표 공유</span>\n<span class=\"line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-popover</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-popover</span></span>\n<span class=\"line\">      <span class=\"token attr-name\">placement</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top-start<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">:width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">trigger</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hover<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>시간표 이미지를 다운로드합니다.<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line\">    <span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">#reference</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emit('download')<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Download<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">round</span> <span class=\"token attr-name\">plain</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">          다운로드</span>\n<span class=\"line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-popover</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-button-group</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>생각보다 더 깔끔해서 만족스러웠다.</p>\n<p>그리고 alert 대신에 사용할 수 있는 Message 관련 API도 존재한다.</p>\n<p></p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ElMessage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">ElMessage<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"삭제되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>시간표 저장</h3>\n<p>시간표를 이미지로 저장하기 위해서 html2canvas를 설치해서 사용했다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$main<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $clone <span class=\"token operator\">=</span> $main<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $cloneHeader <span class=\"token operator\">=</span> $clone<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"header\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $clone<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".controller\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $cloneHeader<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText <span class=\"token operator\">=</span> <span class=\"token string\">\"position: static; margin-bottom: -41px;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $clone<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText <span class=\"token operator\">=</span> <span class=\"token string\">\"width: 800px; position: absolute: left: -800px; top: 0;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $main<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>$clone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// html -&gt; canvas -&gt; base64 -&gt; 다운로드</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">html2canvas</span><span class=\"token punctuation\">(</span>$clone<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> $clone<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    $clone<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> $anchor <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    $anchor<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    $anchor<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">\"시간표.png\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    $anchor<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    $main<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>만들어진 시간표를 canvas로 변환하고, 다시 base64로 변환하여 이미지로 다운받을 수 있게 된다.</p>\n<p></p>\n<h3>시간표 공유</h3>\n<p>이렇게 <a href=\"https://junilhwang.github.io/dku-schedule-manager/shared/?init=%5B%7B%22buldAndRoomCont%22:%22%EC%9B%947~9(%EC%83%81%EA%B2%BD323)%3Cp%3E%EC%88%981~3(%EC%83%81%EA%B2%BD323)%22,%22wkLecrEmpnm%22:%22%EC%9D%B4%EB%B4%89%EC%88%98%22,%22subjMethod%22:null,%22cybCoronaTyNm4%22:null,%22cybCoronaTyNm%22:%22%EC%9B%90%EA%B2%A9%EC%88%98%EC%97%85%22,%22dvclsNb%22:1,%22opOrgid%22:%222000000989%22,%22cybCoronaTyNm2%22:null,%22dsgnCrd%22:0,%22cybCoronaTyNm3%22:null,%22oglngLctLanggCdnm%22:null,%22yy%22:%222022%22,%22cybLtrTyNm%22:null,%22curiCparNm%22:null,%22kor%22:9,%22crd%22:%223(0)%22,%22tmtblChgSxnCd%22:null,%22tmtblChgSxnNm%22:null,%22grade%22:3,%22eng%22:9,%22tkcrsEcaOrgnm%22:%22SW%EC%9C%B5%ED%95%A9%EB%8C%80%ED%95%99%3Cp%3ESW%EC%9C%B5%ED%95%A9%ED%95%99%EB%B6%80%3Cp%3ESW%EC%9C%B5%ED%95%A9%EA%B2%BD%EC%A0%9C%EA%B2%BD%EC%98%81%EC%A0%84%EA%B3%B5%22,%22pfltId%22:%2212011227%22,%22status%22:1,%22subjKnm%22:%22%EA%B5%AD%EC%A0%9C%EA%B8%B0%EC%97%85%EA%B2%BD%EC%98%81%EB%A1%A0%22,%22tkcrsEcaOrgid%22:%222000004874%22,%22subjId%22:%22320190%22,%22semCd%22:%221%22,%22oglngLctLanggCd%22:null,%22checked%22:%220%22%7D,%7B%22buldAndRoomCont%22:%22%EC%9B%944~6(2%EA%B3%B5105)%3Cp%3E%ED%99%941~3(%EC%86%8C%ED%94%84%ED%8A%B8307)%22,%22wkLecrEmpnm%22:%22%EB%82%98%EC%97%B0%EB%AC%B5%22,%22subjMethod%22:null,%22cybCoronaTyNm4%22:null,%22cybCoronaTyNm%22:%22%EC%9B%90%EA%B2%A9%EC%88%98%EC%97%85%22,%22dvclsNb%22:2,%22opOrgid%22:%222000000989%22,%22cybCoronaTyNm2%22:null,%22dsgnCrd%22:0,%22cybCoronaTyNm3%22:null,%22oglngLctLanggCdnm%22:null,%22yy%22:%222022%22,%22cybLtrTyNm%22:null,%22curiCparNm%22:null,%22kor%22:0,%22crd%22:%223(0)%22,%22tmtblChgSxnCd%22:null,%22tmtblChgSxnNm%22:null,%22grade%22:3,%22eng%22:0,%22tkcrsEcaOrgnm%22:%22SW%EC%9C%B5%ED%95%A9%EB%8C%80%ED%95%99%3Cp%3ESW%EC%9C%B5%ED%95%A9%ED%95%99%EB%B6%80%3Cp%3ESW%EC%9C%B5%ED%95%A9%EA%B2%BD%EC%A0%9C%EA%B2%BD%EC%98%81%EC%A0%84%EA%B3%B5%22,%22pfltId%22:%2211932468%22,%22status%22:1,%22subjKnm%22:%22%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4(CE)%22,%22tkcrsEcaOrgid%22:%222000004874%22,%22subjId%22:%22527900%22,%22semCd%22:%221%22,%22oglngLctLanggCd%22:null,%22checked%22:%220%22%7D%5D\" target=\"_blank\" rel=\"noopener noreferrer\">링크</a>를 통해서 시간표를 공유할 수 있도록 만들었다. 귀찮아서 그냥 시간표 정보를 전부 uri에 때려박았다. 정확히는, 학교에서 제공하는 각 시간표에 대한 기본키(Primary Key)가 없어서 그냥 통짜로 정보를 집어넣었다. 어차피 크롬 전용으로 제공할 생각이고, 크롬의 경우 어느 정도의 uri 사이즈는 커버가 된다.</p>\n<h3>시간표 검색</h3>\n<ul>\n<li>일단 사이트에 접속하자 마자 모든 시간표 데이터를 가져온다.</li>\n</ul>\n<div class=\"language-vue line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"vue\" data-title=\"vue\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token comment\">// 검색 옵션을 초기화하고, 현재 학기에 대한 시간표 데이터를 가져옴</span></span>\n<span class=\"line\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchLectures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>lectures <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> scheduleService<span class=\"token punctuation\">.</span><span class=\"token function\">getAllSchedules</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    year<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    semester<span class=\"token punctuation\">.</span>value</span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>days <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>times <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>query <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>grades <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>majors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>page <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>currentLectures <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">fetchNextData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 데이터가 무척 많기 때문에, 렌더링에 필요한 데이터만 가져오는 함수</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchNextData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 컴포넌트가 로딩 되자 마자 시간표 데이터를 가져옴</span></span>\n<span class=\"line\"><span class=\"token function\">fetchLectures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>일단 한 학기에 개설되는 강의가 대략 10000개 정도 된다.</li>\n<li>그래서 이걸 한 번에 렌더링 할 경우 당연히 사이트가 버벅일 수 밖에 없다.</li>\n<li>그래서 필요한 갯수만큼, <code>대략 100개씩 끊어서 가져오는 로직</code>이 필요하다.</li>\n</ul>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchNextData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> grades<span class=\"token punctuation\">,</span> lectures<span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> currentLectures<span class=\"token punctuation\">,</span> majors <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> searchOptions<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>page <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// arr에 추가로 보여줄 만큼의 데이터를 쌓는다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// cursor 부터 반복문을 시작한다.</span></span>\n<span class=\"line\">  <span class=\"token comment\">// cursor가 lectures의 사이즈가 넘어가면 반복문이 종료된다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> searchOptions<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> cursor <span class=\"token operator\">&lt;</span> lectures<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> cursor <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// arr가 pageSize 만큼 채워지면 반복문을 종료한다.</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;=</span> pageSize<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> lecture <span class=\"token operator\">=</span> lectures<span class=\"token punctuation\">[</span>cursor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> grade<span class=\"token punctuation\">,</span> buldAndRoomCont<span class=\"token punctuation\">,</span> subjKnm<span class=\"token punctuation\">,</span> tkcrsEcaOrgnm <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> lecture<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 검색어가 입력된 상태일 때, 검색어로 필터링</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>subjKnm<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 학년이 선택된 상태일 때, 학년으로 필터링</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>grades<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 전공이 선택된 상태일 때, 전공 정보로 필터링</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>majors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>majors<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>tkcrsEcaOrgnm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 요일이 선택된 상태일 때, 요일 정보로 필터링</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">      days<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></span>\n<span class=\"line highlighted\">      buldAndRoomCont <span class=\"token operator\">&amp;&amp;</span></span>\n<span class=\"line highlighted\">      days<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> buldAndRoomCont<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 시간이 선택된 상태일 때, 요일 + 시간으로 필터링</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 사실 이 로직은 문제가 있다. 요일과 시간의 and 조건이 정상적으로 작동하지 않는 상태임</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      times<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></span>\n<span class=\"line\">      times<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>timeKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">(</span>buldAndRoomCont <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p&gt;\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^([가-힣])(\\d+(~\\d+)?)(.*)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">            <span class=\"token keyword\">return</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">              <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">              <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>timeKey<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 위의 조건들을 다 통과하면, arr에 과목 정보 추가</span></span>\n<span class=\"line\">    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>lecture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// cursor값 초기화</span></span>\n<span class=\"line\">  searchOptions<span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 렌더링 될 데이터 추가</span></span>\n<span class=\"line highlighted\">  currentLectures<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>딱 봐도 망한 코드다. 정확히는, 리팩토링이 필요하다. 원래 Array 관련 메소드를 사용했었는데 그럴 경우 배열의 모든 요소를 순회하기 때문에 무척 비효율적이다. 배열 사이즈가 1000개 정도면 그냥 쓰겠지만, 10000개 정도 되니까 무조건 최적화가 필요한 상황이다. 그래서 몇 년 만에 이렇게 날 것의 for문을 사용했다. <s>Java의 Stream이 필요하다.</s></p>\n<p>이럴 때 필요한 것이 바로 <code>함수형 프로그래밍</code> 이다. 인프런의 유인동님 강의를 추천한다.</p>\n<p>일단 <a href=\"https://github.com/marpple/FxTS\" target=\"_blank\" rel=\"noopener noreferrer\">FxTS</a> 를 사용한다면 아마 다음과 같은 형태로 작성하면 될 것이다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe<span class=\"token punctuation\">,</span> range<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">,</span> concurrent<span class=\"token punctuation\">,</span> take<span class=\"token punctuation\">,</span> each <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@fxts/core\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> 추가될_과목_정보_배열 <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  과목_정보_배열<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>검색어_필터_함수<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>학년_필터_함수<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>요일_필터_함수<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>시간_필터_함수<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>페이지_크기<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">concurrent</span><span class=\"token punctuation\">(</span>페이지_크기<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>시작될 key값이 필요하기 때문에 초기 데이터에 대한 정제가 더 필요할 것 같다.</p>\n<h3>Vite에서 프로젝트 외부 데이터 접근</h3>\n<p></p>\n<p>이 프로젝트의 github repository 구조는 위와 같다.</p>\n<p>이를 보여주는 이유는, <code>/.packages/dku-schedule-client/src/*/**</code> 에서 <code>/data/*/**</code>에 대한 접근이 필요하기 때문이다.</p>\n<p>vite는 기본적으로 브라우저 모듈 방식으로 파일 시스템을 가져오기 때문에, 프로젝트 외부에 있는 파일에 접근하기 위해선 별도의 설정이 필요하다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-vue\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// https://vitejs.dev/config/</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token comment\">// alias를 이용해서 /data 폴더에 접근시 uri를 변경해준다.</span></span>\n<span class=\"line highlighted\">      <span class=\"token string-property property\">\"/data\"</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      <span class=\"token string-property property\">\"@\"</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  server<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token comment\">// 프로젝트 외부 접근을 허용한다.</span></span>\n<span class=\"line highlighted\">      allow<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  base<span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  build<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    outDir<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../../.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>tsconfig에서도 alias 설정이 필요하다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"useDefineForClassFields\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"element-plus/global\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@types/node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token string-property property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token string-property property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token string-property property\">\"/data/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"../../data/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      <span class=\"token string-property property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/*\"</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.vue\"</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>코드에서는 다음과 같이 dynamic import를 이용해서 json 파일을 가져온다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_fetchData</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Lecture<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// production 모드일 때는 fetch api를 이용하여 json 파일을 가져온다.</span></span>\n<span class=\"line\">  <span class=\"token comment\">// dynamic import로 json을 가져올 경우 content-type 관련 오류가 발생하기 때문이다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PROD</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=&gt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 개발 모드일 때만 dynamic import를 사용한다.</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 지금 생각해보니 proxy 설정을 사용해도 됐을듯.</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* @vite-ignore */</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span>default <span class=\"token keyword\">as</span> Lecture<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>dev 모드일 때와 prod 모드일 때 사용하는 코드를 다르게 한다. 자세한 내용은 주석 참고</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSchedules</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  payload<span class=\"token operator\">:</span> SchedulePayload</span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Lecture<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">getDataPath</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cache<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    cache<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">_fetchData</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDataPath</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAllSchedules</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  year <span class=\"token operator\">=</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  semester <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Lecture<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token function\">getSchedules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">,</span> semester<span class=\"token punctuation\">,</span> lectureType<span class=\"token operator\">:</span> LectureType<span class=\"token punctuation\">.</span><span class=\"token constant\">MAJOR</span><span class=\"token punctuation\">,</span> campusType<span class=\"token operator\">:</span> CampusType<span class=\"token punctuation\">.</span><span class=\"token constant\">JUKJEON</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">getSchedules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">,</span> semester<span class=\"token punctuation\">,</span> lectureType<span class=\"token operator\">:</span> LectureType<span class=\"token punctuation\">.</span><span class=\"token constant\">MAJOR</span><span class=\"token punctuation\">,</span> campusType<span class=\"token operator\">:</span> CampusType<span class=\"token punctuation\">.</span><span class=\"token constant\">CHEONAN</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">getSchedules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">,</span> semester<span class=\"token punctuation\">,</span> lectureType<span class=\"token operator\">:</span> LectureType<span class=\"token punctuation\">.</span><span class=\"token constant\">LIBERAL_ARTS</span><span class=\"token punctuation\">,</span> campusType<span class=\"token operator\">:</span> CampusType<span class=\"token punctuation\">.</span><span class=\"token constant\">JUKJEON</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">getSchedules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">,</span> semester<span class=\"token punctuation\">,</span> lectureType<span class=\"token operator\">:</span> LectureType<span class=\"token punctuation\">.</span><span class=\"token constant\">LIBERAL_ARTS</span><span class=\"token punctuation\">,</span> campusType<span class=\"token operator\">:</span> CampusType<span class=\"token punctuation\">.</span><span class=\"token constant\">CHEONAN</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 한 번에 한 학기에 대한 과목 정보를 가져올 수 있도록 했다.</p>\n<h3>배포</h3>\n<p>배포는 별거 없다. 그냥 github pages를 사용하고, 빌드 후에 push하면 된다.</p>\n<p></p>\n<p>위의 사진 처럼, 그냥 master branch를 기준으로 github pages가 생성되도록 한다.</p>\n<p>그리고 작성된 코드를 build후에 push하면 deploy가 실행된다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># client 패키지 폴더로 이동한다.</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">cd</span> /.packages/dku-schedule-client</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 빌드 실행</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">yarn</span> build</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># root로 이동 후 git push</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"build\"</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> push</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>결과적으로 다음과 같은 프로세스를 가지게 된다.</p>\n<ul>\n<li>github action이 1시간 마다 실행</li>\n<li>시간표 데이터 저장 후 commit, push</li>\n<li>push가 되면, 자동으로 github pages deploy</li>\n<li>신규 시간표 데이터 반영</li>\n</ul>\n<p></p>\n<p>위에 보이는 것 처럼 Schedule이 실행 된 후에 바로 github pages가 deploy 되는 것을 확인할 수 있다.</p>\n<h2>4. 홍보</h2>\n<p>서비스가 완성된 다음에 에브리타임에 홍보했다.</p>\n<p></p>\n<p></p>\n<p>약간의 어그로를 위해서(?) 모시고 있는 주인님 사진을 같이 첨부했다.</p>\n<p>   </p>\n<p>예상대로, 고양이 사진 더 올려달라는 댓글이 많이 달렸다. <s>정확히는 그런 댓글만 달렸다.</s></p>\n<p></p>\n<p>문제는, 아직 시간표가 공개되기 전이라서 사실 저 타이밍에 홍보해봤자 소용이 없었다는 점..</p>\n<p>그래서 시간표가 공개된 다음에 다시 홍보했다.</p>\n<p></p>\n<p><s>추천수의 차이는.. 아마도 고양이 사진 때문인듯</s></p>\n<h2>후기</h2>\n<ul>\n<li>나중에 고도화 해서 커뮤니티로 발전시키면 재밌을 것 같다.</li>\n<li>근데 귀찮다.</li>\n<li>짧은 기간 동안 몰입해서 만들어서 재밌었다.</li>\n<li>테스트 코드도 작성해볼껄 하는 아쉬움이 있다.</li>\n<li>다음 학기에도 써먹어야지</li>\n</ul>\n<h2>기타</h2>\n<ul>\n<li>소스코드는 <a href=\"https://github.com/JunilHwang/dku-schedule-manager\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>에서 확인할 수 있다.</li>\n<li>코드가 좀 더럽다.</li>\n</ul>\n",
      "date_published": "2022-01-26T11:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "주니어 개발자의 2021년 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2021-year/end/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2021-year/end/",
      "summary": "주니어 개발자의 2021년 회고",
      "content_html": "\n\n<p>끝날 것 같지 않던 2021년이 끝났다. 보인다.\n올해는 작년보다 더 바빴고, 더 힘들었고, 더 많이 성장했다고 자부할 수 있을 것 같다.\n그래서 내년이 더 기대되기도 하고 동시에 부담도 된다.</p>\n<p>올해를 잘 정리하기 위해, 잘 마무리하기 위해 회고를 쓴다.</p>\n<h2>1. 회사 프로젝트 회고</h2>\n<p>올해 초에 새로운 대표님이 오시면서 정말 공격적으로 다양한 서비스를 개편하고, 오픈했고, 앞으로도 오픈할 예정이다.</p>\n<h3>(1) 줌프론트(zum.com) 개편</h3>\n<p></p>\n<p>올 해에 제일 먼저 진행한 큰 규모의 프로젝트는 <strong><a href=\"http://zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">줌프론트</a> 개편</strong>이다. 기존의 줌프론트는 <code>SpringBoot + Template Engine</code> 으로 구성되어 있었다. 이 때의 문제점은 다음과 같다.</p>\n<ul>\n<li>개발 퍼포먼스가 좋지 않다.\n<ul>\n<li>SpringBoot 환경에서 작업하기 때문에 수정하고 빌드하는 과정을 계속 거쳐야한다.</li>\n</ul>\n</li>\n<li>UI 모듈화가 어렵다.\n<ul>\n<li>기본적으로 Template Engine을 사용하게 되면 모듈화 하는 것 자체가 무척 어렵다.</li>\n<li>모듈화를 한다고 해도 javascript가 아니기 때문에 이를 재활용하기가 쉽지 않다.</li>\n</ul>\n</li>\n<li>앞선 내용의 연장선으로, <strong>불필요하게 Ajax 요청을 남발하게 된다</strong>\n<ul>\n<li>컴포넌트를 다시 보여줘야할 경우, 혹은 데이터를 갱신해야 되는 경우 불필요한 ajax 요청을 남발하게 된다.</li>\n<li>무엇보다 ajax로 단순하게 데이터만 가져오는 것이 아니라 아예 html template을 가져오는 것이다.</li>\n<li>이에 따라 호출 횟수 자체도 많아지고, 네트워크 통신량도 많아진다.</li>\n<li>그렇기 때문에 서버에 부하가 불필요하게 생기게 되며, instance를 추가적으로 붙여야 하는 경우도 생긴다.</li>\n</ul>\n</li>\n</ul>\n<p>그리고 근본적인 문제는 바로 <code>10년이 넘은 레거시의 집약체</code> 라는 것이다.</p>\n<ul>\n<li>정말 수없이 많은 작업자들이 이 프로젝트를 거쳐갔다.</li>\n<li>알 수 없는 코드, 사용하지 않는 코드가 무척 많이 존재한다.</li>\n</ul>\n<p>그래서 아예 <code>NodeJS + VueJS</code> 로 프로젝트를 처음부터 구성하여 다시 만드는 작업이 필요했다.</p>\n<p></p>\n<p>필자는 이 때 프론트 프로젝트에는 관여하지 않았고, Backend와 Admin을 만들었다.</p>\n<p>특히, 어드민의 경우 마찬가지로 jQuery + Angular로 구성된 이상한(?) 프로젝트였으며 기능도 무척 많았는데, 이를 전부 신규 어드민으로 옮기는 작업을 진행했다.</p>\n<p></p>\n<p>이 때 처음으로 Spring Batch도 사용해보고, Vue Composition API도 만져보고, 운영팀이 원하는 각종 편리한 기능을 추가하기 위해서 자잘한 작업을 많이 한 것 같다.</p>\n<p>어드민 뿐만 아니라 백엔드(Internal API)도 작업했다. 어드민에서 생성된 데이터를 <a href=\"http://zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">줌프론트</a>에서 필요한 형태로 정제하여 내려보내는 과정이 필요하기 때문이다.</p>\n<p></p>\n<p>프론트에서는 15초마다 Internal API를 호출하여 캐싱하고 있었고, Internal API는 다시 각각의 property에 적합한 스케쥴 시간을 정하여 데이터를 캐싱했다.</p>\n<p>가볍게 정리하자면 다음과 같은 과정을 거친다.</p>\n<ol>\n<li>배치에서 통계를 기반으로 인기 콘텐츠 생성 + 어드민에서 데이터 생성</li>\n<li>Internal API에서 DB 및 외부 API에 접근하여 필요한 데이터를 조합</li>\n<li>데이터 성격에 따라 30초, 60초, 180초 단위로 스케쥴링</li>\n<li>한 개의 endpoint에 모든 데이터를 출력 → 줌프론트에서 Internal API를 15초 단위로 호출하고 캐싱</li>\n</ol>\n<p>정말 많은 이슈들이 있었는데, 기억나는 한 가지를 뽑자면,</p>\n<p>스케쥴을 하는 과정에서 DTO(Data Transfer Object)를 적합하게 사용하지 않을 경우 JPA의 연관관계 맵핑 때문에 불필요하게 DB에 접근하는 일이 발생했다.</p>\n<ul>\n<li>service layer에서 repository에 접근하여 데이터를 가져온 다음에 캐싱한다.</li>\n<li>facade layer에서 service 로직을 호출한 다음에 데이터를 정제한다.</li>\n<li>그런데 아무리 캐싱된 데이터라고 하더라도 JPA 객체이기 때문에 연관관계 매핑으로 정의된 프로퍼티에 접근할 경우 DB에 요청을 날리게 된다.</li>\n</ul>\n<p>그래서 한 번 장애가 난 적이 있었고, 위와 같은 내용을 인지한 다음에 바로 수정했다.</p>\n<p>배치와 관련된 작업도 있었는데 지금은 잘 기억이 가물가물 하다.</p>\n<p>이 당시에는 회사에 프론트엔드 파트가 없었고, 전부 <code>풀스택 서비스 개발자</code>의 역할로 프로젝트에 참여했기 때문에 필자 또한 Java 공부를 좀 했는데, 이제는 프론트엔드 파트 소속이라서 마음 편하게 프론트엔드만 공부하고 있다.</p>\n<p>필자는 Java라는 언어를 그렇게 막 싫어하진 않는다. 다만, 똑같은 기능을 만들더라도 개발 퍼포먼스가 무척 좋지 않아서 싫어할 뿐.. 수정된 기능 한 번 확인하려고 하면 너무 많은 과정을 거쳐야한다 🥲</p>\n<h3>(2) 투자 서브도메인(invest.zum.com)</h3>\n<p></p>\n<p>투자 서브도메인은 두 차례의 오픈 과정을 거쳤다.</p>\n<ul>\n<li>1차 오픈: <code>9월 초</code> (정확한 시점은 가물가물 하다.. 🥲)\n<ul>\n<li><a href=\"http://invest.zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">메인페이지</a></li>\n<li><a href=\"http://invest.zum.com/investment\" target=\"_blank\" rel=\"noopener noreferrer\">투자노트</a>\n<ul>\n<li>메인페이지</li>\n<li>필진 목록</li>\n<li>필진 상세페이지</li>\n<li>투자노트 상세페이지</li>\n<li>최신글 페이지</li>\n</ul>\n</li>\n<li>종목 상세페이지</li>\n<li>뉴스 상세페이지</li>\n<li>국내지수 상세페이지</li>\n<li>해외지수 상세페이지</li>\n</ul>\n</li>\n</ul>\n<p>5월에 기획을 시작했고, 7월 초에 오픈을 목적으로 작업을 진행했다. 그런데 중간에 기획이 엎어졌고, 다시 8월말 오픈을 목적으로 작업하다가 내부적으로 계속 이슈가 있어서 9월 초에 오픈했다.</p>\n<ul>\n<li>2차 오픈: <code>12월 24일</code>\n<ul>\n<li><a href=\"http://invest.zum.com/internal\" target=\"_blank\" rel=\"noopener noreferrer\">국내증시</a>\n<ul>\n<li>국내증시 메인페이지</li>\n<li>전체 업종 페이지</li>\n<li>업종 상세페이지</li>\n<li>카테고리별 랭킹 페이지</li>\n<li>큐레이션(리포트 PICK, 급등주 PICK) 페이지</li>\n</ul>\n</li>\n<li><a href=\"http://invest.zum.com/world\" target=\"_blank\" rel=\"noopener noreferrer\">해외증시</a>\n<ul>\n<li>해외증시 메인페이지</li>\n<li>해외 증시 실시간 토론바</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>다시 2차 오픈을 위한 기획이 9월에 시작되었다. 2차 오픈의 핵심은 바로 <code>메코차트</code>인데, <a href=\"https://kr.tradingview.com/heatmap/stock/?color=change&amp;dataset=SPX500&amp;group=sector&amp;size=market_cap_basic\" target=\"_blank\" rel=\"noopener noreferrer\">TradingView</a>와 <a href=\"https://finviz.com/map.ashx?t=sec_all\" target=\"_blank\" rel=\"noopener noreferrer\">finviz</a>를 벤치마킹 하였다.</p>\n<p>아직 국내에는 이를 제대로 활용하는 서비스가 없었기 때문에 최대한 빠르게 이를 구축하고 오픈 하는 것을 목표로 했다.</p>\n<p>사실 메코차트를 제외한 나머지는 프론트엔드 개발이 2주 정도 소요되었고, 백엔드 쪽에 퇴사자가 무척 많고 인수인계가 제대로 되지 않다보니 일정이 계속 지연됐다. 어쨌든 우여곡절 끝에 12월에 오픈할 수 있었다.</p>\n<p>사실 이 프로젝트에 대한 기술적인 이슈는 다루고자 한다면 정말 끝이 없다.</p>\n<ul>\n<li>프로젝트 구축</li>\n<li>코어 프로젝트 개선</li>\n<li>빌드 시간 개선</li>\n<li>컴포넌트 재활용</li>\n<li>Server Side Rendering</li>\n<li>렌더링 최적화</li>\n<li>초기 렌더링 시간 단축</li>\n<li>메모리 누수 해결</li>\n<li>iframe 정교하게 다루기</li>\n<li>IE 호환성 해결</li>\n<li>SPA를 고려하지 않고 만들어진 사내 라이브러리 사용하기</li>\n<li>부하 테스트</li>\n</ul>\n<p>그리고 기술 외적인 이슈도 있다.</p>\n<ul>\n<li>초기 기획자 퇴사</li>\n<li>초기 디자이너 퇴사</li>\n<li>거의 모든 초기 개발자 퇴사</li>\n<li>대부분의 인프라 개발자 퇴사\n<ul>\n<li>인프라 개발자의 업무 부하가 거의 150%</li>\n<li>각종 인프라 이슈에 대한 해결이 무척 느리게 진행됨</li>\n</ul>\n</li>\n<li>수 없이 많은 슬랙 메시지와 정돈 되지 않는 각종 업무들\n<ul>\n<li>사실 이것 때문에 너무 스트레스를 많이 받았다</li>\n<li>업무가 계속 슬랙으로 요청이 오고</li>\n<li>기록도 슬랙으로 되는데</li>\n<li>아무래도 신규 프로젝트고 회사에서 제일 중요하게 생각하는 프로젝트다보니 각종 의견이 지속적으로 올라왔다.</li>\n<li>도저히 업무 파악을 할 수 없는 지경..</li>\n</ul>\n</li>\n</ul>\n<p></p>\n<p>어느 날 갑자기 계속 슬랙으로 오는 업무 요청 때문에 급발진 해서 남긴 내용들이다.</p>\n<p>결과적으로 저렇게 슬랙을 남긴 다음에 대부분의 업무와 관련된 내용은 노션을 통해서 진행되었다. 덕분에 일하기가 한결 편해졌다.</p>\n<p>어쨌든, <code>투자 서브도메인</code>에 대한 내용은 따로 정리해볼 예정이다. 아마 기술블로그에 정리해서 올릴 것 같다.</p>\n<h3>(3) 모바일줌(m.zum.com)</h3>\n<p></p>\n<p><a href=\"http://m.zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">모바일줌</a>의 경우 특별한 기능이 추가되거나 하진 않았다. 다만 리팩토링 작업을 진행했다.</p>\n<p>먼저 백엔드의 경우 인수테스트를 추가했다. DB가 엮여있는게 아니라서 쉽게 작업할 수 있었다. 덕분에 작업 시간이 많이 단축 되었다.</p>\n<p>프론트엔드의 경우 신규 core 프로젝트를 적용하면서 배포 시간도 단축 했고, 복잡한 캐싱 로직도 제거했다.</p>\n<p></p>\n<p>얼추 이런 느낌이랄까?</p>\n<p>모바일줌에 처음 SSR을 적용할 땐 <code>vue-server-renderer@2.2</code> 이였고, client manifest를 제공하지 않았다. 덕분에 SSR과 CSR을 동시에 하기 위해선 server의 template engine을 덧붙여서 사용해야 했다. 덕분에 SSR을 온전히 이해하기가 무척 어려웠다. 필자 뿐만 아니라 프론트엔드 파트의 모든 구성원이 이를 힘들어했다.</p>\n<p>그런데 <code>vue-server-renderer@2.3</code> 부터 <code>client manifest</code>를 제공하면서 SSR에 대한 난이도가 무척 낮아졌다. 이에 대한 자세한 내용은 <strong><a href=\"https://zuminternet.github.io/vue-ssr/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue SSR 제대로 적용하기 (feat. Vanilla SSR)</a></strong> 포스트에서 확인할 수 있다.</p>\n<h3>(4) zum-portal-core-js</h3>\n<p></p>\n<p>zum-portal-core-js는 줌인터넷 프론트엔드파트에서만 사용하는 표준화 패키지다. 처음에는 가볍게 시작한 프로젝트인데 점점 기능이 비대해져서 지금은 계속해서 기능별로 분할하고 있다.</p>\n<p>자세한 내용은 <strong><a href=\"https://zuminternet.github.io/zum-portal-core-js/\" target=\"_blank\" rel=\"noopener noreferrer\">Zum Portal Core JS 소개</a></strong> 포스트와 <strong><a href=\"https://zuminternet.github.io/nestjs-custom-decorator/\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS Custom Caching Decorator 만들기</a></strong> 포스트에서 다루고 있다.</p>\n<p>핵심적인 내용만 요약하자면 다음과 같다.</p>\n<ul>\n<li>백엔드는 express.js, 프론트엔드는 각종 웹팩 설정이 버무려진 표준화 패키지로 만들었다.</li>\n<li>1년 정도 잘 사용하다가 기능이 점점 많아지고 있는게 느껴졌고, 예측 하지 못한 에러들이 발생하여 장애도 몇 번 발생했다.</li>\n<li>그러다 NestJS를 도입했다.</li>\n<li>배포 시간이 너무 오래 걸렸다.</li>\n<li>프론트엔드 패키지와 백엔드 패키지를 분리했다.</li>\n<li>모노레포로 관리하기 시작했다.</li>\n<li>불필요한 패키지를 설치하지 않는 방식을 통해서 배포 시간을 단축했다.</li>\n<li>eslint도 추가했다.</li>\n<li>테스트코드도 추가했다.</li>\n<li>더 리팩토링해서 github에 공개할 예정이다.</li>\n</ul>\n<p>언제 공개할진 모르겠으나, 빠르면 올해 안에, 늦어도 내년 1분기 안에 github에 올려놓을 예정이다.</p>\n<h3>(5) 기타 프로젝트들</h3>\n<p>이외에도 정말 많은 프로젝트 회의에 참여했고, 추진중에 있다. 사실 2021년 한 해 동안 제일 많이 시간을 투자한 <code>투자 서브도메인</code> 프로젝트보다 앞으로 오픈하게 될 프로젝트들에 더 관심이 간다.</p>\n<p>왜냐면 IE를 고려하지 않는 서비스를 추진하고 있기 때문이다!</p>\n<p>어떻게 될지는 아직 미지수지만, IE를 지원하지 않는 다는 사실 하나 만으로도 무척 설렌다.</p>\n<h2>2. 어쩌다보니 파트리더</h2>\n<p>필자는 이제 경력이 만 2년을 조금 넘은 주니어 개발자다. 그런데 올해 7월에 프론트엔드 파트가 신설 되었고, 어쩌다보니(?) 파트리더 직책을 수행하게 되었다. 파트리더 직책을 수행하면서 했던 고민들이 무척 많았다. 이참에 정리해보려고 한다.</p>\n<h3>(1) 채용</h3>\n<p>프론트엔드 파트가 신설 되기 이전에 프론트엔드 개발자 채용을 먼저 진행했다. 사실 이 때 까지만 해도 프론트엔드 파트가 신설되리라고 생각을 하지 못했었다.</p>\n<p><strong><a href=\"https://zuminternet.github.io/zum-front-recurit-review/\" target=\"_blank\" rel=\"noopener noreferrer\">주니어 프론트엔드 개발자의 채용 프로세스 참여 후기</a></strong></p>\n<p>채용 과정에서 정말 많이 신경 썼던 부분은 <code>줌인터넷에 지원하길 잘했다</code> 라는 생각이 들도록 하는 것이였다. 단순하게 신규 인력을 채용한다는 생각이 아니라 <code>줌인터넷이 지원자에게 신경을 많이 쓰고 있다</code>는 인상을 주고 싶었다. 그리고 정말 실력 있는, 근본이 있는 개발자 분들을 모시고 싶었다.</p>\n<p>어떻게 해야 좋을까 고민하다가 <code>채용 과제를 만들어보자</code>는 결론에 도달했고, 어느 정도 수준의 채용 과제가 좋을까 고민하다가 일단 단순하게 <strong>프레임워크를 사용하는 게 아니라, 프레임워크를 만들 수 있는 수준의 과제</strong>를 만들어보자고 생각했다.</p>\n<p>채용 과제는 <a href=\"https://www.notion.so/c4c70fbaa3cd4e43a299abb0824d93a9\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>서 확인할 수 있다. 원래는 대외비인데, 내년 부터는 채용 과제의 내용을 개편할 예정이라서 공개 되어도 사실 상관 없다. 채점표는 다음과 같다.</p>\n<p></p>\n<p>채용과제의 대략적인 커트라인은 60점이다. 만약 본인이 취업을 준비하는 프론트엔드 개발자라면 꼭 한 번 풀어보길 권유한다.  과제의 내용을 완벽히 이해하고 구현할 수 있다면, 즉, 90점 이상의 점수 확보가 가능하다면 어떤 회사든 취업할 수 있으리라 장담한다.</p>\n<p>큼직한 기능은 다음과 같다.</p>\n<ul>\n<li>컴포넌트 설계가 가능하다.\n<ul>\n<li>객체지향이든 함수지향이든 어느정도 확장성 있는 형태로 만들 수 있어야 한다.</li>\n</ul>\n</li>\n<li>타입스크립트를 사용할 수 있어야 한다.</li>\n<li>웹팩을 설정에 대해 깊게 이해하고 있다.</li>\n<li>렌더링을 할 때 가상돔 혹은 DIFF 알고리즘을 적용할 수 있다.</li>\n<li>전역 상태관리 라이브러리를 직접 구현할 수 있다.</li>\n<li>이벤트 최적화를 할 수 있다.</li>\n</ul>\n<p>과제가 어렵기 때문에 그냥 풀라고 제시한게 아니라, <strong>제출한 모든 사람에 대한 코드리뷰</strong>를 진행했다.</p>\n<p></p>\n<p>덕분에 채용을 한 번 시작하면 다른 업무가 거의 마비될 지경에 이르렀다. 이력서도 너무 많았고, 제출한 과제에 대해 리뷰하는 과정이 무척 힘들었다.</p>\n<p>면접까지 확정된 분들에게는 바로 채점결과 및 코드리뷰 링크를 공유드렸다. 이 때 참고하면 좋은 포스트와 앞으로의 공부방향 같은 것들도 같이 정리해서 보내드렸다. 최대한 상세하게 피드백을 하려고 노력했고, 많은 분들이 다음과 같은 답장을 주셨다.</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>시간이 많이 소모되긴 하지만, 이러한 과정을 통해서 전체적으로 개발자의 역량이 좋아진다면 그것 또한 이 업계를 위한 일이 아닐까? 그리고 다시 나에게 더 좋은 일로 찾아 오지 않을까? 하는 작은 바람이 있다.</p>\n<h3>(2) 파트리더가 되다</h3>\n<p>그렇게 새로운 분들이 팀에 합류하였고 바로 프론트엔드 파트가 신설되었다. 사실 회사에서 프론트엔드를 전문으로 하는 인력이 나와 내 사수 밖에 없었는데 사수도 이직을 앞둔 상태라서 내가 파트리더 역할을 수행하게 되었다. 이번에는 월별로 어떤 일들이 있었는지 다뤄보겠다.</p>\n<ul>\n<li>5월\n<ul>\n<li>프론트엔드 개발자 세 분이 팀에 합류했으며 프론트엔드 파트가 신설되었다.</li>\n<li>6월 까지는 사실 파일럿프로젝트 때문에 터치를 거의 하지 않고 기술적인 부분에 대해서만 도움을 드렸다.</li>\n</ul>\n</li>\n<li>6월\n<ul>\n<li>정식으로 파트리더가 되었다.</li>\n</ul>\n</li>\n<li>7월\n<ul>\n<li>신규 프로젝트에 다같이 투입했다.</li>\n<li>코드리뷰도 생각보다 활발하게 진행 되었으며 사실 이 때 분위기가 제일 좋았던 것 같다.</li>\n<li>그리고 다시 채용을 진행했다.</li>\n</ul>\n</li>\n<li>8월\n<ul>\n<li>프로젝트가 한 번 엎어지면서 침울한(?) 분위기가 되었다. 그러다 월 말에 일이 몰리면서 무척 힘들었다.</li>\n<li>채용을 진행하다가 TO가 사라지기도 하고, 합격하신 분이 입사를 거절하기도 하면서 현타가 좀 왔었다.</li>\n<li>내가 무슨 부귀영화를 누리고자 이 고생을 했을까..? 하는 심정이었다.</li>\n</ul>\n</li>\n<li>9월\n<ul>\n<li>투자 1차 오픈이 이뤄졌고, 다시 채용을 진행했으며, 사수가 이직했다.</li>\n<li>사수 덕분에 정말 많은 것들을 배울 수 있었기 때문에 무척 아쉬웠다.</li>\n</ul>\n</li>\n<li>10월\n<ul>\n<li>TO가 2개 생겨서 다시 채용을 진행했다.</li>\n<li>채용 때문에 업무가 거의 마비 됐었다.</li>\n<li>역대급으로 신경을 많이 썼다.</li>\n<li>모든 이력서를 정말 꼼꼼하게 검토했다.</li>\n<li>채용 과제에 대한 코드리뷰도 무척 많이 했다.</li>\n</ul>\n</li>\n<li>11월\n<ul>\n<li>원래 두 분을 모시려고 했는데, 최종합격이 되었으나 입사를 거절하시는 분이 많아서 결국 한 분만 모시게 되었다.</li>\n<li>그래도 새로운 분이 오셔서 무척 좋았다.</li>\n</ul>\n</li>\n<li>12월\n<ul>\n<li>투자 2차 오픈 때문에 거의 일만 게속 했다.</li>\n</ul>\n</li>\n</ul>\n<p>처음에는 와.. 내가 벌써 리더가 되었구나 하며 좋아했는데, 그 기쁨도 잠시.. 각종 회의와 업무가 말 그대로 파도처럼 밀려왔다. 특히 월요일의 경우 하루 종일 회의가 있어서 거의 업무를 못했고, 화요일과 수요일에도 각각 1시간 30분 ~ 2시간 짜리 회의가 있어서 내가 회사를 회의하러 오는건지 일하러 오는건지 의문이 들때가 많았다.</p>\n<p>일은 퇴근하고 나서 하는 날들이 많았고, 앞선 프로젝트 회고에서 다룬 것 처럼 슬랙으로 오는 업무 요청 때문에 돌아버릴 지경이었다. 그래서 한 동안 신경이 무척 날카로워졌었다.</p>\n<p>특히 9월에는 언제 이직을 해도 이상하지 않았던, 내 입장에서는 정말 최고의 프론트엔드 개발자라고 생각했던 내 사수가 드디어(?) 이직했다. 첫 회사에서 이런 사수 일을 할 수 있어서 무척 감사했다.</p>\n<h3>(4) 좋은 조직에 대한 고민</h3>\n<p>파트 리더가 되면서 자연스럽게 어떻게 해야 좋은 조직으로, 일을 잘 하는 조직으로, 행복한 조직으로 만들 수 있을지 고민했다.</p>\n<ul>\n<li>\n<p>내가 생각하는 <code>행복한 조직</code></p>\n<p>일단 내가 어떤 조직에 있을 때 행복할지 고민해봤다. 이미 기존에 정리된 많은 자료들이 있겠지만, 일단 내 기준에 부합해야 한다고 생각했다.</p>\n<ul>\n<li>적절한 소속감과 유대감\n<ul>\n<li>지나치게 친해도 안 되고, 너무 딱딱해도 안 되는 것 같다.\n<ul>\n<li>너무 친하면 갈등이 생겼을 때 오히려 문제가 되는 경우를 많이 봤다.</li>\n<li>가족이나 연인사이도 너무 편해지고 친해져서 발생하는 문제들이 많이 있는 것 같다.</li>\n<li>하지만 적정 수준의 선을 지킨다면 친해져서 좋으면 좋았지 나쁠건 없지 않을까?</li>\n</ul>\n</li>\n<li>그 다음으로 중요한건 어딘가에 소속되어 있다는 안정감과 서로를 묶어주는 유대감이라고 생각한다.\n<ul>\n<li>내가 생각하는 것 보다 소속감과 유대감은 심리적 안정감을 높여주는 것 같다.</li>\n<li>내가 믿고 의지할 수 있는, 등을 기댈 수 있는 동료가 있다는 것.</li>\n<li>그게 사회를 살아가는 방법이 아닐까?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>의견을 쉽게 표출하고 잘 들어주는 조직\n<ul>\n<li>어떤 의견을 말하든 귀를 귀울여주는 자세가 필요하다.</li>\n<li>그리고 이게 당연하게 받아들여지는 문화라면 어떨까?</li>\n<li>내가 경험해보진 못했지만, 올해 초에 <code>클럽 하우스</code>를 통해서 접한 <code>토스</code>와 <code>쿠팡</code> 의 문화가 그러한 것 같다.</li>\n<li>일이 아무리 많고 힘들어도 내 의견을 들어주는 사람들이 있고, 이를 같이 실천해주는 사람들이 있다는 사실만으로도 무척 힘이되고 또 행복할 것 같다.</li>\n</ul>\n</li>\n<li>공부를 장려하는 조직\n<ul>\n<li>회사에서, 조직에서 개개인의 조직원에게 충분히 투자하는 느낌이랄까?</li>\n<li>사실 대부분의 회사가 교육비, 인강비 등을 많이 지원해주고 있다.</li>\n<li>우리 회사는 교육비에 대한 지원이 무척 빈약하다.. ㅠㅠ</li>\n<li>그래서 입사 1년차에는 고액의 교육비를 사비로 감당했다.</li>\n<li>스스로에게 투자하는 것이라서 아까운건 아니지만 내심 교육비를 지원받는 회사를 보면 무척 부럽다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>일을 잘 하는 조직</p>\n<p>필자를 포함하여 대부분의 개발자라를 업으로 하는 사람들이라면 대체로 <code>비효율적</code>인 것을 무척 싫어한다. 그래서 요즘 대부분의 조직에서는 <code>애자일</code> 문화를 도입하고 있는 것 같다.</p>\n<ul>\n<li>\n<p>애자일?</p>\n<ul>\n<li>사실 필자는 아직도 애자일이 뭐냐고, 무엇을 하는거냐고 물어보면 이에 대해서 정확하게 말하기가 어렵다.</li>\n<li>사전적인 의미로 <code>날렵한</code> <code>민첩한</code> <code>재빠른</code> <code>기민한</code> 등의 뜻이 있다.</li>\n<li>조금 찾아보면 핵심적인 것은 <strong>변화</strong>에 잘 대응 하는 것, <strong>유연</strong>하게 일을 진행하는 것 이라고 한다.</li>\n</ul>\n</li>\n<li>\n<p>그래서 그냥 <code>애자일</code> 이라는 단어에 집중하기보단, 어떻게 해야 우리가 일을 잘 할 수 있을까? 에 대해 고민하기로 했다.</p>\n</li>\n<li>\n<p>어떤 도구를 도입하는 것에 집중하기보단, 현재 가진 도구들을 최대한 활용하는 것을 목표로 했다.</p>\n<ul>\n<li>\n<p>회사에서는 <code>노션</code>을 적극적으로 사용하는 것을 권하고 있다.</p>\n</li>\n<li>\n<p>그래서 노션으로 간단하게 task를 만들어서 활용하게 되었다.</p>\n<p></p>\n<ul>\n<li>처음에는 파트내에서만 사용하다가 아예 프로젝트 단위로 사용할 수 있도록 구성했다.</li>\n<li>같이 일하는 분들에게 계속해서 강조하고 전파했더니 이제 꽤 많은 분들이 사용하고 있다.</li>\n<li>물론.. 아직 갈 길이 너무 멀다.</li>\n</ul>\n</li>\n<li>\n<p>대부분의 문서를 올해부터는 노션에 정리하고 있다. <s>하지만 정리한 문서가 몇 개 없다</s></p>\n</li>\n</ul>\n</li>\n<li>\n<p>데일리 스크럼</p>\n<ul>\n<li>파트가 신설 되면서 데일리스크럼을 도입했다.</li>\n<li>원래 이런게 있는 줄도 몰랐는데, 신규 입사자분들이 팀원 분들이 파일럿 프로젝트를 하면서 데일리스크럼을 하는 것을 보고 아예 파트 내에서 데일리스크럼을 진행할 수 있도록 확장했다.</li>\n</ul>\n<p></p>\n<ul>\n<li>\n<p>양식은 대충 다음과 같다.</p>\n<p></p>\n</li>\n<li>\n<p>더 좋은 양식이나 방법이 있다면 언제든 소개 부탁드립니다 🙇‍♂️</p>\n</li>\n</ul>\n</li>\n<li>\n<p>월간 KPT 회고</p>\n<ul>\n<li>다른 회사에서는 어떤 것들을 하나 리서치를 해봤는데 많이 하는게 바로 <code>KPT 회고</code> 였다.\n<ul>\n<li><code>Keep</code>: 현재 잘 하고 있는 것. 유지해야 하는 것</li>\n<li><code>Problem</code>: 현재 가지고 있는 문제들</li>\n<li><code>Try</code>: 문제 해결을 위하여 시도해볼만한 것들</li>\n</ul>\n</li>\n<li>매일 하거나 주 단위로 하긴 조금 부담스러웠고, 한 달에 한 번 정도는 부담없이 할 수 있을 것 같아서 바로 도입했다.</li>\n<li>일단 Try를 하는 것에 초점을 두기 보단, Problem을 산출 하는 것에 초점을 뒀다.</li>\n<li>문제를 인지하고 있어야 해결도 가능하다고 생각했기 때문이다.</li>\n<li>Try의 경우.. 물리적으로 시간이 부족한 경우가 무척 많았다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>프로젝트 리뷰</p>\n<ul>\n<li>\n<p>원래는 코드리뷰를 해야 맞지만, 한 사람이 맡고 있는 프로젝트가 너무 많다보니 현실적으로 무척 힘든 상황이다.</p>\n<ul>\n<li>\n<p>필자가 맡은 프로젝트만 하더라도</p>\n<ul>\n<li>모바일줌 프론트 + 백엔드</li>\n<li>스타트줌 프론트 + 백엔드</li>\n<li>줌프론트 백엔드(Batch, API) + 어드민</li>\n<li>크롬 확장프로그램</li>\n<li>금융 프론트</li>\n</ul>\n<p>등의 프로젝트가 있다. <s>누가 내 코드좀 리뷰해주세요..</s></p>\n</li>\n</ul>\n</li>\n<li>\n<p>그래서 어떻게 해야 누군가의 부재가 있을 때도 백업을 할 수 있을까 고민하다가 수요일마다 프로젝트 하나를 정해서 리뷰를 하기로 했다.</p>\n<ul>\n<li>대략 3달 정도에 걸쳐서 파트에 있는 모든 프로젝트에 대해 리뷰를 진행했다.</li>\n<li>원래 문서정리도 같이 하기로 했는데.. 쉽지 않다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이 외에도 고민한 내용이 무척 많았는데, 연말이 되니까 생각나는게 딱히 없다. 내년에는 수시로 정리를 해두자!</p>\n<h3>(5) Effectuation Process</h3>\n<p>10월 쯤에 어떤 식으로 내가 가진 역량을 발견하고 키울 수 있을까 고민하다가 <a href=\"http://www.ac2.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">AC2(Agile Coach Squared)</a>라는 강의에 대해 알게되었고, 다음 과정이 열리기를 기다리고 있었다.</p>\n<p>그리고 AC2를 운영하고 김창준님이 발표한 영상을 유튜브에서 몰아보고 있던 와중에,</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=8DXUDe-YNP0\" target=\"_blank\" rel=\"noopener noreferrer\">김창준 정성영 ac2 인터뷰</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=eDtuLZ3nskc\" target=\"_blank\" rel=\"noopener noreferrer\">Agile Korea 2012 - 개인이 조직을 바꾸는 법 by 김창준</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iR9gjvBiUMk&amp;t=6s\" target=\"_blank\" rel=\"noopener noreferrer\">[2018 체인지온] 새롭게 시작하는 기술- 김창준 애자일 컨설팅 대표</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=I4xkw_0XqAs&amp;t=4s\" target=\"_blank\" rel=\"noopener noreferrer\">[OKKYCON: 2017] 김창준 - 협업의 미신 5가지</a></li>\n<li><a href=\"https://www.podbbang.com/channels/14757\" target=\"_blank\" rel=\"noopener noreferrer\">애자일 키워드</a></li>\n</ul>\n<p>정확히 몰아보고 있는 그 날, 다음과 같은 메일을 한 통 받았다. (우연이라고 하기엔 정말로 기가막힌..)</p>\n<p></p>\n<p>2022년까진 AC2 과정이 개설되지 않는 다는 내용있고, 대신에 Effectuation 을 주제로 세미나를 진행한다고 했다. 특별한 고민을 하지 않고 바로 신청했다.</p>\n<p>먼저 Effectuation에 대한 연구를 소개해보자면, 버지니아 대학교 경영대학원의 Saras sarasvathy 교수가  약 30명의 탁월한 창업가에 대해 분석을 하고 <a href=\"https://www.effectuation.org/\" target=\"_blank\" rel=\"noopener noreferrer\">논문</a>을 작성했다. 아마 예상할 수 있겠지만, 탁월한 창업가들은 일반적인 경영학을 배운 사람들(ex: MBA)과 비교했을 때 무척 다른 전략을 가지고 있었다. 요약해보자면, 탁월한 창업가들에게 중요한 것은 목표가 아니라 <strong>목표를 향해 나아가는 프로세스(=Effectuation Process) 였다.</strong></p>\n<p>Effectuation에 대한 개념을 간단하게 살펴보자면 다음과 같다.</p>\n<ul>\n<li>Effect</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">1. [명사] 영향; 결과, 효과 (→greenhouse effect, knock-on, side effect)</span>\n<span class=\"line\">2. [명사] (화가·작가 등이 만들어 내는) 느낌[인상] (→special effects, sound effect)</span>\n<span class=\"line\">3. [동사][격식] (어떤 결과를) 가져오다</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Effectuation은 불확실한 상황에서 어떻게든 Effect를 발생시키는 것을 의미한다.</li>\n</ul>\n<p>그리고 Effectutation과 상반되는 개념이 있다.</p>\n<ul>\n<li>\n<p>Cause</p>\n<div class=\"language-markdown line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"md\" data-title=\"md\"><pre><code><span class=\"line\"><span class=\"token list punctuation\">1.</span> 원인</span>\n<span class=\"line\"><span class=\"token list punctuation\">2.</span> (특정한 감정이나 행동의) 이유</span>\n<span class=\"line\"><span class=\"token list punctuation\">3.</span> …을 야기하다</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>Causation은 인과관계에 따른 예측을 하는 것을 의미한다.</p>\n</li>\n</ul>\n<p>즉, Effectuation은 불확실한 상황에서 적용할 때 좋은 개념이고, Causation은 확실한 상황, 예측이 가능한 상황에 적용할 때 좋은 개념이다.</p>\n<p>그래서 <code>effecutation vs</code>를 구글 검색창에 입력해보면 연관 검색어로 <code>causation</code> 이 뜨는 것을 볼 수 있다.</p>\n<p>보통 일반적인 대기업의 경우 안정적인 자본과 인력을 가지고 있기 때문에 굳이 불확실한 상황에 도전할 필요가 없을 것이다. 그렇기 때문에 예측 가능한 상황에 대한 전략을 세워야 한다. 반대로 창업의 과정은 결과를 알 수 없는, 불확실한 상황의 연속일 것이다.</p>\n<p>따라서 Effectuation process를 이용하면 불확실한 상황들, 가령 창업을 할 때 특히 효과적이라고 할 수 있다. 그래서 탁월한 창업가들은 이러한 불확실한 상황에 대한 예측을 불필요하다고 생각했으며 리스크한 상황도 만들지 않는, 크게 구분하자면 5가지의 전략을 가지고 있다.</p>\n<h4>1) Bird in Hand</h4>\n<blockquote>\n<p>손 안의 새가 손 밖의 새보다 낫다</p>\n</blockquote>\n<p>손 안의 새는 내가 가지고 있는 자원이라고 할 수 있다.</p>\n<ul>\n<li><strong>방법(Means based)</strong> 중심 vs <strong>목표(goals based)</strong> 중심\n<ul>\n<li>보통 MBA 졸업한 사람들은 목표(Goals)를 먼저 선정하고, 이에 대한 방법(Means)를 찾음\n<ul>\n<li>안정화된, 미래가 예측이 되는 경우에는 목표를 먼저 선정하는 것이 좋다.</li>\n<li>TDD를 도입하자 → 목표를 먼저 선정하는 경우라고 볼 수 있다.</li>\n</ul>\n</li>\n<li>반대로, 성공한 창업가들은 자기가 가지고 있는 Means(방법/수단/자원)에 대해 먼저 생각하고 이를 토대로 어떤 목표를 가질 수 있는지 나열해보고, 선택한다.</li>\n</ul>\n</li>\n<li>Means\n<ul>\n<li><code>What I know?</code> = 내가 아는게 무엇인가 ( 지식 )</li>\n<li><code>Whom I know?</code> = 내가 누굴 알고 있는가 ( 네트워크 )</li>\n<li><code>Whom I am?</code> = 내가 누구인가</li>\n</ul>\n</li>\n<li>What Can I Do?\n<ul>\n<li>앞서 언급한 3가지의 Means를 통해서 무엇을 할 수 있는지 <strong>목표를 정해볼 것</strong></li>\n<li>이렇게 이미 있는 자원을 이용하여 목표를 설정할 경우, <strong>컨트롤</strong>이 가능함</li>\n<li>즉, 예측을 하지 않아도 됨</li>\n</ul>\n</li>\n</ul>\n<h4>2) Crazy-Quilt</h4>\n<blockquote>\n<p>조각보를 붙여나가자</p>\n</blockquote>\n<ul>\n<li>이것의 반대는 <strong>경쟁 분석</strong></li>\n<li>상황이 불리할수록 내 편을 만들어 가는 것이 중요함\n<ul>\n<li>TDD를 도입하려면, 스터디를 처음부터, 밑바닥 부터 같이 해야됨</li>\n<li>모두가 모르는 상태에서 시작해야함</li>\n<li>본인이 TDD를 이미 알고 있고, 이를 팀내에 적용하려고 할 때, 본인이 TDD 라는 주제를 이끌어야 함. 같이 한다기 보단 혼자서 하는 경우가 되는 것임</li>\n<li>즉, 변화를 이끌기 위해선 함께 해야함</li>\n</ul>\n</li>\n<li>보통 성공한 창업가들의 경우 경쟁사가 있어도 크게 신경쓰지 않았음</li>\n<li>자신이 가지고 있는 <strong>인적/물적 자원을 이용하여 할 수 있는 것들의 범위</strong>를 좁혀감</li>\n<li>일이 잘 풀리지 않더라도 오랫동안 생존하는 함\n<ul>\n<li>실패를 하더라도 크게 실패하는 경우가 없음</li>\n</ul>\n</li>\n</ul>\n<h4>3) Affordable Loss</h4>\n<blockquote>\n<p>감당할 수 있는 범위를 정하자.</p>\n</blockquote>\n<ul>\n<li>잃어도 되는 돈/시간의 양을 정하고 배팅함\n<ul>\n<li>즉, 모든 것을 걸지 않음\n<ul>\n<li>가령, 퇴직금과 집을 담보로 가게를 차리는 등의 행위는 절대 하지 않음</li>\n<li>어떻게 해서든 생존할 수 있는 수단을 만들어놓음</li>\n<li>리스크를 만들지 않는 다는 것과 동일함</li>\n</ul>\n</li>\n<li>이렇게 할 경우 최대한 많(경험)은 일을 할 수 있음</li>\n<li>경험을 많이 할 수 있다는 것은, 인사이트를 많이 받을 수 있다는 것</li>\n<li>리스크를 관리할게 아니라 리스크한 상황을 아예 만들지 않아야 함</li>\n</ul>\n</li>\n<li>랜덤하게 벌어지는 상황에서는 최대한 오래 살아남아야함\n<ul>\n<li>감당할 수 있는 손실을 정해야함.</li>\n<li>그래야 불필요한 예측을 하지 않아도 됨</li>\n</ul>\n</li>\n</ul>\n<h4>4) Lemonade</h4>\n<blockquote>\n<p>삶이 너에게 레몬을 주거든, 너는 레몬에이드를 만들어라</p>\n</blockquote>\n<ul>\n<li>생각하지 못한 상황이 펼쳐질 때, 이를 이용해야 함</li>\n<li>자신에게 타격이 되는 것들도 이용할 수 있어야 함</li>\n<li>현재 놓여진 상황에서 나에게 득이 되는 것을 계속 해서 찾아야 함</li>\n</ul>\n<h4>5) Pilot in the Plane</h4>\n<blockquote>\n<p>예측할 것인가, 통제할 것인가.</p>\n</blockquote>\n<ul>\n<li>제일 추상적인 이론이며, 보통 <strong>앞의 네 가지를 모두 무의식적으로 실천할 수 있을 때</strong> 가능함</li>\n<li>현실에는 예측할 수 없는 일들이 많이 발생함</li>\n<li>이러한 일들에 대해 모든 경우를 예상을 하는 것이 아닌, 상황을 컨트롤을 할 수 있어야 함</li>\n<li>컨트롤할 수 있는 범위에서는 <strong>예상을 하지 않아도 됨</strong></li>\n<li><strong>예상이 필요없는 범위에서</strong> 전략을 수립해야함</li>\n<li>이를 위해서 좋아하고 잘 하는 일을 해야 함</li>\n<li>잘할 수 없는 일을 하려고 할 땐 통제할 수 없는 상황이 있을 확률이 높음</li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Reference</p>\n<ul>\n<li>참고영상\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=eDtuLZ3nskc\" target=\"_blank\" rel=\"noopener noreferrer\">개인이 조직을 바꾸는 법</a></li>\n<li><a href=\"https://www.facebook.com/daumfoundation/videos/193480981588344\" target=\"_blank\" rel=\"noopener noreferrer\">새롭게 시작하는 기술 1:44:00부터</a></li>\n</ul>\n</li>\n<li>참고링크\n<ul>\n<li><a href=\"https://www.effectuation.org/?page_id=207\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.effectuation.org/?page_id=207</a></li>\n<li><a href=\"https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=stewart7&amp;logNo=221328550693\" target=\"_blank\" rel=\"noopener noreferrer\">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=stewart7&amp;logNo=221328550693</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.researchgate.net/publication/228786046_Effectuation_Elements_of_Entrepreneurial_Expertise\" target=\"_blank\" rel=\"noopener noreferrer\">논문</a></li>\n<li></li>\n</ul>\n</div>\n<p>이러한 내용을 업무에 적용하려고 했으나 쉽지 않았다. 무엇보다 그냥 일을 하느라 너무 정신이 없었다. 그리고 우리 조직에 어떤 식으로 적용을 해야 좋을까 고민을 했는데 일단 내가 할 수 있는 것은 <code>내 편</code> 을 많이 만드는 것이라고 생각했다.</p>\n<p></p>\n<p></p>\n<p>위와 같은 노력(?) 때문인지는 모르겠으나, 회사의 핵심 가치에 부합하는 직원으로 뽑히게 되었다. 결과적으로 <code>헛발질은 하지 않았구나</code> 라는 생각이 들었다.</p>\n<p>앞으로는 어떤 것들을 할 수 있을까? 다시 한 번 고민해봐야겠다.</p>\n<h3>(6) 앞으로의 과제</h3>\n<p>앞으로 할게 무척 많이 있다.</p>\n<ul>\n<li>코드리뷰\n<ul>\n<li>사내에서는 gitlab을 사용 중인데, gitlab 업그레이드를 할 수 없는 상황이다보니 github에서는 되는데 현재 사내 gitlab에서는 지원하지 않는 기능이 무척 많다. 가령 멀티라인 코드리뷰가 그렇다.</li>\n<li>그래서 어떻게 하면 좋을까 찾아보다가 <code>jetbrains upsource</code> 라는 것을 발견했다.</li>\n<li>코드리뷰 전용 툴이라서 지원하는 기능이 무척 많이 있다.</li>\n<li>대체로 EC2에 올려놓고 사용하는데, 문제는 사내 망에 gitlab을 구축해서 사용해야 한다는 것이다.</li>\n<li>일단 그러기 위해선 인프라팀의 지원이 필요한데.. 인프라팀의 부하가 무척 심하다.</li>\n<li>어떻게 할까 고민하다가 일단 필자의 컴퓨터에 설치한 다음에 사용했었는데.. 속도가 심각하게 느렸다.</li>\n<li>그냥 내년에 IDC 서버 한 대 받아서 환경을 구축해볼 생각이다.</li>\n<li>일단 부딪혀봐야지!</li>\n</ul>\n</li>\n<li>페어 프로그래밍\n<ul>\n<li>원래 매주 수요일마다 <code>프로젝트 리뷰</code> 를 했었는데, 모든 프로젝트에 대한 리뷰가 끝났다.</li>\n<li>그래서 무엇을 할 까 고민하다가 <code>페어프로그래밍</code>으로 서로 담당중인 프로젝트에 대해 진행해보면 어떨까? 하는 의견이 나왔다.</li>\n<li>그냥 기능을 추가하기보단 테스트 코드 위주 진행해보면 더 좋을 것 같다는 의견도 나왔다.</li>\n<li>원래 12월에 해볼 예정이었는데, 투자 플랫폼 오픈 때문에 제대로 진행하지 못했다.</li>\n<li>그래서 1월 부터는 제대로 진행해볼 생각이다.</li>\n</ul>\n</li>\n<li>업무 인수 인계\n<ul>\n<li>지금은 내가 파트에서 제일 많은 프로젝트를 담당하고 있는 상태이다.</li>\n<li>덕분에 파트를 위해서 해야 하는 일을 못 하고 있으며, 제일 큰 문제는 본의 아니게 파트원들이 역량을 제대로 발휘하지 못하고 있는 것 같다.</li>\n<li>그래서 1월부터는 서서히 실무를 많이 내려놓을 예정이다.</li>\n<li>그리고 실무에 치중하기 보다는 파트원을 위한 일들을 많이 할 예정이다.\n<ul>\n<li>가령 코어 프로젝트를 유지보수 하거나</li>\n<li>문서를 정리하거나</li>\n<li>테스트 코드 가이드를 작성하거나</li>\n<li>프로젝트 검수를 하거나</li>\n<li>혹은 구현이 어려운 기능에 대해 고민하거나</li>\n<li>파트 내에 필요한 개발 환경을 자동화하거나</li>\n<li>같이 페어를 하거나</li>\n</ul>\n</li>\n<li>그래서 2022년에는 파트원들에게 더 많은 기회를 주고, 모두가 회사에서 꼭 필요로 하는 키맨(key man)이 될 수 있도록 서포트할 생각이다.</li>\n</ul>\n</li>\n<li>문서화\n<ul>\n<li>앞선 내용의 연장선이다.</li>\n<li>프로젝트에 대한 문서를 많이 남겨놓을 생각이다.</li>\n<li>혹은 문서가 필요 없을 정도로 각각의 프로젝트에 대한 퀄리티를 높이거나</li>\n</ul>\n</li>\n</ul>\n<h2>3. 개발 역량 강화</h2>\n<p>올해는 사적으로 공부한게 많지 않은 것 같다. 상반기에는 사이드 프로젝트도 하고, 다양한 교육과정에도 참여했는데 하반기에는 일 외에는 거의 아무 것도 하지 못했다.</p>\n<h3>(1) 사이드 프로젝트 - 캠퍼스 프렌즈</h3>\n<p>처음에는 <code>캠퍼스 프렌즈</code>는 내 모교에 재학/졸업중인 사람들이 학교 구성원을 위한 커뮤니티를 만들기 위해 진행한 사이드 프로젝트다. 나는 1월 ~ 4월까지 4개월 정도 참여했고, 회사일 때문에 참여가 어려울 것 같아서 중도 하차했다.</p>\n<p>단쿠키 프로젝트에 참여하면서 생각보다 공부를 많이 했고, 처음 접해보는 기술 스택도 많았다.</p>\n<p><code>NestJS</code></p>\n<ul>\n<li>사실 NestJS는 작년에도 사이드 프로젝트를 하면서 어느 정도 익숙해진 상태였다. 그런데 이번에 조금 더 deep하게 써볼 수 있었다.</li>\n<li>Spring 처럼 필요에 따라서 Standard App으로 구성하기도 했고, NestJS에 포함된 다양한 기능들을 많이 써볼 수 있었다.</li>\n<li>덕분에 회사에서 NestJS를 도입할 때 부담이 없었따.</li>\n</ul>\n<p><code>graphql</code></p>\n<ul>\n<li>사실 나는 graphql을 사용할 생각은 없었는데 개발 팀장인&nbsp;**<a href=\"https://github.com/dobest27\" target=\"_blank\" rel=\"noopener noreferrer\">도비</a>**의 의견으로 graphql을 사용하게 되었다.</li>\n<li>생각보다 사용 방법이 무척 쉬웠고, 사용성도 매우 좋았다.</li>\n<li>다만 시중에 나와있는 자료가 많지 않아서 정보에 대한 탐색이 무척 어려웠다.</li>\n<li>특히 실무에서는 많이 사용되지 않는 편인 것 같다.</li>\n<li>회사에서 사용된다고 하더라도 대체로 내부 서비스 용도로 사용되고 있고, 사용자 단에서 사용되는 경우는 매우 드물어보인다.</li>\n</ul>\n<p><code>unit test, e2e test</code></p>\n<ul>\n<li>작년에 열심히 TDD 관련 공부를 했으니, 이젠 적용할 때도 되었지! 하며 혼자서 열심히 테스트 코드를 작성했다.</li>\n<li>Spring보다는 테스트 코드 작성이 무척 쉬웠고 괜찮았다.</li>\n<li>다만 e2e 테스트에 대한 만족도가 낮았다.</li>\n<li>성능 테스트도 해봤으면 어땠을까? 하는 아쉬움이 조금 있다.</li>\n</ul>\n<p><code>playwright</code></p>\n<ul>\n<li>playwright을 이용해서 학교의 시간표를 전부 읽어들였다.</li>\n<li>시간표 때문에 무수히 많은 삽질을 했다.</li>\n<li>그래도 재밌는 툴을 알게 되어서 좋았다.</li>\n</ul>\n<p><code>typeorm</code></p>\n<ul>\n<li>Java 진영의 JPA 같은 느낌이랄까?</li>\n<li>그런데 JPA와 다른 점이 너무 많아서 다루기가 조금 힘들었다.</li>\n<li>확실히 RDB를 다룰 때는 java가 node보단 확실히 기술적인 성숙도가 높은 편이라고 생각한다.</li>\n<li>아쉬움이 많은 기술스택이다.</li>\n</ul>\n<p><code>react native</code></p>\n<ul>\n<li>웹과 앱은 결이 다르다는 것을 다시 한 번 깨달았다.</li>\n<li>코드 작성은 그렇다 치고.. 디버깅이 무척 힘들었다.</li>\n<li>그래서.. 뭐랄까.. 경험하고 싶지 않은 영역이 되어 버렸다.</li>\n</ul>\n<p><code>jira(opens new window)</code></p>\n<ul>\n<li>프로젝트 관리 툴로 사용해볼 수 있었다.</li>\n<li>deep하게 써보진 않았지만, 확실히 기능도 많고 편리했다.</li>\n<li>회사에서도 사용하면 좋을 것 같은데.. 팀장님이 추진하다가 아쉽게도 무산되었다.</li>\n</ul>\n<p>프로젝트를 진행하면서 계속 정리를 했으면 좋았을텐데.. 지금은 어떤 것들을 했는지 자세히 기억나지 않고 있다. 사이드 프로젝트를 진행할 때 의식적으로 사용하는 기술스택에 정리하도록 신경써야 할 것 같다.</p>\n<p><code>커뮤니케이션</code></p>\n<p>내가 학교에서 팀프로젝트를 할 때 제일 불만이었던 점은, <code>커뮤니케이션</code>이었다. 거의 95% 이상의 학우들이 무소통으로 팀프로젝트에 참여했다. 모르면 모른다, 알면 안다, 힘들면 힘들다, 어려우면 어렵다, 불만이 있으면 불만이 있다 말을 하면 되는데 그냥 대체로 다 아무 말도 하지 않고 넘어가는 경우가 많았다. 사이드 프로젝트를 할 때도 마찬가지였다. 다들 어려우면 어렵다, 도움이 필요하면 도움이 필요하다고 이야기를 하면 좋을 것 같은데 그런 이야기를 하지 않으니 너무 답답했다.</p>\n<p>다만, 경영학과 학우들은 대체로 커뮤니케이션이 원활했다. 더 넓게 보자면 사회과학 계열의 학우들은 커뮤니케이션 능력이 대체로 좋았던 것 같다. 본의아니게 전공생에 대한 약간의 편견(?) 같은게 생겼다. 나만 그렇게 느끼고 있는건가 싶어서 꽤 많은 사람들한테 컴공 사람들이 어떤지 물어보면 대체로 커뮤니케이션 능력이 부족한 것 같다고 이야기를 들었다. 그냥 학과 특징인 것 같기도 하고..</p>\n<h3>(2) NextStep ATDD</h3>\n<p>지금은 <code>우아한형제들</code>로 이직하신 같은 팀에 있던 <strong>남준님</strong>이 강력 추천한 강의라서 개설 알림이 오자 마자 바로 신청했다. 그렇게 3월 한 달 동안 NextStep에 있는 <a href=\"https://edu.nextstep.camp/c/R89PYi5H\" target=\"_blank\" rel=\"noopener noreferrer\">ATDD</a> 를 수강했다.</p>\n<p></p>\n<ul>\n<li>3월은.. 나에게 눈물겨운 한 달이었다.\n<ul>\n<li>앞서 언급한 사이드 프로젝트도 진행하면서</li>\n<li>NextStep ATDD도 하면서</li>\n<li>NextStep Java CC 리뷰어도 했다.</li>\n</ul>\n</li>\n</ul>\n<p>수료한게 신기할 지경이다. 사실 수료하려고 정말.. 많이 애썼다. 맨날 새벽 1시 ~ 2시 쯤에 잠들었다.</p>\n<ul>\n<li>퇴근하면 일단 Java CC 리뷰어 활동을 하고</li>\n<li>사이드 프로젝트에서 목표로한 기능을 구현하고,</li>\n<li>다시 2~3시간 정도 ATDD에 투자했다.</li>\n</ul>\n<p>Java CC 보다 훨씬 실무에 가까워서 무척 유익했다. <s>문제는 지금은 Java를 거의 하고 있지 않을 뿐..</s></p>\n<p>그래서 회사 사람들에게 꼭 들으라고 추천 중이다. <s>언제 정식으로 개설 될지 모를 뿐..</s></p>\n<h3>(3) 블랙커피 스터디 Level 3</h3>\n<p>6월에 기다리고 기다리던(?) 블랙커피 스터디 Level 3 과정이 오픈 되었다. 개설 알림이 오자 마자 바로 신청했다. 이번에는 원래 생각했던 것 보다 훨씬 더 다양한 시도를 했다.</p>\n<ul>\n<li>frontend\n<ul>\n<li>가상돔.. 까진 아니고 DOM에 Diff 알고리즘을 적용해봤다.</li>\n<li>router를 깊게 추상화해보기</li>\n<li>vuex, redux 직접 구현</li>\n<li>useState 직접 구현</li>\n<li>singleton container 직접 구현</li>\n<li>그리고 이러한 과정에서 산출된 포스트를 작성했다.\n<ul>\n<li><strong><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Store/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 상태관리 시스템 만들기</a></strong></li>\n<li><strong><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 가상돔(VirtualDOM) 만들기</a></strong></li>\n<li><strong><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Make-useSate-hook/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 React UseState Hook 만들기</a></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>backend\n<ul>\n<li>갑자기 API를 직접 만들어보고 싶다는 생각이 들었다.</li>\n<li>어떻게 만들까 고민하다가 Decorator를 이용해서 직접 Singleton Container를 이용해서 의존성을 주입할 수 있는 형태로 만들었다.</li>\n<li>뿐만아니라 Controller를 Spring의 Controller Annotation 처럼 사용할 수 있도록 구성했다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-tsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"tsx\" data-title=\"tsx\"><pre><code><span class=\"line highlighted\">@<span class=\"token function\">RestController</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/auth'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthController</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">    @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>AuthService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> authService<span class=\"token operator\">:</span> AuthService<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  @<span class=\"token function\">PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>AuthResponse<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>body <span class=\"token keyword\">as</span> AuthRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  @<span class=\"token function\">PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/signup'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">signup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">signup</span><span class=\"token punctuation\">(</span>body <span class=\"token keyword\">as</span> UserRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>관련 코드는 <a href=\"https://github.com/JunilHwang/black-coffee-study-lv3/tree/main/step3\" target=\"_blank\" rel=\"noopener noreferrer\">이 저장소</a>에서 확인해볼 수 있다.</p>\n<p>덕분에 무척 공부를 많이 할 수 있었다. 이를 통해서 작성한 포스트 때문에 내가 생각했던 것 보다, 특히 부스트캠프의 캠퍼들에게 꽤 이슈가 많이 되었던 것 같다.</p>\n<p>무엇보다 네카라 같은 기업에서 오퍼가 와서 무척 당황했다. 글 하나의 파급력(?)이 이렇게 클줄 몰랐다.</p>\n<h3>(4) 포스팅</h3>\n<p>작성한 글이 생각보다 많진 않다. 초안만 작성해놓고 투고하지 않은 글이 좀 있다.</p>\n<ul>\n<li>개인 블로그\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Store/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 상태관리 시스템 만들기</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 가상돔(VirtualDOM) 만들기</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Make-useSate-hook/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 React useState Hook 만들기</a></li>\n</ul>\n</li>\n<li>회사 기술 블로그\n<ul>\n<li><a href=\"https://zuminternet.github.io/zum-portal-core-js/\" target=\"_blank\" rel=\"noopener noreferrer\">Zum Portal Core JS 소개</a></li>\n<li><a href=\"https://zuminternet.github.io/nestjs-custom-decorator/\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS Custom Caching Decorator 만들기</a></li>\n<li><a href=\"https://zuminternet.github.io/vue-ssr/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue SSR 제대로 적용하기 (feat. Vanilla SSR)</a></li>\n<li><a href=\"https://zuminternet.github.io/zum-front-recurit-review/\" target=\"_blank\" rel=\"noopener noreferrer\">주니어 프론트엔드 개발자의 채용 프로세스 참여 후기</a></li>\n</ul>\n</li>\n</ul>\n<p>그래도 글 하나 하나에 정말 많은 애정을 담아서 썼기 때문에 만족한다.</p>\n<h2>4. 대외 활동</h2>\n<h3>(1) NextStep Java Clean Code 리뷰어</h3>\n<h4>1) Java CC 11기 리뷰어</h4>\n<ul>\n<li>3월 ~ 5월까지 활동했다.</li>\n<li>3월에는 사이드 프로젝트와 ATDD도 같이 병행하고 있어서 정말 죽을맛이었다..</li>\n</ul>\n<h4>2)Java CC 12기 리뷰어</h4>\n<ul>\n<li>원래 한 미션당 5명을 배정받는게 정석인데, 이번에는 무슨 생각인진 모르겠으나 9명을 배정받았다.</li>\n<li>그래도 1년의 내공(?)이 쌓여서 무탈하게 리뷰어 활동을 마무리할 수 있었다.</li>\n</ul>\n<p>본격적으로 프론트엔드를 전문으로 하는 사람이 되었기 때문에 13기부터는 리뷰어로 신청하지 않았다. 다만 javascript 관련 강의가 열린다면 일단 신청해서 수료하고, 기회가 주어진다면 꼭 리뷰어로 활동하고 싶다.</p>\n<h3>(2) 우아한 테크코스 Pro 2 리뷰어</h3>\n<p></p>\n<p>Java CC 리뷰어로 꽤 성실하게 활동해서인지 박재성(자비지기)님한테 우아한테크캠프 Pro 2기 리뷰어로 활동할 의사가 있냐는 메세지를 받았다. 조금의 고민이 있었으나 다시 오지 않을 기회라고 생각해서 바로 하겠다고 승락했다.</p>\n<p>리뷰어의 입장이었으나 사실 내가 Pro 과정의 리뷰어로 활동할 깜냥은 아니라고 생각했기 때문에 활동하는 기간 동안 무척 공부를 열심히 했다. 직접 미션을 혼자 수행해보기도 하고, 다른 리뷰어 분들이 리뷰하는 방식도 많이 참고했다.</p>\n<p>오히려 내가 테크캠프를 들어야 하지 않을까? 하는 마음으로 임했던 것 같다. 나에게는 좋은 일이지만.. 사실 나에게 리뷰를 받는 분들에게는 조금 죄송한 마음이 있었다. 경력도 부족하고, 실력도 부족하고, 무엇보다 리뷰어로 활동할 당시에 백엔드보다는 프론트를 조금 더 많이 하는 상태였기 때문에 자괴감이 들기도 하고.. 조금 복합적인 심정이었다.</p>\n<p>어찌저찌 리뷰어 활동을 마무리할 수 있었으나, 반대로 더이상 Java 리뷰어를 하면 안 되겠다고 다짐하는 계기가 되기도 했다.</p>\n<h3>(3) 부스트캠프</h3>\n<p>8월에 부스트캠프 리뷰어 모집 공고가 올라왔다. 회사에 부스트캠프 출신의 팀원을 두 분이나 모셔오기도 했기 때문에 이번에도 꼭 참여하자고 다짐했다.</p>\n<h4>1) 리뷰어</h4>\n<p>작년에 리뷰어 활동을 해봤기 때문에, 올해의 리뷰어 활동은 크게 어렵진 않았다. 노션에 기본적으로 지켜져야 하는 코딩 가이드를 작성해서 공유했고, 참고하는 글이나 저장소 또한 공유했다.</p>\n<p>다만 이번에는 2주마다 담당하는 캠퍼들이 달라져서 더 신선했다. 프로젝트의 난이도는 더 높아져서 캠퍼들이 무척 힘들어하는게 느껴졌다.</p>\n<p>다만, 내가 작성한 Vanilla Javascript 관련 글들이 캠퍼들에게 거의 교과서(?) 처럼 읽히고 있어서 무척 신기했다. 덕분에 리뷰 하기가 한결 더 수월했다.</p>\n<p>이를 계기로 마스터인 크롱님이 캠퍼들과 1시간의 티타임을 가지면 좋을 것 같다고 하셔서 흔쾌히 승락했다. 굉장히 다양한 질문들이 있었는데, 제일 기억에 남는건 매번 주어지는 미션 난이도에 대한 질문이었다.</p>\n<p>나는 <code>여기서 더 어려워도 좋을 것 같다</code>고 이야기했다. 덕분에 캠퍼들의 반응이 무척 뜨거웠다. <s>아마 나를 미친놈이라고 생각하지 않았을까?</s></p>\n<p>그래도 인생에서 지금처럼 몰입할 수 있는 시간이 앞으로 없을 수도 있다고 생각하고 있었기 때문에, 아직 수료하지 않은 캠퍼들이 우리 회사에 지원했을 때 정중하게 거절 의사를 밝히고 부스트캠프 수료에 집중하면 좋겠다고 전달했었다.</p>\n<h4>2) 멘토링</h4>\n<p>리뷰어 활동이 끝나고, 이어서 멘토링 활동을 할 사람을 모집하길래 다시 바로 지원했다. 오히려 리뷰어 활동보다 더 편하고(?) 재밌었다. 경력자를 위한 이런 캠프가 있으면 좋겠다고 생각 중이다. 나는 너무 급하게(?) 취업을 해서 제대로된 개발자 네트워크가 구성되지 않은 상태다.</p>\n<p>그런데 이렇게 힘들고 재밌는 과정을 같이 수료한 동료들이 있다면 얼마나 좋을까? 하고 생각해보곤 한다.</p>\n<p>어쨌든, 멘토링 활동은 6주간 진행되었으며 나는 두 조를 담당했다.</p>\n<p>31조와 32조였는데, 31조는 정말 텐션이 높아서 같이 참여하는 나도 텐션이 꽤 높아졌고, 32조는 기술적인 챌린지를 많이 해서 그런지 매번 지쳐보였다. 멘토링 활동이 끝나고 각 조원들과 회식을 했었는데 무척 재밌었다. 사진이라도 찍어둘껄..!</p>\n<p>31조의 경우 두 분은 아직 학교를 재학중인 분들이었는데, 이렇게 젊은 나이에 이런 경험들을 했다는게 무척 부러웠다. 무엇보다 우리 포동이를 무척 좋아해주셔서 감사했다.</p>\n<p></p>\n<p>32조의 경우 내가 첫날 멘토링을 하면서 늘어놓았던 이야기들을 면접때 잘 활용했다는 이야기를 듣고 무척 놀랐다. 사실 짧은 시간 동안 굉장히 많은 이야기를 했고, 녹화를 한 것도 아닌데 그렇게 경청하고 기억해서 면접때 이야기할 수 있는 사람이 얼마나 될까? 싹이 다른 사람들이라는게 느껴졌다.</p>\n<blockquote>\n<p>이 자리를 빌어서 캠퍼분들 모두 좋은 회사에 꼭 입사하기를 간절하게 바랍니다! 도움이 필요하면 언제든 DM 주세요 😁</p>\n</blockquote>\n<h3>(4) 항해 99</h3>\n<p>어쩌다보니(?) 부스트캠프 팀프로젝트 멘토리를 하면서 동시에 스파르타 코딩클럽의 항해99 실전 프로젝트 멘토링도 하게 되었다.</p>\n<p></p>\n<h4>1) 실전 프로젝트</h4>\n<p>총 3팀을 맡아서, 매주 한 팀당 30분씩 멘토링을 진행했다. 대체로 백엔드를 하시는 분들은 실력도 뛰어나고 고민을 많이 하는게 눈여 보였는데 프론트를 하시는 분들은 거의 기능 구현에만 집중하는게 느껴져서 아쉬웠다. react를 사용하지만 javascript는 잘 모르는 느낌도 있어서 더 아쉬웠다.</p>\n<p>다들 프로젝트 일정이 촉박하다보니 따로 공부할 시간이 없어보여서 추가적으로 공부해야 하는 것들을 던져주기에도 조금 애매했다.</p>\n<h4>2) 미니 프로젝트</h4>\n<p>미니프로젝트의 사정도 크게 다르지 않았다. 조금 우려스러웠던 부분은 많은 분들이 cors 사용을 당연시 하는 것이었다. 덕분에 proxy 전도사(?)가 되어서 왜 proxy를 써야 하고, 어떻게 사용해야 하는지 굉장히 많이 설명했다. 시간이 된다면 아예 포스트를 하나 작성해야지 싶다.</p>\n<h3>(5) 고등학교 방과후 수업 강의</h3>\n<p>올해는 비대면으로 <code>인천금융고등학교</code> 학생들을 대상으로 방과후수업을 진행했다. 대체로 녹화본을 공유하는거라서 힘들진 않았다. 다만 하반기에 인강을 다시 처음부터 만들어서 올려야했기 때문에 꽤 번거로웠다.</p>\n<p>녹화해서 공유하는게 편하긴 했지만, 학생들을 직접 보지 못하는 부분은 내심 아쉬웠다. 그래도 꽤 괜찮은 부수입이었기 때문에 만족한다.</p>\n<p>내년에는 어떻게 진행될지 잘 모르겠다.</p>\n<h3>(6) 단국대 스터디</h3>\n<p>올해는 알고리즘 스터디를 전혀 진행하지 않았고, javascript study를 진행했다. level1 부터 시작해서 level2 까지 진행했는데, 처음 스터디를 진행할때는 생각보다 여유롭게 진행해서 좋았으나 나중에 Level1 2랑 level2 1기를 진행할 땐 너무 바빠서 힘들었다.</p>\n<p>부스트캠프 리뷰어/멘토링 + 항해 99 멘토링 + 스터디 + 인강제작 + 그냥 많은 회사일 등.. 어떻게 버텼는지 신기할정도.</p>\n<ul>\n<li>level1 커리큘럼\n<ul>\n<li>1주차: 웹에 대한 기본이론 + 간단한 Todo List 만들기</li>\n<li>2주차: 번들러 조사 및 적용(webpack, parcel)</li>\n<li>3주차: ExpressJS로 API 서버 만들고 연동하기</li>\n<li>4주차: 배포하기</li>\n</ul>\n</li>\n<li>level2 커리큘럼\n<ul>\n<li>1주차: React, Vue로 TodoList 만들기</li>\n<li>2주차: Web Component 구성</li>\n<li>3주차: 옵저버 패턴 적용</li>\n<li>4주차: Store 구성</li>\n</ul>\n</li>\n</ul>\n<p>위와 같은 형태로 진행했고, 매주 월요일에 온라인 세션을 하면서 피드백을 주고 받았다. 스터디 퀄리티가 내가 생각해도 만족스럽지 않았다. 내년엔 제대로 정비해서 다시 모집할 생각이다.</p>\n<p>12월 초에 시간 되는 사람들끼리만 모였는데, 생각보다 재밌었다. 내년에는.. 내가 백신 미접종자여서 모일 수 있을지 미지수.. 모이려고 해도 집에서만 봐야할 것 같다.. ㅠㅠ</p>\n<h3>(7) 블로그 스터디</h3>\n<p><a href=\"https://github.com/zum-study/zum-blog-study\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/zum-study/zum-blog-study</a></p>\n<p>회사 사람들과 어떻게 해야 조금이라도 친해질 수 있을까 고민하다가 <code>블로그 스터디</code>를 진행해보자 의견이 나왔고, 팀원 중에 한 분이 직접 스터디를 운영하기로 해서 같이 참여했다.</p>\n<p>처음에는 한 주에 한 편의 글을 작성하기로 했는데, 다들 너무 힘들어하는게 보여서 격 주에 한 편의 글을 작성하는 방식으로 변경했다.</p>\n<p>나도 처음에는 꽤 꾸준하게 글을 작성했는데, 시간이 흐를수록 작성하는게 무척 힘들었다. 무엇보다 어떤 주제로 글을 써야 좋을지 결정하는게 제일 어려웠다.</p>\n<p>어쨌든 결과적으로 블로그 스터디를 하면서 좋은 일들이 많이 있었기 때문에 만족한다.</p>\n<p>원래는 다른 팀원 분들과의 교류를 목적으로 하는 것이 제일 컸는데 생각보다 참여율이 저조해서 아쉬웠다. 내년에는 부디 많이 참여하기를!</p>\n<h2>5. 이직에 대한 고민</h2>\n<p>우리 <a href=\"https://www.facebook.com/beyondj2ee\" target=\"_blank\" rel=\"noopener noreferrer\">실장겸 이사겸 팀장</a>님이 입사 초부터 꾸준히 나에게 <code>너는 꼭 직접 다른 회사에 지원하지 말고 오퍼(스카웃)가 오면 그때 이직해</code>라고 이야기 하셨다. 그런데 오퍼가 생각보다 빨리왔다.</p>\n<h3>(1) 이직 제의</h3>\n<p>처음에는 <a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Store/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 상태관리 시스템 만들기</a> 글을 작성한지 얼마 되지 않았을 때 K 계열사에서 연락이 왔다. 사실 회사에서 연락을 받았다기 보단, 그 회사의 시니어 개발자분이 직접 연락을 주셔서 메일을 받았을 때 눈위 말 그대로 휘등그레졌다.</p>\n<p>만약 그 때 바로 <code>얼씨구 좋구나~</code> 하고 갔으면 어땠을까.. 하는 부질없는 고민을 많이 해본다. 곧 상장 예정인 회사였고, 복지도 무척 좋았고, 극혐하는 IE도 사용하지 않았고, 정말 하나부터 열까지 다 좋은 회사였다.</p>\n<p>어쨌든 그러고 나서 블로그 글이 생각보다 여파(?)가 좀 있구나 하는 생각에 조금 더 열심히 써야겠다고 생각했다.</p>\n<p>그 후에  N사에서 <a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 가상돔(VirtualDOM) 만들기</a>를 작성했고, 얼마 후에 다시 N사에서 이메일이 왔다. 어찌저찌 해서 30분정도 온라인으로 네트워킹 하는 시간을 가졌다.</p>\n<p>해당 팀의 팀장님도 마침 팀을 꾸린지 얼마 되지 않은 상태였고, 처음에는 <a href=\"https://zuminternet.github.io/zum-front-recurit-review/\" target=\"_blank\" rel=\"noopener noreferrer\">주니어 프론트엔드 개발자의 채용 프로세스 참여 후기</a>를 보고 인상 깊었다는 이야기를 해주셨고, 그 후에 올린 글들을 보고 연락을 주게 되었다고 이야기해주셨다.</p>\n<p>그 후에 또 몇 편의 글을 작성했는데 무척 존경하는 개발자 중 한 분이 직접 연락을 주셨고 집 근처에서 뵙게 되었다. 직접 찾아와주셨기 때문에 감사한 마음과 죄송한 마음, 그리고 설레는 마음(?)이 뒤섞인 상태로 뵈었다.</p>\n<p>무척 재미있고 흥미로운 이야기를 많이 해주셨고, 마음 같아선 지금이라도 당장 줌인터넷을 때려치우고 싶었으나(?) 이성의 끈을 간신히 부여잡은 것 같다.. ㅎㅎ</p>\n<p>그 후에도 여러 스타트업과 메이저 기업에서 연락이 왔었으나 어쨌든 결론적으로는 모든 오퍼를 거절했다. 지금은 이직할 때가 아니라고 생각했다. 내년이 되면 또 다르겠지 싶지만,</p>\n<p>아직은 파트가 안정되지 않은 상태이고, 내가 여기서 할 수 있는, 하고 싶은 일들이 무척 많이 남은 상태이다. 시기가 언제가 되었든 나는 내가 할 수 있는 모든 일을 다 한 다음에 이제 이직을 해도 후회가 없다고 느끼는 시점에 홀가분하게 정말 내가 원하는 회사로 잘 준비해서 가고 싶다.</p>\n<p>물론 말은 이렇게 하지만 인생은 어떻게 될지 모르기 때문에.. 마침 그걸 너무나 잘 느낀 한 해였기 때문에, 일단은 하루 하루를 열심히 살아가는 걸로!</p>\n<h3>(2) 떠나게 된다면?</h3>\n<p>그래도 한 번 어떤 회사에서 일하고 싶은, 혹은 내가 일하는 환경을 어떤 식으로 바꿔볼지 고민해보면 좋을 것 같다.</p>\n<h4>1) 다양한 대비가 필요한 것 같다.</h4>\n<p>올해 들어서 회사에 퇴사자가 무척 많이 생겼다. 아직까지 우리 파트원중에 이직한 사람은 없지만 사실 언제 나가도 이상하지 않다고 생각한다. 혹은 언제 나가더라도 대비를 할 수 있도록 해야한다고 생각한다.</p>\n<p>그게 내가 될 수도 있고, 다른 사람이 될 수도 있을 것이다. 이탈자가 생겼을 때 어쨌든 빠르게 이탈자의 업무에 적응할 수 있는 방안이 필요하다. 처음에는 그게 <code>코드리뷰</code> 라고 생각했다. 그런데 현실적으로 지금 당장은 <code>코드리뷰</code>를 할 수 있는 환경이 아니다. 그럼 어떻게 해야 좋을까? 고민을 하다가, 일단 테스트코드가 필요하다는 결론을 내렸다.</p>\n<p>단위테스트로 작성해도 상관 없고, 인수테스트로 작성해도 상관 없을 것이다. 중요한건 어떤 로직을 어떤 목적으로 왜 작성했는지 설명할 수 있는 코드가 있어야 한다는 것이다.</p>\n<p>어떤 다른 파트의 팀원 분은 사수에게 주석을 작성하지 말라는 이야기를 들었다고 한다. 나는 이게 반은 맞고 반은 틀렸다고 생각한다. 분명 읽기 쉬운 코드로 작성할 수 있다면 주석을 작성하지 않아도 된다.</p>\n<p>그런데 읽기 쉬운 코드와는 별개로, 이 코드가 어떤 연유 때문에 생겼는지는 주석이든 문서든 어떤식으로든 히스토리를 남겨야한다고 생각한다. 그리고 그 히스토리가 문서여도 상관 없고, 테스트코드여도 상관없다고 생각한다.</p>\n<p>테스트 코드를 작성한다면 문서를 작성했을 때 보다 더 많은 일을 할 수 있지 않을까? 배포 자동화를 할 수도 있고, 문서를 작성할 때 보다 업무에 대한 동기(Motivation)를 부여할 수 있으리라 생각한다.</p>\n<p>이와 더불어서 페어프로그램을 겸하면 어떨까? 일단 시도해볼 예정이다.</p>\n<p>이 외에도 내가 앞서 언급했던 <code>행복한 조직</code>, <code>일을 잘하는 조직</code> 을 만들 수 있도록 노력해볼 생각이다. 안 되면.. 별 수 없고!</p>\n<p>사실 나 혼자서 한다고 되는게 아니기 때문이다. 결국 개인이 조직을 변화시키기 위해서는 동조하고 공감하는 사람이 필요하다. 내 편을, 내 의견을 잘 들어주는 사람들이 많아지도록 애쓰는게 우선일 것 같다.</p>\n<h4>2) 그래서 내가 일하고 싶은 회사는?</h4>\n<p>간단하게 나열해보겠다.</p>\n<ul>\n<li>\n<p>재택근무</p>\n<p>사실 요즘 수도권에서 사는게 부담스럽다. 가능하면 아예 원격으로만 일하는 회사가 좋을 것 같다. 그래서 지방에서 살아도 일을 할 수 있는 회사라면 제일 좋을 것 같다.</p>\n</li>\n<li>\n<p>자율성, 그리고 책임</p>\n<p>회사가 직원을 100% 신뢰한다면 꽤 많은 제약이 없어진다. 하고 싶은 것은 다 해줄테니 대신 모든 일에 책임을 지게 한다고 해야하나? 지금의 나에게는 그런 회사가 더 좋을 것 같다.</p>\n</li>\n<li>\n<p>비포괄</p>\n<p>포괄임금제로 급여를 주는 회사에 다녀보니, 더이상 포괄임금제를 책정한 회사는 다니고 싶지 않다. 퇴직금이나 기본급 등을 포함해서 여러모로 손해보는게 많이 있다.</p>\n</li>\n<li>\n<p>HR</p>\n<p>적어도 제대로된 HR이 있는 회사면 좋겠다. 어쩌다보니 회사에 HR이 1년 정도 부재였는데, 말 그대로 최악이었다. 지금은 다시 생겨서 이것 저것 많은 시도를 하는 것 같은데... 이하 생략..</p>\n</li>\n</ul>\n<p>이 외에도 많은 것들이 있겠지만, 지금 당장 생각나는 것은 저정도인 것 같다.</p>\n<h2>6. 일상</h2>\n<h3>(1) 이사</h3>\n<ul>\n<li>5월 말에 이사했다.\n<ul>\n<li>경기도 성남 → 서울시 서초구 반포동</li>\n<li>11평 → 14평</li>\n<li>월 이자 10만원 → 약 40만원</li>\n<li>회사까지 대중교통 1시간 → 걸어서 25분, 자전거 10분</li>\n</ul>\n</li>\n<li>이 과정에서 처음으로 은행 대출을 받았다.\n<ul>\n<li>보증금 2억 중에 1.8억을 대출 받았다.</li>\n<li>대출 상품은&nbsp;<strong><a href=\"https://www.khug.or.kr/hug/web/ig/dl/igdl000001.jsp\" target=\"_blank\" rel=\"noopener noreferrer\">허그안심전세대출</a></strong>\n<ul>\n<li>최대 90%까지 대출 된다.</li>\n<li>국민은행에서 받았고, 최저 금리 2.5% 인데.. 말 그대로 최저금리다. 모든 혜택을 다 받아야 한다.</li>\n</ul>\n</li>\n<li>그런데 요즘에 대출도 많이 막히고 금리도 오르면서 전세 구하기가 무척 힘들어진 것 같다. 예정보다 조금 더 빠르게 이사하기를 잘한듯!</li>\n</ul>\n</li>\n<li>가구를 많이 샀다.\n<ul>\n<li>모션 데스크 + 모니터 암</li>\n<li>워시타워(세탁기 + 건조기)</li>\n<li>로봇 청소기</li>\n<li>침대 프레임</li>\n<li>에어컨</li>\n<li>주인님 물품\n<ul>\n<li>캣타워</li>\n<li>캣휠</li>\n</ul>\n</li>\n<li>덕분에 일시적으로 모든 현금을 다 소진했지만, 부업을 많이 해서 그런지 생각보다 현금이 빠르게 모였다.</li>\n</ul>\n</li>\n</ul>\n<p>이사를 오면서 제일 아쉬운 점은.. 옥상 풍경이다.</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>이런 풍경을 매일 볼 수 있었는데.. 그럴 수 없다는 점이 참 아쉽다. 이 동네에서 만난 고양이들도 좋았는데, 지금 키우고 있는 포동이의 어미도 이제 볼 수 없다는 점도 아쉽다.</p>\n<p></p>\n<p>이렇게 작은 고양이였는데!</p>\n<p></p>\n<p>지금은 어엿한 성묘가 되었다.</p>\n<p>어쨌든 이제 이사를 왔고, 이사를 온 날 바로 걸어서 한강에 갔다.</p>\n<p></p>\n<ul>\n<li>걸어서 2km 정도면 갈 수 있어서 가볍게 산책하는 겸 갔다오기 좋은 거리다.</li>\n<li>회사에서 집까지도 2km면 갈 수 있어서 한 동안 자전거를 타다가 날씨가 추워지면서 걸어다니거나, 비가오면 택시를 타고 있다.</li>\n<li>이제 대중교통을 이용하지 않아서 그런지 회사를 갔다 왔을 때 피곤하지 않아서 좋다.</li>\n</ul>\n<p>특히 서울로 오니까 대중교통을 이용하는 일이 거의 없어졌다. 강남도 걸어서 20~30분 정도면 갈 수 있고, 대중교통을 타더라도 대체로 30분, 느려도 1시간 정도면 웬만한 곳은 다 갈 수 있다. 어차피 서울 시내니까!</p>\n<p>확실히 서울이 좋긴 좋다. 다만 미친듯이 올라버린 집값을 보자면.. 한숨이 나온다.</p>\n<p>그래서 한 동안 차올랐던 서울 뽕이 빠지고, 다시 지방에 눈을 돌리는 중이다.</p>\n<h3>(2) 새로운 가족</h3>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>약 1주일 전에 새로운 가족이 생겼다. 집에서 대부분의 시간을 혼자 보내는 우리 주인님이 계속 신경쓰여서 애기 주인님을 모셔왔다. 처음에는 엄청 으르렁(?) 거렸지만 금세 친해져서 다행이구나 싶다 ㅎㅎ</p>\n<h2>Summary</h2>\n<p>정리하자면</p>\n<ul>\n<li>새로운 대표님이 오시면서 일이 무척 많아졌다.</li>\n<li>어쩌다 보니 파트장이 되었다.\n<ul>\n<li>파트장이 되면서 좋은 조직에 대한 다양한 고민을 했다.</li>\n<li>좋은 조직을 만들기 위해서 계속 고민 중이다.</li>\n</ul>\n</li>\n<li>생각보다 많은 대외활동을 했다.\n<ul>\n<li>주로 리뷰어, 멘토링 활동 등을 했다.</li>\n<li>다양한 분들을 만났고, 덕분에 나 또한 많이 성장했다.</li>\n<li>내년도 기대된다.</li>\n</ul>\n</li>\n<li>이직 제의를 많이 받았다.\n<ul>\n<li>지금 당장은 이직할 생각이 없다.</li>\n<li>일단은 지금의 자리에서 내가 할 수 있는 모든 것들을 하는 것이 중요하다.</li>\n</ul>\n</li>\n<li>서울로 이사했다.\n<ul>\n<li>그런데 다시 지방에 가면 어떨까.. 매일 매일 고민 중이다.</li>\n</ul>\n</li>\n<li>새로운 가족이 생겼다.</li>\n</ul>\n",
      "date_published": "2021-12-31T23:40:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Vanilla Javascript로 React UseState Hook 만들기",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Make-useSate-hook/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Make-useSate-hook/",
      "summary": "React의 UseState Hook의 작동방식에 대해 고민해보고, 구현해보고, 최적화하는 내용을 다룹니다.",
      "content_html": "\n<p>본 포스트는 React의 <code>useState</code> Hook의 작동방식에 대해 <strong>고민해보고, 구현해보고, 최적화</strong>하는 내용을 다룹니다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">선행학습</p>\n<p>구현부 코드는 아래 포스트의 내용을 모르면 이해하기가 힘들 수 있습니다.</p>\n<ul>\n<li><strong><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 웹 컴포넌트 만들기</a></strong></li>\n<li><strong><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Store/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 상태관리 시스템 만들기</a></strong></li>\n<li><strong><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 가상돔(VirtualDOM) 만들기</a></strong></li>\n</ul>\n</div>\n<h2>1. React의 useState</h2>\n<h3>(1) 의문을 갖기</h3>\n<p>필자는 React를 사용할 때 hook api들을 보면서 항상 신기했다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 돔에서 직접 호출하기 위해 window(전역객체)에 할당</span></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      &lt;strong&gt;count: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;/strong&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"increment()\"&gt;증가&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>useState로 state와 setState를 만들 수 있다.</li>\n<li>500ms(0.5초)마다 setCount를 실행한다.</li>\n<li>값이 1씩 증가한다.</li>\n<li>setCount가 실행되면 다시 렌더링이 실행된다.</li>\n<li>렌더링이 실행되면 Counter가 다시 실행될 것이다.</li>\n<li><strong>Counter 컴포넌트가 다시 실행되어도 count의 값은 초기화되지 않고 유지된다.</strong></li>\n</ol>\n<p>핵심은 5번의 내용이다. <u>컴포넌트 함수가 다시 실행 되더라도 count의 값이 초기화되지 않는 다는 것이다.</u> 어떻게 이게 가능할까?</p>\n<h3>(2) bottom - up 분석</h3>\n<p>밑 바닥 부터 차근차근 <code>useState</code> 에 대해 분석해보자.</p>\n<p>이번 섹션의 목적은 <strong>count의 값이 어떻게 초기화되지 않고 유지 되는지 알아보는 것</strong>이다.</p>\n<p>일단 <code>Counter</code> 컴포넌트를 렌더링 해주는 코드를 작성해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token comment\">/** HTML **/</span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">/** Javascript **/</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">    &lt;div&gt;</span>\n<span class=\"line highlighted\">      &lt;strong&gt;count: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;/strong&gt;</span>\n<span class=\"line highlighted\">      &lt;button onclick=\"increment()\"&gt;증가&lt;/button&gt;</span>\n<span class=\"line highlighted\">    &lt;/div&gt;</span>\n<span class=\"line highlighted\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t$app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>아마도 이런 형태일 것이다.</p>\n<p>React를 사용하는 사람들이라면, 위의 코드를 보고 <code>useState</code>와 <code>render</code>와의 관계를 유추할 수 있다.</p>\n<p><code>useState</code>를 실행하면 첫 번째 인자는 <code>state</code>를 반환하고,\n두 번째 인자는 state를 변경하는 <code>setState</code>를 반환하다.\n그리고 <code>setState</code> 를 실행하면 <code>render</code>가 실행된다.</p>\n<p>그래서 대략 다음과 같은 형태의 코드가 될 것이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">;</span> <span class=\"token comment\">// state를 정의한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    state <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로운 state를 할당한다</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// render를 실행한다.</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>useState</code>를 실행하면 내부에 state를 정의하고, setState를 실행하면 내부에 선언된 state를 변경할 것이다. 즉, 함수가 실행될 때 마다 결국 state의 값은 <code>initState</code> 로 초기화 될 것이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// state에는 항상 1이 들어간다.</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/01-make-state-frame/index.html\"></iframe>\n<p>결과물에서도 확인할 수 있듯이, state에는 항상 1이 들어간다.</p>\n<p>그래서 <code>state</code>의 값은 내부가 아닌 외부에서 관리해야 한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token comment\">// state에 값이 없을 때만 초기화를 진행한다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">    state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    state <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로운 state를 할당한다</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// render를 실행한다.</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/02-only-one-state/index.html\"></iframe>\n<p>잘 실행되고 있다.</p>\n<p>그런데 만약 useState와 Component가 여러 개라면 어떨까?</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      &lt;strong&gt;count: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;/strong&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"increment()\"&gt;증가&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cat<span class=\"token punctuation\">,</span> setCat<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'고양이'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">meow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCat</span><span class=\"token punctuation\">(</span>cat <span class=\"token operator\">+</span> <span class=\"token string\">' 야옹!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      &lt;strong&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/strong&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"meow()\"&gt;고양이의 울음소리&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/03-multi-state-bug/index.html\"></iframe>\n<p>한 개의 state 변수로 두 개의 state를 관리하기 때문에 count와 cat이 똑같은 값을 보여주게 된다.</p>\n<p>이를 해결하기 위해서 외부의 state 갯수를 useState가 실행되는 횟수만큼 만들어주면 될 것이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">let</span> currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// useState가 실행 된 횟수</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> states <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// state를 보관할 배열</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// initState로 초기값 설정</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> currentStateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    states<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// state 할당</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>currentStateKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// state를 직접 수정하는 것이 아닌, states 내부의 값을 수정</span></span>\n<span class=\"line highlighted\">    states<span class=\"token punctuation\">[</span>currentStateKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  currentStateKey <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token comment\">// 이 시점에 currentStateKey는 2가 될 것이다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token comment\">// 그래서 다시 0부터 접근할 수 있도록 값을 초기화 해야 한다.</span></span>\n<span class=\"line highlighted\">  currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/04-multi-state-success/index.html\"></iframe>\n<p>여기까지가 <code>useState</code>의 핵심 원리이다. 생각보다 간단하지 않은가?</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">클로저</p>\n<p>사실 이건 <code>클로저</code>에 대한 이해가 먼저 필요하다.\n직접적으로 클로저를 사용하진 않았지만 유사한 개념이라고 볼 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">클로저</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> 죽지않는_변수 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    죽지않는_변수 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'죽지않는_변수 : '</span> <span class=\"token operator\">+</span> 죽지않는_변수<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> 클로저로_만들어진_함수 <span class=\"token operator\">=</span> <span class=\"token function\">클로저</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">클로저로_만들어진_함수</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 죽지않는_변수 : 1</span></span>\n<span class=\"line\"><span class=\"token function\">클로저로_만들어진_함수</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 죽지않는_변수 : 2</span></span>\n<span class=\"line\"><span class=\"token function\">클로저로_만들어진_함수</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 죽지않는_변수 : 3</span></span>\n<span class=\"line\"><span class=\"token function\">클로저로_만들어진_함수</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 죽지않는_변수 : 4</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>useState</code> 함수의 바깥에서 <code>state</code>를 관리하기 때문에 <code>state</code>의 값이 유지되는 것이다.</p>\n</div>\n<h2>2. useState 최적화</h2>\n<p>앞선 과정은 <code>useState</code>가 <strong>값을 보존하는 방법</strong>에 대해 분석해보는 내용이었다. 이제 useState를 <strong>최적화</strong> 해보자.</p>\n<h3>(1) 변경된 값이 없을 경우</h3>\n<p>먼저 고민해볼 수 있는 상황은 <code>setState</code>에 <code>state</code>와 <strong>동일한 값</strong>을 넣었을 경우이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">nochange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// count에 똑같은 값을 삽입한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      &lt;strong&gt;count: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;/strong&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"nochange()\"&gt;변화없음&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> renderCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      renderCount: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>renderCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  renderCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/05-no-state-change/index.html\"></iframe>\n<p>값은 똑같은데 <strong>render는 계속 실행</strong>하고 있다.</p>\n<p>이럴 때는 렌더링이 되지 않도록 <strong>방지</strong>해야한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// initState로 초기값 설정</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> currentStateKey<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    states<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// state 할당</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 값이 똑같은 경우</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newState <span class=\"token operator\">===</span> state<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line\">    <span class=\"token comment\">// 배열/객체일 때는 JSON.stringify를 통해 간단하게 비교할 수 있다.</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 그런데 Set, Map, WeekMap, Symbol 같은 원시타입의 경우</span></span>\n<span class=\"line\">    <span class=\"token comment\">// JSON으로 파싱되지 않기 때문에 주의해야한다.</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">\t\t<span class=\"token comment\">// 기존 값과 다른 경우에만 값을 변경하고 render()를 실행한다.</span></span>\n<span class=\"line\">    states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  currentStateKey <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/06-dont-render-no-change/index.html\"></iframe>\n<p>이제 값이 똑같을 경우에는 렌더링이 되지 않는다.</p>\n<h3>(2) 동시에 여러 setState가 실행될 경우</h3>\n<p>일단 다음과 같이 하나의 함수에 <code>setState</code>가 두 번 사용 되는 경우가 있다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">CounterAndMeow</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cat<span class=\"token punctuation\">,</span> setCat<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹! '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">function</span> <span class=\"token function\">countMeow</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">setCat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹! '</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">countMeow</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">countMeow</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      &lt;p&gt;고양이가 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 울어서 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;/p&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"increment()\"&gt;증가&lt;/button&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"decrement()\"&gt;감소&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> renderCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>renderCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">CounterAndMeow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  renderCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/07-unnecessary-render/index.html\"></iframe>\n<p><code>countMeow</code> 를 실행할 때 마다 <code>render</code>는 2번 실행된다. 즉, 비효율적이다.</p>\n<p>이를 해결할 수 있는 방법 중 하나가 <code>debounce</code> 를 이용하는 것이다.</p>\n<p>주절주절 설명하기보단, 코드로 살펴보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> timer <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> currentCallbackTimer <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 클로저를 이용하기 위해 debounce를 실행하면 함수를 반환한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 실행이 예약된 함수(callback)가 있을 경우 캔슬한다.</span></span>\n<span class=\"line\">    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>currentCallbackTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line\">    <span class=\"token comment\">// 특정시간(timer) 후에 callback이 실행되도록 한다.</span></span>\n<span class=\"line\">    currentCallbackTimer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> 야옹 <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹'</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 취소</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 취소</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 취소</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행</span></span>\n<span class=\"line\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>야옹<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<ul>\n<li>일반적으로 우리가 사용하는 모니터의 주사율은 <strong>60프레임</strong>이다.</li>\n<li>즉, <strong>1초에 60번의 변화가 발생하는 것</strong>이다.</li>\n<li>따라서 1프레임 이내로 발생하는 모든 변화를 모아서 실행시켜주면 어떨까?</li>\n<li>render가 <strong>1초에 최대 60번만 실행되면 되도록</strong> 만들면 되지 않을까?</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1초에 60번 실행된다.</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이 때 이용할 수 있는 API가 바로 <code>requestAnimationFrame</code> 이다.</p>\n<ul>\n<li><code>requestAnimationFrame(callback)</code>은 브라우저에게 수행하기를 원하는 애니메이션을 알리고, 다음 리페인트가 진행되기 전에 인자로 넘겨진 <code>callback</code>함수를 호출한다.</li>\n<li>일반적으로 requestAnimationFrame이 <strong>1초동안 실행되는 횟수</strong>는 대부분의 브라우저에서는 W3C 권장사항에 따라 <strong>디스플레이 주사율과 일치</strong>하게 된다.\n<ul>\n<li>60Hz -&gt; 1초에 60회</li>\n<li>144Hz -&gt; 1초에 144회</li>\n<li>240Hz -&gt; 1초에 240회</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// fn은 1초에 60번 실행된다.</span></span>\n<span class=\"line\"><span class=\"token comment\">// 만약 모니터의 주사율이 144HZ 일 경우, 1초에 144번 실행될 것이다.</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>어쨌든 다시 <code>requestAnimationFrame</code>을 이용하여 debounce를 다시 만들어보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounceFrame</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">callback</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 클로저를 이용하기 위해 debounce를 실행하면 함수를 반환한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 실행이 예약된 함수(callback)가 있을 경우 캔슬한다.</span></span>\n<span class=\"line\">    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>nextFrameCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line\">    <span class=\"token comment\">// 특정시간(timer) 후에 callback이 실행되도록 한다.</span></span>\n<span class=\"line\">    nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> 야옹 <span class=\"token operator\">=</span> <span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹'</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 취소</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 취소</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 취소</span></span>\n<span class=\"line\"><span class=\"token function\">야옹</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행</span></span>\n<span class=\"line\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>야옹<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>사실 <code>setTimeout</code>을 사용하는 것과 크게 다르지 않다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">이벤트루프</p>\n<ul>\n<li>setTimeout과 requestAnimationFrame이 <strong>실행되는 시점</strong>에 대해 정확하게 이해하기 위해선 <code>이벤트 루프</code> 라는 개념에 대해 알아야한다.</li>\n<li>이에 대한 내용은 <a href=\"https://meetup.toast.com/posts/89\" target=\"_blank\" rel=\"noopener noreferrer\">자바스크립트와 이벤트 루프 | NHN Clound Meetup</a> 아티클에 자세히 나와있으니 참고하면 될 것 같다.</li>\n</ul>\n</div>\n<p>이러한 내용을 바탕으로 리팩토링을 진행해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounceFrame</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>nextFrameCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> renderCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> <span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      renderCount: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>renderCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">CounterAndMeow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  renderCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>사실 <code>debounce</code>는  <code>useState</code>에 적용하기보단 <code>render</code>에 적용하는게 더 쉽고 직관적이다.</p>\n<iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/08-refactor-rendering-by-debounce/index.html\"></iframe>\n<p>일단 이정도만 적용해도 <code>useState</code>를 이용하는데 큰 어려움은 없으리라 생각한다.</p>\n<h2>3. render 함수 추상화</h2>\n<ul>\n<li>이제 끝인줄 알았다면 매우 큰 오산!</li>\n<li>useState는 필연적으로 render와 같이 사용된다.</li>\n<li><s>아주 그냥 천생연분이다.</s></li>\n<li>둘 사이를 외부에서 간섭하지 못하게 함수로 보호해주자.</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyReact</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">MyReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 사용할 경우 <strong>useState와 render는 내부적으로 엮기가 더 쉬워진다.</strong> 다른 변수들도 추가해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyReact</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> states <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> renderCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">MyReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 하면 <code>currentStateKey</code>와 <code>renderCount</code>는 함수 내부에서만 사용할 수 있다. <code>useState</code>와 <code>render</code>에서만 접근 가능한 것이다.</p>\n<p>다시 내용을 채워보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyReact</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 내부에서 사용되는 변수는 options에 모아놓기</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token literal-property property\">currentStateKey</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token literal-property property\">renderCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>currentStateKey<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>currentStateKey <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">MyReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>눈치빠른 사람들(?)은 <code>render</code>가 이전 처럼 사용될 수 없으리라는 것을 알았을 것이다.</p>\n<p>이제 <code>render</code>는 다음과 같이 사용되어야 한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">MyReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;div&gt;</span>\n<span class=\"line\">    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">CounterAndMeow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;/div&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>사실 위의 코드는 <a href=\"https://ko.reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"noopener noreferrer\">React의 HelloWorld</a> 코드와 똑같다.</p>\n<p></p>\n<p>어쨌든 <code>render</code>를 한 번 구성해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyReact</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 내부에서 사용되는 변수는 options에 모아놓기</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">currentStateKey</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">renderCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> </span>\n<span class=\"line\">    <span class=\"token literal-property property\">rootComponent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// render는 일종의 바지사장이라고 보면 될 것 같다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> rootComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    options<span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    options<span class=\"token punctuation\">.</span>rootComponent <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 내부적으로 _render를 이용하여 상태변화에 대응한다.</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">const</span> _render <span class=\"token operator\">=</span> <span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">,</span> rootComponent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>rootComponent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    root<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">rootComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    options<span class=\"token punctuation\">.</span>currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    options<span class=\"token punctuation\">.</span>renderCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>_render</code>라는 비선실세(?)가 <code>render</code>라는 바지사장을 세워놓고 일하는 것이다.</p>\n<p>최근에 <a href=\"http://program.tving.com/tvn/tvnvincenzo\" target=\"_blank\" rel=\"noopener noreferrer\">드라마 빈센조</a>를 재밌게 봤는데,</p>\n<ul>\n<li><code>render</code>는 <code>장한서</code>고</li>\n<li><code>_render</code>는 <code>장준우</code> 라고 보면 될 것 같다.</li>\n<li>비유가 좀 이상한가?</li>\n</ul>\n<p>이제 <code>useState</code>의 코드도 조금 변경해야한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currentStateKey</span><span class=\"token operator\">:</span> key<span class=\"token punctuation\">,</span> states <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사실 이 부분만 변경되면 된다.</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  options<span class=\"token punctuation\">.</span>currentStateKey <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>전체적인 코드는 다음과 같다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyReact</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">currentStateKey</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">renderCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">rootComponent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currentStateKey</span><span class=\"token operator\">:</span> key<span class=\"token punctuation\">,</span> states <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>currentStateKey <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> _render <span class=\"token operator\">=</span> <span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">,</span> rootComponent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>rootComponent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    root<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">rootComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>renderCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>rootComponent <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">MyReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">CounterAndMeow</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cat<span class=\"token punctuation\">,</span> setCat<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹! '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">countMeow</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">setCat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹! '</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">countMeow</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">countMeow</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      &lt;p&gt;고양이가 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 울어서 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;/p&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"increment()\"&gt;증가&lt;/button&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"decrement()\"&gt;감소&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounceFrame</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>nextFrameCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;div&gt;</span>\n<span class=\"line\">    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">CounterAndMeow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;/div&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/09-abstract-render/index.html\"></iframe>\n<p>위와 같이 잘 작동하는 것을 확인할 수 있다.</p>\n<h2>4. 모듈화</h2>\n<p>이제 모듈화를 해보자. 전체적인 디렉토리 구성은 다음과 같다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token punctuation\">.</span></span>\n<span class=\"line\">├─ src</span>\n<span class=\"line\">│   ├─ components</span>\n<span class=\"line\">│   │  └─ CounterAndMeow<span class=\"token punctuation\">.</span>js</span>\n<span class=\"line\">│   ├─ core</span>\n<span class=\"line\">│   │  └─ MyReact<span class=\"token punctuation\">.</span>js</span>\n<span class=\"line\">│   ├─ utils</span>\n<span class=\"line\">│   │  └─ debounceFrame<span class=\"token punctuation\">.</span>js</span>\n<span class=\"line\">│   ├─ App<span class=\"token punctuation\">.</span>js</span>\n<span class=\"line\">│   └─ main<span class=\"token punctuation\">.</span>js</span>\n<span class=\"line\">└─ index<span class=\"token punctuation\">.</span>html</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/index.html</code></p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>MyReact App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/src/main.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./core/MyReact.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/src/App.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CounterAndMeow <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/CounterAndMeow.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;div&gt;</span>\n<span class=\"line\">    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">CounterAndMeow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;/div&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/src/utils/debounceFrame.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">debounceFrame</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>nextFrameCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    nextFrameCallback <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/src/core/MyReact.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> debounceFrame <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../utils/debounceFrame.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyReact</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">currentStateKey</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">renderCount</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">rootComponent</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currentStateKey</span><span class=\"token operator\">:</span> key<span class=\"token punctuation\">,</span> states <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      states<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>currentStateKey <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>ㅇ</span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> state<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> _render <span class=\"token operator\">=</span> <span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">,</span> rootComponent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>rootComponent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    root<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">rootComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>currentStateKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>renderCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rootComponent<span class=\"token punctuation\">,</span> root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    options<span class=\"token punctuation\">.</span>rootComponent <span class=\"token operator\">=</span> rootComponent<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">MyReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/src/components/CounterAndMeow.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../core/MyReact.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">CounterAndMeow</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cat<span class=\"token punctuation\">,</span> setCat<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹! '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">countMeow</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">setCat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'야옹! '</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">countMeow</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">countMeow</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div&gt;</span>\n<span class=\"line\">      &lt;p&gt;고양이가 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 울어서 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;/p&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"increment()\"&gt;증가&lt;/button&gt;</span>\n<span class=\"line\">      &lt;button onclick=\"decrement()\"&gt;감소&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" width=\"100%\" src=\"https://junilhwang.github.io/simple-use-state/10-modularity/index.html\"></iframe>\n<p>코드에 대한 설명은 생략하겠다. 이미 앞선 과정에서 많이 다뤘기 때문이다.</p>\n",
      "date_published": "2021-08-25T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Vanilla Javascript로 가상돔(VirtualDOM) 만들기",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/",
      "summary": "React와 Vue에서 사용되고 있는 가상돔(VirtualDOM)을 Vanilla JS로 직접 만드는 과정에 대해 소개합니다.",
      "content_html": "\n<blockquote>\n<p>본 포스트는 React와 Vue에서 사용되고 있는 가상돔(VirtualDOM) 직접 만들어보는 내용이다.\n그리고 이 포스트를 읽기 전에 <a href=\"/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\">Vanilla Javascript로 웹 컴포넌트 만들기</a>와 <a href=\"/TIL/Javascript/Design/Vanilla-JS-Store/\" target=\"_blank\">Vanilla Javascript로 상태관리 시스템 만들기</a>를 먼저 정독해야 이해하기가 수월하다.</p>\n</blockquote>\n<p>아마 이 글을 읽는 사람들 대부분은 가상돔(VirtualDOM)의 개념에 대해 이해하고 있으리라 생각한다. 그러니까 어떻게 구현하는지 궁금해서 찾아온게 아닐까?</p>\n<p>그래도 <s>너무 귀찮지만</s> 개념을 한 번 짚고 넘어가야 한다.</p>\n<h2>1. 브라우저 로딩 과정</h2>\n<p>VirtualDOM을 이해하기 위해 브라우저의 로딩 과정에 대해 <s>간략하게</s> 알아보자.</p>\n<p></p>\n<p>브라우저는 <code>파싱</code> → <code>스타일</code> → <code>레이아웃</code> → <code>페인트</code> → <code>합성</code> → <code>렌더</code> 등의 과정을 거친다. 그 후에 JS나 CSS를 통해 DOM이나 CSS에 변화가 생길 경우 reflow 혹은 repaint 등의 과정을 수행한다.</p>\n<p>한 번 차례대로 알아보자.</p>\n<h3>(1) 파싱</h3>\n<p>브라우저가 HTML을 파싱하고 읽어들이는 과정이다.</p>\n<h4>DOM Tree</h4>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Critical Path<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Hello <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>web performance<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> students!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>awesome-photo.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>\n<p>HTML을 통해 DOM 객체 트리를 구성한다.</p>\n</li>\n<li>\n<p>위의 코드는 다음과 같이 해석된다.\n<br></p>\n</li>\n<li>\n<p>나중에 시간이 되면 <strong>HTML을 직접 파싱하는 작업</strong>을 해보길 권유한다.</p>\n<ul>\n<li><s>무척 재밌다</s></li>\n<li><s>HTML을 파싱하여 직접 DOM Tree를 구성하는 작업까지 해보면 더 재밌다.</s></li>\n</ul>\n</li>\n</ul>\n<h4>CSSOM Tree</h4>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"css\" data-title=\"css\"><pre><code><span class=\"line\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token selector\">span</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token selector\">p span</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token selector\">img</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>외부/내부의 스타일시트의 CSS를 해석해 CSSOM 트리를 구성한다.</li>\n</ul>\n<p></p>\n<ul>\n<li>body, p, span 등 선택자가 노드로 생성되고 각 노드는 스타일을 참조한다.</li>\n</ul>\n<h3>(2) 스타일</h3>\n<p></p>\n<ul>\n<li>DOM Tree, CSSOM Tree가 생성되면 스타일을 매칭시켜주는 과정을 거쳐 렌더 트리를 구성한다.</li>\n<li>렌더링 트리에는 <strong>페이지를 렌더링하는 데 필요한 노드만 포함</strong>된다.</li>\n<li>참고\n<ul>\n<li><code>visibility: hidden</code>\n<ul>\n<li>요소를 보이지 않게 만든다.</li>\n<li>여전히 레이아웃에서 공간을 차지</li>\n</ul>\n</li>\n<li><code>display: none</code>\n<ul>\n<li>요소가 보이지 않음</li>\n<li>레이아웃에 포함되지도 않음</li>\n<li>렌더링 트리에서 요소를 완전히 제거</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>(3) 레이아웃</h3>\n<ul>\n<li>기기의 뷰포트 내에서 노드의 정확한 위치와 크기를 계산하는 과정</li>\n</ul>\n<p></p>\n<ul>\n<li>경우에 따라 <code>리플로우</code>라고도 함</li>\n<li>레이아웃 단계에서는 노드의 정확한 위치와 크기를 계산한다.</li>\n<li><code>%</code>로 지정된 값은, 픽셀 단위로 측정 및 계산된다.</li>\n</ul>\n<h3>(4) 페인트</h3>\n<ul>\n<li>렌더링 트리의 각 노드를 화면의 실제 픽셀로 변환하는 마지막 단계</li>\n</ul>\n<p></p>\n<ul>\n<li>레이아웃이 완료될 때 브라우저가 'Paint Setup' 및 'Paint' 이벤트를 발생</li>\n<li>렌더링 트리를 화면의 픽셀로 변환</li>\n<li><code>래스터화</code>라고도 한다.</li>\n<li><strong>위치와 관계없는</strong> CSS 속성(<code>background-color</code>, <code>opacity</code>, <code>tranform</code>, <code>box-shadow</code> 등)을 적용한다.</li>\n<li>픽셀로 변환된 결과는 <strong>포토샵의 레이어처럼 생성</strong>되어 개별 레이어로 관리된다.</li>\n</ul>\n<h3>(5) 합성(Compositing)</h3>\n<ul>\n<li>화면에 표시하기 위해 페이지에서 페인트된 부분을 합치는 과정</li>\n<li>쉽게 이야기 하자면, <code>tranform</code> <code>opacity</code> <code>will-change</code> 등을 사용했을 때 합성 과정을 거친다.</li>\n</ul>\n\n<ul>\n<li>지금 당장 깊게 이해할 필요는 없다.</li>\n</ul>\n<h2>2. 성능</h2>\n<h3>(1) Reflow, Repaint</h3>\n<ul>\n<li>앞서 소개한 <code>스타일 → 레이아웃 → 페인트 → 합성</code>을 <strong>렌더링</strong>이라고 한다.</li>\n<li>이 렌더링 과정은 <strong>상황에 따라 반복하여 발생</strong>할 수 있다.</li>\n<li><code>Reflow(=Layout)</code>는 다음과 같은 경우에 발생한다.\n<ul>\n<li>DOM의 추가/삭제</li>\n<li>CSS 속성 변경을 통해 <strong>기하학적(높이/넓이/위치 등)인 변화</strong></li>\n<li>ex) margin, padding, width, height, ...</li>\n</ul>\n</li>\n<li><code>Repaint(=Paint)</code>는 다음과 같은 경우에 발생한다.\n<ul>\n<li>CSS 속성 변경이 <strong>기하학적 변화가 발생하지 않았을 경우</strong></li>\n<li>ex) color, background, transform, box-shadow, ...</li>\n</ul>\n</li>\n</ul>\n<h3>(2) 브라우저에서 제일 성능을 많이 잡아먹는 것</h3>\n<ul>\n<li>브라우저는 <code>렌더링 과정</code>에서 성능을 제일 많이 잡아먹는다.</li>\n<li>특히 <code>Reflow</code>가 순간적으로 많이 발생할 경우 치명적이다.</li>\n</ul>\n\n<h2>3. 가상돔(VirtualDOM)</h2>\n<h3>(1) 가상돔(VirtualDOM) 만들기</h3>\n<p>이전에 다뤘던 포스트들은 <strong>State</strong>와 <strong>Component</strong>에 대해 소개했다.\n이러한 개념이 등장한 이유는 <strong>DOM의 조작에 대한 복잡도</strong>가 날이 갈수록 증가하고 있기 때문이다.\n복잡도가 증가한다는 것은 <strong>DOM의 변화가 기하급수적으로 많이 발생</strong>한다는 것이다.</p>\n<p>그리고 우리는 앞선 내용을 통해서\nDOM에 변경이 있을 경우 <strong>렌더트리를 재생성</strong>하고(모든 요소들의 스타일이 다시 계산됨) <strong>레이아웃</strong>을 만들고 <strong>페인팅을 하는 과정</strong>이 다시 <strong>반복</strong>되는 것을 알 수 있었다.\n즉, <strong>브라우저가 연산을 많이 해야한다</strong>는 이야기이며, 전체적인 프로세스를 <strong>비효율적</strong>으로 만든다는 것이다.</p>\n<p><u>그래서 등장한 개념이 가상돔(VirtualDOM) 이다.</u></p>\n<p>뷰(HTML)에 변화가 있을 때, 구 가상돔(Old Node)과 새 가상돔(New Node)을 비교하여 <strong>변경된 내용만 DOM에 적용</strong>한다.\n이를 통해 <strong>브라우저 내에서 발생하는 연산의 양(정확히는 렌더링 과정)을 줄이면서 성능이 개선</strong>되는 것 이다.</p>\n<p>더 쉽게 말하자면 변화를 모아서 한 번에 처리하는 <strong>일종의 Batch 작업</strong>이다.</p>\n\n<p>그리고 가상돔(VirtualDOM)은 순수 객체로 추상화 되었기 때문에 <strong>브라우저의 종속적이지 않다는 점</strong>도 매력적이다.\n그래서 <u>React Native 처럼 React를 이용하여 네이티브 앱을 만들 수 있는</u> 프레임워크도 만들어졌으며 <u>테스트하기도 용이하다.</u></p>\n<p>가상돔(VirtualDOM)의 개념에 대해 알아봤으니, 이를 <strong>어떻게 사용할 수 있는지</strong> 살펴보자.</p>\n<ul>\n<li>먼저 <code>RealDOM</code>이 다음과 같이 구성되어 있다고 하자.</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">      todo list item 1</span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>삭제<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>completed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">      todo list item 2</span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>삭제<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>추가<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>이에 대한 <code>VirtualDOM</code>은 다음과 같이 구성되어 있을 것이다</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">function</span> <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'app'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'toggle'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token string\">'todo list item 1'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'remove'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삭제'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'completed'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">checked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token string\">'todo list item 2'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'remove'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삭제'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">virtualDom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'submit'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'추가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>보통 <code>virtualDom</code> 대신 <code>h</code> 로 표현한다.</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'app'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'toggle'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token string\">'todo list item 1'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'remove'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삭제'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'completed'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">checked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token string\">'todo list item 2'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'remove'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삭제'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'submit'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'추가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/01-virtual-dom/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/01-virtual-dom/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/01-virtual-dom/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p>코드를 보면 알겠지만, 가상돔(VirtualDOM)은 거창한게 아니라 <strong>DOM의 형태를 본따 만든 객체 덩어리</strong>다.</p>\n<p><u>사실 가상돔(VirtualDOM)만 쓴다고해서 드라마틱한 변화가 생기는 것은 아니다.</u>\n딱 하나 좋은 점은 RealDOM을 사용하지 않기 때문에 테스트 하기가 용이하다는 점 정도이다.\n가령, DOM API는 브라우저에만 존재하는데,\n<u>VirtualDOM의 경우 굳이 브라우저 환경이 아니더라도 사용할 수 있는 것이다.</u></p>\n<h3>(2) JSX</h3>\n<p>앞서 다룬 가상돔(VirtualDOM)의 문제는 바로 <code>가독성</code>이다. 이를 해결하기 위해 <code>jsx</code>라는 것이 등장했다.</p>\n<p>먼저 다음과 같은 가상돔(VirtualDOM)을 돔으로 변환하는 <code>createElement</code> 라는 함수가 있다고 가정해보자. 이를 표현해보면 다음과 같다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'app'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'toggle'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token string\">'todo list item 1'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'remove'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삭제'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'completed'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">checked</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token string\">'todo list item 2'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'remove'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삭제'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'submit'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'추가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>babel의 <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx\" target=\"_blank\" rel=\"noopener noreferrer\">jsx</a>를 이용하면 다음과 같은 문법으로 표현할 수 있다.</p>\n<blockquote>\n<p>jsx를 적용하기 위해선 babel 관련 패키지를 설치해야하며, 실제 프로덕션 코드로 사용하기 위해서는 다시 es5 코드로 변환하는 <code>트랜스파일링(transfilling)</code> 과정이 필요합니다.</p>\n</blockquote>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line highlighted\"><span class=\"token comment\">/** @jsx h */</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">        todo list item 1</span>\n<span class=\"line highlighted\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">삭제</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>completed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">        todo list item 2</span>\n<span class=\"line highlighted\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">삭제</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">추가</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/02-jsx/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/02-jsx/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/02-jsx/src/main.js\" target=\"_blank\" rel=\"noopener noreferrer\">핵심코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/02-jsx/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p>여기에 <code>state</code> 까지 적용해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'app'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> </span>\n<span class=\"line highlighted\">        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> completed <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">          <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'checkbox'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">checked</span><span class=\"token operator\">:</span> completed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">          content<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">          <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'remove'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삭제'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'submit'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'추가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>딱 봐도 가독성이 무척 좋지 않다. 그런데 jsx를 적용하면 다음과 같이 표현할 수 있다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token comment\">/** @jsx h */</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">      </span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">          </span><span class=\"token punctuation\">{</span> content <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">삭제</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line highlighted\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">추가</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/03-with-state/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/03-with-state/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/03-with-state/src/main.js\" target=\"_blank\" rel=\"noopener noreferrer\">핵심코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/03-with-state/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p><code>jsx</code>로 표현하니까 훨씬 보기 좋아졌다.</p>\n<h3>(3) VirtualDOM → RealDOM</h3>\n<p>이제 <strong>VirtualDOM을 RealDOM으로 변환하는 과정</strong>이 필요하다. 즉, <code>createElement</code>의 내용을 채워야한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>먼저 <code>node</code>는 <code>tag</code>일 수도 있고, <code>text</code>일 수도 있다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> node <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">/* text일 때 */</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* tag일 때 */</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>주석을 코드로 채워보면 다음과 같다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> node <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// text node를 만들어서 반환한다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// tag에 대한 element를 만든다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> $el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 정의한 속성을 삽입한다.</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> value<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">          $el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// node의 children virtual dom을 dom으로 변환한다.</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 즉, 모든 VirtualDOM을 순회한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>createElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// $el에 변환된 children dom을 추가한다.</span></span>\n<span class=\"line\">  children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> $el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// 변환된 dom을 반환한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> $el<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 작성된 <code>createElement</code>를 이용하여 VirtaulDOM을 RealDOM으로 만들어보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token comment\">/** @jsx h */</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> node <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> value<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">          $el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> $el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  node<span class=\"token punctuation\">.</span>childre<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>createElement<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">              <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=&gt;</span> $el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> $el<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> realDom <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token punctuation\">{</span> content <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">삭제</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">추가</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>realDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/04-create-element/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/04-create-element/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/04-create-element/src/main.js\" target=\"_blank\" rel=\"noopener noreferrer\">핵심 코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/04-create-element/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<h3>(4) Diff 알고리즘 적용</h3>\n<p>여태까지 기술한 내용의 경우 VirtualDOM을 RealDOM으로 변경하는 과정이고,\n성능상의 이점을 가져오기 위해선 <code>Diff 알고리즘</code> 을 통해서 변경된 속성이나 태그에 대해 업데이트 하는 과정이 필요하다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token comment\">/** @jsx h */</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 구현부 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> oldState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1 update'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 3'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token punctuation\">{</span> content <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">삭제</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">추가</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> oldNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>oldState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> </span>\n<span class=\"line\">  <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token number\">1000</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1초 뒤에 DOM 변경</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>위의 코드에서 <code>updateElement(parennt, newNode, oldNode)</code> 함수의 내용은 쉽게 말해서 <strong>모든 태그를 비교하여 변경된 부분에 대해 수정/추가/삭제</strong> 하는 것이다.</p>\n<p>다시 이 내용을 <strong>분할 정복(Divide and conquer)</strong> 해보자.</p>\n<ol>\n<li>oldNode만 있는 경우(<code>oldNode &amp;&amp; !newNode</code>)\n<ul>\n<li>oldNode를 parent에서 제거한다.</li>\n</ul>\n</li>\n<li>newNode만 있는 경우(<code>!oldNode &amp;&amp; newNode</code>)\n<ul>\n<li>newNode를 parent에 추가한다.</li>\n</ul>\n</li>\n<li>oldNode와 newNode 모두 text 타입일 경우(<code>typeof oldNode === \"string\" &amp;&amp; typeof newNode === \"string\"</code>)\n<ul>\n<li>oldNode의 내용과 newNode의 내용이 다르다면, oldNode의 내용을 newNode의 내용으로 교체한다.</li>\n</ul>\n</li>\n<li>oldNode와 newNode의 태그 이름(type)이 다를 경우(<code>oldNode.type !== newNode.type</code>)\n<ul>\n<li>둘 중에 하나가 <code>String</code>일 경우에도 해당</li>\n<li>oldNode를 제거하고, 해당 위치에 newNode를 추가한다.</li>\n</ul>\n</li>\n<li>oldNode와 newNode의 태그 이름(type)이 똑같을 경우(<code>oldNode.type === newNode.type</code>)\n<ul>\n<li>newNode와 oldNode의 attribute를 비교하여 변경된 부분만 반영한다.\n<ul>\n<li>oldNode의 attribute 중 newNode에 없는 것은 모두 제거한다.</li>\n<li>newNode의 attribute에서 변경된 내용만 oldNode의 attribute에 반영한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><u>newNode와 oldNode의 모든 자식 태그를 순회하며 1 ~ 5의 내용을 반복한다.</u></li>\n</ol>\n<p>위의 내용을 다시 코드로 간략하게 표현해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 1. oldNode만 있는 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newNode <span class=\"token operator\">&amp;&amp;</span> oldNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 2. newNode만 있는 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>oldNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 3. oldNode와 newNode 모두 text 타입일 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newNode <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> oldNode <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 4. oldNode와 newNode의 태그 이름(type)이 다를 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> oldNode<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 5. oldNode와 newNode의 태그 이름(type)이 같을 경우</span></span>\n<span class=\"line\">  <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    parent<span class=\"token punctuation\">.</span>childNode<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    newNode<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span>props</span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// 6. newNode와 oldNode의 모든 자식 태그를 순회하며 1 ~ 5의 내용을 반복한다.</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 5 - newNode와 oldNode의 attribute를 비교하여 변경된 부분만 반영한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> oldProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이제 비어있는 코드를 채워보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 1. oldNode만 있는 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newNode <span class=\"token operator\">&amp;&amp;</span> oldNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>childNode<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 2. newNode만 있는 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>oldNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 3. oldNode와 newNode 모두 text 타입일 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newNode <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> oldNode <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">===</span> oldNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 4. oldNode와 newNode의 태그 이름(type)이 다를 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> oldNode<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 5. oldNode와 newNode의 태그 이름(type)이 같을 경우</span></span>\n<span class=\"line\">  <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    newNode<span class=\"token punctuation\">.</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// 6. newNode와 oldNode의 모든 자식 태그를 순회하며 1 ~ 5의 내용을 반복한다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> maxLength <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">    newNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    oldNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">      parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      newNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      oldNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      i</span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 5 - newNode와 oldNode의 attribute를 비교하여 변경된 부분만 반영한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> oldProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 달라지거나 추가된 Props를 반영</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> newProps<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    target<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 없어진 props를 attribute에서 제거</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> attr <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    target<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>복잡한 로직의 경우 미리 어떤 로직을 만들어야하는지 정의하고 코드를 구성하면 훨씬 구현하기가 쉽다. <s>필자만 그렇게 느끼는건가..?</s></p>\n<p>어쨌든 위의 코드가 정상적으로 작동하는지 확인해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token comment\">/** @jsx h */</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 중간 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">,</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newNode <span class=\"token operator\">&amp;&amp;</span> oldNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>childNode<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>oldNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newNode <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> oldNode <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">===</span> oldNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> oldNode<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    newNode<span class=\"token punctuation\">.</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span>props <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> maxLength <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      newNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      oldNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      i</span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> oldProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> newProps<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    target<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> attr <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    target<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> oldState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1 update'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 3'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>completed<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token punctuation\">{</span> content <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>remove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">삭제</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">추가</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> oldNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>oldState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> </span>\n<span class=\"line\">  <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token number\">1000</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1초 뒤에 DOM 변경</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/05-diff/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/05-diff/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/05-diff/src/main.js\" target=\"_blank\" rel=\"noopener noreferrer\">핵심 코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/05-diff/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p>\n<br><em>개발자 도구에서 확인해보면 변경된 내역에 대해서만 반영 되는 것을 확인할 수 있다.</em></p>\n<h2>4. VirtualDOM에 대한 고찰</h2>\n<h3>(1) VirtualDOM이 꼭 필요한가?</h3>\n<p>Babel이나 Webpack과 함께 VirtualDOM을 사용한다면 사실 특별한 문제는 없다.\n그런데 필자가 작성하고 있는 <code>Vanilla Javascript</code> 의 경우, 문제가 된다.\n특별한 도구 없이 순수한 JS로 작성할 때 <strong>VirtualDOM의 가독성은 무척 좋지 않기 때문</strong>이다.</p>\n<p>그리고 사실 <code>Diff 알고리즘</code>만 잘 작성한다면 성능상의 문제는 없을 것이다.</p>\n<p>그래서 필자는 <strong>RealDOM을 VirtualDOM 처럼 사용해보면 어떨까</strong> 생각해봤다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// text를 node로 변환하는 작업이다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 빈 태그를 하나 만든다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 안에 내용을 채워넣는다.</span></span>\n<span class=\"line\">  el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line\">      &lt;ul&gt;</span>\n<span class=\"line\">        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">          &lt;li class=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span>\n<span class=\"line\">            &lt;input type=\"checkbox\" class=\"toggle\" </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'checked'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> /&gt;</span>\n<span class=\"line\">            </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">            &lt;button class=\"remove\"&gt;삭제&lt;/button&gt;</span>\n<span class=\"line\">          &lt;/li&gt;</span>\n<span class=\"line\">        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;/ul&gt;</span>\n<span class=\"line\">      &lt;form&gt;</span>\n<span class=\"line\">        &lt;input type=\"text\" /&gt;</span>\n<span class=\"line\">        &lt;button type=\"submit\"&gt;추가&lt;/button&gt;</span>\n<span class=\"line\">      &lt;/form&gt;</span>\n<span class=\"line\">    &lt;/div&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// innerHTML에 등장한 첫 번째 태그를 반환한다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>혹은 이런 방법도 가능하다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">  &lt;div id=\"app\"&gt;</span>\n<span class=\"line\">    &lt;ul&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">        &lt;li class=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span>\n<span class=\"line\">          &lt;input type=\"checkbox\" class=\"toggle\" </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'checked'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> /&gt;</span>\n<span class=\"line\">          </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">          &lt;button class=\"remove\"&gt;삭제&lt;/button&gt;</span>\n<span class=\"line\">        &lt;/li&gt;</span>\n<span class=\"line\">      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/ul&gt;</span>\n<span class=\"line\">    &lt;form&gt;</span>\n<span class=\"line\">      &lt;input type=\"text\" /&gt;</span>\n<span class=\"line\">      &lt;button type=\"submit\"&gt;추가&lt;/button&gt;</span>\n<span class=\"line\">    &lt;/form&gt;</span>\n<span class=\"line\">  &lt;/div&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 외부에서 text를 node로 변환할 수 있다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> oldNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">oldNode<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>oldState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> realNode <span class=\"token operator\">=</span> oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 복제</span></span>\n<span class=\"line\">realNode<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 복제된 노드의 내용 변경</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>둘 중에 한 가지 방법을 사용하면 되고,\n중요한 점은 <strong>DOM을 메모리상에만 올려놓고 값을 변경하는 작업을 하는 것</strong>이다.\n이렇게 할 경우 렌더링이 발생하지 않고 메모리에 참조중인 값만 변경하기 때문에 가상돔(VirtualDOM)을 사용하는 것과 별 차이 없다.</p>\n<h3>(2) Diff 알고리즘 수정</h3>\n<p>그리고 이제 RealDOM API를 다루기 때문에 <strong>Diff 알고리즘의 내용을 조금 수정</strong>해야한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 1. oldNode만 있는 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newNode <span class=\"token operator\">&amp;&amp;</span> oldNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 2. newNode만 있는 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>oldNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 3. oldNode와 newNode 모두 text 타입일 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token comment\">// typeof가 아니라 instanceof로 직접 비교한다.</span></span>\n<span class=\"line\">    newNode <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Text</span> <span class=\"token operator\">&amp;&amp;</span> oldNode <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Text</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// Text일 경우 nodeValue로 값 비교가 가능하다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">===</span> newNode<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// nodeValue의 값을 변경해준다.</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">.</span>nodeValue</span>\n<span class=\"line\">    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 4. oldNode와 newNode의 태그 이름이 다를 경우</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">!==</span> oldNode<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>parent<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">\t\t\toldNode<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      parent<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined를 반환할 것이다.</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 5. oldNode와 newNode의 태그 이름(type)이 같을 경우</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 가상돔(VirtualDOM)의 props를 넘기는게 아니기 때문에 oldNode와 newNode를 직접 넘긴다.</span></span>\n<span class=\"line\">  <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// 6. newNode와 oldNode의 모든 자식 태그를 순회하며 1 ~ 5의 내용을 반복한다.</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 일단 childNodes를 배열로 변환해야한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> newChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>newNode<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> oldChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>oldNode<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> maxLength <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> oldChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">,</span> newChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> oldChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldNode<span class=\"token punctuation\">,</span> newNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>oldNode<span class=\"token punctuation\">.</span>attributes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>newNode<span class=\"token punctuation\">.</span>attributes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">// 달라지거나 추가된 Props를 반영</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> newProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t  oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">// 없어진 props를 attribute에서 제거</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> oldProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t  oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>전체 코드를 종합해보면 다음과 같다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newNode <span class=\"token operator\">&amp;&amp;</span> oldNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>oldNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Text</span> <span class=\"token operator\">&amp;&amp;</span> oldNode <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">===</span> newNode<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">.</span>nodeValue</span>\n<span class=\"line\">    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">!==</span> oldNode<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>parent<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    parent<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> newChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>newNode<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> oldChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>oldNode<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> maxLength <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> oldChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>oldNode<span class=\"token punctuation\">,</span> newChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> oldChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateAttributes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldNode<span class=\"token punctuation\">,</span> newNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>newNode<span class=\"token punctuation\">.</span>attributes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>oldNode<span class=\"token punctuation\">.</span>attributes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    oldNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> oldState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 1 update'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'todo list item 3'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">    &lt;div id=\"app\"&gt;</span>\n<span class=\"line highlighted\">      &lt;ul&gt;</span>\n<span class=\"line highlighted\">        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> completed<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">          &lt;li class=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'completed'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span>\n<span class=\"line highlighted\">            &lt;input type=\"checkbox\" class=\"toggle\" </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>completed <span class=\"token operator\">?</span> <span class=\"token string\">'checked'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> /&gt;</span>\n<span class=\"line highlighted\">            </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">            &lt;button class=\"remove\"&gt;삭제&lt;/button&gt;</span>\n<span class=\"line highlighted\">          &lt;/li&gt;</span>\n<span class=\"line highlighted\">        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">      &lt;/ul&gt;</span>\n<span class=\"line highlighted\">      &lt;form&gt;</span>\n<span class=\"line highlighted\">        &lt;input type=\"text\" /&gt;</span>\n<span class=\"line highlighted\">        &lt;button type=\"submit\"&gt;추가&lt;/button&gt;</span>\n<span class=\"line highlighted\">      &lt;/form&gt;</span>\n<span class=\"line highlighted\">    &lt;/div&gt;</span>\n<span class=\"line highlighted\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> oldNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>oldState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> </span>\n<span class=\"line\">  <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>$root<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> oldNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token number\">1000</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1초 뒤에 DOM 변경</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/06-without-vm/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/06-without-vm/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/06-without-vm/src/main.js\" target=\"_blank\" rel=\"noopener noreferrer\">핵심 코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/06-without-vm/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p>이렇게만 사용해도 충분할 것이다.</p>\n<h2>5. Diff 알고리즘 + 컴포넌트</h2>\n<h3>(1) 컴포넌트 구성</h3>\n<p>앞서 작성한 DIFF 알고리즘을 이용해서 <a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 웹 컴포넌트 만들기</a>를 다시 구성해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  $target<span class=\"token punctuation\">;</span> $state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> </span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// 여기가 핵심이다.</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $target <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line\">    <span class=\"token comment\">// 기존 Node를 복제한 후에 새로운 템플릿을 채워넣는다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    newNode<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line\">    <span class=\"token comment\">// DIFF알고리즘을 적용한다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> oldChildNodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>$target<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> newChildNodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>newNode<span class=\"token punctuation\">.</span>childNodes <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>oldChildNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> newChildNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">updateElement</span><span class=\"token punctuation\">(</span>$target<span class=\"token punctuation\">,</span> newChildNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> oldChildNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 이벤트를 등록한다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드를 이용해서 <code>App Component</code>를 만들어보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item2'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;ul&gt;</span>\n<span class=\"line\">        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;/ul&gt;</span>\n<span class=\"line\">      &lt;button&gt;추가&lt;/button&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// button을 클릭할 때 마다 state가 변경되고, 렌더링이 실행된다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>items<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">item</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 컴포넌트 생성</span></span>\n<span class=\"line\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/07-component-with-diff/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/07-component-with-diff/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/07-component-with-diff/src/core/Component.js\" target=\"_blank\" rel=\"noopener noreferrer\">핵심 코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/07-component-with-diff/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<h3>(2) 이벤트 중복등록 해결</h3>\n<p>앞서 작성한 컴포넌트 코드의 경우 실행은 잘 되지만 문제는 <code>렌더링을 할 때 마다 이벤트가 다시 등록</code>된다는 점이다.\n기존에는 <strong>렌더링을 할 때 마다 모든 DOM 객체를 제거 한 다음에 다시 렌더링</strong>했다.\n그래서 Reflow가 무척 많이 발생하는 것이다.</p>\n<p>그런데 <strong>이제 변경된 부분에 대해서만 반영</strong>하기 때문에,\n기존 태그에 등록된 이벤트가 있을 경우 <strong>이벤트를 해제하고 다시 등록하는 과정</strong>이 필요하다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/**생략**/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/**생략**/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 아이템 추가 메소드</span></span>\n<span class=\"line\">  <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>items<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">item</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 이벤트 등록 메소드</span></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// setEvent를 실행할 당시에는 this가 App이 아닌 Component를 가르키게 된다.</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 그래서 setEvent가 실행하는 시점에서 1프레임 이후에 이벤트를 등록/삭제하도록 한다.</span></span>\n<span class=\"line\">    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token comment\">// 이벤트 삭제 후 다시 등록</span></span>\n<span class=\"line\">\t    <span class=\"token keyword\">const</span> $addButton <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t    $addButton<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t    $addButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>주석에도 언급했지만, <code>requestAnimationFrame</code>을 사용하는 이유는 <code>this</code>가 binding 되는 시점 때문이다. 이 부분은 Component에 추상화해서 관리하는 것이 좋다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">/*생략*/</span></span>\n<span class=\"line\">   </span>\n<span class=\"line\">    <span class=\"token comment\">// setEvent에 있던 requestAnimationFrame을 이곳으로 옮김</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*생략*/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*생략*/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*생략*/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token comment\">// requestAnimationFrame 제거</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> $addButton <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    $addButton<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    $addButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-virtual-dom/08-refactoring-component-event/index.html\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/tree/master/08-refactoring-component-event/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/08-refactoring-component-event/src/core/Component.js\" target=\"_blank\" rel=\"noopener noreferrer\">Component</a></li>\n<li><a href=\"https://github.com/JunilHwang/simple-virtual-dom/blob/master/08-refactoring-component-event/src/App.js\" target=\"_blank\" rel=\"noopener noreferrer\">App</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-virtual-dom/08-refactoring-component-event/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p>사실 고도화 하고자 한다면 더욱 더 복잡해질 것이다. 다른 것 보다 이벤트를 관리하는게 무척 복잡하기 때문이다. 그래서 이 포스팅은 여기까지만 다루도록 하겠다.</p>\n<h2>저장소</h2>\n<ul>\n<li>이 아티클에 사용된 모든 코드는 <a href=\"https://github.com/JunilHwang/simple-virtual-dom\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>에서 확인할 수 있습니다.</li>\n</ul>\n<h2>Summary</h2>\n<ul>\n<li>브라우저 렌더링 과정에 대해서 이해해야 한다.</li>\n<li>태그가 변경되면서 기하학적인 변화가 있을 경우에 reflow가 발생하고, reflow는 비용이 매우 크다.</li>\n<li>reflow를 최소화하기 위해서 가상돔(VirtualDOM)(VirtualDOM)이 등장했다.</li>\n<li>VirtualDOM의 가독성이 좋지 않기 때문에 JSX라는 것을 사용한다.</li>\n<li>VirtualDOM 보다 더 중요한 것은 DIFF 알고리즘이다.</li>\n<li>굳이 VirtualDOM을 사용하지 않아도 된다.</li>\n</ul>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://ui.toast.com/fe-guide/ko_PERFORMANCE#%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94\" target=\"_blank\" rel=\"noopener noreferrer\">성능 최적화 | Toast UI</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering?hl=ko\" target=\"_blank\" rel=\"noopener noreferrer\">렌더링 성능 | Google Developers</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko\" target=\"_blank\" rel=\"noopener noreferrer\">객체 모델 생성 | Google Developers</a></li>\n<li><a href=\"https://velopert.com/3236\" target=\"_blank\" rel=\"noopener noreferrer\">[번역] 리액트에 대해서 그 누구도 제대로 설명하기 어려운 것 – 왜 VirtualDOM 인가?</a></li>\n<li><a href=\"https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060\" target=\"_blank\" rel=\"noopener noreferrer\">How to write your own VirtualDOM</a></li>\n</ul>\n",
      "date_published": "2021-08-18T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Vanilla Javascript로 상태관리 시스템 만들기",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Store/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Store/",
      "summary": "Vanilla Javascript로 Vuex와 Redux 같은 상태관리 시스템을 만드는 방법에 대해 소개합니다.",
      "content_html": "\n<blockquote>\n<p>본 포스트는 Vuex나 Redux 같은 상태관리 프레임워크를 직접 만들어보는 내용이다.\n그리고 이 포스트를 읽기 전에 <a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 웹 컴포넌트 만들기</a>를 먼저 정독해야 이해하기가 수월하다.</p>\n</blockquote>\n<h2>1. 중앙 집중식 상태관리</h2>\n<p><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\" rel=\"noopener noreferrer\">이전에 작성했던 포스트</a>에도 언급했지만, 현대적인 프론트엔드 개발에서 제일 중요한 것은 바로 <code>상태관리</code> 라고 해도 무방하다. Vue나 React 같은 프론트엔드 프레임워크의 주된 목적 중 하나가 <strong>상태를 기반으로 DOM을 렌더링 하는 것</strong>이기 때문이다.</p>\n<p>학습을 위해 TodoList를 만드는 수준에서는 사실 상태관리 프레임워크가 필요하진 않다. 다양한 종류의 컴포넌트가 있는 것도 아니고, 컴포넌트의 Depth도 낮기 때문이다.</p>\n<p>그런데 엔터프라이즈급 어플리케이션을 만든다고 생각하면 이야기가 달라진다. 상태관리가 복잡해지고 컴포넌트의 Depth가 무척 깊어지기 때문이다.</p>\n<p></p>\n<p>이 때 <code>중앙 집중식 저장소 역할을 하며 예측 가능한 방식으로 상태를 변경</code> 할 수 있다면 편하지 않을까? 사실 이에 대한 자료는 이미 시중에 많이 있기 때문에 본 포스트에서는 자세하게 다루진 않겠다.</p>\n<p>대신 다음 아티클을 참고하면 될 것이다.</p>\n<ul>\n<li><a href=\"https://vuex.vuejs.org/kr/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex가 무엇인가요?</a></li>\n<li><a href=\"https://ko.redux.js.org/introduction/getting-started/\" target=\"_blank\" rel=\"noopener noreferrer\">Redux 시작하기</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/vuejs/vuex-start/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex 시작하기</a></li>\n</ul>\n<h2>2. Observer Pattern에 대해 이해하기</h2>\n<p><code>중앙 집중식 저장소</code>를 간단하게 <code>Store</code> 라고 표현해보자. <code>Store</code>를 구현하기 위해 먼저 <code>저장소(Store)</code>와 <code>컴포넌트(Component)</code>의 관계를 잘 살펴봐야 한다.</p>\n<ul>\n<li>Store는 여러 개의 컴포넌트에서 사용될 수 있다..</li>\n<li>Store가 변경될 때, Store가 사용되고 있는 Component도 변경되어야 한다.</li>\n</ul>\n<p>이를 코드로 표현해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token comment\">// Store를 생성한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 컴포넌트를 생성한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> component1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> component2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 컴포넌트가 store를 구독한다.</span></span>\n<span class=\"line\">component1<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a + b = ${store.state.a + store.state.b}</span></span>\n<span class=\"line\">component2<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a * b = ${store.state.a * store.state.b}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// store의 state를 변경한다.</span></span>\n<span class=\"line\">store<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// store가 변경되었음을 알린다.</span></span>\n<span class=\"line\">store<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>처음에 <code>component1</code>은 <code>a + b = 30</code>을 출력하고, <code>component2</code>는  <code>a * b = 200</code> 을 출력할 것이다.</li>\n<li>store의 값이 변경된 다음에는 각각 <code>a + b = 300</code> <code>a * b = 20000</code> 을 출력할 것이다</li>\n</ul>\n<p>이러한 형태로 코드를 작성하는 것을 <code>Observer Pattern</code> 이라고 한다.</p>\n<ul>\n<li>Observer pattern은 객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여 <code>상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴</code>이다.</li>\n<li>주로 <code>분산 이벤트 핸들링 시스템</code>을 구현하는 데 사용된다.</li>\n<li><code>발행/구독 모델</code>로 알려져 있기도 한다.</li>\n</ul>\n<p>대충 어떤 느낌인지만 감이 오는가? <s>이보다 더 자세한 설명이 필요하다면 구글링을 해보자!</s></p>\n<p>아마 한 번에 이해하기는 어려울 것이다. 우리는 개발자이므로 조금 더 구체적인 코드를 통해 이해해보자.</p>\n<h3>(1) Publish</h3>\n<p>제일 먼저 <code>발행기관(Publish)</code>를 만들어보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> 발행기관 <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  #observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">내부에_변화가_생김</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">구독자에게_알림</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">구독자_등록</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">구독자에게_알림</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>음.. 어색하지만 일단 최대한의 이해를 돕기 위해 한글로 메소드를 작성했는데, 무척 어색하하다 😅</li>\n<li>메소드의 내용 그대로 이해하면 될 것이다.</li>\n<li>위에서 핵심적인 내용은 <code>내부에 변화가 생길 경우 구독자에게 알리는 것</code> 이다.</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token function\">내부에_변화가_생김</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">구독자에게_알림</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>(2) Subscriber</h3>\n<p>이제 <code>구독자(Subscriber)</code>를 만들어보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> 구독자 <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #fn<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">발행기관에_변화가_생길_때_하는_일</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#fn <span class=\"token operator\">=</span> 발행기관에_변화가_생길_때_하는_일<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">구독</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">publisher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    publisher<span class=\"token punctuation\">.</span><span class=\"token function\">구독자_등록</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>구독자는 <code>발행기관에서 변화가 생겼을 때 하는 일</code>을 정의해야 한다.</li>\n<li>그리고 <code>발행기관을 구독</code> 한다.</li>\n</ul>\n<h3>(3) 적용하기</h3>\n<p>이제 작성된 코드를 사용해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> 상태 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">발행기관</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> 덧셈계산기 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">구독자</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> 상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> 곱셈계산기 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">구독자</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a * b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a <span class=\"token operator\">*</span> 상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">덧셈계산기<span class=\"token punctuation\">.</span><span class=\"token function\">구독</span><span class=\"token punctuation\">(</span>상태<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">곱셈계산기<span class=\"token punctuation\">.</span><span class=\"token function\">구독</span><span class=\"token punctuation\">(</span>상태<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">상태<span class=\"token punctuation\">.</span><span class=\"token function\">구독자에게_알림</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// a + b = 30</span></span>\n<span class=\"line\"><span class=\"token comment\">// a * b = 200</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">상태<span class=\"token punctuation\">.</span><span class=\"token function\">내부에_변화가_생김</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// a + b = 300</span></span>\n<span class=\"line\"><span class=\"token comment\">// a * b = 20000</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이에 대한 결과는 다음과 같다.</p>\n<p></p>\n<p>그런데 이 코드의 문제점이 있다.</p>\n<ul>\n<li>지금 작성한 코드는 쉽게 말해서 <code>2명의 구독자</code>가 <code>1개의 신문사(혹은 잡지)</code>를 구독하고 있는 상황이다.</li>\n<li>그런데 만약에 <code>10명의 구독자</code>가 <code>100개의 신문사(혹은 잡지)</code>를 구독한다고 했을 경우, 구독 관련 코드가 기하급수적으로 늘어날 것이다.</li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/blob/master/01-pubsub/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">전체 코드 보기</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/01-pubsub/\" target=\"_blank\" rel=\"noopener noreferrer\">결과 확인</a></li>\n</ul>\n</div>\n<h2>3. 리팩토링</h2>\n<p>앞서 작성한 코드를 다시 단순하게 <code>observable</code>과 <code>observe</code>라는 관계로 만들어보자.</p>\n<ul>\n<li>observable은 observe 에서 사용된다.</li>\n<li>observable에 변화가 생기면, observe에 등록된 함수가 실행된다.</li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> 상태 <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a * b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a - b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">상태<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">상태<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드는 다음과 같은 결과를 보일 것이다.</p>\n<p></p>\n<h3>(1) Object.defineProperty 이해하기</h3>\n<p>이를 구현하기 위해선 먼저 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener noreferrer\">Object.defineProperty</a> 라는 API에 대해 알아야 한다.</p>\n<p>MDN 문서에 나와있는 설명은 다음과 같다.</p>\n<blockquote>\n<p>객체에 직접 새로운 속성을 정의하거나 이미 존재하는 속성을 수정한 후, 그 객체를 반환합니다.</p>\n</blockquote>\n<p>사실 이런 설명을 보면 이해되지 않는 경우가 대부분일 것이다. 그래서 구구절절 늘어놓기 보단, 역시 코드로 이해하는 게 더 빠를 것이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">현재 a의 값은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    a <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">변경된 a의 값은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">state.a = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/blob/master/02-object-define-property/01-example.html\" target=\"_blank\" rel=\"noopener noreferrer\">코드 확인</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/02-object-define-property/01-example.html\" target=\"_blank\" rel=\"noopener noreferrer\">결과 확인</a></li>\n</ul>\n</div>\n<ul>\n<li><code>Object.defineProperty(object, prop, descriptor)</code>\n<ul>\n<li><code>object</code> 속성을 정의할 객체</li>\n<li><code>prop</code> 새로 정의하거나 수정하려는 속성의 이름 또는 Symbol</li>\n<li><code>descriptor</code> 새로 정의하거나 수정하려는 속성을 기술하는 객체</li>\n</ul>\n</li>\n</ul>\n<p>이렇게 <code>Object.defineProperty(object, prop, descriptor)</code> 는 객체에 어떤 변화가 생기거나 객체를 참조할 경우 우리가 원하는 행위를 중간에 집어넣을 수도 있다.</p>\n<h3>(2) 여러 개의 속성 관리하기</h3>\n<p>여러 개의 속성이 있을 때는 다음과 같이 표현할 수 있다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> stateKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> stateKeys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">현재 state.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">의 값은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">변경된 state.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">의 값은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>결과는 다음과 같다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/blob/master/02-object-define-property/02-multiple-key.html\" target=\"_blank\" rel=\"noopener noreferrer\">코드 확인</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/02-object-define-property/02-multiple-key.html\" target=\"_blank\" rel=\"noopener noreferrer\">결과 확인</a></li>\n</ul>\n</div>\n<p>여기서 <code>console.log</code> 부분을 <code>observer</code> 함수로 바꿔보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> stateKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> stateKeys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/blob/master/02-object-define-property/03-multiple-key-refactor.html\" target=\"_blank\" rel=\"noopener noreferrer\">코드 확인</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/02-object-define-property/03-multiple-key-refactor.html\" target=\"_blank\" rel=\"noopener noreferrer\">결과 확인</a></li>\n</ul>\n</div>\n<h3>(3) 여러 개의 Observer 관리하기</h3>\n<p>이제 여러 개의 observer를 만들어서 관리해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">let</span> currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> stateKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> stateKeys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">덧셈_계산기</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> 덧셈_계산기<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">뺄셈_계산기</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> 뺄셈_계산기<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a - b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">-</span> state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">덧셈_계산기</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">뺄셈_계산기</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 코드에서 핵심은, 함수가 실행될 때 <code>currentObsever가 실행중인 함수를 참조하도록 만드는 것</code> 이다.</p>\n<ul>\n<li><code>state</code>의 <code>property</code>가 <strong>사용</strong>될 때(=<code>get</code> 메소드가 실행될 때) currentObserver를 observers에 등록한다.</li>\n<li><code>state</code>의 <code>property</code>가 <strong>변경</strong>될 때(=<code>set</code> 메소드가 실행될 때) observers에 등록된 모든 observer를 실행한다.</li>\n</ul>\n<p>결과는 다음과 같다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/blob/master/02-object-define-property/04-multiple-observer.html\" target=\"_blank\" rel=\"noopener noreferrer\">코드 확인</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/02-object-define-property/04-multiple-observer.html\" target=\"_blank\" rel=\"noopener noreferrer\">결과 확인</a></li>\n</ul>\n</div>\n<h3>(4) 함수화</h3>\n<p>앞서 작성한 코드를 재사용하기 위해서 <code>observe</code>와 <code>observable</code> 함수로 만들어야 한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">let</span> currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observe</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>다음과 같이 사용할 수 있다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> 상태 <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a * b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a - b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>상태<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">상태<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">상태<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>결과는 다음과 같다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/blob/master/02-object-define-property/05-functionalized.html\" target=\"_blank\" rel=\"noopener noreferrer\">코드 확인</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/02-object-define-property/05-functionalized.html\" target=\"_blank\" rel=\"noopener noreferrer\">결과 확인</a></li>\n</ul>\n</div>\n<h2>4. DOM에 적용하기</h2>\n<p>이제 DOM(Component)에 직접 적용해보자.</p>\n<h3>(1) 일단 구현해보기</h3>\n<p>일단 구조적인 부분은 생각하지말고, 기능만 구현해보자.</p>\n<ul>\n<li>\n<p><code>index.html</code></p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Store를 적용해보자<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><code>src/main.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable<span class=\"token punctuation\">,</span> observe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./core/observer.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;p&gt;a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p&gt;</span>\n<span class=\"line\">    &lt;input id=\"stateA\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" /&gt;</span>\n<span class=\"line\">    &lt;input id=\"stateB\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" /&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><code>src/core/observer.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">let</span> currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observe</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p>input의 값을 변경할 경우 바로 rendering이 실행될 것이다.</p>\n<iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-store/03-with-component/01-just-implement/\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/tree/master/03-with-component/01-just-implement/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/03-with-component/01-just-implement/\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<h3>(2) Component로 추상화하기</h3>\n<ul>\n<li>\n<p>먼저 <a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/#_2-%E1%84%8E%E1%85%AE%E1%84%89%E1%85%A1%E1%86%BC%E1%84%92%E1%85%AA\" target=\"_blank\" rel=\"noopener noreferrer\">웹 컴포넌트 만들기</a>의 코드를 참고하여 Component 코드를 구성해보자.</p>\n</li>\n<li>\n<p><code>src/core/Component.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable<span class=\"token punctuation\">,</span> observe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./observer.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  state<span class=\"token punctuation\">;</span> props<span class=\"token punctuation\">;</span> $el<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$el<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> $el<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// state를 관찰한다.</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// state가 변경될 경우, 함수가 실행된다.</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>그 다음 <code>src/App.js</code> 에 <code>Component</code>를 적용해보자.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./core/Component.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">initState</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;input id=\"stateA\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span>\n<span class=\"line\">      &lt;input id=\"stateB\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span>\n<span class=\"line\">      &lt;p&gt;a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">+</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $el<span class=\"token punctuation\">,</span> state <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>그 다음 <code>src/main.js</code> 에서 <code>App</code>을 불러와서 실행시켜야한다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-store/03-with-component/02-component/\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/tree/master/03-with-component/02-component/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/03-with-component/02-component/\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p>결과물은 똑같다. 다만 구조화를 했을 뿐!</p>\n<h3>(3) 고민해보기</h3>\n<p>사실 이렇게 Component 내부에서 관리되는 State에 observable을 씌워 사용할 경우 만들 경우 <code>setState</code>를 사용하는 방식이랑 크게 다르지 않다고 느낄 수 있다.\n<strong>setState 또한 state가 변경될 때 마다 render를 실행하는 방식</strong>이기 때문이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>observer</code>는 이렇게 컴포넌트의 상태에 사용하기 보단 <code>중앙 집중식 저장소</code> 를 관리할때 매우 효과적이다.</p>\n<h3>(4) 컴포넌트 외부에 상태를 만들어주기</h3>\n<p>Vuex나 Redux 같은 프레임워크를 사용하기 이전에, 일단 <strong>매우 간단하게 Store를 만들어서 관리</strong>해보자.</p>\n<ul>\n<li><code>src/store.js</code></li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./core/observer.js'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code>src/App.js</code></li>\n</ul>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./core/Component.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  &lt;input id=\"stateA\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputB</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  &lt;input id=\"stateB\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Calculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line highlighted\">  &lt;p&gt;a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p&gt;</span>\n<span class=\"line\"></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">InputA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">InputB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $el<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>여기서 InputA, InputB, Calculator를 무척 단순하게 구현했는데, 이게 전부 복잡한 컴포넌트라고 생각해보자.\n<strong>세 개의 컴포넌트가 store를 참조</strong>하고 있고, <strong>store가 변경되었을 때 컴포넌트가 자동으로 렌더링</strong> 되는 형태로 만든 것이다.</li>\n<li>여기에 <strong>Flux 패턴</strong>을 붙이면 <strong>Redux</strong>나 <strong>Vuex</strong>가 되는 것이다.</li>\n</ul>\n<iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-store/03-with-component/03-store/\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/tree/master/03-with-component/03-store/\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/03-with-component/03-store/\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<h2>5. Flux Pattern</h2>\n<p>앞서 Observer Pattern에 대해 알아본 것 처럼, Vuex나 Redux에서 사용되는 Flux Pattern에 대해서 알아보자.</p>\n<p></p>\n<ul>\n<li>Flux의 가장 큰 특징은 <strong>단방향 데이터 흐름</strong>이다.</li>\n<li>데이터 흐름은 다음과 같다\n<ul>\n<li>Dispatcher → Store</li>\n<li>Store → View</li>\n<li>View → Action</li>\n<li>Action → Dispatcher</li>\n</ul>\n</li>\n<li>이런 단방향 데이터 흐름은 데이터 변화를 휠씬 예측하기 쉽게 만든다.</li>\n</ul>\n<p>Vue는 이를 조금 변형하여 다음과 같은 형태로 사용한다.</p>\n<p></p>\n<ul>\n<li>actions, mutations, state를 묶어서 store라고 보면 된다.</li>\n<li>state를 변화시킬 수 있는 것은 오직 mutations다.</li>\n<li>actions는 backend api를 가쳐온 다음에 mutations를 이용하여 데이터를 변경한다.</li>\n<li>state가 변경 되면, state를 사용 중인 컴포넌트를 업데이트한다.</li>\n</ul>\n<h2>6. Vuex 같은 Store 만들기</h2>\n<p>일단 vuex를 만들기 이전에, vuex가 어떤 interface를 가지고 있는지 살펴보자.\n<a href=\"https://vuex.vuejs.org/kr/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a>에서 보여주고 있는 코드는 다음과 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>state</code>가 있고, state를 변경시킬 수 있는 <code>mutations</code>가 존재하는 것을 확인할 수 있다.</p>\n<p>그리고 이렇게 선언된 store는 다음과 같이 사용된다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -&gt; 1</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>commit</code>으로 <code>mutations</code>에 선언된 메소드를 실행하는 구조이다.</p>\n<p>이러한 형태로 사용할 수 있도록 한 번 <code>Store</code> 클래스를 구성해보자.</p>\n<ul>\n<li>\n<p><code>src/core/Store.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./observer.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  #state<span class=\"token punctuation\">;</span> #mutations<span class=\"token punctuation\">;</span> #actions<span class=\"token punctuation\">;</span> <span class=\"token comment\">// private으로 지정하여 외부에서는 접근이 안 되도록 한다.</span></span>\n<span class=\"line\">  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> mutations<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#mutations <span class=\"token operator\">=</span> mutations<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#actions <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line highlighted\">    <span class=\"token comment\">// state를 직접적으로 수정하지 못하도록 다음과 같이 정의한다.</span></span>\n<span class=\"line highlighted\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">        key<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">commit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token comment\">// state는 오직 commit을 통해서 수정 할 수 있다.</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#mutations<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">dispatch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">/**</span>\n<span class=\"line\">     * 예제에서 dispatch는 사용되고 있진 않진 않지만 아마 vuex를 써본 사람이라면 익숙할 것이다.</span>\n<span class=\"line\">     * @see {https://vuex.vuejs.org/kr/api/#actions}</span>\n<span class=\"line\">     */</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#actions<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#state<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">commit</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">dispatch</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code>dispatch</code>에서 실행해주는 <code>action</code>의 첫 번째 인자인 <code>context</code> 의 요소는 <a href=\"https://vuex.vuejs.org/kr/api/#actions\" target=\"_blank\" rel=\"noopener noreferrer\">이 문서</a>에서 확인할 수 있다.</li>\n<li><code>store.state</code>는 Object.defineProperty로 get만 사용할 수 있도록 선언했다. 즉, 직접적으로 할당할 수 없는 형태이다.</li>\n<li><code>store.state</code>의 값을 변경하고 싶다면 무조건 <code>commit</code> method를 사용해야 한다.</li>\n</ul>\n</li>\n<li>\n<p><code>src/store.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./core/Store.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// state의 값은 오직 mutations를 통해서 변경할 수 있다.</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token constant\">SET_A</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token constant\">SET_B</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// actions도 있으면 좋겠지만.. 딱히 지금 쓸만한 API가 없다.</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><code>src/App.js</code></p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./core/Component.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;input id=\"stateA\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputB</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;input id=\"stateB\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Calculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p&gt;a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">InputA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">InputB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $el<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token comment\">// commit을 통해서 값을 변경시킨다.</span></span>\n<span class=\"line highlighted\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SET_A'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token comment\">// commit을 통해서 값을 변경시킨다.</span></span>\n<span class=\"line highlighted\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SET_B'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p>이렇게 vuex를 정의해 사용할 수 있다. 원리만 알고 있다면 크게 어렵지 않을 것이다.</p>\n<iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-store/04-simple-vuex/\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/tree/master/04-simple-vuex\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/04-simple-vuex/\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<h2>7. Redux 만들기</h2>\n<p>앞선 과정 처럼 Redux를 만들기 전에, Redux가 사용되는 형태를 일단 살펴보자.\n<a href=\"https://ko.redux.js.org/introduction/getting-started/\" target=\"_blank\" rel=\"noopener noreferrer\">공식 문서</a>에 나와있는 코드이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\"> * 이것이 (state, action) =&gt; state 형태의 순수 함수인 리듀서입니다.</span>\n<span class=\"line\"> * 리듀서는 액션이 어떻게 상태를 다음 상태로 변경하는지 서술합니다.</span>\n<span class=\"line\"> *</span>\n<span class=\"line\"> * 상태의 모양은 당신 마음대로입니다: 기본형(primitive)일수도, 배열일수도, 객체일수도,</span>\n<span class=\"line\"> * 심지어 Immutable.js 자료구조일수도 있습니다.  오직 중요한 점은 상태 객체를 변경해서는 안되며,</span>\n<span class=\"line\"> * 상태가 바뀐다면 새로운 객체를 반환해야 한다는 것입니다.</span>\n<span class=\"line\"> *</span>\n<span class=\"line\"> * 이 예제에서 우리는 `switch` 구문과 문자열을 썼지만,</span>\n<span class=\"line\"> * 여러분의 프로젝트에 맞게</span>\n<span class=\"line\"> * (함수 맵 같은) 다른 컨벤션을 따르셔도 좋습니다.</span>\n<span class=\"line\"> */</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span></span>\n<span class=\"line\">    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> state</span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 앱의 상태를 보관하는 Redux 저장소를 만듭니다.</span></span>\n<span class=\"line\"><span class=\"token comment\">// API로는 { subscribe, dispatch, getState }가 있습니다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// subscribe()를 이용해 상태 변화에 따라 UI가 변경되게 할 수 있습니다.</span></span>\n<span class=\"line\"><span class=\"token comment\">// 보통은 subscribe()를 직접 사용하기보다는 뷰 바인딩 라이브러리(예를 들어 React Redux)를 사용합니다.</span></span>\n<span class=\"line\"><span class=\"token comment\">// 하지만 현재 상태를 localStorage에 영속적으로 저장할 때도 편리합니다.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 내부 상태를 변경하는 유일한 방법은 액션을 보내는 것뿐입니다.</span></span>\n<span class=\"line\"><span class=\"token comment\">// 액션은 직렬화할수도, 로깅할수도, 저장할수도 있으며 나중에 재실행할수도 있습니다.</span></span>\n<span class=\"line\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'INCREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 1</span></span>\n<span class=\"line\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'INCREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 2</span></span>\n<span class=\"line\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'DECREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 1</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>사실 redux는 <code>불변성</code> 이라는 개념을 사용하고 있기 때문에 <code>observable</code>과 <code>observe</code>를 이용하는 것이 부자연스러울 수 있다.</p>\n</div>\n<p>코드를 살펴보니 <code>createStore</code>가 <code>subscribe, dispatch, getState</code> 등의 메소드를 가진 객체를 반환하는 것을 알 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 내부 구현 */</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> subscribe<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 interface만 알고 있어도 구현은 어렵지 않다. 한 번 구현해보자.</p>\n<ul>\n<li><code>src/core/Store.js</code></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./observer.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// reducer가 실행될 때 반환하는 객체(state)를 observable로 만들어야 한다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// getState가 실제 state를 반환하는 것이 아니라 frozenState를 반환하도록 만들어야 한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> frozenState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>frozenState<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// get만 정의하여 set을 하지 못하도록 만드는 것이다.</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// dispatch로만 state의 값을 변경할 수 있다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token comment\">// state의 key가 아닐 경우 변경을 생략한다.</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> frozenState<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// subscribe는 observe로 대체한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> dispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이제 createStore를 이용하여 store를 만들어보자.</p>\n<ul>\n<li><code>src/store.js</code></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./core/Store.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 초기 state의 값을 정의해준다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// dispatch에서 사용될 type들을 정의해준다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SET_A</span> <span class=\"token operator\">=</span> <span class=\"token string\">'SET_A'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SET_B</span> <span class=\"token operator\">=</span> <span class=\"token string\">'SET_B'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// reducer를 정의하여 store에 넘겨준다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'SET_A'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'SET_B'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// reducer에서 사용될 action을 정의해준다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">SET_A</span><span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setB</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">SET_B</span><span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이제 App에서 Store를 사용하도록 작업해줘야 한다.</p>\n<ul>\n<li><code>src/App.js</code></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./core/Component.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>setA<span class=\"token punctuation\">,</span> setB<span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;input id=\"stateA\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InputB</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;input id=\"stateB\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" size=\"5\" /&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Calculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p&gt;a + b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">InputA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">InputB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $el<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token comment\">// commit을 통해서 값을 변경시킨다.</span></span>\n<span class=\"line highlighted\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setA</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    $el<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#stateB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token comment\">// commit을 통해서 값을 변경시킨다.</span></span>\n<span class=\"line highlighted\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setB</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-store/05-simple-redux/\" width=\"100%\"></iframe>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/tree/master/05-simple-redux\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/05-simple-redux/\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<p>이렇게 간단한 <code>redux</code>를 만들 수 있다.</p>\n<h2>8. 심화학습</h2>\n<p><code>observable</code>과 <code>observer</code>를 사용할 때 고려해야 할 것들이 몇 가지 더 있다.</p>\n<h3>(1) 최적화</h3>\n<p>상태가 변경되어 render를 해야하는데, 만약에 변경된 상태가 이전 상태와 값이 똑같을 경우에는 어떻게 해야할까?</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이럴 때는 다시 렌더링 되지 않도록 방어로직을 작성하면 된다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>숫자, 문자열, null, undefined 등의 원시타입은 <code>_value === value</code> 처럼 검사하면 된다.</li>\n<li>배열이나 객체의 경우 <code>JSON.stringify(_value) === JSON.stringify(value)</code>를 사용하면 된다.</li>\n<li>Set, Map, WeekSet, WeekMap 같은 것들은 <code>JSON.stringify</code>로 변환되지 않는다. 이런 경우에는 추가적인 검사 로직이 필요하다.\n<ul>\n<li>시간이 된다면 직접 구현해보길!</li>\n<li>내용이 너무 길어지고 있어서 다시 구현하기는 귀찮다..</li>\n</ul>\n</li>\n</ul>\n<p>그리고 상태가 연속으로 변경되는 경우에는 어떻게 해야 좋을까?</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>단순하게 console.log를 찍는 경우라면 상관없지만, 브라우저에 DOM으로 렌더링 되는 경우라면 이야기가 다르다.\n이럴 때는 <code>requestAnimationFrame</code>과 <code>debounce</code>를 이용하여 한 프레임에 한 번만 렌더링 되도록 만들어줘야한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">requestAnimationFrame</p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 문서</a>에 나와있는 내용은 다음과 같다.</p>\n<ul>\n<li>브라우저에게 수행하기를 원하는 애니메이션을 알리고 다음 리페인트가 진행되기 전에 해당 애니메이션을 업데이트하는 함수를 호출하게 합니다.\n이 메소드는 <strong>리페인트 이전에 실행할 콜백</strong>을 인자로 받습니다.</li>\n<li>화면에 새로운 애니메이션을 업데이트할 준비가 될때마다 이 메소드를 호출하는것이 좋습니다.\n<strong>콜백의 수는 보통 1초에 60회</strong>지만,\n일반적으로 대부분의 브라우저에서는 W3C 권장사항에 따라 그 수가 <strong>디스플레이 주사율과 일치</strong>하게됩니다.</li>\n</ul>\n<p>쉽게 말해서 requestAnimationFrame은 1프레임에 1회 호출된다. 보통 <code>1초에 60프레임</code>이고, 1프레임은 약 <code>16ms</code> 정도 된다.</p>\n</div>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounceFrame</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> currentCallback <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>currentCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 등록된 callback이 있을 경우 취소한다.</span></span>\n<span class=\"line\">    currentCallback <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1프레임 뒤에 실행되도록 한다.</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이것만 실행된다.</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>이렇게 구성한 debounceFrame을 <code>observe</code>에 씌워주면 된다. 그런데 debounce된 함수를 넘겨야해서, 즉시실행 부분은 제거해야줘야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounceFrame</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> currentCallback <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>currentCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    currentCallback <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observe</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> <span class=\"token function\">debounceFrame</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/tree/master/06-optimization/src/core/observer.js\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/06-optimization/\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<h3>(2) Proxy</h3>\n<p>사실 <code>Object.defineProperty</code>는 <code>IE</code>를 지원하기 위해 사용하는 <code>API</code>이다.\n최신 브라우저에서는 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener noreferrer\">Proxy</a>를 이용한다면 더 쉽게 <code>Observable</code>을 만들 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> observerMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      observerMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> observerMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span> observerMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      target<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      observerMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>맥락은 크게 다르지 않지만, Proxy를 사용하는 코드가 더 짧은 것을 알 수 있다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/simple-store/tree/master/07-proxy/src/core/observer.js\" target=\"_blank\" rel=\"noopener noreferrer\">전체코드</a></li>\n<li><a href=\"https://junilhwang.github.io/simple-store/07-proxy/\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저에서 확인</a></li>\n</ul>\n</div>\n<h2>저장소</h2>\n<ul>\n<li>이 아티클에 사용된 모든 코드는 <a href=\"https://github.com/JunilHwang/simple-store\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>에서 확인할 수 있습니다.</li>\n</ul>\n<h2>Summary</h2>\n<ul>\n<li>컴포넌트가 많아질수록 상태를 관리하기가 힘들어진다.</li>\n<li>이 때 컴포넌트에 종속적이지 않은 중앙집중형저장소(Store)를 만들어서 사용하면 편리하다.</li>\n<li>상태관리 시스템을 이해하기 위해선 <code>Observer Pattern</code>과 <code>Flux Pattern</code> 을 먼저 이해해야 한다.</li>\n<li><code>Observer Pattern</code>을 그대로 사용할 경우 매우 번거롭다. 이 때 <code>Object.defineProperty</code> 를 이용하여 자동화할 수 있다.\n<ul>\n<li>포스트에서는 다루지 않았지만 최신 브라우저에서는 Proxy를 이용해도 무방하다.</li>\n</ul>\n</li>\n</ul>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://beomy.tistory.com/44\" target=\"_blank\" rel=\"noopener noreferrer\">[디자인패턴] Flux, MVC 비교</a></li>\n<li><a href=\"https://meetup.toast.com/posts/188\" target=\"_blank\" rel=\"noopener noreferrer\">0.7KB로 Vue와 같은 반응형 시스템 만들기</a></li>\n<li><a href=\"https://vuex.vuejs.org/kr/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex 공식문서</a></li>\n</ul>\n",
      "date_published": "2021-07-26T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Vanilla Javascript로 웹 컴포넌트 만들기",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Component/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Design/Vanilla-JS-Component/",
      "summary": "Vanilla Javascript로 간단한 웹 컴포넌트를 만드는 과정에 대해 소개합니다.",
      "content_html": "\n<p>9월에 <a href=\"https://edu.nextstep.camp/\" target=\"_blank\" rel=\"noopener noreferrer\">넥스트 스텝</a>에서 진행하는 <a href=\"https://edu.nextstep.camp/s/tUzCRWul\" target=\"_blank\" rel=\"noopener noreferrer\">블랙커피 스터디</a>에 참여했다.\n이 포스트는 스터디 기간동안 계속 고민하며 만들었던 컴포넌트를 차근 차근 구현해보는 내용이다.</p>\n<h2>1. 컴포넌트와 상태관리</h2>\n<h3>(1) 상태관리의 탄생</h3>\n<p>필자가 웹 개발을 시작한지 얼마 되지 않았을 때(2012년도)에는 javascript를 공부할 때 제일 중요한게 <a href=\"https://jquery.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jQuery</a> 였다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">jQuery</p>\n<ul>\n<li>jQuery는 빠르고 작고 기능이 풍부한 JavaScript 라이브러리이다.</li>\n<li>jQuery API는 크로스 브라우징을 지원한다.</li>\n<li>DOM, Event, Animation 및 Ajax와 같은 작업을 훨씬 간단하게 만든다.</li>\n</ul>\n</div>\n<p>약 3년 동안 <code>jQuery</code>만 주구장창 사용하면서 느낀 제일 큰 장점은 <code>DOM API</code>라고 생각한다.\n<code>jQuery</code>는 <code>DOM</code>을 쉽게 조작할 수 있도록 만들어주는 것에 더해 <code>크로스 브라우징</code>과 관련된 이슈를 해결해주었다.</p>\n<p>그런데 점점 브라우저와 Javascript가 발전하는 과정에서 아예 <strong>브라우저(클라이언트) 단에서 렌더링</strong>을 하고,\n<strong>서버에서는 <code>REST API</code> 혹은 <code>GraphQL</code> 같이 브라우저 렌더링에 필요한 데이터만 제공하는 형태</strong>로 기술이 변화했다.</p>\n<p>이제는 직접적으로 <code>DOM</code>을 다루는 행위가 급격하게 감소했고, <strong><code>상태(State)</code>를 기준으로 <code>DOM</code>을 렌더링 하는 형태로 발전</strong>한 것이다.\n<code>DOM</code>이 변하는 경우가 <code>State</code>에 종속 되어버린 것이다. 반대로 말하면, <code>State</code>가 변하지 않을 경우 <code>DOM</code>이 변하면 안 되는 것이다.</p>\n<p>그리고 이러한 과정 속에서 <code>Client-Side Rendering</code> 이라는 개념과 <code>상태관리</code>라는 개념이 생기게 되었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">SSR과 CSR</p>\n<p><strong>SSR(Server-Side Rendering)</strong></p>\n<ul>\n<li>약 5년전 까지만 해도 <code>JSP</code> <code>PHP</code> <code>ASP</code> 등이 웹 개발 3대장이라고 불렸다.</li>\n<li>위의 언급한 것들이 하는 역할이 바로 서버에서 HTML을 만들어서 클라이언트에 넘겨주는 것, 즉 <code>Server Side Rendering</code> 이다.</li>\n<li>따라서 클라이언트단(브라우저)에서는 굳이 데이터를 깊은 단계까지, 정교하게 관리할 필요가 없었다.</li>\n</ul>\n<p><strong>CSR(Client-Side Rendering)</strong></p>\n<ul>\n<li>Javascript가 발전하면서 아예 브라우저(클라이언트) 단에서 모든 렌더링을 처리 하려는 시도가 계속되었고, 그렇게 <code>React</code> <code>Angular</code> <code>Vue</code> 같은 프레임워크(혹은 라이브러리)가 탄생하였다.</li>\n<li>브라우저(클라이언트) 단에서 렌더리을 하기 위해선, 렌더링에 필요한 상태를 정교하게 관리해야 한다.</li>\n<li>그래서 <code>Redux</code> 같은 상태관리 라이브러리(혹은 프레임워크)가 생겨났다.</li>\n</ul>\n</div>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=o4meZ7MRd5o\" target=\"_blank\" rel=\"noopener noreferrer\">TECH CONCERT: FRONT END 2019 - 데이터 상태 관리. 그것을 알려주마</a>를 보면 더 자세하게 알 수 있다.</li>\n</ul>\n<h3>(2) 컴포넌트</h3>\n<p><code>Angular</code>가 <code>CSR</code>의 시작이었다면, <code>React</code>는 <code>컴포넌트 기반 개발</code>의 시작이었다.\n그리고 <code>Angular</code>와 <code>React</code>의 장점을 모두 수용한 <code>Vue</code>가 나왔다.</p>\n<p>어쨌든 중요한 점은 <strong>현 시점의 웹 어플리케이션은 컴포넌트 단위로 설계되고 개발된다</strong>는 것이다.\n그리고 컴포넌트마다 컴포넌트를 렌더링할 때 필요한 상태를 관리하게 되었으며, <code>Proxy</code> 혹은 <code>Observer Pattern</code> 등을 이용하여 이를 구현한다.</p>\n<p><strong>이론에 대해 다루자면 한도 끝도 없기 때문에 이제부터는 코드로 이야기 하겠다.</strong></p>\n<h2>2. state - setState - render</h2>\n<p>컴포넌트의 설계의 기반이 되는 코드를 만들어보자.</p>\n<h3>(1) 기능 구현</h3>\n<p>먼저 간단한게 <code>setState</code> 라는 메소드를 통해서 <code>state</code>를 기반으로 <code>render</code>를 해주는 코드를 만들어보자.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item4'</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;ul&gt;</span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">    &lt;/ul&gt;</span>\n<span class=\"line\">    &lt;button id=\"append\"&gt;추가&lt;/button&gt;</span>\n<span class=\"line\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#append'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>items<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">item</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-component/example01/\" width=\"100%\"></iframe>\n<p>이 코드의 핵심은 다음과 같다.</p>\n<ul>\n<li><code>state</code>가 변경되면 <code>render</code>를 실행한다.</li>\n<li><code>state</code>는 <code>setState</code>로만 변경해야 한다.</li>\n</ul>\n<p>이러한 규칙을 지켜가면서 코드를 작성한다면, 브라우저 출력되는 내용은 무조건 <code>state</code>에 종속되는 것이다.\n즉, <code>DOM</code>을 직접적으로 다룰 필요가 없어진다.</p>\n<h3>(2) 추상화</h3>\n<p>앞서 작성한 코드를 <code>class</code> 문법으로 추상화시켜보자.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  $target<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> </span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item2'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">        &lt;ul&gt;</span>\n<span class=\"line\">          </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">        &lt;/ul&gt;</span>\n<span class=\"line\">        &lt;button&gt;추가&lt;/button&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>items<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">item</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-component/example02/\" width=\"100%\"></iframe>\n<p>컴포넌트 클래스를 작성해놨더니 조금 더 유연하게 만들 수 있게 되었다.\n무엇보다 컴포넌트 코드의 사용 방법을 강제할 수 있기 때문에 코드를 유지보수하고 관리할 때 매우 이롭다.</p>\n<h3>(3) 모듈화</h3>\n<p>보통 한 파일안에 모든 기능을 작성하는 경우는 없을 것이므로 앞서 작성한 코드를 다음과 같이 분할해보자.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token builtin class-name\">.</span></span>\n<span class=\"line\">├── index.html</span>\n<span class=\"line\">└── src</span>\n<span class=\"line\">    ├── app.js              <span class=\"token comment\"># ES Module의 entry file</span></span>\n<span class=\"line\">    ├── components          <span class=\"token comment\"># Component 역할을하는 것들</span></span>\n<span class=\"line\">    │   └── Items.js</span>\n<span class=\"line\">    └── core                <span class=\"token comment\"># 구현에 필요한 코어들</span></span>\n<span class=\"line\">        └── Component.js</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 때 <a href=\"https://eyabc.github.io/Doc/dev/core-javascript/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%20%EB%AA%A8%EB%93%88.html\" target=\"_blank\" rel=\"noopener noreferrer\">브라우저 모듈</a>을 사용할 것이다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Simple Component 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/app.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>src/app.js</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> Items <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Items.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Items</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>src/components/Items.js</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">\"../core/Component.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Items</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item2'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;ul&gt;</span>\n<span class=\"line\">        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;/ul&gt;</span>\n<span class=\"line\">      &lt;button&gt;추가&lt;/button&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>items<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">item</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>src/core/Component.js</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  $target<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">setState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>newState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>3. 이벤트 처리</h2>\n<h3>(1) 불편함을 감지하기</h3>\n<p>앞서 작성한 코드를 사용하면 <code>render</code>를 실행할 때 마다 이벤트가 새로 등록된다.\n뿐만 아니라 반복적인 요소에 대해 각각 이벤트를 등록해야 할 땐 여간 불편한게 아니다.</p>\n<p>각각의 아이템에 대한 <code>삭제</code> 기능을 추가한다고 하면 다음과 같은 코드가 된다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">\"../core/Component.js\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Items</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item2'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;ul&gt;</span>\n<span class=\"line\">        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">          &lt;li&gt;</span>\n<span class=\"line\">            </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line highlighted\">            &lt;button class=\"deleteBtn\" data-index=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;삭제&lt;/button&gt;</span>\n<span class=\"line\">          &lt;/li&gt;</span>\n<span class=\"line\">        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;/ul&gt;</span>\n<span class=\"line\">      &lt;button class=\"addBtn\"&gt;추가&lt;/button&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.addBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>items<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">item</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.deleteBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deleteBtn</span> <span class=\"token operator\">=&gt;</span></span>\n<span class=\"line highlighted\">      deleteBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>items <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">        items<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><iframe class=\"example-frame\" src=\"https://junilhwang.github.io/simple-component/example04/\" width=\"100%\"></iframe>\n<h3>(2) 이벤트 버블링</h3>\n<p>이 때 다음과 같이 [이벤트 버블링](https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B2%84%EB%B8%94%EB%A7%81</p>\n",
      "date_published": "2021-07-25T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "생각정리",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/03-%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/03-%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/",
      "summary": "가끔은 나의 개인적인 생각을 정리해보자.",
      "content_html": "\n<blockquote>\n<p>원래 이번 주에는 회고 성격의 글을 쓰기 보단 기술적인 글을 쓰고자 했는데, 지금 내 상태로는 그러한 성격의 글을 쓰기 힘들 것 같다. 그래서 머릿속에 맴도는 것들을 정리하고자 이렇게 글을 쓴다.</p>\n</blockquote>\n<p>약 1년만에 주말을 오롯이 나만의 시간으로 사용할 수 있게 되었다. 그냥 평소처럼 게임을 하거나, 공부를하거나 할까 하다가 만나기로 해놓고 못 만나고 있었던 지인들과 약속을 잡았다. 1~2년 동안 못 보던 사람들이고, 시국이 시국인지라 1:1 약속을 잡아야해서 많은 사람들과 만나긴 힘들었다. 오랜만에 만나서 그런지 서로 할 이야기가 많았고, 생각을 정리하면서 다시 생각이 많아졌다.</p>\n<h2>학교, 감옥, 그리고 자존감</h2>\n<p>최근에 <a href=\"https://zuminternet.github.io/zum-front-recurit-review/\" target=\"_blank\" rel=\"noopener noreferrer\">채용을 하는 과정</a>에서 많은 사람들의 이력서와 자기소개서, 포트폴리오 등을 보고 든 생각이, 많은 사람들이 스스로를 표현하는 것을 어려워 한다는 점이다.</p>\n<p>이건 개개인의 문제라기 보단, 사회 시스템, 특히 <code>학교</code> 의 교육 시스템 문제라고 생각한다. 대한민국의 교육 시스템은 스스로 생각하고 표현할 수 있는 장치가 너무 부족하다. 적어도 내가 경험해온 교육은 그렇다. 혼자서도 이런 생각을 많이 했지만, 다시 생각을 정리할 수 있었던 계기가 얼마전에 유튜브에서 본 <a href=\"https://www.youtube.com/watch?v=QxGzwJd_Eno\" target=\"_blank\" rel=\"noopener noreferrer\">감옥 같은 학교건물을 당장 바꿔야 하는 이유</a> 라는 영상 때문이다.</p>\n<p>우리는 초등학교 6년, 중학교 3년, 고등학교 3년, 합해서 총 12년간 똑같은 공간에서, 똑같은 옷을 입고, 똑같은 밥을 먹고, 똑같은 시간에 일어나서, 똑같은 시간에 등교하고, 정해진 시간 동안 수업을 듣고, 정해진 시간에 하교하고, 시험을 보고, 채점을 하고, 시험 성적으로 순위 매김을 당하며 산다. 조금 극단적으로 말하면 이건 감옥이나 다를바 없다. 아니 감옥보다 못한게 아닐까 싶을 때도 있다. 이에 대한 결과물로 많은 사람들이 자신을 표현할 때 수치화된, 객관화된 모습으로 표현한다.</p>\n<ul>\n<li>외모는 어떤지</li>\n<li>성적은 어떤지</li>\n<li>어떤 대회에 나가서 어떤 상을 받았는지</li>\n<li>어떤 학벌을 가지고 있는지</li>\n</ul>\n<p>같은 것들. 쉽게 말해서 <code>스펙</code> 이라고 해야하나? 물론 이런 스펙이 사소한 것은 아니다. 하지만 우리는 모두 똑같은 일을 해야하는 것이 아니고 똑같은 삶을 살아가고 있지도 않다. 이렇게 정량화 되어버린 것들은 개개인의 가치를 죽이고 있다. 그것도 청소년에서 성인으로 접어드는, 대부분의 가치관의 형성되는 매우 중요한 시점에 반대로 개개인의 가치관과 개성을 죽이는 일이 일어나는 것이다.</p>\n<p>나는 대학교를 다닐 때 친해진 사람들에게 항상 묻는 말이 있다.</p>\n<ul>\n<li>대학교에 왜 입학했나</li>\n<li>그 학과를 왜 선택했나</li>\n<li>왜 공부를 하고 있나</li>\n</ul>\n<p>같은 원초적인 질문들이며 남이 아닌 스스로에게 항상 질문했던 것들이다. 하지만 대부분의 사람들은 스스로의 의지라기 보단 남들이 가니까, 남들이 하니까, 혹은 부모님이 시켜서 같이 대체로 수동적인 이유였다.</p>\n<p>12년간 감옥에 갖힌 상태에서 끝나지 않은 경쟁을 지속하다가 대학을 가야 하는 이유도 모르는체 대학에 진학하는 사람이 태반이다. 스스로 정말 공부가 하고 싶어서 대학에 가는 사람이 몇 명이나 있을까? 원하는 학과에 진학하는 사람이 몇 명이나 있을까?</p>\n<p>스스로에 대해 생각을 많이 해야 하는 시기에 교육 시스템 때문에, 경쟁 때문에 목적과 의미 없는 공부만 하다가 갑자기 성인이 되어버린다. 스스로 성인이 되는 것이 아니라 어쩌다 보니 성인이 되어버리는 것이다. 법적으로 성인이 되면 스스로를 책임져야 하는데, 우리가 받아온 고등 교육을 잘 생각해보면 이건 거의 불가능에 가깝다. 대부분의 선택에서 스스로의 의지가 배척되는데 성인이 된다고 이게 쉽게 고쳐질까? 나는 결국 이러한 과정에 대한 결과물이 <code>자존감 결여</code> 라고 생각한다. 선택을 하는 과정에서 내 의사가 결여되는 과정이 반복될 수록 자존감은 결여될 수 밖에 없고, 지금의 학교들은 이를 반복하는 중이다.</p>\n<p>그래서 나는 대학교 후배들에게 <strong>학교에서 해주는 모든 심리상담</strong>을 다 받아보라고 권유한다. 사회에 나가면 상담 한 번에 꽤 많은 돈이 소모된다. 그래서 정말로 심리 상담이 필요한 사람들은 상담을 못 받는 다는 이야기가 있다. 그래서 받을 수 있을 때, 기회가 있을 때 잡는게 좋다.</p>\n<p>각설하고, 나도 스스로 생각하고 행동하는 부류의 사람은 아니었다. <code>착한아이 콤플렉스</code> 의 전형적인 표본이 나였다. 그래도 성인이 되고, 군대에서 그리고 학교를 다니면서 스스로에 대해 계속 고민하고, 고뇌하고, 나라는 사람이 어떤 사람인지 정의하고 싶어서 여러가지 상담을 많이 받았고, 심리학 서적도 꽤 많이 읽었다.</p>\n<p>뜬금없지만, 개인적으로 심리학은 살아가는데 있어서 제일 실용적인 학문이 아닐까 생각한다.</p>\n<p>어쨌든 그 과정에서 자존감을 많이 회복할 수 있었고, 지금도 습관적으로 나는 어떤사람인지 고민하고 다시 정의내린다. 나의 장점을 찾아내고, 단점이 있더라도 받아들이고, 그런 과정이 계속되면서 조금씩 조금씩 스스로를 존중하고 있다. 이와 동시에 나를 존중하지 않는 사람들을 굳이 신경쓰지도 않고 마음쓰지도 않고 있다. 그냥 저런 사람도 있구나 하고 넘긴다.</p>\n<p>자존감은 일상의 많은 부분을 차지하고 있다고 생각한다.</p>\n<ul>\n<li>스스로를 존중할 수 없는 사람은 타인을 존중할 수 없다.</li>\n<li>스스로를 존중하는 만큼 다른 사람도 존중해야한다.</li>\n<li>스스로를 존중하지 않는 사람에게 굳이 호의를 베풀고 존중해야할 이유도 없다. 나를 싫어하는 사람들까지 신경쓰고 마음쓸 이유가 없다.</li>\n<li>사소한 의견이라도 내 의견 만큼 다른 사람의 의견도 중요하다. 그게 다수의 의견이든 소수의 의견이든 동일하다.</li>\n<li>존중을 기반으로 하는 대화와 커뮤니케이션은 결국 긍정적인 방향으로 흘러갈 수 밖에 없다.</li>\n<li>타인에 대한 존중이 없으면 개개인이 모여서 유지되고 만들어가는 이 사회에 대한 존중도 없어진다.</li>\n<li>스스로에 대한 존중이 없는 사람은 결국 어떤 일을 하더라도 행복함을 느끼기가 어렵다.</li>\n</ul>\n<p>이 외에도 많은 부분들이 있을 것이다. 특히 가까운 인간관계 속에서 자존감이 낮을 수록 균형을 유지하기가 어렵다. 가족, 친한 친구, 그리고 연인 등 우리는 많은 관계를 만들어간다. 자존감이 어느 정도는 자리잡고 있어야 건강한 관계를 유지할 수 있다고 생각한다.</p>\n<p>뭔가 정리되지 않고 횡설수설 이상한 소리를 많으 늘어놓은 것 같다. 대충 정리해보자면,</p>\n<p>12년간 감옥같은 학교에서 생활한다 → 끊임없는 경쟁 속에서 개개인의 개성과 색은 사라지고 수치화된 스펙만 남아버린다 → 이 과정에서 자존감이 점점 소실된다. 스스로를 존중할 수 없는 사람이 다른 사람을 진심으로 존중할 수 있을까? → 스스로에 대해 잘 표현하기가 점점 어려워진다 → 자존감이 결여되면 무슨 일을 하든 <code>행복</code> 해 지기가 어려워진다. → 따라서 자존감을 가꿀 수 있도록 노력하자</p>\n<ul>\n<li>시스템이 문제라면 스스로 극복할 수 있는 방법을 찾아보면 된다.</li>\n<li>나를 변화시킬 수 없다면 다른 사람도 변화시킬 수 없다.</li>\n<li>다른 사람을 변화시킬 수 없다면 결국 제일 큰 문제인 사회도 변화시킬 수 없다.</li>\n<li>스스로부터 변하자.</li>\n</ul>\n<p>이건 조직생활에서도 마찬가지라고 생각한다. 큰 변화를 도모하기 전에 나부터 먼저 변해야한다. 그래야 내 옆의 누군가가 변하고, 팀이 변하지 않을까?</p>\n<h2>부동산</h2>\n<p>지금의 MZ세대는 <code>벼락거지</code> 라는 말이 딱 어울린다. 다른 것 보다 부동산 때문에 너무 와닿는다. 지금 나에게 제일 큰 고민은 <code>부동산</code> 이다. 더 정확히는 <code>내 집 마련</code> 이랄까?</p>\n<p>갑자기 집값이 미친듯이 오르고 있고, 대출 받기도 쉽지 않고, 마음 같아서는 지방에 내려가서 살고 싶은데 직업적인 특성 때문에 이 또한 쉽지 않다.</p>\n<p>그런데 집이 있는 사람들은 또 갑자기 집값이 올라서 세금을 많이 내야하고, 그렇다고 다시 팔고 이사를 가자니 또 세금 때문에 이마저 쉽지 않고, 문제는 내 집의 가격만 오른게 아니라 다른 집의 가격도 올랐기 때문에 이사할 엄두도 나지 않는 그런 상황이다.</p>\n<p><strong>지금 제일 큰 이득을 보고 있는건 세금을 쓸어담고 있는 정부가 아닐까?</strong></p>\n<p>기회가 된다면 재택근무를 할 수 있는 회사로 이직해서 (이미 우리회사는 글렀다.. 아마도..?) 제주도든 강원도든 한적한 곳에서 소소하게 살아가고 싶은 마음이다. <strong>아니, 그랬었다.</strong></p>\n<p>경기도에서 서울에 이사오니 서울 살이도 나쁘지 않아서, 아니 너무 편해서 더 미쳐버리겠다. 도대체 어떻게 살아가야할까?</p>\n<h2>주식</h2>\n<p>주식을 보고 있으면 돈이 뭘까? 싶은 생각이 든다. 직업을 갖고 일을 하는게 점점 무의미해보인다. 직업적인 보람이 없다면 이제 일을 하는 의미가 있을까? 싶은 생각..</p>\n<p>나는 주식에 큰 관심을 두고 있질 않아서, 특히 주식을 하면 일에 집중이 안 되기 때문에 최대한 멀리 하고 있는 중이다. 안 하면 손해 갖고, 하면 진짜 손해를 보고(?).. 아이러니한 상황이다.</p>\n<p>다만 요즘 드는 생각이, 정말 자식이 돈을 잘 벌도록 만들고 싶으면 학교 공부를 시키기 보단 주식 공부를 시키는게 좋을 것 같다.</p>\n<h2>연애</h2>\n<p>지금은</p>\n<ul>\n<li>연애를 해도 문제, 안 해도 문제</li>\n<li>결혼을 해도 문제, 안 해도 문제</li>\n<li>아이를 낳아도 문제, 안 낳아도 문제</li>\n</ul>\n<p>인 것 같다.</p>\n<p>지금의 MZ 세대들은 너무 많은 불행을 겪고 있기 때문이라고 생각한다. 정확히는 <code>불행하다고</code> 생각하고 있기 때문이 아닐까?</p>\n<p>연애를 하기 이전에 나는 일단 혼자서도 행복하게 잘 지낼 수 있어야 한다고 생각한다. 그리고 연애를 하면 같이 있어서 더 행복함을 느낄 수 있어야 한다고 생각한다.</p>\n<p>내가 여유가 있고 행복할 수 있어야 타인의 슬픔과 기쁨도 나눌 수 있는게 아닐까?</p>\n<p>자녀를 갖는 것 또한 그렇다. 내가 행복할 수 없으면 내 자식도 행복할 수 없다. 내가 행복을 느끼고 나눌 줄 알아야 내 자식도 그게 가능하다.</p>\n<p>꼭 연애가 아니더라도, 적어도 마이너스가 되는 관계는 만들지 않는게 좋아보인다.</p>\n<p>혼자서 행복하게 잘 살 수 있다면, 그것도 나쁘지 않다. 근데 그게 되는 사람은 이미 주변에 좋은 관계를 유지하고 있는 사람이 많은 것 같다. 행복을 나눌 수 있기 때문이 아닐까?</p>\n<h2>이상형</h2>\n<p>어쩌다보니 이상형에 대한 이야기가 나왔다. 나는 사실 내 이상형에 대해 생각해본적이 없는 것 같다.</p>\n<p>그냥 좋으면 좋은거고 싫으면 싫은거지!</p>\n<p>그런데 내가 좋아하고 아끼는 사람들은 대체로 비슷한 느낌이 있는데 이걸 말로 형용하기가 어렵다.</p>\n<p>음.. 지금 곰곰히 생각해봤는데, 함께 있을 때 심리적으로 불편하게 하지 않는 사람이 좋다. 대체로 이런 사람은 자존감이 높은 편이다. 혹은 타인에 대한 배려가 습관이 된 사람들이고 존중이 습관이 된 사람들인 것 같다.</p>\n<p>일단 나 부터 그런 사람이 되어보자.. ㅎㅎ</p>\n<h2>진로</h2>\n<p>다른 사람들과 진로에 대한 이야기를 나눌 때 드는 생각은, 나는 아마 이번 생이 아니었으면 거지로 살았을 것이다. 개발자가 그만큼 나에게 적합한 직업이라고 생각한다.\n그리고 참 신기한게, 어렸을 때 부터 막연하게 직업적 진로 혹은 꿈을 적는 항목에 <code>프로그래머</code>를 적었다. 어릴 때의 강박이 지금의 나를 만들어낸게 아닐까?</p>\n<p>그냥 나는 이번 생에 운이 좋게 IT 직군에 적합한 성격과 재능이 있었기 때문에 조금 더 수월하게 입에 풀칠하고 살 정도는 되는 것 같다.\n10년만 늦게 태어났거나, 10년만 일찍 태어났어도 달라졌으리라 생각한다.\n그런 의미에선 운이 좋은 편인 것 같다.</p>\n<h2>독립</h2>\n<p>가족이 불편하고 싫은게 아니라면 굳이 독립하지 않아도 된다고 생각한다. 독립을 하면.. 여러모로 피곤한점이 한 둘이 아니기 때문에..</p>\n<p>그래도 혼자서 이 한 몸 책임지며 살아가는 경험을 해보는 것은 나쁘지 않다. 이게 평새 유지되면 또 이야기가 다르겠지만..</p>\n<p>난 이제 본가에 가면 오히려 어색하다. 이제 독립한지도 거의 10년 가까이 되어가고 있으니..</p>\n<h2>단국대학교 소프트웨어학과</h2>\n<p>우리 학과는 아무리 봐도 타 학교 동일 학과에 비해서 경쟁력이 없다. 아웃풋이 좋은 경우는 그냥 학생들 개개인이 잘나서 잘 된 경우가 대부분이고, 나머지는 학과 생활에 적응하기도 힘들어한다.</p>\n<p>이에 대한 여러가지 원인이 있는데,</p>\n<ul>\n<li>너무 많은 정원\n<ul>\n<li>기본 정원이 90명인데 학년이 올라갈 수록, 편입생 + 전과생 + 복수전공생 + 교류전공생 때문에 인원이 기하급수적으로 많아진다.</li>\n<li>그런데 교수님과 강의실의 숫자는 정해져있다.</li>\n<li>결국 질 좋은 강의를 듣기란 하늘의 별따기.</li>\n</ul>\n</li>\n<li>너무 적은 교수님의 숫자 + 너무 고여버린 교수님들\n<ul>\n<li>이건 이제 성인이 된 대학생들이 자기 앞가림을 교수님에게 의지하는 것도 문제가 있다.</li>\n<li>자기 살 길은 자기가 알아서 찾아야 하는데.. 그 마저도 쉽지 않은 상황</li>\n</ul>\n</li>\n<li>동아리의 부재</li>\n<li>소통의 부재</li>\n<li>스터디의 부재</li>\n<li>개인플레이</li>\n<li>이에 따른 최악의 팀플레이 경험</li>\n</ul>\n<p>제일 큰 문제는 동아리가 없다는 것이다. 이미 졸업한 내가 동아리를 만들 수는 없고, 대신 소소하게 스터디를 운영하고 있다.</p>\n<p>선후배를 이어주는 제일 좋은 매개가 동아리인데, 동아리가 없으니 뭘 할 수 있겠는가. 학과나 학생회가 적극적으로 선후배간의 교류에 개입하고 있는 것도 아니다.\n그렇다고 졸업생을 데려와서 인사이트를 주고 있는 것도 아니다. 그냥 말 그대로 하는게 없다.</p>\n<p>소프트웨어학과 특성상, 학점이 그렇게 중요한 편도 아니고, 또 학과 공부만 해서는 쉽사리 취업하기도 어렵다. 더 큰 문제는 최악의 팀플레이 경험인데.. 4년 동안 좋게 끝낸 팀플 경험이 거의 없다. 오히려 잘 지내던 친구들이 팀플 때문에 멀어지거나 손절하기도 하고, 여러가지로 문제가 많은 편이다.</p>\n<p>개개인이 책임감과 리더쉽을 어느정도 겸비하고 있어야 사회생활을 하기가 수월한데, 이런 점이 참 아쉽다. 회피하려고 하기 보단 부딪히고 극복해야한다.</p>\n<p>이건 다른 종류의 이야기인데, 소프트웨어학과나 컴퓨터 공학과의 경우 다들 살아가는게 고만고만 한 것 같다.</p>\n<ul>\n<li><code>xx가 엄청 잘 산다더라</code></li>\n<li><code>xx가 외제차를 타고 다닌다더라</code></li>\n</ul>\n<p>와 같은 이야기를 들어본적이 없다. <s>내가 아싸여서 그런걸지도</s></p>\n<p>왜 그럴까 혼자서 생각해봤는데, 다들 어릴 때 돈쓰는 취미(?) 대신에 <strong>큰 돈을 들이지 않고도 쉽게 즐거움을 느낄 수 있는 컴퓨터 앞에 앉아있는 경우가 많아서라고 생각한다.</strong>\n현실세계에서 누릴 수 있는 즐거움이 많다면 굳이 컴퓨터 같은 작은 상자 앞에 앉아 있을 필요가 있을까? 이는 요즘에 뜨고 있는 메타버스와도 비슷하다고 생각한다. 초등학생, 중학생들이 즐길 수 있는 현실세계의 놀이거리가 많지 않다. 특히 돈이 있어야 뭘 하든 할 수 있는데 학생들이 무슨 돈이 있겠는가? 그래서 컴퓨터 앞에 앉아 있고, 가상의 세계인 메타버스에 탑승하여 자기들만의 공간을 만들어가는 것이다.</p>\n<p>어쨌든 이러한 이유로, 컴퓨터와 친해진 사람들은 대체로 사는게 고만고만 한 것이다. 그러다보니 막연하게 소프트웨어학과나 컴퓨터 공학과로 지원을 하게 되는게 아닐까?</p>\n<h2>코로나</h2>\n<p>코로나는 사실 민감한 주제라고 생각한다. 그래도 내 주관적인 내 생각을 조금 정리해보자면, 나는 코로나가 <code>심하게 부풀려진 병</code>이라고 생각한다.</p>\n<ul>\n<li>치사율이 그렇게 높은 편도 아니고</li>\n<li>코로나에 감염되더라도 대체로 무증상인 경우가 많으며</li>\n<li>호흡기 질환인데 혈액에 백신을 투여하는 것도 이상하고\n<ul>\n<li>백신을 맞으면 코로나에 감염이 되더라도 증상이 없을 뿐 전파 하는 것은 똑같으며 오히려 변이 바이러스 공장이 되어버린다고 한다.</li>\n<li>기본적으로 기저질환이 없는 사람이 백신을 맞는건 거의 무용지물에 가깝다고..</li>\n</ul>\n</li>\n<li>방역 시스템 자체도 말이 안 된다.\n<ul>\n<li>특정 집단의 집회만 허용한다. 그 집단은 코로나에 안 걸리는 것인가?</li>\n<li>2주 단위의 사회적 거리두기 단계 조정\n<ul>\n<li>소상공인을 완전히 죽이는 행위이다.</li>\n<li>적어도 한 달 단위로 발표를 해야 임대 계약을 유지하든 파기하든 할게 아닌가?</li>\n</ul>\n</li>\n<li>대형 마트나 백화점에는 사람이 아무리 많아도 문제 없다는 것인가?</li>\n<li>출퇴근길 지옥\n<ul>\n<li>출근하는 사람들은 코로나에 안걸린다는 이야기인가?</li>\n<li>출근하는 사람들이 배달음식을 시켜서 회의실에서 모여먹으면 괜찮다는 이야기인가?</li>\n<li>떨어져서 일할 때는 마스크를 쓰고, 같이 모여서 밥먹을땐 결국 마스크를 벗는다.</li>\n<li>그럼 밥도 같이 먹지 말아야 하는게 아닌가?</li>\n</ul>\n</li>\n<li>말 그대로 무의미한 거리두기</li>\n</ul>\n</li>\n<li>그리고 원래 감기는 백신이 없다. 감기 증상을 약화시키는(해열제, 두통약 등) 약이 있을 뿐이다.</li>\n<li>독감도 백신이 없다. 예방 접종이 있을 뿐이다.</li>\n</ul>\n<p>이 외에도 너무 많지만.. 딱 하나 이해 되는 점이 있다면</p>\n<ul>\n<li>전파력, 감염력이 다른 바이러스보다 강하다.</li>\n<li>그래서 사람들에게 감염될 수록 변이 바이러스가 나올 확률이 높다.</li>\n<li>전파가 계속 될 수록 변이 바이러스가 생겨나고 이에 따라 치사율이 더 높아진다.</li>\n</ul>\n<p>라는데.. 이미 누구나 한 번 쯤 하는 생각이 이미 알바를 하거나 회사 생활을 하는 20~30대는 무증상 감염이 한 번씩 되지 않았을까? 하는 점이다.</p>\n<p>관련 서적</p>\n<ul>\n<li><a href=\"https://book.naver.com/bookdb/book_detail.nhn?bid=17603807\" target=\"_blank\" rel=\"noopener noreferrer\">코로나 미스터리</a></li>\n<li><a href=\"https://book.naver.com/bookdb/book_detail.nhn?bid=20546221\" target=\"_blank\" rel=\"noopener noreferrer\">코로나19, 걸리면 진짜 안 돼? 응급의학과 의사의 선별진료소 1년 이야기</a></li>\n</ul>\n<p>관련 포스팅</p>\n<ul>\n<li><a href=\"https://brunch.co.kr/@leedhulpe/104\" target=\"_blank\" rel=\"noopener noreferrer\">과연 영국은 백신접종률이 높아서 사망자가 적은걸까?</a></li>\n<li><a href=\"https://brunch.co.kr/@leedhulpe/89\" target=\"_blank\" rel=\"noopener noreferrer\">스웨덴이 주는 교훈, 코비드 19는 벌거벗은 임금님?</a></li>\n</ul>\n<p>사실 내가 원하는 것만 보고 싶어서 이런 것들을 접한 걸수도 있다.\n매체에는 굉장히 다양한 것들이 매일 매일 쏟아져 나오고 있는데,\n그냥 정말 코로나가 위험한 병이라면 오히려 너무 안일하게 대처하고 있는게 아닐까? 싶을 정도로 이 사회가 이상하게 흘러가고 있다고 생각한다.</p>\n",
      "date_published": "2021-07-19T16:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "주니어 개발자의 2021년 상반기 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2021-year/01-First-Quarter/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2021-year/01-First-Quarter/",
      "summary": "주니어 개발자의 2021년 상반기 회고",
      "content_html": "\n<p></p>\n<p><code>와.. 벌써 2021년이구나, 시간 참 빠르다</code> 라고 말한지 얼마 안 된 것 같은데 벌써 2021년의 반이 지났다. 작년에는 한 달 마다 회고를 작성했는데, <s>너무 귀찮아서</s> 올 해는 상반기, 하반기 회고만 작성해야겠다.</p>\n<h2>1. 2021년 목표에 대한 회고</h2>\n<p>작년 12월에 <a href=\"https://junilhwang.github.io/TIL/Writing/02-2021-%EA%B3%84%ED%9A%8D/\" target=\"_blank\" rel=\"noopener noreferrer\">2021년 계획</a>을 세웠다. 과연 얼마나 잘 지켜지고 있는지 검토해보자.</p>\n<h3>(1) 올해 초 목표들</h3>\n<ul>\n<li>1순위\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\">  일일 영어\n<ul>\n<li>1월 한 달 동안은 열심히 했다.</li>\n<li>그리고.. 아무 일도 없었다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\">  개발 서적 공부\n<ul>\n<li>못 읽었다. 아니 안 읽었다.. 😂</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2순위\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  저축\n<ul>\n<li>생각보다 열심히 했다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  사이드 프로젝트\n<ul>\n<li>4월까진 열심히 했다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>3순위\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  스터디 운영\n<ul>\n<li>사실 6월 부터 제대로 운영하기 시작했다.</li>\n<li>그런데 지금 꽤 잘 되고 있는 것 같다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  운동\n<ul>\n<li>이사를 온 뒤에 거의 매일 자전거를 타고 있다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\">  집밥 먹기\n<ul>\n<li>매우 실패!</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\">  이사\n<ul>\n<li>나름 잘 했다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>(2) 문제점 탐색</h3>\n<p>사실 올 해의 주된 목표는 영어였다. 1월 한 달은 열심히 했는데 그 이후에는 제대로 하질 못했다. 핑곗거리를 늘어놓자면, 회사에 크고 작은 변화들이 생기면서 너무 바빠진 탓도 있고, 제일 큰 이유는 본질적으로 <strong>내가 개발 공부에 더 큰 재미를 느끼고 있기 때문</strong>이다. 4월까지 단쿠키 사이드 프로젝트를 하면서 거의 대부분의 시간을 사이드 프로젝트에 투자했다.</p>\n<p>비슷한 이유로 <strong>개발 서적을 보는 것 보단 코드를 치는 것에 더 재미를 느껴서</strong>인지 공부를 할 때도 서적 보단 코드 위주의 공부를 하고 있다.</p>\n<p>일단.. 영어는 지금 당장 손에 잡히지 않고 있다. 사실 별 생각이 없는걸지도..</p>\n<p>그래서 그냥 본능에 충실하기로 했다 <s>(동물도 아니고.. 니가 정녕 인간이냐?).</s> 스트레스를 받으며 공부하기보단, 재미를 느끼며 공부하는게 건강에 더 좋지 않을까? <s>(이게 뭔 🐶소리야!)</s></p>\n<h2>2. 업무 회고</h2>\n<p>사실 작년에는 일이 막 엄청 많진 않았다. 적당히 워라벨을 즐길 수 있는 수준의 업무량이었고, 야근도 하지 않았다. 그런데 올해에 새로운 대표님이 오시면서 회사에 큰 변화의 폭풍이 몰아쳤고, 이러한 과정에서 많은 인력이 나가고, 그 와중에 서비스를 개편을 하고, 테크핀 서비스를 시작하면서 미친듯이 바빠졌다.</p>\n<h3>(1) 스타트줌</h3>\n<p></p>\n<p>작년 말 <a href=\"https://start.zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">스타트줌</a>이 기획되어 개발을 시작했고, 올해 초에 오픈했다. 트래픽은 어느정도 있는데 광고도 없고 <strong>서버 유지비만 소모되고 있어서 계륵 같은 서비스</strong>가 되어 버렸다. API도 직접 만들고, 프론트도 직접 만들었지만.. 사실 애정하는 서비스는 아니다. 다만 크롬 전용으로 기획된 서비스라서 IE를 신경쓰지 않아도 된다는 점!</p>\n<p>지금은 다른 개편 서비스 때문에 방치된 상태지만.. 언젠간 더 좋은 서비스로 발돋움 할 날이 있겠지 싶다. 지금은 기능이 없어도 너무 없다.</p>\n<h3>(2) 크롬 확장프로그램</h3>\n<blockquote>\n<p>확장프로그램 개발 과정은 <a href=\"https://zuminternet.github.io/Zum-Chrome-Extension/\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>에서 확인할 수 있습니다.</p>\n</blockquote>\n<p></p>\n<p>사실 스타트줌이 기획된 이유가 확장프로그램 퀄리티가 나쁘지 않아서(?) 였다고 하는데.. 나는 확장프로그램이 더 좋다. 나름 잘 사용하고 있기도 하고. 기획에서 마음만 먹으면 이것 저것 기능을 붙일 수 있을텐데 지금 기획자 분들도 너무 정신없어서 확장프로그램도 기억 저 편으로 사라진 것 같다.</p>\n<p>나름 <a href=\"https://zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">줌닷컴</a>과 <a href=\"http://start.zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">스타트줌</a>을 통해 홍보하면서 사용자가 많이 늘었다. 그 과정에서 자잘한 버그도 많이 발생했고, 유지보수를 진행했다.</p>\n<p>제일 유의미한 유지보수는 확장프로그램의 게시 검토 시간을 단축한 부분인데, 기존에는 전체 도메인에 대한 policy를 정의했다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token comment\">// manifest.json의 일부</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// ...불필요한 내용 생략</span></span>\n<span class=\"line\">  <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"bookmarks\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"topSites\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*://*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chrome://favicon/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 <code>*://*</code> 를 사용하면 모든 도메인에 대한 권한을 허용하게 되는데, 이럴 경우 게시 요청이 승인되는데 4~5일 정도 소요된다.</p>\n<p>그래서 정말 필요한 API 권한만 허용하도록 변경했다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token comment\">// manifest.json의 일부</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// ...불필요한 내용 생략</span></span>\n<span class=\"line\">  <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"bookmarks\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"topSites\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://appapi.zum.com/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chrome://favicon/*\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그래서 이제 게시 요청을 하면 1~2일만에 승인된다.</p>\n<h3>(3) 줌닷컴 개편</h3>\n<p></p>\n<p>이런 날이 올 줄 몰랐는데, <a href=\"http://zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">줌 닷컴</a>의 레거시 코드를 청산하고 <code>NodeJS + Vue.js</code>로 다시 만들었다. 내 사수가 프론트를 담당했고, <strong>나는 프론트에서 사용되는 API와 Admin을 만들었다.</strong> 3월 초에 개발을 시작하여 5월 1일에 배포했고, 약 한 달 정도 자잘한 버그를 수정하며 유지보수를 진행했다.</p>\n<p>두 달 동안 어드민 지옥에 빠져 살았다. 그렇게 많은 기능을.. 그 짧은 시간 동안 만들었다니.. 덕분에 어드민에도 버그가 많아서 지금까지 자잘한 핫픽스 배포를 하고 있다.</p>\n<p>이 외에도 크고 작은 이슈들이 있었는데 여기에 늘어놓기엔 내용이 많아서 나중에 기회가 된다면 기술 블로그에 작성할 예정이다.</p>\n<h3>(4) 신입 개발자 채용</h3>\n<blockquote>\n<p>이에 대한 내용은 <a href=\"https://zuminternet.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">회사 기술블로그</a>에 올린 <a href=\"https://zuminternet.github.io/zum-front-recurit-review/\" target=\"_blank\" rel=\"noopener noreferrer\">주니어 프론트엔드 개발자의 채용 프로세스 참여 후기</a>로 대체하겠다.</p>\n</blockquote>\n<p>그래도 개인적인 이야기를 조금 해보자면, 채용을 진행하면서 일단 이전에 있던 <strong>자잘한 이직 욕구들이 많이 해소</strong>되었다. 좋은 팀을 만들어가기 위해선 먼저 스스로가 변화해야 한다는 점도 알았다. 그리고 좋은 팀원을 채용하기 위해선 일단 나 스스로가 괜찮은 사람이여야 한다는 점도 알았다. 채용 과정에서 실무진의 기술적, 인간적인 매력을 보여줄 수 있어야 뛰어난 역량을 가진 사람들을 붙잡을 수 있는게 아닐까?</p>\n<p>사실 <strong>네카라쿠배야당토</strong> 같은 메이저 기업은 인력에 대한 아쉬움이 크지 않으리라 생각한다. 지원자가 넘쳐나니까!</p>\n<p>그러나 우리 회사는 그렇지 못하다. 이미 뛰어난 역량을 가진 사람은 메이저 기업에 다 들어갔고, 우리 회사는 남은 사람들 중에서 보석을 찾아야 하는 입장이다. 그래서 내세울 수 있는 것은 <strong>사람과 팀</strong>이라고 생각한다. 그런 매력을 어필하기 위해서 꽤 많이 노력했고, 덕분에 정말 좋은 분들과 함께 일할 수 있게 되었다.</p>\n<p>그리고 아직 확정은 아니지만, 저번 주에 기술 면접까지 통과한 분이 있다. 부디 꼭 함께 하길 기도하는 중이다.</p>\n<h3>(5) 신규 테크핀 서비스 진행</h3>\n<p>새로 합류한 팀원들과 함께 테크핀 서비스를 만드는 중이다. 기획서도 100페이지가 넘고, 줌인터넷에서 제일 큰 몸집도 크고, 도메인도 복잡한 서비스인 것 같다.</p>\n<p>그래도 팀원들이 생각보다 빠르게 업무에 적응하고 있어서 잘 마무리할 수 있을 것 같은 느낌이 든다. 다만.. 마감 기간이 너무 촉박해서 걱정이다.</p>\n<p>빠르게 잘 만들기... 참 어렵다. <s>그게 가능하면 다른 회사에 갔겠지!</s> 는 푸념이고.. 뭐 잘 해야지 별 수 있나.</p>\n<h3>(6) 조직 개편</h3>\n<p>6월 말에 조직 개편이 있었고, 아예 프론트엔드 파트가 신설되는 과정에서 내가 파트 리더가 되었다. 이미 시니어 프론트엔드 개발자는 <strong>네카라쿠배야당토</strong> 같은 메이저 기업에 다 들어가서.. 나 처럼 회사에 남아있는 주니어 개발자가 리더가 되는 사태가 벌어진 것이다.</p>\n<p>그래도 프로젝트를 보는 시각도 넓어지고 팀원들과 이것 저것 해볼 수 있는 권한이 작게 나마 생긴 것 같아서 좋다.</p>\n<p>신설 팀이라서 지금은 특별한 문화가 없는 상태다. 그래서 다른 회사들이 가지고 있는 좋은 문화들을 벤치마크 할 생각이다.</p>\n<p><strong>혹시 좋은 문화가 있다면 공유 부탁드립니다!</strong></p>\n<h2>3. 개발 역량 강화</h2>\n<p>올 해는 대체 뭘 했나 하면서 목차를 만들어봤는데.. 어라..? 생각보다 많이 했다.</p>\n<h3>(1) 방과후 수업 강사</h3>\n<p><a href=\"http://finance.icehs.kr/main.do\" target=\"_blank\" rel=\"noopener noreferrer\">인천금융고등학교</a>에서 <strong>웹디자인 기능사 실기</strong> 방과후수업 강의를 하는 중이다. 대면으로 하진 않고, 계속 온라인으로 진행 중이다.</p>\n<p>략 20개의 동영상을 녹화해서 올려놓고, 방과후수업을 신청한 학생들이 온라인 강의를 보는 형태로 진행했다. 자잘한 질문은 카카오톡을 통해서 주고 받았다.</p>\n<p>생각보다 수입이 나쁘지 않았다. 무엇보다 시간을 많이 투자하지 않아도 되서 좋았다.</p>\n<h3>(2) 단쿠키</h3>\n<blockquote>\n<p><strong>단쿠키</strong>는 내 모교에 재학/졸업중인 사람들이 학교 구성원을 위한 커뮤니티를 만들기 위해 진행한 사이드 프로젝트이다. 나는 1월 ~ 4월까지 4개월 정도 참여했고, 회사일 때문에 참여가 어려울 것 같아서 중도 하차했다.</p>\n</blockquote>\n<p>단쿠키 프로젝트에 참여하면서 생각보다 공부를 많이 했고, 처음 접해보는 기술 스택도 많았다.</p>\n<ol>\n<li><a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS</a></li>\n</ol>\n<ul>\n<li>사실 NestJS는 작년에도 사이드 프로젝트를 하면서 어느 정도 익숙해진 상태였다. 그런데 이번에 조금 더 deep하게 써볼 수 있었다.</li>\n<li>Spring 처럼 필요에 따라서 Standard App으로 구성하기도 했고, NestJS에 포함된 다양한 기능들을 많이 써볼 수 있었다.</li>\n</ul>\n<ol start=\"2\">\n<li>graphql</li>\n</ol>\n<ul>\n<li>사실 나는 graphql을 사용할 생각은 없었는데 개발 팀장인 <a href=\"https://github.com/dobest27\" target=\"_blank\" rel=\"noopener noreferrer\">도비</a>의 의견으로 graphql을 사용하게 되었다.</li>\n<li>생각보다 사용 방법이 무척 쉬웠고, 사용성도 매우 좋았다.</li>\n<li>다만 시중에 나와있는 자료가 많지 않아서 정보에 대한 탐색이 무척 어려웠다.</li>\n<li>특히 실무에서는 많이 사용되지 않는 편인 것 같다.</li>\n<li>회사에서 사용된다고 하더라도 대체로 내부 서비스 용도로 사용되고 있고, 사용자 단에서 사용되는 경우는 매우 드물어보인다.</li>\n</ul>\n<ol start=\"3\">\n<li>unit test, e2e test</li>\n</ol>\n<ul>\n<li>작년에 열심히 TDD 관련 공부를 했으니, 이젠 적용할 때도 되었지! 하며 혼자서 열심히 테스트 코드를 작성했다.</li>\n<li>Spring보다는 테스트 코드 작성이 무척 쉬웠고 괜찮았다.</li>\n<li>다만 e2e 테스트에 대한 만족도가 낮았다.</li>\n<li>성능 테스트도 해봤으면 어땠을까? 하는 아쉬움이 조금 있다.</li>\n</ul>\n<ol start=\"4\">\n<li>playwright</li>\n</ol>\n<ul>\n<li>playwright을 이용해서 학교의 시간표를 전부 읽어들였다.</li>\n<li>시간표 때문에 무수히 많은 삽질을 했다.</li>\n<li>그래도 재밌는 툴을 알게 되어서 좋았다.</li>\n</ul>\n<ol start=\"5\">\n<li>typeorm</li>\n</ol>\n<ul>\n<li>Java 진영의 JPA 같은 느낌이랄까?</li>\n<li>그런데 JPA와 다른 점이 너무 많아서 다루기가 조금 힘들었다.</li>\n<li>확실히 RDB를 다룰 때는 java가 node보단 확실히 기술적인 성숙도가 높은 편이라고 생각한다.</li>\n<li>아쉬움이 많은 기술스택이다.</li>\n</ul>\n<ol start=\"6\">\n<li>react native</li>\n</ol>\n<ul>\n<li>웹과 앱은 결이 다르다는 것을 다시 한 번 깨달았다.</li>\n<li>코드 작성은 그렇다 치고.. 디버깅이 무척 힘들었다.</li>\n<li>그래서.. 뭐랄까.. 경험하고 싶지 않은 영역이 되어 버렸다.</li>\n</ul>\n<ol start=\"7\">\n<li><a href=\"https://www.atlassian.com/software/jira?&amp;aceid=&amp;adposition=&amp;adgroup=95003645449&amp;campaign=9124878702&amp;creative=415542752365&amp;device=c&amp;keyword=jira&amp;matchtype=e&amp;network=g&amp;placement=&amp;ds_kids=p51242189318&amp;ds_e=GOOGLE&amp;ds_eid=700000001558501&amp;ds_e1=GOOGLE&amp;gclid=Cj0KCQjwraqHBhDsARIsAKuGZeGegz5pA0Tm-PewV5Ej1jCPs9rPAlc5BCYYI63zB1BEQImjZiKrBukaAn0DEALw_wcB&amp;gclsrc=aw.ds\" target=\"_blank\" rel=\"noopener noreferrer\">jira</a></li>\n</ol>\n<ul>\n<li>프로젝트 관리 툴로 사용해볼 수 있었다.</li>\n<li>deep하게 써보진 않았지만, 확실히 기능도 많고 편리했다.</li>\n<li>회사에서도 사용하면 좋을 것 같은데.. 팀장님이 추진하다가 아쉽게도 무산되었다.</li>\n</ul>\n<p>프로젝트를 진행하면서 계속 정리를 했으면 좋았을텐데.. 지금은 어떤 것들을 했는지 자세히 기억나지 않고 있다. 너무 개발에만 집중해서 그런가?</p>\n<p>앞으로는 프로젝트를 진행할 때 계속 정리할 수 있도록 습관을 만들어야겠다.</p>\n<h3>(3) ATDD 3기</h3>\n<p><a href=\"http://edu.nextstep.camp\" target=\"_blank\" rel=\"noopener noreferrer\">nextstep</a>에 <a href=\"https://edu.nextstep.camp/s/b7KHeSY2\" target=\"_blank\" rel=\"noopener noreferrer\">ATDD강의</a>가 열려서 바로 신청했다. 이 과정에서 JPA에 대해 몰랐던 부분도 많이 공부했고, TDD 강의 보다 더 실무적으로 유용했다. 그래서 회사에서 사용 중인 모바일 API에도 적용해놨다.</p>\n<p>다만 아쉬운 점은 단쿠키 + Java CC 11기 리뷰어 활동이랑 겹쳐서 3월 ~ 4월은 매일 새벽까지 작업했다. 덕분에 꼼꼼하게 체크하지 못한 부분도 있었고, 공부를 덜 한 부분도 있어서 아쉬움이 남았다.</p>\n<p>최종 과제 이후의 보너스 과제도 해보고 싶었지만 도저히 할 수 있는 물리적인 시간이 부족해서 포기했다.</p>\n<ul>\n<li>1주차: <a href=\"https://github.com/JunilHwang/atdd-subway-map\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/JunilHwang/atdd-subway-map</a></li>\n<li>2주차: <a href=\"https://github.com/JunilHwang/atdd-subway-path\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/JunilHwang/atdd-subway-path</a></li>\n<li>3주차: <a href=\"https://github.com/JunilHwang/atdd-subway-favorite\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/JunilHwang/atdd-subway-favorite</a></li>\n<li>4주차: <a href=\"https://github.com/JunilHwang/atdd-subway-fare\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/JunilHwang/atdd-subway-fare</a></li>\n</ul>\n<h3>(4) Java CC 11기 리뷰어</h3>\n<p>ATDD와 거의 동시에 <a href=\"https://edu.nextstep.camp/s/ApJ4Ca71\" target=\"_blank\" rel=\"noopener noreferrer\">Java CC 11기</a>가 시작되었다. 리뷰어로 활동하면서 미션까지 진행하다보니 말도 못하게 힘들었다. 거기에 회사 일도 겹쳐서 3월은 나에게 있어서 최악의 한 달이나 다름 없었다.</p>\n<p>그래서 본의 아니게 <a href=\"https://co-duck.com\" target=\"_blank\" rel=\"noopener noreferrer\">코덕</a> 에서 3월에 1등을 달성했다.</p>\n<p></p>\n<p>어쨌든 이렇게 매번 리뷰어로 신청하다보니 이제 리뷰어 활동이 크게 부담 되진 않고 있다.</p>\n<h3>(5) 우아한 테크코스 Pro2 리뷰어</h3>\n<p></p>\n<p>ATDD까지 수강을 완료한 덕분인지 <a href=\"https://edu.nextstep.camp/s/ffeVDScX\" target=\"_blank\" rel=\"noopener noreferrer\">우하한 테크코스 Pro 2기</a> 리뷰어로 활동할 수 있는 기회를 얻을 수 있었다. 사실 내가 리뷰어로 활동하는게 맞는건가? 싶은 의문을 지금도 가지고 있다.</p>\n<ul>\n<li>나는 백엔드 전문 개발자도 아니고,</li>\n<li>지금은 회사에서 아예 프론트엔드 파트 소속이고\n(하지만 아직 담당하고 있는 백엔드 프로젝트가 3개 있다..)</li>\n<li>무엇보다 경력이 무척 부족하다. 같이 리뷰하는 분들과 많이 비교된달까?</li>\n</ul>\n<p>그럼에도 불구하고 놓칠 수 없는 기회인 것 같아서 리뷰어로 활동하겠다고 수락했다. 덕분에 미션을 진행하는 분들과 더불어 스스로도 많이 성장할 수 있었다고 생각한다. 다만 이렇게 공부하고 배운 것들을 프론트 업무에 잘 녹여낼 수 있어야겠지만..</p>\n<p>그냥 요즘 얼떨떨 하다. 공부를 더 많이 해야겠지 싶다.</p>\n<h3>(6) 블랙커피 스터디 Level 3</h3>\n<p>6월에 기다리고 기다리던 <a href=\"https://edu.nextstep.camp/s/595ySo7M\" target=\"_blank\" rel=\"noopener noreferrer\">블랙커피 스터디 Level 3</a> 과정이 생겼다. 그래서 바로 신청했다.</p>\n<p>올 해에 가장 재밌게, 그리고 열심히 코딩을 하던 순간이 아닌가 싶다.</p>\n<p>이 스터디를 하기 전에 <a href=\"http://www.yes24.com/Product/Goods/96639825\" target=\"_blank\" rel=\"noopener noreferrer\">프레임워크 없는 프론트엔드 개발</a> 이라는 책을 읽었다. 단순히 가상 DOM 까진 아니여도 DIFF 알고리즘을 적용하는 과정이 무척 흥미로웠는데, 이 부분을 스터디를 진행하면서 녹여냈다.</p>\n<ul>\n<li>step1: <a href=\"https://github.com/next-step/js-youtube-classroom/pull/1\" target=\"_blank\" rel=\"noopener noreferrer\">나만의 유튜브 강의실</a>\n<ul>\n<li>iframe을 무한 스크롤로 불러올 때 다시 렌더링 되는 부분 때문에 성능이 많이 떨어져서 아쉬웠다.</li>\n<li>다음에 진행할 땐 성능 최적화좀 해야지..</li>\n</ul>\n</li>\n<li>step2: <a href=\"https://github.com/next-step/js-subway-admin/pull/1\" target=\"_blank\" rel=\"noopener noreferrer\">지하철 노선도 SPA</a>\n<ul>\n<li>이 때 DIFF 알고리즘을 적용했다.</li>\n<li>이 과정에서 삽질을 좀 많이 했으나, 어쨌든 렌더링 최적화를 할 수 있어서 만족!</li>\n</ul>\n</li>\n<li>step3: <a href=\"https://github.com/next-step/js-subway-admin/pull/6\" target=\"_blank\" rel=\"noopener noreferrer\">지하철 노선도 SPA + API</a>\n<ul>\n<li>특히 3주차 미션이 절정이었는데, API를 직접 NestJS 처럼 만들어봤다. 이 때 <strong>나는 정말 코딩을 즐기고 있다는 것</strong> 을 알게 되었다.</li>\n</ul>\n</li>\n</ul>\n<p>무엇보다 스터디를 진행하는 과정에서 보석 같은 분을 뵐 수 있었고, 사내 추천으로 우리 회사에 지원했다. 지금은 기술 면접까지 합격한 상태이다. 부디 같이 일할 수 있기를 🙏</p>\n<p>그런데 스터디가 제대로 끝나지 않았다. Step3 회고 때 사람들이 많이 불참해서 아예 과정을 리팩토링하여 이월하기로 결정되었다. 그래서 7월에 다시 진행할 예정이다.</p>\n<p>이번에는 아예 새로운 코드로 만들어볼 계획이다. 여태까지와는 다른 방식으로, 완전히 React 스럽게 구성해봐야지</p>\n<h3>(7) 독서</h3>\n<p>음.. 글을 쓰고 있는 지금은 어떤 책을 읽었는지 정확하게 기억나지 않고 있다. 다음엔 책을 읽자 마자 바로 리뷰를 작성하던가 해야지.. 😂</p>\n<p>그냥 기억나는 책 하나만 손에 꼽자면 앞서 언급한  <a href=\"http://www.yes24.com/Product/Goods/96639825\" target=\"_blank\" rel=\"noopener noreferrer\">프레임워크 없는 프론트엔드 개발</a> 이다. 내용도 크게 어렵지 않고, 가볍게 읽기 좋은 책이었다. <s>일 하기 싫을 때 읽었다.</s></p>\n<p>이 책을 통해서 <code>replaceWith</code> 라는 DOM API를 처음 알게 되었는데, 직접 사용해보니까 그렇게 편리한(?) API는 아닌 것 같았다. 그래도 <code>outerHTML</code> 의 찝찝함을 해결해줄 수 있어서 좋았다.</p>\n<p>책을 통해서 얻은 수확은 단순히 가상 돔을 사용하는 게 아니라 diff 알고리즘을 통해서 렌더링을 최적화 하는 부분이다. 이 외에도 router나 store의 경우 직접 구현해본 적이 있어서 사실 크게 흥미롭진 않았다.</p>\n<p>하반기에는 제발 독서 좀 하자!</p>\n<h3>(8) 단국대 Javascript Study</h3>\n<p>몇 달 전부터 스터디 만들어서 진행해보자고 마음만 먹고 실행에 옮기지 않고 있었는데, 무슨 바람이 불어서인지 6월에 급하게 커리큘럼을 만들고 <a href=\"https://github.com/DKU-STUDY/recruit/issues/1\" target=\"_blank\" rel=\"noopener noreferrer\">스터디 모집</a>을 진행했다. 일단 가볍게 10명만 모집해서 마루타(?)를 해보기로 했다.</p>\n<p>스터디는 다음과 같이 진행된다.</p>\n<ul>\n<li>1주차: Todo List 만들기</li>\n<li>2주차: Webpack + TodoList 리팩토링</li>\n<li>3주차: ExpressJS로 API 서버 만들기</li>\n<li>4주차: API 연동</li>\n<li>5주차: 배포하기</li>\n</ul>\n<p>생각보다 구성원들이 잘 참여중이고, 다들 열정이 넘쳐서 탈이다. 아마 잘 마무리 될 것 같다. 8월이 되면 똑같은 과정을 조금 보수해서 2기를 모집하고, level 2도 만들어서 진행해볼 생각이다.</p>\n<p>지금은 계속 내가 리뷰하고 있지만, 2기 부터는 1기를 잘 수행한 분들이 리뷰해주는 형태로 진행해볼 생각이다. 잘 되면 좋겠지만... 잘 될까..?</p>\n<h2>4. 이사</h2>\n<ul>\n<li>5월 말에 이사했다.\n<ul>\n<li>경기도 성남 → 서울시 서초구 반포동</li>\n<li>11평 → 14평</li>\n<li>월 이자 10만원 → 약 40만원</li>\n<li>회사까지 대중교통 1시간 → 걸어서 25분, 자전거 10분</li>\n</ul>\n</li>\n<li>이 과정에서 처음으로 은행 대출을 받았다.\n<ul>\n<li>보증금 2억 중에 1.8억을 대출 받았다.</li>\n<li>대출 상품은 <a href=\"https://www.khug.or.kr/hug/web/ig/dl/igdl000001.jsp\" target=\"_blank\" rel=\"noopener noreferrer\">허그안심전세대출</a>\n<ul>\n<li>최대 90%까지 대출 된다.</li>\n<li>국민은행에서 받았고, 최저 금리 2.5% 인데.. 말 그대로 최저금리다. 모든 혜택을 다 받아야 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>가구를 많이 샀다.\n<ul>\n<li>모션 데스크 + 모니터 암</li>\n<li>워시타워(세탁기 + 건조기)</li>\n<li>로봇 청소기</li>\n<li>침대 프레임</li>\n<li>에어컨</li>\n<li>주인님 물품\n<ul>\n<li>캣타워</li>\n<li>캣휠</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>덕분에 일시적으로 모든 현금을 다 소진했다.. 지금은 다시 모으는 중!</li>\n</ul>\n<p>이사를 오면서 제일 아쉬운 점은.. 옥상 풍경이다.</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>이런 풍경을 매일 볼 수 있었는데.. 그럴 수 없다는 점이 참 아쉽다. 이 동네에서 만난 고양이들도 좋았는데, 지금 키우고 있는 포동이의 어미도 이제 볼 수 없다는 점도 아쉽다.</p>\n<p></p>\n<p>이렇게 작은 고양이였는데!</p>\n<p></p>\n<p>지금은 어엿한 성묘가 되었다.</p>\n<p>어쨌든 이제 이사를 왔고, 이사를 온 날 바로 걸어서 한강에 갔다.</p>\n<p></p>\n<p>걸어서 2km 정도면 갈 수 있어서 가볍게 산책하는 겸 갔다오기 좋은 거리다.</p>\n<p>회사에서 집까지도 2km면 갈 수 있어서 요즘에는 매일 자전거를 타고 출퇴근 하고 있다.</p>\n<p>이제 대중교통을 이용하지 않아서 그런지 회사를 갔다 왔을 때 피곤하지 않아서 좋다.</p>\n<p></p>\n<p>마지막은 최근에 찍은 사진으로 마무리!</p>\n<h2>5. 하반기 계획</h2>\n<ul>\n<li>일단 영어공부는 포기했다.</li>\n<li>하반기에 어느 정도 한가해지면 수영을 다시 시작할 생각이다. <s>(대체 언제..?)</s></li>\n<li>이제 독서 위주의 공부를 좀 해보자.</li>\n<li>블로그 포스팅도 꾸준히 해보자.\n<ul>\n<li>노션에서 초안을 작성하니까 포스팅 하기가 더 수월하다.</li>\n</ul>\n</li>\n<li>좋은 팀(파트)을 만들어가자.\n<ul>\n<li>새하얀 도화지에 그림을 그리듯, 수려한 팀을 만들어보자.</li>\n<li>사실 모 아니면 도 아닌가..?</li>\n</ul>\n</li>\n<li>단국대 스터디 꾸준히 운영하기\n<ul>\n<li>우리 학교도 커뮤니티 구성이 필요하다.</li>\n<li>밑 바닥부터 천천히 쌓아올려보자.</li>\n<li>급하게 하지 말고, 천천히 차곡차곡!</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-07-12T02:30:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "주니어 개발자의 2020년 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/end/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/end/",
      "summary": "주니어 개발자의 2020년 12월 회고입니다.",
      "content_html": "\n<p></p>\n<blockquote>\n<p>6000개 Contributions을 목표로 했는데.. 아쉽게 다 채우진 못했다. 앞으로도 불가능 할 것 같다.</p>\n</blockquote>\n<p>오늘은 2020년의 마지막 날이다.\n그래서 2020년 회고로 올해를 마무리 하고자 한다.</p>\n<p>들어가기 전에, 2019년을 마무리 하면서 썼던 글을 먼저 소개한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">일년 전, 후회와 다짐</p>\n<p>2019년은 나에게는 권태기 같은 한 해였다.</p>\n<ul>\n<li>고등학교 시절부터 올해까지 몸담았던 기능대회에 대한 회의감.</li>\n<li>대학교 4년동안 만족할만한 프로젝트를 못해봤다는 후회감.</li>\n<li>비교적 빨리 개발을 시작했지만 그 기간이 그렇게 의미있는 시간은 아니였구나 하는 허탈감.</li>\n<li>무언가 후회해볼만한 경험조차 없던 것 같은 아쉬움만 남는 대학생활.</li>\n<li>이제 사회에 내던져지는 것에 대한 기대와 불안감.</li>\n</ul>\n<p>허둥지둥 살기만 했지 똑부러지게 현명하게 똑똑하게 살진 못한 것 같다.\n남들처럼 나 이렇게 열심히 살았어요 라고 회고도 써보고 싶은데 돌이켜 보니까 올해는 그렇게 열심히 살지도 않았고, 열심히 공부를 하지도 않았다.</p>\n<p><strong>2020년은 스스로에게 떳떳하고 당당한 해가 되기를!</strong></p>\n</div>\n<p>그렇게 <strong>기필고 2020년은 후회 없는 하루 하루를 보내기로 다짐</strong>했다.\n그래서 이 포스트는 이러한 다짐을 어떤 식으로 실천했는지 소개하는 회고라고 할 수 있다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">월간회고</p>\n<ul>\n<li><a href=\"/Review/2020-year/01-First-Quarter/\" target=\"_blank\" rel=\"noopener noreferrer\">1분기 회고</a>\n<ul>\n<li><a href=\"/Review/2020-year/01-January/\" target=\"_blank\" rel=\"noopener noreferrer\">1월</a></li>\n<li><a href=\"/Review/2020-year/02-February/\" target=\"_blank\" rel=\"noopener noreferrer\">2월</a></li>\n<li><a href=\"/Review/2020-year/03-March/\" target=\"_blank\" rel=\"noopener noreferrer\">3월</a></li>\n</ul>\n</li>\n<li><a href=\"/Review/2020-year/02-Second-Quarter/\" target=\"_blank\" rel=\"noopener noreferrer\">2분기 회고</a>\n<ul>\n<li><a href=\"/Review/2020-year/04-April/\" target=\"_blank\" rel=\"noopener noreferrer\">4월</a></li>\n<li><a href=\"/Review/2020-year/05-May/\" target=\"_blank\" rel=\"noopener noreferrer\">5월</a></li>\n<li><a href=\"/Review/2020-year/06-June/\" target=\"_blank\" rel=\"noopener noreferrer\">6월</a></li>\n</ul>\n</li>\n<li>3분기 회고\n<ul>\n<li><a href=\"/Review/2020-year/07-July/\" target=\"_blank\" rel=\"noopener noreferrer\">7월</a></li>\n<li><a href=\"/Review/2020-year/08-August/\" target=\"_blank\" rel=\"noopener noreferrer\">8월</a></li>\n<li><a href=\"/Review/2020-year/09-September/\" target=\"_blank\" rel=\"noopener noreferrer\">9월</a></li>\n</ul>\n</li>\n<li>4분기 회고\n<ul>\n<li><a href=\"/Review/2020-year/10-October/\" target=\"_blank\" rel=\"noopener noreferrer\">10월</a></li>\n<li><a href=\"/Review/2020-year/11-November/\" target=\"_blank\" rel=\"noopener noreferrer\">11월</a></li>\n<li><a href=\"/Review/2020-year/12-December/\" target=\"_blank\" rel=\"noopener noreferrer\">12월</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2>업무</h2>\n<p>생각보다 많은 프로젝트에 참여했다. 아마 내년에는 더 많은 일을 할 것 같은 느낌이 든다.</p>\n<h3>1. 파일럿 프로젝트</h3>\n<p><img src=\"https://junilhwang.github.io/zum_pilot/assets/img/008.22794366.gif\" alt=\"파일럿 프로젝트\"></p>\n<p>나는 작년 11월에 <a href=\"https://zuminternet.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">줌인터넷</a>에 입사했고, 입사 후에 바로 <strong>파일럿 프로젝트</strong>를 진행했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">파일럿 프로젝트</p>\n<p>줌인터넷은 신규 입사자(정확히는 신입)가 팀에 안전하게 적응할 수 있도록 6 ~ 8주 정도 <code>파일럿 프로젝트</code>를 진행한다.</p>\n</div>\n<p>일단 나는 학교 수업을 전부 듣고 싶어서 주 2일(12시간 근무) 출근 했고, 공강 시간에 틈틈이 파일럿 프로젝트를 진행했다.\n프로젝트의 주제는 <code>주제별 영상 제공 웹 서비스</code> 이며 다음과 같은 기술 스택을 사용했다.</p>\n<p><img src=\"https://zuminternet.github.io/images/portal/post/2020-01-20-ZUM-Pilot-provide-video/architecture/04.jpg\" alt=\"파일럿 프로젝트 기술 스택\"></p>\n<ul>\n<li>\n<p><strong>front-end</strong></p>\n<ul>\n<li>Vue-cli3(Webpack 4)</li>\n<li>Terser Webpack plugin</li>\n<li>SCSS, Lodash, Swiper</li>\n</ul>\n</li>\n<li>\n<p><strong>back-end</strong></p>\n<ul>\n<li>Java8 이상</li>\n<li>Spring Boot + Gradle</li>\n<li>Spring Data JPA (선택, DB는 H2사용)</li>\n<li>Ehcache</li>\n<li>Pebble Template Engine (선택)</li>\n</ul>\n</li>\n</ul>\n<p>자세한 내용은 다음 링크에서 확인할 수 있다.</p>\n<ul>\n<li><a href=\"https://github.com/junilhwang/zum_pilot\" target=\"_blank\" rel=\"noopener noreferrer\">저장소(코드)</a></li>\n<li><a href=\"https://junilhwang.github.io/zum_pilot\" target=\"_blank\" rel=\"noopener noreferrer\">파일럿 프로젝트 문서</a></li>\n<li><a href=\"https://zuminternet.github.io/ZUM-Pilot-provide-video/\" target=\"_blank\" rel=\"noopener noreferrer\">줌인터넷 기술블로그 - 주제별 영상 제공 웹 서비스</a></li>\n</ul>\n<p>확실히 파일럿 프로젝트 덕분에 팀에 잘 적응할 수 있었고 무엇보다 이렇게 긴 시간 동안 온전히 프로젝트에 집중할 수 있던 적이 여태까지 없었기 때문에 무척 재밌었다.\n사실 파일럿 프로젝트를 할 때가 <strong>회사를 다니는 동안 제일 재밌던 시기</strong>가 아니였을까 싶다.</p>\n<hr>\n<h3>2. 모바일 줌</h3>\n<p></p>\n<blockquote>\n<p>모바일줌의 경우 주간 트래픽이 300만회 정도 발생한다.</p>\n</blockquote>\n<p>입사 후 처음으로 담당하게 된 사내 프로젝트가 <a href=\"https://m.zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">모바일줌</a>이다.\n내가 생각했던 것 보다 프로젝트의 코드가 굉장히 많았고 딱 봐도 복잡한 설계 같았다.</p>\n<p>그런데 천천히 프로젝트를 분석하고 이것 저것 건드려보면서 이 프로젝트가 무척 견고하고 변화에 잘 대응할 수 있도록 설계된 것이 느껴졌다.</p>\n<p>특히 거의 모든 로직은 백엔드(Internal API)에서 관리하고, 프론트엔드는 백엔드에서 만들어준 데이터를 공용 컴포넌트로 출력 하는 형태였다.\n그래서 약 1년 동안 백엔드는 수십 번 배포했으나, 프론트엔드는 10회 안팎으로 배포했다.</p>\n<p>그래서 모바일줌의 컴포넌트를 사내 넥서스 레포에 올려놓고 사용해도 되지 않을까 논의하기도 했다.\n다만 완전히 공용 컴포넌트로 사용하기엔 위험 요소가 많아서 고려 중이라고 했다.\n나중에 시간적 여유가 있을 때 완전히 코어로 사용해도 좋을 것 같다.</p>\n<p>이 외에도 내가 작업한건 아니지만, <a href=\"https://zuminternet.github.io/ZUM-Mobile-NodeJS/\" target=\"_blank\" rel=\"noopener noreferrer\">모바일줌에 SSR을 적용</a>하는 등의 공사가 있었다.</p>\n<p>그리고 기존에 API 프로젝트에서 Mobile API를 따로 떼어나는 작업도 있었다.</p>\n<p><img src=\"https://www.plantuml.com/plantuml/svg/ZLFBQiCm4BpxAvRSzGUXn6bSsaCXq1v2ReebYDj8Ch9C0o7_thKUrYD9gK-QdV7iIreDXcepYbCb5UEms8y2NhIIPW5q04GM9EIxEdGd7bY74hhkUwYtRvR7CnwhqXdMjFrk98EjLb-ynKoN2l1pil2pbIBuy6nKl8w7EGMU2xPcCJ-pt3MwrupsXklext0KhAbfZwbUT3B2ZH8KyRMwcSV_UdBQkqqz7xKI79gpuNBeb9oRQ7QVXTHdp4rBEoL4OkBW7zFmbVbnO8DP00XXwaUI9rlD0yhNyO3r5QHJZ-IqnViChj0DFHVRlUGXkxb2PUyVB0aPUnBgouE-h3muDJdVxUBtcxXt22ybXAVyPGoRMN79yB7z0W00\" alt=\"API 분리 bn\"></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">현재 모바일 줌의 기술 스택은 다음과 같다.</p>\n<ul>\n<li>\n<p>Front Server</p>\n<ul>\n<li>Server: typescript + Node.js + Express.js + Zum Core + SSR\n<ul>\n<li>원래 Spring Boot를 사용했으나, SSR 때문에 node.js로 전환했다.</li>\n<li><a href=\"https://zuminternet.github.io/ZUM-Mobile-NodeJS/\" target=\"_blank\" rel=\"noopener noreferrer\">모바일 줌 SpringBoot → NodeJS 전환기 (feat. VueJS SSR)</a></li>\n</ul>\n</li>\n<li>Front: typescript + javascript + Vue.js\n<ul>\n<li>프론트 개발 환경의 경우 다음 링크에 대부분의 내용이 담겨있다.\n<ul>\n<li><a href=\"https://zuminternet.github.io/ZUM-Webpack-dev-proxy-part1/\" target=\"_blank\" rel=\"noopener noreferrer\">Webpack dev server를 이용한 개발 환경 구성 Part 01</a></li>\n<li><a href=\"https://zuminternet.github.io/ZUM-Webpack-dev-proxy-part2/\" target=\"_blank\" rel=\"noopener noreferrer\">Webpack dev server를 이용한 개발 환경 구성 Part 02</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>API Server</p>\n<ul>\n<li>Java</li>\n<li>Spring Boot</li>\n</ul>\n</li>\n</ul>\n<p>Front Server를 Node.js로 구성하여 대용량 트래픽을 더 적은 자원으로 관리할 수 있게 되었다.\n심지어 SSR을 적용하기 전보다 응답 시간이 더 줄어들었다.</p>\n</div>\n<p>모바일줌에 대해서 하고 싶은 이야기가 더 많지만,\n이 이상은 대외비라서 언급하기가 꺼려진다.\n확실한건 이 프로젝트 덕분의 자신감도 많이 생겼고,\n설계에 대한 안목도 넓힐 수 있었다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/f7833fcaf0a85fd066bd7d90ba61a6342df16ed7012359e344d47930e49e9310\" alt=\"Good\"></p>\n<hr>\n<h3>3. Open API CMS</h3>\n<p>줌인터넷에서 제공하는 <a href=\"https://dev.zum.com/search/cse_intro\" target=\"_blank\" rel=\"noopener noreferrer\">Open API</a>가 있는데,\n기존에는 이를 사용하는 벤더사의 정보를 application.yml 내에서 관리하고 있었다.\n벤더사가 점점 많아졌고, CMS Service로 떼어날 필요성을 느끼게 되어 진행한 프로젝트다.</p>\n<p>이 때 <a href=\"https://element.eleme.io/#/en-US\" target=\"_blank\" rel=\"noopener noreferrer\">Element UI</a>와 <a href=\"https://panjiachen.github.io/vue-element-admin/#/login?redirect=%2Fdashboard\" target=\"_blank\" rel=\"noopener noreferrer\">Vue-Element-Admin</a>을 이용해서 만들었다.</p>\n<p>그런데 <code>element-admin</code>에는 불필요한 컴포넌트와 기능이 많아서 정말 필요한 부분만 따로 떼어내서 사내 프로젝트에 올려놓고 사용 중이다.</p>\n<p>이 프로젝트를 통해서 다른 팀원들과 처음으로 협업(정확히는 분업이랄까..?)을 해볼 수 있었다.\n그리고 이 프로젝트에서 <a href=\"https://aws.amazon.com/ko/dynamodb/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS DynamoDB</a>를 사용했는데,\n다른 프로젝트에도 적용할까 하다가 흐지부지 됐다. 사용하기가 조금 애매하달까?</p>\n<p>학습은 했는데 언제 써먹을 수 있을지..</p>\n<p><img src=\"https://item.kakaocdn.net/do/1eb7b0fd47d19247cac42daa7547feab616b58f7bf017e58d417ccb3283deeb3\" alt=\"의문\"></p>\n<hr>\n<h3>4. 크롬 확장프로그램</h3>\n<p></p>\n<p>5월부터 8월까지 <a href=\"https://chrome.google.com/webstore/detail/zum-newtab/bghgeookcfdmkoocalbclnhofnenmhlf?hl=ko&amp;authuser=2\" target=\"_blank\" rel=\"noopener noreferrer\">크롬 확장프로그램 - Zum Newtab</a>을 만들었다.\n실제 프로젝트를 진행하기에 앞서 간단하게 <a href=\"https://github.com/JunilHwang/chrome-extension-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">튜토리얼</a>을 진행했다.</p>\n<p></p>\n<p>생각보다 어렵지 않았고, 자신감이 차오른 상태에서 개발을 진행했다.\n개발은 딱 한 달 정도 소요되었는데, 검수 과정에서 다양한 반려 사유가 존재했고 <u>완벽하게 통과하기 까지 3개월이 걸린 것이다.</u></p>\n<p></p>\n<p>확실히 확장프로그램을 만들면서 기술적으로 많은 생각을 하는 계기가 되었다.\n일반적인 웹 서비스가 아니기 때문에 고려해야할 것도 많았고,\n완성도에 대한 중요성 또한 다시 한 번 깨우칠 수 있었다.</p>\n<p><img src=\"https://zuminternet.github.io/images/front/post/2020-09-11-Zum-Chrome-Extension/12-architecture_01.png\" alt=\"전체 구조 bn\"></p>\n<p><s>그런데 또 하고 싶다는 생각이 들진 않는다.</s></p>\n<p>언젠간 <s>죽기 전에</s> 확장프로그램으로 재미난 일들을 해보고 싶다.</p>\n<p>확장프로그램에 대한 자세한 내용은 <a href=\"https://zuminternet.github.io/Zum-Chrome-Extension/\" target=\"_blank\" rel=\"noopener noreferrer\">줌인터넷 기술블로그 - 크롬 확장프로그램 개발⛏ 회고</a>에서 확인할 수 있다.</p>\n<hr>\n<h3>5. 핫이슈 CMS</h3>\n<p></p>\n<p>7월 ~ 11월 사이에는 <a href=\"https://zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">줌프론트</a>의 <strong>핫이슈 영역</strong>을 관리하는 CMS를 만들었다.</p>\n<ul>\n<li>CMS만 만들면 되는 것이 아니라 CMS에서 정제한 데이터를 응답하는 API를 새로 만들었다.</li>\n<li>미리보기 기능까지 있기 때문에 미리보기와 관련된 도메인에서 페이지를 요청할 경우,\n실서비스 데이터 대신 미리보기 데이터로 구성해서 보여줄 수 있게 API와 Preview Server를 구성했다.</li>\n</ul>\n<p>이 과정에서 줌프론트의 소스도 분석했고 <s>지옥문을 열었다</s>, 이와 엮인 다른 서비스 담당자와 커뮤니케이션을 진행했다.</p>\n<p>어쨋든 우여곡절 끝에 8월에 개발을 완료했고, 9월초에 첫 배포를 진행했다.\n다만 9월에 배포하고 나서 지속적으로 수정사항이 생기고 있었고,\n<code>이 상태로 배포했다고?</code> 싶은 버그도 많고 QA를 하지 않고 넘어간 부분도 무척 많았다.</p>\n<p>그러던 중 이미 기획측과 <strong>수 차례 논의하여 합의된 기능에 대해 컴플레인</strong>이 발생했고,\n이미 배포가 되어 있으며 서비스 데이터까지 삽입된 데이터베이스의 설계를 건드려야 하는 일이 발생했다.</p>\n<p>외래키가 무척 복잡하게 만들어진 상태에서 스키마를 변경하는 것 보단 새로 만드는게 나아보였다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/8f3c5af3fa1ca1557ad6cc0ef75d98c9f604e7b0e6900f9ac53a43965300eb9a\" alt=\"화난다 bn\"></p>\n<p>그래서 <code>hotissue_v2_schedule</code>, <code>hotissue_v2_template</code> 처럼 <strong>v2라는 suffix를 붙여서 테이블을 새로 만들었고,</strong>\n테이블의 변경에 따라 <strong>서비스 로직도 대폭 수정</strong>했다.</p>\n<p>결과적으로 트러블이 생긴 후에 많은 문제점이 겉으로 드러났기 때문에 문제를 잘 핸들링 할 수 있었다고 생각한다.\n앞선 경험을 토대로 2차 배포 전까지 QA를 꼼꼼하게 진행함은 물론 작은 기능에 대해서도 후에 문제가 발생하지 않도록 커뮤니케이션을 진행했다.\n덕분에 일하는 시간 보다 커뮤니케이션 하는 시간이 많았다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/1eb7b0fd47d19247cac42daa7547feab113e2bd2b7407c8202a97d2241a96625\" alt=\"지친다 bn\"></p>\n<p>그렇게 성공적으로 배포를 진행했고, 뒤탈없이 마무리 되는 듯 싶었다.\n사실 아직까지 큰 문제는 없는 상태인데, 코드가 너무 복잡해졌다.\n정확히는 한 개의 컴포넌트에 너무 많은 기능이 들어가있다.</p>\n<p>보통 API 관련 로직이나 Store를 다루는 로직은 컨테이너 컴포넌트에서 처리하고,\n하위 컴포넌트가 Props를 전달하거나 혹은 Custom Event로 처리하도록 만드는 편이다.\n이와 같은 방식으로 만들다 보니, 특정 컴포넌트 하나가 폭탄이 되었다.</p>\n<p><img src=\"https://junilhwang.github.io/TIL/assets/img/21.e5feae0d.png\" alt=\"폭탄\"></p>\n<blockquote>\n<p>고작 몇 백줄 정도의 코드지만, 팀 내에서 적극적으로 프론트엔드를 공부하는 사람이 나를 포함하여 두 명이다.\n그래서 다른 팀원이 이 코드를 보게 될 경우 무척 혼란스러울 수 있다.</p>\n</blockquote>\n<p>그래서 이걸 어떻게 해결할까 고민하다가 최근에 <a href=\"https://v3.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 3</a>에 도입된 <a href=\"https://composition-api.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a>를 사용하기로 했다.\n이를 위해 <a href=\"https://github.com/JunilHwang/vue-composition-todoapp\" target=\"_blank\" rel=\"noopener noreferrer\">Vue3 + Composition API + TodoList</a>을 먼저 만들었고,\n어느 정도 사용 방법을 익힌 후에 리팩토링을 진행했다.</p>\n<p><img src=\"https://junilhwang.github.io/TIL/assets/img/1.0b4185b2.png\" alt=\"리팩토링\"></p>\n<p>각각의 로직을 <code>useMenus</code>, <code>useSchedule</code>, <code>useTemplateItem</code>, <code>usePreview</code> 처럼 <strong>카테고리별로 묶어서</strong> 유지보수 할 수 있게 작업했다.\n그리고 <code>mapState</code>, <code>mapGetters</code>, <code>mapMutations</code>, <code>mapActions</code>, <code>craeteNamespaceHelper</code> 같은 API를 이용하여 컴포넌트에 Vuex를 결합하여 사용했는데, Composition API에는 이런게 없다.\n그래서 직접 만들어서 사용했다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useStoreModuleMapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">namespace</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapState</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>namespace<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapMutations</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namespace<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapActions</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namespace<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapGetters</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namespace<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> mapState<span class=\"token punctuation\">,</span> mapMutations<span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">,</span> mapGetters <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드는 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mapState<span class=\"token punctuation\">,</span> mapGetters<span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">,</span> mapMutations <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStoreModuleMapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>listLoading<span class=\"token punctuation\">,</span> appendLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"listLoading\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appendLoading\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>filteredTodoItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"filteredTodoItems\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>setTodoItems<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">SET_TODO_ITEMS</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SET_USER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fetchItems<span class=\"token punctuation\">,</span> addItem<span class=\"token punctuation\">,</span> updateItem<span class=\"token punctuation\">,</span> toggleItem<span class=\"token punctuation\">,</span> removeItem<span class=\"token punctuation\">,</span> removeAllItem<span class=\"token punctuation\">,</span> updatePriority<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token constant\">FETCH_ITEMS</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">ADD_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">UPDATE_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">TOGGLE_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">REMOVE_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">REMOVE_ALL_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">UPDATE_PRIORITY</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>사용하는데 큰 무리는 없으나, <u>IDE 추적을 지원하지 않기 때문에</u> 오히려 코드를 유지보수할 때 힘들 수 있다.\n<u>Vuex에 Composition API 전용의 유틸성 라이브러리가 추가 되길 기도할 뿐이다.. 😇</u></p>\n<p>그리고 Composition API를 사용하면 변수와 메소드를 구분할 수 있는 방법이 변수명 밖에 없기 때문에 네이밍을 더 잘 해야 하거나 혹은 사내 전용 컨벤션을 만들어야 한다.\n그래서 더 많이 고민해봐야 할 것 같다.</p>\n<hr>\n<h3>6. 크롬 브라우저 전용 서비스</h3>\n<blockquote>\n<p>제일 최근에 진행한 프로젝트고, 아직 정식으로 사용자에게 공개된 서비스가 아니라서 많은 정보를 언급할 수 없는 상태이다.</p>\n</blockquote>\n<p>11월 ~ 12월에는 <strong>크롬 브라우저(혹은 최신 브라우저)를 전용으로 서비스</strong>하는 프로젝트를 담당하여 진행했다.\n올해의 마지막 프로젝트이며 입사 이후에 처음으로 신규 서비스를 처음부터 만드는 것이기 때문에 무척 재밌었다.</p>\n<p>모바일줌과 똑같은 기술 스택을 사용 중이며</p>\n<ul>\n<li>Typescript</li>\n<li>Javascript</li>\n<li>Node.js</li>\n<li>Vue.js</li>\n<li>Server Side Rendering</li>\n<li>Java</li>\n<li>Spring</li>\n</ul>\n<p>아마 조만간 사용자단에 정식으로 공개하고 홍보할 것 같다.\n지금은 내가 생각하기에 불만족스러운 부분이 있어서 조금만 더 공개가 늦춰졌으면 하는 바람도 있다.</p>\n<hr>\n<h3>7. 팀원, 그리고 협업</h3>\n<p>올해에 총 4명, 조직개편 전 팀원까지 합하면 7명의 팀원이 이직했다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/b888ef9aeedc7e048b34a7856ea2ce94ac8e738cb631e72fdb9a96b36413984e\" alt=\"훌쩍 bn\"></p>\n<p>특히 내가 입사했을 때 <strong>무척 존경하고 자극이 되어주시던 분들</strong>이 가셔서 참 아쉽기도 하고, 더 좋은 곳으로 가셨으니 기쁘기도 하다.\n이제 다른 회사로 가셨지만, 이 분들과 인연을 맺었음에 감사할 따름이다.\n나도 누군가에게 <strong>긍정적인 영향</strong>을 줄 수 있는 사람이 되기 위해서 부단히 노력해야겠다 😁</p>\n<p>그래도 원래 <strong>가깝게 지내던 지인이 내 추천을 통해 팀에 합류</strong>하게 되었고,\n앞으로 새로운 사람들도 계속 들어올 예정(과연..?)이기 때문에 새로운 인연을 기대하는 중이다.</p>\n<p>그리고 현재 나의 사수이자 대부분의 업무를 같이 수행 중이며 <strong>항상 나에게 큰 가르침을 선사해 주시는 효준 선임님이 아직 계시기 때문에</strong> 든든하다!\n이분 까지 가시면.. 😱.. 그래도 천천히 마음의 준비를 해야지 싶다. 그럴라면 지금 보다 더 깊은 수준의 지식을 쌓아야겠지만, 이게 이 업계의 숙명이 아닐까?</p>\n<hr>\n<h2>개발 역량 강화</h2>\n<p>이제부터가 본격적인 회고라고 할 수 있다. 쓰는 나도 지루한데, 읽는 사람도 지루하지 않을까 싶은 걱정이 앞서고 있다.</p>\n<hr>\n<h3>1. 일일커밋</h3>\n<p>올해의 제일 큰 목표중 하나이자 착실하게 이뤄낸 목표가 바로 <strong>일일커밋</strong>이다.</p>\n<p></p>\n<p>처음에는 그냥 매일 매일 꾸준히만 하자고 생각했었는데, 하다보니 너무 많이 해버렸다..</p>\n<p><img src=\"https://camo.githubusercontent.com/6cd4946662de5fc82b62058f0b9993eb1a7bde6fa9c2fb5d551f7add09acd0d9/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d6a756e696c6877616e67\" alt=\"통계 bn\"></p>\n<ul>\n<li>\n<p>1분기</p>\n<ul>\n<li><code>1월</code> <strong>7개의 Repository</strong>에서 <strong>357개의 Commit</strong>을 남겼다.</li>\n<li><code>2월</code> <strong>4개의 Repository</strong>에서 <strong>152개의 Commit</strong>을 남겼다.</li>\n<li><code>3월</code> <strong>3개의 Repository</strong>에서 <strong>168개의 Commit</strong>을 남겼다.</li>\n</ul>\n</li>\n<li>\n<p>2분기</p>\n<ul>\n<li><code>4월</code> <strong>20개의 Repository</strong>에서 <strong>475개의 Commit</strong>을 남겼다.</li>\n<li><code>5월</code> <strong>11개의 Repository</strong>에서 <strong>665개의 Commit</strong>을 남겼다.</li>\n<li><code>6월</code> <strong>12개의 Repository</strong>에서 <strong>436개의 Commit</strong>을 남겼다.</li>\n</ul>\n</li>\n<li>\n<p>3분기</p>\n<ul>\n<li><code>7월</code> <strong>8개의 Repository</strong>에서 <strong>357개의 Commit</strong>을 남겼다.</li>\n<li><code>8월</code> <strong>19개의 Repository</strong>에서 <strong>397개의 Commit</strong>을 남겼다.</li>\n<li><code>9월</code> <strong>18개의 Repository</strong>에서 <strong>770개의 Commit</strong>을 남겼다.</li>\n</ul>\n</li>\n<li>\n<p>4분기</p>\n<ul>\n<li><code>10월</code> <strong>13개의 Repository</strong>에서 <strong>503개의 Commit</strong>을 남겼다.</li>\n<li><code>11월</code> <strong>10개의 Repository</strong>에서 <strong>198개의 Commit</strong>을 남겼다.</li>\n<li><code>12월</code> <strong>8개의 Repository</strong>에서 <strong>326개의 Commit</strong>을 남겼다.</li>\n</ul>\n</li>\n</ul>\n<p>그리고 이에 대한 양분으로 사용된 주된 Repository 들이다.</p>\n<ul>\n<li><a href=\"https://github.com/junilhwang/TIL\" target=\"_blank\" rel=\"noopener noreferrer\">TIL</a>\n<ul>\n<li>매일매일 공부한 것들을 기록하기 위해서 만든 저장소인데, 월간 회고 때만 사용 중이다. <s>이럴꺼면 왜 만들었냐</s></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/junilhwang/java-clean-code\" target=\"_blank\" rel=\"noopener noreferrer\">java-clean-code</a>\n<ul>\n<li>NextStep의 Java TDD CC 8기 과정에서 산출된 코드를 모아놨다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/junilhwang/black-coffee-study\" target=\"_blank\" rel=\"noopener noreferrer\">black-coffee-study</a>\n<ul>\n<li>NextStep의 블랙커피 스터디 미션 수행 과정에서 산출된 코드를 모아놨다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/junilhwang/DKU-Software-Engineering-Logging-Service\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-Software-Engineering-Logging-Service</a>\n<ul>\n<li>올해 초에 진행했던 사이드 프로젝트인데, 미완성으로 남겨둔 상태이다. 언제 다시 시작해야 할까..? 이제 내가 뭘 하려고 했는지도 가물가물 하다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/junilhwang/DKU-Software-Engineering-Logging-Service\" target=\"_blank\" rel=\"noopener noreferrer\">react-facebook-clone</a>\n<ul>\n<li>프로그래머스 리액트 스터디를 진행하면서 산출된 코드를 모아놨다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/est-react-study/postman-junil\" target=\"_blank\" rel=\"noopener noreferrer\">postman-clone</a>\n<ul>\n<li>사내 리액트 스터디에서 산출된 코드를 모아놨다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/DKU-STUDY/Algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Algorithm</a>\n<ul>\n<li>단국대 알고리즘 스터디인데 사실 내가 기여한 부분이 어느 정도인지 잘 모르겠다. 아마 별로 없을 것 같다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/JunilHwang/discord-study-bot\" target=\"_blank\" rel=\"noopener noreferrer\">discord-study-bot</a>\n<ul>\n<li>github DKU-STUDY 그룹에서 이벤트가 발생하면 디스코드로 알림을 보내주는 프로젝트이다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/JunilHwang/zum_pilot\" target=\"_blank\" rel=\"noopener noreferrer\">pilot</a>\n<ul>\n<li>파일럿 프로젝트 코드와 문서를 모아놨다.</li>\n</ul>\n</li>\n</ul>\n<p>그리고 겸사겸사 <a href=\"https://co-duck.com\" target=\"_blank\" rel=\"noopener noreferrer\">코딩덕후</a> 서비스를 이용하면서 의욕을 불태웠다.</p>\n<p></p>\n<p>6월, 7월 집계는 무슨 문제인지는 모르겠으나 각각 하루씩 커밋에 대한 집계가 되지 않았다 😂</p>\n<p>어쨌든 <strong>1위를 세 번</strong>, 2위와 3위는 각각 한 번씩 했다.\n아직 12월이 마무리되지 않아서 12월 뱃지는 없는 상태이다.</p>\n<p></p>\n<p>아마 12월 일일커미터 뱃지와 TOP 10 뱃지를 받지 않을까 싶다.</p>\n<p>일일커밋을 하면서 느낀 것은, 배보다 배꼽이 더 커져버린 다는 것이다.\n내년에는 커밋에 집착하기 보단 실제로 지식을 쌓는 것에 집중할 예정이다.</p>\n<p>막상 잔디밭이 전부 채워진 것을 보고 있으니 많이는 하지 않더라도 한 개 씩은 하는 게 좋지 않을까? 하는 생각도 든다.</p>\n<hr>\n<h3>2. 사이드 프로젝트</h3>\n<p>개인적으로 진행한 사이드 프로젝트에 대해 정리해본다.\n덕분에 공부는 많이 했으나 제대로 마무리 하질 않아서 아쉬움이 많이 남는다.</p>\n<h4>(1) DKU-Software-Loggging-Service</h4>\n<p><a href=\"https://github.com/junilhwang/DKU-Software-Engineering-Logging-Service\" target=\"_blank\" rel=\"noopener noreferrer\">프로젝트 레포지토리 바로가기</a></p>\n<p>파일럿 프로젝트가 끝난 후에 사이드 프로젝트를 진행 해보고 싶어서 뭘 만들까 고민하다가 <strong>Github와 관련된 서비스</strong>를 만들기로 했다.\n자신의 Github에 올린 <strong>Markdown 파일</strong>을 읽어올 수 있고,\n<strong>Webhooks</strong>를 이용하여 자동으로 포스트가 업데이트되도록 만들었다.\n물론 수동으로 갱신할 수도 있다.</p>\n<p>일단 위에 언급한 기능을 만드는 것은 어렵지 않았으나 <strong>디자인도 구리고 퀄리티가 낮았다.</strong>\n그래서 이것저것 서브 기능을 넣어야 하는데 그것마저 쉽지가 않았다.\n<u>혼자서 사이드 프로젝트를 하는 게 이럴 때 버겁구나 느꼈다.</u></p>\n<p>그래서 만족할 때 까지 리팩토링을 하거나 <s>벌써 리팩토링만 몇 번 한 것인지...</s>\n기술 스택을 최대한 많이 공부하는 등의 목표를 가지고 진행 했는데 사실 그 마저도 쉽지 않았다.</p>\n<p>기술이 워낙 다양하기도 하고, 그 중에 무엇을 골라서 얼만큼 공부해야 좋을지 감이 잡히지 않았기 때문이다.</p>\n<ul>\n<li>\n<p><em>첫 번째 성과: Open API 습득</em></p>\n<ul>\n<li>사이드 프로젝트를 하면서 얻은 첫 번째 성과는 <strong>Open API를 사용하는 방법</strong>을 완전히 터득한 것이다.\n이전에는 API를 연동할 때 문서를 봐도 모르겠고,\n다른 사람들이 작성한 글들을 봐도 감이 오질 않았는데 정말 어떤 API를 사용하더라도 큰 문제가 없을 정도로 이해한 상태다.</li>\n<li>사실 사이드 프로젝트 덕분이라기보단 입사 직후에 진행했던 파일럿 프로젝트의 영향이 더 큰 것 같다.</li>\n</ul>\n</li>\n<li>\n<p><em>두 번째 성과, NestJS 습득</em></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">NestJS 소개</p>\n<p>NestJS는 <strong>Google</strong>에서 만든 <strong>Server Side Framework</strong>이다.</p>\n<ul>\n<li><strong>Java의 Spring과 매우 비슷한 방식</strong>으로 작동한다.</li>\n<li><strong>DI(Dependency Injection)</strong> 방식으로 구성한다.</li>\n<li><strong>DDD</strong> 형태의 프로젝트 구조를 권장한다.</li>\n<li><strong>Typescript</strong>를 사용한다.</li>\n<li><strong>express</strong> 기반이다.</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">NestJS의 철학</p>\n<p>NestJS는 Angular의 영향을 받아 다음과 같은 철학 기반을 만들어졌습니다.</p>\n<ul>\n<li>고도의 테스트 지원</li>\n<li>효율적인 확장</li>\n<li>느슨한 결합</li>\n<li>유지 관리가 용이한 애플리케이션</li>\n</ul>\n</div>\n<ul>\n<li>대학교 재학 중에 <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS</a>가 뭔가 좋아보여서 공부했었는데, 너무 어려워서 포기했다.\n국내 자료를 아무리 찾아봐도 NestJS에 대한 내용은 거의 볼 수 없었다. 대부분 해외에서 사용하고 있는데, 영어에 너무 취약하다 보니.. 이해가 너무 어려웠다.</li>\n<li>그런데 이번에 무심코 다시 적용을 시도했고, 결과적으로 좋은 선택이 되었다.</li>\n<li>하지만 Spring을 많이 사용해봤고 <strong>Spring에 사용된 기본적은 디자인패턴이나 철학을 이해하고 있다면</strong>, NestJS를 이해하는 데 큰 무리가 없는 것 같다.</li>\n<li>그래서 사이드 프로젝트의 제일 큰 수확은 사실 <strong>NestJS 사용법 숙지</strong>가 아닐까 싶다.</li>\n</ul>\n</li>\n<li>\n<p><em>세 번째 성과: Server Side Rendering</em></p>\n<ul>\n<li>진짜 SSR 때문에 한 동안 고생을 너무 많이 했다.</li>\n<li>_Vue에서 제공하는 가이드라인이 너무 빈약하다.</li>\n<li>API 문서도 잘못 되었거나 반영되지 않은 것들이 많았다.</li>\n<li>각설하고 문제점과 약간의 해결과정을 나열해보자면 다음과 같다.\n<ul>\n<li>\n<p><code>첫 번째 문제</code> SSR과 CSR을 같이 하기 위한 가이드라인이 없다.</p>\n<ul>\n<li><a href=\"https://ssr.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue의 공식문서</a>, 각종 커뮤니티 사이트,\n기술 블로그 등을 폼하여 눈씻고 찾아봐도 SSR과 CSR을 같이 사용하는 방법에 대한 가이드라인은 없었다.\n<u>있다면 누가 좀 알려주길..</u></li>\n<li>어쨌든 SSR에 CSR을 연동하기 위해선 다음과 같은 과정이 필요하다.</li>\n<li>CSR의 Template에 SSR의 Template을 합쳐야 한다.</li>\n<li>CSR 코드를 번들링(빌드) 한다. <u>이 때 Template도 Bundling 코드에 포함된다.</u></li>\n<li>CSR에서 Build된 Template를 SSR에서 사용한다.</li>\n<li>이와 관련 내용도 추후에 상세하게 정리해서 올릴 예정이다.</li>\n</ul>\n</li>\n<li>\n<p><code>두 번째 문제</code> window와 document를 사용하는 코드들*</p>\n<ul>\n<li>SSR은 CSR의 코드를 Server에서 실행하여 HTML 코드를 만들고 바로 렌더링한다.</li>\n<li>이 때 발생하는 문제가 <u>window와 document는 Server Side에서 사용할 수 없다는 것이다.</u></li>\n<li>그래서 직접 window와 document를 만들어주거나 Render와 관련된 코드에는 window와 document를 사용하지 않는 것이다.</li>\n<li><strong>그런데 이게 말이 쉽지 직접 해보면 욕나온다.</strong></li>\n<li>어쨌든 어떤 방법이 제일 좋을까 고민하다가 찾아난 해결책이 JSDOM을 사용하는 것이다.<div class=\"custom-container tip\"><p class=\"custom-container-title\">JSDOM</p>\n<p>가상의 window와 document를 만들어준다.</p>\n</div>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> join <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BundleRenderer<span class=\"token punctuation\">,</span> createBundleRenderer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-server-renderer'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DOMWindow<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSDOM</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'jsdom'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token number\">3000</span> <span class=\"token operator\">:</span> <span class=\"token number\">8080</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> bundlePath <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../../../resources/vue-ssr-server-bundle.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> htmlStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SSRService</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">getRenderer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BundleRenderer <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token function\">createBundleRenderer</span><span class=\"token punctuation\">(</span>bundlePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token literal-property property\">runInNewContext</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token function-variable function\">template</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">renderState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">renderScripts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> <span class=\"token string\">'Renderer Error'</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">public</span> <span class=\"token function\">getDom</span> <span class=\"token punctuation\">(</span>contextURL<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> DOMWindow<span class=\"token punctuation\">,</span> Document <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>contextURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>window<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSDOM</span><span class=\"token punctuation\">(</span>htmlStr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">]</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">throw</span> <span class=\"token string\">'JSDOM Error'</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</li>\n<li>\n<p><code>세 번째 문제</code> 제대로된 Tutorial을 찾을 수 없다.</p>\n<ul>\n<li>SSR의 가장 큰 문제점 중 하나가 바로 제대로된 튜토리얼이 없다는 것이다.</li>\n<li>github를 찾아봐도 구글링을 해봐도 <u>이것만 보면 이해할 수 있다 싶은 튜토리얼은 존재하지 않았다.</u></li>\n<li>그래서 내가 만들었다 --&gt; <a href=\"https://github.com/JunilHwang/vue-ssr-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">Vue SSR Tutorial</a></li>\n<li>일단 설명은 없고 소스코드만 존재한다. <s>뭐.. 이해할 사람은 이해하겠지.</s></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>네 번째 성과: Mono Repo 적용</em></p>\n<ul>\n<li>\n<p>Client와 Server에 Typescript를 적용하면서 생긴 고민이 <u>공통 타입을 잘 활용할 수 있는 방법이 없을까?</u> 였다.</p>\n</li>\n<li>\n<p>예를들어 Server에서 Github API를 이용하여 <code>Repository</code> 정보에 대한 타입을 <code>GithubRepository</code>로 정의했다.\n<strong>그런데 이 타입은 Client에서도 필요하다.</strong></p>\n</li>\n<li>\n<p>그래서 처음엔 Client가 프로젝트의 코드상으로 Server에 접근할 수 있도록 만들어야 했다.\n만들면서 계속 찜찜했다. <u>Type이 Server에 종속되어있는게 맞을까?</u> 라는 생각 때문이다.\n그래서 Mono Repository에 대해 찾아봤고, 두 가지 방법이 존재했다.</p>\n<ul>\n<li>\n<p>Yarn Workspace</p>\n<ul>\n<li><a href=\"https://musma.github.io/2019/04/02/yarn-workspaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">[Node] yarn workspaces (프로젝트 참조)</a></li>\n<li><a href=\"https://medium.com/@deptno/monorepo-yarn-workspace-e81e3e078100\" target=\"_blank\" rel=\"noopener noreferrer\">🌸 모노레포. Lerna? Yarn Worksapce!</a></li>\n</ul>\n</li>\n<li>\n<p>Lerna</p>\n<ul>\n<li><a href=\"https://medium.com/@pks2974/mono-repo-%EB%A5%BC-%EC%9C%84%ED%95%9C-lerna-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-65c22029988\" target=\"_blank\" rel=\"noopener noreferrer\">Mono Repo 를 위한 Lerna 간단 정리하기</a></li>\n<li><a href=\"https://www.awesomezero.com/development/lerna/\" target=\"_blank\" rel=\"noopener noreferrer\">Lerna 훑어보기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>권장하는 것은, 두 가지를 같이 사용하는 것이다. 그래서 나도 두 가지 모두 사용했다.</p>\n<ul>\n<li><a href=\"https://simsimjae.tistory.com/384\" target=\"_blank\" rel=\"noopener noreferrer\">yarn workspace와 Lerna.js로 모노레포 만들기 - 심심재</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이렇게 일을 벌려놨는데, 5월에 넥스트 스텝 Java TDD CC 8기 과정을 신청했고 그렇게 6월까지 해당 과정에만 집중해야 했다.</p>\n<hr>\n<h4>(2) 디스코드 봇</h4>\n<p></p>\n<p>6월에 <a href=\"https://github.com/DKU-STUDY/\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-STUDY</a> 채팅방을 디스코드로 옮기면서 <a href=\"https://github.com/JunilHwang/discord-study-bot\" target=\"_blank\" rel=\"noopener noreferrer\">디스코드 봇</a>을 만들었다.</p>\n<p><u>Pull Request, Push, Issue, Review 등이 발생하면 디스코드 봇이 디스코드 채널에 메시지를 보내도록</u> 만들어놨다.</p>\n<p>처음에는 <code>express.js</code>로 만들었고, 추후에 <code>nest.js</code>로 리팩토링했다.</p>\n<ul>\n<li>기술스택\n<ul>\n<li>node.js</li>\n<li>nestjs</li>\n<li>vue.js =&gt; CMS를 만들려고 추가했는데 만들다 말았다.</li>\n<li><a href=\"https://discord.com/developers/docs/intro\" target=\"_blank\" rel=\"noopener noreferrer\">Discord API</a></li>\n<li><a href=\"https://discord.com/developers/docs/topics/oauth2#bots\" target=\"_blank\" rel=\"noopener noreferrer\">Discord Bot</a></li>\n<li><a href=\"https://docs.github.com/en/free-pro-team@latest/developers/webhooks-and-events/about-webhooks\" target=\"_blank\" rel=\"noopener noreferrer\">Github Webhooks</a></li>\n</ul>\n</li>\n</ul>\n<p>봇을 만든 후에 다음과 같은 추가 기능을 CMS 페이지를 통해 구축하려고 했다.</p>\n<ul>\n<li><strong>Github 관련</strong>\n<ul>\n<li>Github 로그인</li>\n<li>Github Repository 불러오기</li>\n<li>Github Repository를 선택하면 관련된 Hooks 불러오기</li>\n<li>Hooks를 추가/수정/삭제하기</li>\n<li>Hooks와 관련된 템플릿 작성하기</li>\n</ul>\n</li>\n<li><strong>Discord 관련</strong>\n<ul>\n<li>Discord 로그인</li>\n<li>Discord 채널 목록 불러오기</li>\n<li>Discord의 채널 ID 복사하기</li>\n</ul>\n</li>\n<li><strong>Discord와 Github 연동 관련</strong>\n<ul>\n<li>Github Hooks에 Discord Channel ID 연결하기</li>\n</ul>\n</li>\n</ul>\n<p>그런데 곰곰이 생각해보니 굳이 만들 필요가 없었고, 추후에 <strong>channel ID만 parmeter를 받아오는 형태로 수정</strong>했다.</p>\n<p>몇 개월 동안 유용하게 잘 사용 중이다.</p>\n<hr>\n<h4>(3) Devears</h4>\n<p>Discrod Bot을 만든 후에 블랙커피 스터디와 리액트 스터디, 그리고 넥스트 스텝 리뷰어 활동 때문에 따로 사이드 프로젝트를 수행할 틈이 없었다.\n그렇게 연말이 되었고, 기존에 이어서 하기보단 아예 새로 사이드 프로젝트를 진행하고 싶었다.</p>\n<p>기술 스택은 Spring과 React을 사용하기로 결정했고,\n어떤 주제로 할까 고민하다가 현재 <a href=\"https://github.com/dku-study\" target=\"_blank\" rel=\"noopener noreferrer\">운영중인 스터디</a>를 관리할 수 있는 서비스를 만들어보기로 했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Devears</p>\n<ul>\n<li>단국대의 상징이 곰(Bear)이다.</li>\n<li>Developer(개발자) + Bear(곰) = Devears</li>\n<li>즉, 단국대 개발자들이라는 뜻을 가졌다고 볼 수 있다.</li>\n</ul>\n</div>\n<p>11월에는 Back-end 위주로 작업 했는데 사실 정확히 어떤 기능을 추가할지 정해놓질 않아서 갈팡 질팡 하는 중이다.\n현재 까지 구현한 기능은 Github 로그인과 토큰 발급, 그리고 로그아웃이 전부이다.\n뭐.. 거의 안 한 것과 다름 없다</p>\n<p>12월에는 대충(정말 대충..) <a href=\"https://dku-study.github.io/Devears/\" target=\"_blank\" rel=\"noopener noreferrer\">요구사항 문서</a>를 작성했고, Front-end 위주의 작업을 진행했다.</p>\n<p></p>\n<p>로고는 <a href=\"https://www.logogenie.net/\" target=\"_blank\" rel=\"noopener noreferrer\">logogenie</a>에서 검색하여 나온 결과물 중에 마음에 드는 것을 참고하여 대충 급하게 만들었다.\n실제로 서비스 하기 전에 외주를 맡기던가 할 생각이다.</p>\n<p>이렇게 혼자서 무언가를 만들 때면 항상 UI 구성이 때문에 고민이다.\n어떻게 만들어도 이상하게 보이는 마법이랄까..?\n일단 죽이 되든, 밥이 되든 만들어 보고자 한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Front-end 기술 스택</p>\n<p>현재까지 진행하면서 사용한 <strong>프론트엔드 기술 스택</strong>은 다음과 같다.</p>\n<ul>\n<li>typescript</li>\n<li>Create React App</li>\n<li>react</li>\n<li>redux</li>\n<li>redux-saga</li>\n<li>react-router-dom</li>\n<li>connected-react-router</li>\n<li>antd</li>\n<li>styled-jsx</li>\n<li>sass</li>\n<li>json-server</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">위의 기술을 사용하면 정리한 팁들이다.</p>\n<ul>\n<li>\n<p>Create React App Custom</p>\n<ul>\n<li><a href=\"https://sustainable-dev.tistory.com/126\" target=\"_blank\" rel=\"noopener noreferrer\">CRA로 만든 리액트 프로젝트에서 eject하지 않고 optional chaining 사용하기</a>\n<ul>\n<li>customize-cra</li>\n<li>react-app-rewired</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>React Router Layout</p>\n<ul>\n<li><a href=\"https://reactrouter.com/web/guides/quick-start\" target=\"_blank\" rel=\"noopener noreferrer\">React Router</a></li>\n<li><a href=\"https://simonsmith.io/reusing-layouts-in-react-router-4\" target=\"_blank\" rel=\"noopener noreferrer\">Reusing layouts in React Router 4</a></li>\n<li><a href=\"https://stackoverflow.com/a/46201798\" target=\"_blank\" rel=\"noopener noreferrer\">React Router v4 with multiple layouts</a></li>\n</ul>\n</li>\n<li>\n<p>Mock API</p>\n<ul>\n<li><a href=\"https://react.vlpt.us/redux-middleware/08-json-mockServer.html\" target=\"_blank\" rel=\"noopener noreferrer\">json-mockServer - 벨로퍼트와 함께하는 모던 리액트</a></li>\n<li><a href=\"https://github.com/typicode/json-mockServer\" target=\"_blank\" rel=\"noopener noreferrer\">github/json-mockServer</a></li>\n</ul>\n</li>\n<li>\n<p>Proxy</p>\n<ul>\n<li><a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development\" target=\"_blank\" rel=\"noopener noreferrer\">CRA - Proxying API Requests in Development</a></li>\n<li><a href=\"https://velog.io/@velopert/create-react-app-v2#5-proxy-%EC%84%A4%EC%A0%95%EC%9D%84-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EA%B0%80%EB%8A%A5\" target=\"_blank\" rel=\"noopener noreferrer\">Create-react-app V2 릴리즈! 무슨 변경 사항이 있을까?</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>이번에는 사용한 기술에 대해서 제대로 정리해볼 생각이다.</p>\n<hr>\n<h4>(4) 단쿠키 개발팀 합류</h4>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">단쿠키</p>\n<ul>\n<li><a href=\"https://www.dankookie.com/\" target=\"_blank\" rel=\"noopener noreferrer\">단쿠키</a>는 나의 모교인 단국대학교 커뮤니티 사이트이다.</li>\n<li><a href=\"https://everytime.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">에브리타임</a>이 등장하기 전까진 굉장히 활성화된 커뮤니티였는데, <u>에브리타임 덕분에 이용자수가 대폭 감소했다.</u></li>\n</ul>\n</div>\n<p>나는 <strong>에브리타임</strong>이라는 대학교 커뮤니티를 자주 사용하는 편이다.\n개발과 관련된 정보를 공유하기도 하고, 진로에 대해 고민하는 후배들과 이야기를 나누는 등의 소통 창구로 사용하고 있다.</p>\n<p>그러던 중 눈에 띄는 글을 하나 발견했다.</p>\n<blockquote>\n<p>글을 캡쳐해서 올릴라 했는데.. 지금 찾아보니 삭제됐다. 아쉬운대로 단쿠키에 올라온 글을 캡쳐해서 올린다.</p>\n</blockquote>\n<p></p>\n<p>보자마자 지원하고 싶다는 생각을 했다.\n그런데 나는 졸업생이다보니 이걸 지원해야하나 말아야하나 고민하다가 졸업생도 지원 가능한지 물어보는 댓글을 남겼고, 가능하다는 답변을 받았다.</p>\n<p></p>\n<p>그래서 고민 끝에 지원했다.</p>\n<p></p>\n<p>이렇게 코딩 테스트 및 온라인 면접 일정을 잡고 진행했다.\n코딩 테스트 문제 자체는 어렵지 않았으나, <u>내가 너무 어렵게 생각해서 조금..이 아니라 많이 헤맸다.</u></p>\n<p>이 외에도 다양한 면접 질문을 받았는데 내가 생각하지도 못했던 부분들이 있어서 조금 당황했다.\n<u>당황했던 질문들은 대체로 보안과 관련된 질문이었고, 내가 보안과 관련된 도메인에 약하다는 것을 인지했다.</u>\n덕분에 공부할 것들이 늘었다 😅</p>\n<p>여담으로, 학부시절에 같이 단쿠키측에서 함께 하고 싶은 의향 있으면 연락 달라고 했었는데 그 당시에는 정말 미친듯이 바빠서 아예 연락을 하지 않았다.\n당시에 작은 에이전시 회사에서 원격근무도 하고 있었고, 학부 연구생도 하고 있었고, 같은 학부 연구생들과 정부 과제도 하고 있었고, 고등학교 강사도 하고 있었다.\n거기에 수업에 시험에 과제에 이것 저것 다 포함하면.. 거기서 무언가를 더 할 엄두가 나질 않았다.</p>\n<p></p>\n<p>어쨌든 12월에 대면 면접을 거치면 결과를 알 수 있겠지 싶다.</p>\n<p>그렇게 12월 초에 일정을 잡고 대면 면접을 진행했다.\n면접 장소는 학교 근처였는데 오랜만에 학교 구경좀 하려고 아침 일찍 갔다.</p>\n<p>\n</p>\n<blockquote>\n<p>그토록 졸업하고 싶었고, 벗어나고 싶었던 곳인데 그래도 학교 다닐 때가 지금 보단 더 마음 편하고 즐거웠던 것 같다.</p>\n</blockquote>\n<p>교내에 있는 세미나실에서 작업좀 하다가 오랜만에 학교 근처 맛집에서 점심 식사를 했다.\n그렇게 시간 맞춰서 대면 면접 장소로 이동했다.\n면접 분위기는 무척 좋았고, 단쿠키라는 서비스에 대한 여러가지 사정을 들을 수 있었다.\n여태까지 학생 신분으로 보상도 없이 서비스를 유지하느라 많이 힘들었던 것 같고,\n운영진이 얼마나 이 서비스에 애정을 가지고 있는지 느껴졌다.</p>\n<p></p>\n<p>이렇게 나도 단쿠키 개발팀에 합류하게 되었다.\n일정이 조금 촉박한 것 같아서 걱정이지만 <strong>걱정보단 기대가 더 앞선다.</strong>\n아직 결정된게 많진 않지만 재밌을 것 같다.</p>\n<hr>\n<h3>3. 인터넷 강의</h3>\n<p>나는 인터넷 강의를 좋아하는 편이 아니다.\n사실 여태까지 인터넷 강의의 필요성을 크게 느끼지 못했달까?\n그런데 입사 후에는 아무리 생각해도 혼자서 공부하기엔 벅찬 부분이 많아서 꽤 많은 인터넷 강의를 들었다.</p>\n<p>사실 다른 사람들에 비하면 많이 듣진 않았으나 그냥 내 기준으로 올해는 많이 본 편이다.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/channel/UCKXBpFPbho1tp-Ntlfc25kA\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠</a></p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0NsJsBdYVHI&amp;t=2900s\" target=\"_blank\" rel=\"noopener noreferrer\">85기 - 거침없는 자바스크립트</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=E9NZ0YEZrYU&amp;t=4031s\" target=\"_blank\" rel=\"noopener noreferrer\">86기 - 객체지향 자바스크립트</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=H_Hb9IF7sfc\" target=\"_blank\" rel=\"noopener noreferrer\">88기 - async/await</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://www.inflearn.com/\" target=\"_blank\" rel=\"noopener noreferrer\">인프런</a></p>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/spring_revised_edition/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">예제로 배우는 스프링 입문 (개정판)</a></li>\n<li><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">스프링 부트 개념과 활용</a></li>\n<li><a href=\"https://www.inflearn.com/course/the-java-code-manipulation/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">더 자바, 코드를 조작하는 다양한 방법</a></li>\n<li><a href=\"https://www.inflearn.com/course/functional-es6/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">함수형 프로그래밍과 javascript ES6+</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://auth.fastcampus.co.kr/sign-in?client_id=fc%3Aclient%3Awww&amp;response_type=token&amp;redirect_uri=https%3A%2F%2Fwww.fastcampus.co.kr%2Fonline_category%2F%3Fgclid%3DCjwKCAiA57D_BRAZEiwAZcfCxaJChqY6DQLK2hwE1ZOTg-kZ-OJe3mPLbEU81L5O4yLUQbpA8EceCBoCNMgQAvD_BwE&amp;scope=www\" target=\"_blank\" rel=\"noopener noreferrer\">패스트 캠퍼스</a></p>\n<ul>\n<li><a href=\"https://www.fastcampus.co.kr/dev_red_kmt\" target=\"_blank\" rel=\"noopener noreferrer\">React와 Redux로 구현하는 아키텍쳐와 리스크 관리</a></li>\n</ul>\n</li>\n</ul>\n<p>제일 유용했던 강의는 <a href=\"https://www.inflearn.com/course/the-java-code-manipulation/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">더 자바, 코드를 조작하는 다양한 방법</a>와 <a href=\"https://www.youtube.com/channel/UCKXBpFPbho1tp-Ntlfc25kA\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠</a> 시리즈다.</p>\n<p>강의 내용을 보고 정리를 하고 싶었는데, 일단 코드스피츠의 내용의 일부만 정리했다.</p>\n<p><u>86기 객체지향 자바스크립트(Object Oriented Javascript)</u></p>\n<ul>\n<li><a href=\"/CodeSpitz/Object-Oriented-Javascript/01-Intro/\" target=\"_blank\" rel=\"noopener noreferrer\">1회차 - 객체지향 프로그래밍의 목적과 원칙</a></li>\n<li><a href=\"/CodeSpitz/Object-Oriented-Javascript/02-MVVM/\" target=\"_blank\" rel=\"noopener noreferrer\">2회차 - MVVM System 구축</a></li>\n<li><a href=\"/CodeSpitz/Object-Oriented-Javascript/03-Strategy-Observer/\" target=\"_blank\" rel=\"noopener noreferrer\">3회차 - MVVM System 개선 (1)</a></li>\n<li><a href=\"/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/\" target=\"_blank\" rel=\"noopener noreferrer\">4회차 - MVVM System 개선 (2)</a></li>\n<li><a href=\"/CodeSpitz/Object-Oriented-Javascript/05-Extension/\" target=\"_blank\" rel=\"noopener noreferrer\">5회차 - MVVM System 개선 (3)</a></li>\n</ul>\n<p>코드스피츠는 유튜브에서 무료로 볼 수 있으며, 내용 또한 쉽지 않다. 더불어 <a href=\"https://www.bsidesoft.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Bsidesoft 블로그</a>에 올라온 글을 같이 보면 더욱 도움이 많이 된다.</p>\n<hr>\n<h3>4. 스터디</h3>\n<h4>(1) DKU-STUDY</h4>\n<p></p>\n<p>4월 말에 취업 준비 중이던 <a href=\"https://github.com/eyabc\" target=\"_blank\" rel=\"noopener noreferrer\">여자친구(같은과 후배)</a>가 뜬금없이 <a href=\"https://dku-study.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">알고리즘 스터디</a>를 같이 하자고 했다.\n스터디 구성원은 먼저 에브리타임을 통해서 모집하고, 추가로 알고 지내던 후배들 중 같이 하고 싶은 의향이 있는 사람들을 초대했다.</p>\n<p></p>\n<blockquote>\n<p>이렇게 무척 대충(?) 모집 공고를 올렸는데 지원해준 사람이 있어서 신기했다.</p>\n</blockquote>\n<p>스터디를 하면서 느낀점은,</p>\n<ul>\n<li>알고리즘을 풀이할 때 다른 사람들의 생각을 직간접적으로 알 수 있다는 것 자체가 큰 도움이 된다.</li>\n<li>보편적인 솔루션을 만드는 사람도 있고, 기상천외(?)한 방법으로 문제를 해결하는 사람도 있다.</li>\n<li>같이 하는 공부라서 생각보다 외롭지 않고 의지를 갖게 해준다.</li>\n<li>같이할 수 있는 다양한 것들을 시도해볼 수 있다.</li>\n<li>다양한 정보를 빠르게 모을 수도 있고, 전파할 수도 있다.</li>\n</ul>\n<p>그렇게 3개월 정도 운영을 하다가 인원이 더 있어도 좋을 것 같아서 스터디원을 더 모집했다.</p>\n<p></p>\n<p>그리고 알고리즘 이외에도 javascript 면접 스터디가 한 학기 정도 진행했다.\n사실 내가 주도한 것도, 참여한건 아니지만 <u>구성원들간에 규칙을 세우고 꾸준히 하는 모습이 무척 인상깊었다.</u></p>\n<p>\n</p>\n<ul>\n<li>한 주에 한 개의 주제에 대해 정리하고 공유하며 피드백을 남기도록 했다.</li>\n<li>7월에 시작했고, 12월까지 계속 진행 중이다.</li>\n</ul>\n<p>7월 이후에 스터디 모집을 하고 있다는 글을 올려놓진 않았지만 <u>이메일, 깃허브, 그리고 구성원의 소개 등으로 계속 유입 중이다.</u></p>\n<p></p>\n<p></p>\n<p>그렇게 8개월 동안 약 20명 이상의 사람들이 모였다.\n내년에 잘 굴려보면 최소 50명에서 최대 100명 정도의 사람이 모일 수 있지 않을까?</p>\n<hr>\n<p>그리고 타 학교 사람들과 스터디 운영에 대해서 궁금한 점을 메일로 주고 받기도 했다.</p>\n<p></p>\n<p></p>\n<p>이렇게 연락을 주시는 분들 덕분에 더 열심히 잘 운영해야겠다는 생각이 든다.</p>\n<p>올해는 이제 다 지나갔으니, 내년에는 스터디를 조금 더 체계적으로 관리할 생각이다.</p>\n<p>지금은 알고리즘 위주의 스터디를 진행하고 있지만, 취업이나 면접 스터디 혹은 Java나 Javascript, 혹은 영어 스터디 등으로 영역을 조금씩 넓혀갈 예정이다.</p>\n<hr>\n<h4>(2) 블랙커피 스터디</h4>\n<p>매달 <code>NextStep</code>에서 메일로 뉴스레터를 보내주고 있다. 그런데 눈에 띄는 항목이 보였다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/96161643-80594100-0f52-11eb-8254-76e542afff4c.png\" alt=\"image01\"></p>\n<p><strong>처음으로 Javascript Study가 진행되고 있다는 내용</strong>이다.\n<strong>무료로 신청</strong>할 수 있었기 때문에 고민 없이 바로 신청했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">블랙 커피 스터디</p>\n<ul>\n<li>\n<p><strong>훌륭한 의사소통은 블랙커피처럼 자극적이며, 후에 잠들기가 어렵다</strong> 라는 문장에 감명 받아 <code>블랙 커피 스터디</code>라고 짓게 되었다고 한다.</p>\n</li>\n<li>\n<p>이름의 유래에서 유추할 수 있듯 함께 좋은 커뮤니케이션으로 통찰을 이끌어내고, 그 통찰과 함께 성장하고, <strong>소프트웨어 장인으로 거듭나기가 목표</strong>인 스터디이다.</p>\n<ul>\n<li>소프트웨어 장인이란?\n<ul>\n<li>동작하는 소프트웨어를 정교하고 솜씨있게 만들 수 있는 것</li>\n<li>변화에 대응하는것 뿐만이 아니라, 계속해서 가치를 더하는 것</li>\n<li>개별적으로 협력하는 것 뿐만이 아니라, 프로페셔널 커뮤니티를 조성하는 것</li>\n<li>고객과 협업하는 것 뿐만 아니라, 생산적인 동반자 관계를 추구하는 것</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>이 스터디는 위와 같은 목표를 달성하기 위해서 <code>페어 프로그래밍</code>과 <code>코드리뷰</code>라는 수단을 이용한다.</p>\n</li>\n</ul>\n</div>\n<h4>1) lv1. TodoList</h4>\n<p>9월에 블랙커피 스터디의 존재를 인지하고 <code>Level 01</code>을 신청했다.</p>\n<p></p>\n<p>스터디 진행은 다음과 같이 진행 된다.</p>\n<p></p>\n<p>요약하자면 다음과 같다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">미션 요약</p>\n<ul>\n<li>주 1회 온라인 세션을 통한 미션 소개 및 회고</li>\n<li>주 2회 페어프로그래밍</li>\n<li>코드리뷰</li>\n</ul>\n</div>\n<p>미션이 어렵진 않았고, 시간적 여유도 충분히 있었기 때문에 첫 주에 1~3주 미션을 모두 수행했다.</p>\n<ul>\n<li><code>1주차</code> Todo App 만들기\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=1yADBI27NCg\" target=\"_blank\" rel=\"noopener noreferrer\">Document Object Model</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=BYRTKmPAr8c\" target=\"_blank\" rel=\"noopener noreferrer\">Browser Object Model</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=u49E4_4hyeI\" target=\"_blank\" rel=\"noopener noreferrer\">Event</a></li>\n</ul>\n</li>\n<li><code>2주차</code> API 연동</li>\n<li><code>3주차</code> SPA 만들기 (Router 사용하기)</li>\n</ul>\n<p>이 정도의 난이도가 수준 높은 코드를 만들기 위한 적합한 미션이라고 생각한다.\n현재 보다 더 어렵거나 쉬웠다면 설계에 집중하기가 힘들었을 것 같다.</p>\n<p>그리고 페어 프로그래밍은 총 3회를 참여했으며 같이 미션을 구현하거나, 혹은 미션 진행에 필요한 라이브러리를 구현하는 방향으로 진행했다.\n이러한 과정을 통해서 혼자 고민하던 것들에 대해 즉각적으로 피드백을 주고 받으며 잘못된 점이나 개선 점을 찾아낼 수 있었고,\n고스란히 내 코드에 녹였다.</p>\n<p>다만 페어와의 실력차이가 심할 경우에는 페어프로그래밍 보단 실시간 강의(?)가 될 수 있으니 어느 정도 운도 따라야한다.</p>\n<p>이 과정에서 도출한 코드는 다음 링크에서 확인해볼 수 있다.</p>\n<ul>\n<li><a href=\"https://github.com/junilhwang/black-coffee-study\" target=\"_blank\" rel=\"noopener noreferrer\">전체 내용 정리</a></li>\n<li>Step 01\n<ul>\n<li><a href=\"https://github.com/junilhwang/js-todo-list-step1\" target=\"_blank\" rel=\"noopener noreferrer\">소스코드</a></li>\n<li><a href=\"https://junilhwang.github.io/black-coffee-study/step1\" target=\"_blank\" rel=\"noopener noreferrer\">데모</a></li>\n</ul>\n</li>\n<li>Step 02\n<ul>\n<li><a href=\"https://github.com/junilhwang/js-todo-list-step2\" target=\"_blank\" rel=\"noopener noreferrer\">소스코드</a></li>\n<li><a href=\"https://junilhwang.github.io/black-coffee-study/step2\" target=\"_blank\" rel=\"noopener noreferrer\">데모</a></li>\n</ul>\n</li>\n<li>Step 02\n<ul>\n<li><a href=\"https://github.com/junilhwang/js-todo-list-step3\" target=\"_blank\" rel=\"noopener noreferrer\">소스코드</a></li>\n<li><a href=\"https://junilhwang.github.io/black-coffee-study/step3\" target=\"_blank\" rel=\"noopener noreferrer\">데모</a></li>\n</ul>\n</li>\n</ul>\n<p>더 상세한 내용은 <a href=\"https://junilhwang.github.io/TIL/Review/2020-year/09-September/#_1-black-coffee-study\" target=\"_blank\" rel=\"noopener noreferrer\">9월 회고</a>에서 확인할 수 있다.</p>\n<hr>\n<h4>2) Lv2. 프론트엔드 테스트</h4>\n<p></p>\n<blockquote>\n<p><code>lv2</code>는 <code>lv1</code>에서 만든 코드로 테스트하기 때문에 <code>lv1</code>를 꼭 먼저 수료해야한다.</p>\n</blockquote>\n<p>부끄럽게도 나는 프론트엔드 테스트를 제대로 공부해본적이 없다. 아직 테스트의 중요성을 제대로 인식하지 못한 것도 있고, 귀찮음도 한 몫 하고 있다.\n그래서 이번 기회에 테스트를 공부해보고 싶어서 바로 신청했다.</p>\n<p></p>\n<p><code>lv2</code>는 다음과 같은 것들에 대해 학습한다.</p>\n<ul>\n<li>\n<p>unit test</p>\n<ul>\n<li><a href=\"https://github.com/next-step/js-test-basic-step1/pull/1\" target=\"_blank\" rel=\"noopener noreferrer\">학습 내용(Pull Request) 확인</a></li>\n<li><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">jest</a>를 이용한다.<div class=\"custom-container tip\"><p class=\"custom-container-title\">jest</p>\n<p>jest는 페이스북에서 만든 자바스크립트 테스팅 라이브러리이며  오픈소스(MIT)이다.</p>\n<ul>\n<li>현재 페이스북 내의 모든 자바스크립트 테스트에 사용됨</li>\n<li>테스트 러너 / 구조화 / 단언 / 테스트 더블 등의 기능을 모두 포함</li>\n<li>Node 환경에서 JSDom을 이용해 테스트 (브라우저 테스트 불가)</li>\n<li>테스트를 병렬로 수행해서 속도를 높임</li>\n<li>Zero Configuration : 설정 없이 간단하게 실행할 수 있음</li>\n</ul>\n<p>등의 장점을 가지고 있다.</p>\n</div>\n</li>\n<li>Counter Test를 구현하는 것이 미션이었다.</li>\n<li>테스트코드를 먼저 작성하고, 이에 적합한 Counter를 구현했다.</li>\n</ul>\n</li>\n<li>\n<p>ui test</p>\n<ul>\n<li><a href=\"https://github.com/next-step/js-test-basic-step2/pull/3\" target=\"_blank\" rel=\"noopener noreferrer\">학습 내용(Pull Reqest) 확인</a></li>\n<li><a href=\"https://testing-library.com/\" target=\"_blank\" rel=\"noopener noreferrer\">jest-dom</a>을 이용한다.</li>\n<li><a href=\"https://testing-library.com/docs/dom-testing-library/api-queries/\" target=\"_blank\" rel=\"noopener noreferrer\">Queries</a>와 <a href=\"https://testing-library.com/docs/dom-testing-library/api-async/\" target=\"_blank\" rel=\"noopener noreferrer\">Async Utilites</a> 문서를 많이 참고했다.</li>\n<li>특히, <code>wait</code> <code>waitFor</code> <code>waitForDomChange</code> 등의 API를 사용하는 방법이 무척 헷갈렸고, <code>waitFor</code>의 경우 IDE 자동완성을 사용하면 <code>babel</code>을 불러와서 당황스러웠다.</li>\n<li>비동기 테스트(API 테스트)의 경우 <a href=\"https://github.com/ctimmerm/axios-mock-adapter\" target=\"_blank\" rel=\"noopener noreferrer\">axios mock adapter</a> 혹은 <a href=\"https://github.com/wheresrhys/fetch-mock\" target=\"_blank\" rel=\"noopener noreferrer\">fetch mock</a> 등을 이용했는데 처음에 사용 방법을 착각해서 삽질을 많이 했다.<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// mockAxios 초기화</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> mockAxios <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockAdapter</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Mock Request와 Response 정의</span></span>\n<span class=\"line\">mockAxios<span class=\"token punctuation\">.</span><span class=\"token function\">onGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"><span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John Smith'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// API 요청시 Mock Response 를 반환함</span></span>\n<span class=\"line\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { id: 1, name: 'John Smith' }    </span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>그리고 다음과 같이 한 번에 표현할 수도 있다.<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">initVal</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">response</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">isMax</span><span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">isMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">isMin</span><span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">isMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">mockAxios</span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">onGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">onPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/counter/inc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">onPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/counter/dec'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">dec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>확실히 UI Test는 쉽지 않음을 느꼈다. 미션 자체가 삽질의 연속이었다.</li>\n</ul>\n</li>\n<li>\n<p>e2e test</p>\n<ul>\n<li><a href=\"https://github.com/next-step/js-test-basic-step3/pull/7\" target=\"_blank\" rel=\"noopener noreferrer\">학습 내용(Pull Reqest) 확인</a></li>\n<li><a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Cypress</a>를 이용하여 진행했다.<div class=\"custom-container tip\"><p class=\"custom-container-title\">Cypress</p>\n<p>Cypress는 브라우저에서 실행되는 모든 것에 대해 빠르고 쉽고 신뢰할 수있는 테스팅 도구다.</p>\n<ul>\n<li>브라우저를 다룰 수 있는 별도의 드라이버를 만들어서 사용</li>\n<li>E2E, 통합, 단위 테스트 가능</li>\n<li>GUI 도구를 지원</li>\n<li>스펙 관리 및 디버깅 용이</li>\n</ul>\n<p>이 <a href=\"https://docs.cypress.io/guides/overview/key-differences.html\" target=\"_blank\" rel=\"noopener noreferrer\">링크</a>에서 더욱 자세한 내용을 확인할 수 있다.</p>\n</div>\n</li>\n<li>테스트를 진행하기 위해선 먼저 앱 자체를 정상적으로 실행할 수 있도록 만들어야한다.</li>\n<li>문제는 기존에 Level 1에서 만들었던 결과물을 가지고 테스트를 해야 하는데,\n귀찮아서 그냥 건너뛴 오류들 때문에 테스트 자체를 실행할 수 없었다.\n<s>과거의 나는 대체 무슨 생각이었던걸까</s></li>\n<li>어쨌든 테스트 코드를 정상적으로 실행하기 위해 3개월 전에 만든 코드를 뜯어고치고, 모든 오류를 없애버렸다. 이 과정에 반절 이상의 시간을 쓴 것 같다 😇</li>\n<li>우여곡절 끝에 테스트 코드를 작성했는데 <code>dblclick</code>과 관련된 테스트를 통과하지 못했다.<br>\n<br>\n원인은 별 짓을 다 해봐도 파악 불가.. 😂</li>\n</ul>\n</li>\n</ul>\n<p>프론트엔드 테스트가 어렵긴 하지만 그래도 백엔드 테스트보다 재밌었다.\n눈에 보이는 것들을 코드로 정의하여 테스트하는 것 자체가 큰 매력라고 생각한다.</p>\n<p>다음과 같은 글과 영상을 같이 봐도 좋을 것 같다.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=L1dtkLeIz-M\" target=\"_blank\" rel=\"noopener noreferrer\">Youtube - 프론트엔드에서 TDD가 가능하다는 것을 보여드립니다.</a></li>\n<li><a href=\"https://velog.io/@muchogusto/FeConf2020-%EB%A6%AC%EB%B7%B0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-TDD%EA%B0%80-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%84-%EB%B3%B4%EC%97%AC%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4\" target=\"_blank\" rel=\"noopener noreferrer\">FeConf2020 리뷰🖊: 프론트엔드에서 TDD가 가능하다는 것을 보여드립니다.</a></li>\n<li><a href=\"https://microprotect.github.io/2020/12/16/frontend-tdd-feconf2020/\" target=\"_blank\" rel=\"noopener noreferrer\">FEConf2020 프론트엔드 TDD 발표 후기</a></li>\n</ul>\n<p>그리고 전체 미션 코드는 <a href=\"https://github.com/JunilHwang/black-coffee-study-lv2\" target=\"_blank\" rel=\"noopener noreferrer\">여기서</a> 확인할 수 있다.</p>\n<hr>\n<h4>(3) 블로그 스터디</h4>\n<p></p>\n<p>9월에 블랙커피 스터디 3기가 종료된 후, 이어서 블로그 스터디 모집 공고가 올라왔다. 망설임 없이 바로 신청했다.\n스터디 내용은 굉장히 단순하다.</p>\n<ul>\n<li>1주에 글 1편</li>\n<li>4주에 글 3편 (1주는 버퍼 기간)</li>\n</ul>\n<p>나는 1기 ~ 2기를 참여하면서 총 6편의 글을 썼다.</p>\n<ul>\n<li><a href=\"/TIL/Review/2020-year/09-September/\" target=\"_blank\">2020년 9월 회고</a></li>\n<li><a href=\"/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\">Vanilla Javascript로 웹 컴포넌트 만들기</a></li>\n<li><a href=\"/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\">유년시절 이야기 Part 01</a></li>\n<li><a href=\"/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\">유년시절 이야기 Part 02</a></li>\n<li><a href=\"/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\">유년시절 이야기 Part 03</a></li>\n<li><a href=\"/TIL/Writing/02-2021-%EA%B3%84%ED%9A%8D/\" target=\"_blank\">2021년 새해 계획</a></li>\n</ul>\n<p>더 많이 쓰고 싶었지만, 귀찮기도 하고 생각보다 할 일이 많아서 많이 쓰진 못했다.</p>\n<p>그리고 인상 깊었던 글들을 소개해본다.</p>\n<ul>\n<li>\n<p><code>메이커준</code>님 의 글</p>\n<ul>\n<li><a href=\"https://makerjun.com/career/woowabros/programmer-story/\" target=\"_blank\" rel=\"noopener noreferrer\">0. 프롤로그: 새로운 출발을 향한 우아한형제들 입사 기록</a></li>\n<li><a href=\"https://makerjun.com/career/woowabros/why-programmer/\" target=\"_blank\" rel=\"noopener noreferrer\">1. 프로그래밍을 시작한 경위와 본격적으로 투신하고 생업으로 삼기로 결정한 이야기</a></li>\n<li><a href=\"https://makerjun.com/career/woowabros/good-programmer/\" target=\"_blank\" rel=\"noopener noreferrer\">2. 좋은 개발자가 되기 위해 갖추어야 한다고 생각하는 덕목 셋을 고르고 그 이유를 말해주세요.</a></li>\n<li><a href=\"https://makerjun.com/career/woowabros/best-books/\" target=\"_blank\" rel=\"noopener noreferrer\">3. 지금까지 읽었던 개발서 중 가장 중요하다고 생각하는 책 3 권을 골라 선정한 이유를 말해주세요.</a></li>\n<li><a href=\"https://makerjun.com/career/woowabros/learning-method/\" target=\"_blank\" rel=\"noopener noreferrer\">4. 기술 경향을 파악하고 업무 역량을 강화하기 위한 본인의 학습 방법을 구체적으로 설명해주세요.</a></li>\n<li><a href=\"https://makerjun.com/career/woowabros/my-story/\" target=\"_blank\" rel=\"noopener noreferrer\">5. '좋아하는 시나 소설, 노래 중심으로' 자신을 자유롭게 소개해 주세요. (지원동기/이직사유, 장/단점 등)</a></li>\n</ul>\n</li>\n<li>\n<p><code>eyabc</code>님 의 글</p>\n<ul>\n<li><a href=\"https://eyabc.github.io/Doc/\" target=\"_blank\" rel=\"noopener noreferrer\">내 글 써보기</a></li>\n</ul>\n</li>\n<li>\n<p><code>김경록</code>님 의 글</p>\n<ul>\n<li><a href=\"https://rok93.tistory.com/entry/%EC%96%B4%EB%8A%90-%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%98-2020%EB%85%84-%EB%8A%A6%EC%9D%80-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0%EB%A1%9D\" target=\"_blank\" rel=\"noopener noreferrer\">어느 취준생의 2020년 늦은 상반기 회고록</a></li>\n</ul>\n</li>\n<li>\n<p><code>DevJang</code>님 의 글</p>\n<ul>\n<li><a href=\"https://devjang.github.io/2020/10/17/2020-10-17-woowahan-tech-learning-3rd/\" target=\"_blank\" rel=\"noopener noreferrer\">우아한 테크러닝 3기 React &amp; TypeScript 후기</a></li>\n</ul>\n</li>\n</ul>\n<p>이렇게 블로그 스터디를 하면서 느낀 것은, 소설을 읽는 것 처럼 다른 사람의 경험을 간접적으로 체험해보는 재미를 느낄 수 있다는 것이다.\n내가 겪지 못한 것들을 글로 채우는 느낌이랄까?</p>\n<p>내년에는 조금 더 적극적으로 참여해볼 생각이다.</p>\n<hr>\n<h4>(4) 프로그래머스 리액트 스터디</h4>\n<p></p>\n<p>나는 개인적으로 <a href=\"https://programmers.co.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">프로그래머스</a>를 무척 애용하는 편이고, 주변에도 많이 추천하고 있다.\n프로그래머스에는 <a href=\"https://programmers.co.kr/learn/challenges\" target=\"_blank\" rel=\"noopener noreferrer\">알고리즘</a>과 관련된 서비스 뿐만 아니라 프론트와 백엔드를 포함한 여러가지 <a href=\"https://programmers.co.kr/competitions\" target=\"_blank\" rel=\"noopener noreferrer\">챌린지 서비스</a>도 있고,\n<a href=\"https://programmers.co.kr/learn\" target=\"_blank\" rel=\"noopener noreferrer\">온라인 강의</a>와 스터디 형태의 강의도 존재한다.\n주변 사람들이 프로그래머스에서 진행하고 있는 스터디에 참여했고, 만족도가 높은 것 같아서 나도 한 번 참여해볼까 둘러보다가 <a href=\"https://programmers.co.kr/learn/courses/10658\" target=\"_blank\" rel=\"noopener noreferrer\">React Study</a>를 신청했다.\n<strong>무척 만족스러운 스터디였다.</strong></p>\n<h4>1) Facebook 클론 코딩</h4>\n<p>\n</p>\n<p>React + Redux로 Facebook의 뉴스피드와 로그인/회원가입 등을 만들어야 한다.</p>\n<hr>\n<h4>2) CRA(Create React App)을 사용하지 않고 개발환경 구성하기</h4>\n<p>여태까지 번들러는 <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack</a>만 사용해봤는데, 이 스터디를 통해서 처음으로 <a href=\"https://ko.parceljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">parcel</a>을 사용해봤다.\n생각보다 훨씬 더 편했고, 환경 구성 또한 어렵지 않았다.</p>\n<ul>\n<li>설치하기<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># yarn</span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> parcel-bundler</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># npm</span></span>\n<span class=\"line\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> parcel-bundler</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>index.html 작성<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>페이스북 클론 코딩<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>index.js 작성<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>npm script 작성<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// package.json</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 앞 내용 생략 */</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel index.html\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 뒷 내용 생략 */</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>실행<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># npm</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">npm</span> run dev</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># yarn</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">yarn</span> dev</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>빌드<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># build script</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> parcel build ./src/entry.js</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># build path 지정</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> parcel build ./src/entry.js --out-dir ./dist</span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> parcel build ./src/entry.js <span class=\"token parameter variable\">-d</span> ./dist</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p>webpack보다 훨씬 단순하고 이해하기도 쉽다.</p>\n<p></p>\n<p>공식문서에 따르면, <code>4개의 물리 CPU가 있는 2016형 MacBook Pro에서 1726개의 module을 포함한 미 압축 6.5M의 app 기준으로 빌드</code>를 기준으로 위와 같은 성능을 보인다고 한다.\n위의 내용을 완전히 신뢰할 순 없지만 직접 사용해본 입장에서 확실히 빠른 속도가 체감된다.</p>\n<p>어쨌든, 스터디를 통해서 CRA를 사용하지 않고 parcel을 이용하여 직접 React를 개발하는데 필요한 각종 패키지를 설치했다.\n사실 <code>react</code> <code>react-dom</code>만 설치해도 무방하다.</p>\n<p>그래도 다양한 실습을 위해 <code>redux</code> <code>react-redux</code> <code>redux-thunk</code> <code>redux-saga</code> <code>react-router-dom</code> <code>connected-react-router</code> <code>styled-jsx</code> 등을 설치했고,\n각종 <code>babel plugin</code>과  <code>eslint</code> <code>prettier</code> 등을 설치했다.</p>\n<hr>\n<h4>3) React Router 재활용</h4>\n<p>react-router-dom에 나와있는 내용와 보편적으로 사용하는 Router의 경우 다음과 같은 형태이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">about</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">login</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">join</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">About</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Login</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Join</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Home</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그런데 각각의 라우터가 독립된 레이아웃을 가지는 것이 아니라 분명히 <strong>공통분모</strong>가 존재할 것이다.</p>\n<p>예를 들자면</p>\n<ul>\n<li>로그인/회원가입 페이지의 경우 회원은 접근할 수 없어야 하고 <strong>비슷한 레이아웃</strong>을 가질 것이다.</li>\n<li>헤더와 푸터를 가지고 있는 페이지가 있을 것이다. 반대로, 헤더와 푸터가 없는 페이지도 있을 수 있다.</li>\n<li>이 외에도 <strong>공통분모</strong>를 가진 여러가지 페이지 레이아웃이 있을 수 있다.</li>\n</ul>\n<p>이 때 다음과 같은 형태로 Router를 표현할 수 있다. 정확히는 재사용이랄까?</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">about</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">login</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">join</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PublicLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Login<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PublicLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Join<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DefaultLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DefaultLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Home<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>구현 방법은 <a href=\"https://simonsmith.io/reusing-layouts-in-react-router-4\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>를 참고하면 된다.(https://m.blog.naver.com/boostcamp_official/222140296542)에서 확인할 수 있다.\n여기에서 다루기엔 양이 너무 많다.</p>\n<hr>\n<h4>4) 원리 부터 깨우친다.</h4>\n<p>단순하게 React로 무언가를 만드는 과정이 아니라</p>\n<ul>\n<li>어쩌다가 이러한 프레임워크가 등장했는지</li>\n<li>React의 철학은 무엇인지</li>\n<li>타 프레임워크와 비교했을 때 React의 장점이 무엇인지</li>\n<li>옳바르게 React를 사용하는 방법</li>\n<li>React를 공부하는데 필요한 기초 지식</li>\n</ul>\n<p>등을 먼저 설명하고 그 다음에 구현에 필요한 API를 공부할 수 있도록 방향이 잡혀있다.</p>\n<p>예를 들자면 다음과 같은 것들(도메인 지식이랄까?)에 대해 먼저 공부한다.</p>\n<ul>\n<li><code>spread 연산자</code>와 <code>rest 연산자</code>의 차이점/공통점</li>\n<li><code>Arrow Function</code>과 <code>this</code></li>\n<li><code>module loader</code> vs <code>module bundler</code></li>\n<li><code>ES Module</code></li>\n<li><code>Virtual DOM</code></li>\n<li><code>Element</code> vs <code>Component</code></li>\n<li><code>props</code></li>\n<li><code>propTypes</code></li>\n<li><code>state</code></li>\n<li><code>Component Life Cycle</code></li>\n<li><code>Controlled Component</code></li>\n<li><code>Uncontrolled Component</code></li>\n<li><code>Pure Component</code></li>\n<li><code>Memoization</code></li>\n<li><code>SPA(Single Page Application)</code></li>\n<li><code>Hook Motivation</code></li>\n<li><code>상태관리</code></li>\n<li>Javascript의 <code>실행 컨텍스트</code>\n<ul>\n<li>Outer Environment</li>\n<li>Lexical Environment</li>\n</ul>\n</li>\n<li>함수 생성과 호출규칙, 그리고 <code>클로저</code></li>\n<li><code>Currying</code>과 Middleware</li>\n<li><code>StateLess</code> 아키텍쳐와 <code>JWT(Json Web Token)</code></li>\n<li><code>Iterator</code>, <code>Iterable</code>, <code>Generator</code></li>\n<li><code>promise</code> 그리고 <code>async/await</code></li>\n<li><code>Saga Pattern</code></li>\n</ul>\n<p>이러한 개념들 이외에도 무척 많은 것들을 배웠으나, 사실 기억 나는게 많지 않다.. 😂\n어쨌든 중요한 점은 단순하게 React에 대해 공부하는 것이 아니라 어떤 과정을 통해서 React가 현재의 모습을 갖추게 되었고,\n어떤 Motivatino을 통해서 디자인 되었는지 알 수 있었기 때문에 <strong>스터디를 통해서 React에 대한 전반적인 이해도</strong>가 좋아졌다.</p>\n<hr>\n<h4>5) 스터디 리더가 작성한 코드 공유</h4>\n<p>미션이 종료된 후에 리더가 작성한 코드를 공유해주기 때문에 내가 작성한 코드와 비교하며 부족한 부분을 채울 수 있다는 점도 큰 매리트라고 생각한다.\n코드에 정답은 없지만 그래도 내가 작성한 것 보단 정답에 가까운 코드를 보는 것 만으로도 굉장히 큰 도움이 된다.</p>\n<p>그리고 내가 현업에서 접하지 못했던 유용한 라이브러리를 많이 볼 수 있었다.\n무엇보다 Redux를 정말 제대로, 그리고 잘 사용할 수 있는 방법을 접할 수 있는 점도 좋았다.</p>\n<hr>\n<h4>6) 유쾌한 운영진</h4>\n<p>스터디 리더와는 별개로, 스터디를 개설하고 관리하는 운영진 덕분에 매 스터디가 즐거웠다.</p>\n<p>크리시님 혹시 이 글을 읽고 계신가요? <strong>당근 상모돌리기</strong> 무척 인상 깊었습니다 😁</p>\n<hr>\n<h4>7) 기술 외적 동기 부여</h4>\n<p>그리고 스터디 리더인 Harry의 경우 싱가포르 소재의 핀테크 회사에서 팀장급 Full-Stack 개발자로 근무 중이며,\n전 회사인 카카오 뱅크에서는 데이터 엔지니어로 근무했다.</p>\n<p></p>\n<p>여담으로, Harry는 프로그래머스에서 React Study 뿐만 아니라 다음과 같은 스터디의 리더로 활동하고 있다.</p>\n<ul>\n<li><a href=\"https://programmers.co.kr/learn/courses/11186\" target=\"_blank\" rel=\"noopener noreferrer\">단순 CRUD는 그만! 웹 백엔드 시스템 구현(Spring Boot)</a></li>\n<li><a href=\"https://programmers.co.kr/learn/courses/10617\" target=\"_blank\" rel=\"noopener noreferrer\">씹고 뜯고 맛보는 Node.js with REST&amp;GraphQL</a></li>\n</ul>\n<p>굉장히 화려한 이력을 가지고 있지만 Harry는 비전공자이다.\n그렇기 때문에 Harry라는 개발자의 존재는 나에게 무척 강렬한 인상을 남겼다.</p>\n<p>이렇게 다방면의 기술을 깊게 공부하고 전파할 수 있었던 이유 중 하나가 바로 <code>영어</code>라고 했다.\n<code>영어</code>는 <strong>모든 지식의 도메인 지식</strong>이라고 할 수 있다.\n특히 <strong>개발자의 경우 영어로된 문서를 항상 마주봐야 하기 때문에</strong> 어찌보면 개발자가 제일 먼저 공부해야 하는 것이 영어라고 할 수 있다.</p>\n<p><code>Harry</code>는 영어를 지속적으로 강조했고, 무척 설득력 있게 다가왔다.\n그래서 내년에는 일일커밋 대신 <code>일일영어</code>를 하기로 다짐했다.</p>\n<p>이 외에도 현업에 대한 다양한 이야기를 들을 수 있었고, 여러가지 갈증을 해소할 수 있었다.</p>\n<hr>\n<h4>정리</h4>\n<p></p>\n<p>결국 내가 하고 싶은 이야기는 한 가지이다.\n<u>React를 학습 하고 싶다면 꼭 이 스터디에 참여해보길 권한다.</u></p>\n<hr>\n<h3>5. 리뷰어 활동</h3>\n<p>올해는 다양한 리뷰어 활동을 했다.\n사실 작년까지만 해도 코드리뷰라는 개념 자체를 잘 몰랐다.\n하는 방법 뿐만 아니라 굳이 할 필요가 있을까 하는 생각도 했었다.\n그러다가 <a href=\"https://github.com/DKU-SUTDY\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-STUDY</a>를 운영하게 되었고 이 과정에서 코드리뷰를 적극적으로 하게 되었다.</p>\n<h4>(1) 넥스트 스텝</h4>\n<p>NextStep의 <strong>Java TDD, Refactoring, Clean Code</strong> 8기 수료 후 <u>9기와 10기는 리뷰어로 활동했다.</u></p>\n<p></p>\n<p>9기 활동에서 큰 이슈는 없었고, 무척 재밌게 리뷰를 했던 것 같다.\n리뷰를 하면서 내가 작성했던 코드들에 대해 한 번 더 생각해보게 되었고, 리뷰이에게 배우는 부분도 무척 많았다.\n쉽지 않은 과정을 함께 하는 것 자체가 어찌보면 큰 행운이라고 생각했다.</p>\n<p></p>\n<p>그렇게 10기에도 리뷰어를 신청했고, 이번에는 무척 힘들었다. 일단 미션 현황판을 보면 리뷰이가 늘어난게 눈에 보인다.\n기존에는 최대 20명(4개의 미션, 미션당 5명)리뷰해야 했는데 이번 기수에는 미션당 7명을 배정받아서 최대 28명을 리뷰해야 했다.</p>\n<blockquote>\n<p>그런데 미션을 아예 수행하지 않는 사람도 있어서 9기에는 15명을 리뷰했고, 10기에는 22명을 리뷰했다.</p>\n</blockquote>\n<p>리뷰이가 많아진 이유는 <a href=\"https://edu.nextstep.camp/c/DANlbea1/\" target=\"_blank\" rel=\"noopener noreferrer\">카카오 리뷰어 양성과정</a>에 참여하는 사람들이 Java CC 과정의 일부를 참여했기 때문이다.\n그래서 <strong>코드에서 뭔가 심상치 않은 기운이 느껴진다 싶으면 대체로 카카오 사람들</strong>이었다.</p>\n<p>\n</p>\n<p>리뷰는 대체로 위와 같이 남겼다.\n각각의 코드에 대해 리뷰를 하고, 마지막으로 핵심적인 내용을 정리해서 중점적으로 개선해야 하는 부분들을 피드백했다.\n설계적으로 큰 문제가 없으면 바로 머지했고, 문법적으로 개선이 필요한 것들은 다음 스텝에서 진행하도록 유도했다.</p>\n<hr>\n<p>그리고 10기에는 현재 내 역량의 한계를 일깨워준 분이 있었다.</p>\n<p></p>\n<p>내가 남기는 피드백의 반절 이상은 뚜렷한 근거를 기반으로 하기 보단 <strong>경험적인 측면</strong>을 토대로 남기는 것들이 대부분이었다.\n그래서 이렇게 근거를 토대로 질문을 남기면 당황스러웠다.\n현재의 나는 남들은 다 한 번씩 읽어 본다는 <code>Clean Code</code>나 <code>Effective Java</code>도 안 읽어본 상태였기 때문에 명확한 근거 같은게 생각날 수가 없었다.</p>\n<p>그래서 또 이것 저것 자료를 찾아보다가 결국 답이 나오질 않아서 <u>내가 어쩌다 이런 생각을 했는지 다시 경험적인 측면을 토대로 리뷰를 남기게 된다.</u>\n결국 리뷰이는 다시 불만족스러운 답변을 받아야했다.</p>\n<p></p>\n<p>덕분에 슬랙채널에서 여러가지 논쟁이 오고 갔으며,\n<strong>Stream은 어차피 사다리 미션에서 다루기 때문에 지금의 논쟁은 큰 의미가 없으며 자동차 미션 자체에 집중 하자</strong>는 이야기로 마무리 되었다.\n무엇보다 제일 큰 문제는 리뷰이의 <strong>신뢰를 잃어버렸다</strong>고 해야할까?</p>\n<p></p>\n<p>이 부분은 리뷰이가 피드백을 잘못 해석했던(혹은 내가 제대로 전달을 하지 못했거나 😂) 부분이어서 다시 잘 설명드렸다.</p>\n<p>결국 이러한 과정을 통해서 현재 내가 가진 문제점이 뚜렷하게 드러났고 이를 꼭 매꿔야겠다고 생각하는 계기가 되었다.\n11기가 언제 시작될지 모르겠으나 시작하기 전에 java와 관련된 서적도 많이 읽고 다양한 방식으로 역량 강화를 진행할 예정이다.\n혹은 아직 부족하다고 생각된다면 만족할만한 수준이 될 때까지 리뷰어 활동은 신청하지 않을 생각이다.</p>\n<hr>\n<h4>(2) 부스트캠프</h4>\n<p>8월 초에 페이스북 생활코딩 페이지를 보다가 <a href=\"https://connect.or.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">네이버 커넥트재단</a>에서 운영하는 <a href=\"https://boostcamp.connect.or.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">부스트캠프</a>에서 리뷰어를 구한다는 소식을 접했다.</p>\n<p></p>\n<p>NextStep 리뷰어는 java로 작성한 코드에 대해 리뷰를 남기는 것이기 때문에 조금 아쉬운 점이 있었다.\n<u>나의 주력 언어는 javascript이고, java보다 javascript를 더 좋아하기 때문이다.</u>\n그래서 부스트캠프 리뷰어 모집 공고가 무척 반가웠으며 빠르게 지원했다.</p>\n<p>\n</p>\n<p>github에 올라온 링크를 통해서 지원할 수 있었으며, 리뷰어의 역량 확인을 위해 코드리뷰를 하나 남겨야했다.\n그런데 리뷰를 남겨야 하는 코드가 React로 작성되어 있어서 당황했다.\nReact는 취업 준비를 할 때 잠깐 공부했고 Hooks도 제대로 사용해본적이 없었기 때문이다.\n그래서 일단 <strong>코드 스타일, 네이밍, 코딩컨벤션 위주의 리뷰</strong>를 남겼다.</p>\n<p><a href=\"https://github.com/connectfoundation/review_2020/pull/3\" target=\"_blank\" rel=\"noopener noreferrer\"></a></p>\n<p>며칠 후에 <a href=\"https://codesquad.kr/page/masters/fe.html\" target=\"_blank\" rel=\"noopener noreferrer\">코드스쿼드</a>를 운영하고 있으며 부스트캠프 마스터로 참여 중이신 <a href=\"https://github.com/crongro\" target=\"_blank\" rel=\"noopener noreferrer\">크롱</a>님께서 피드백을 남겨주셨다.</p>\n<p></p>\n<p>이렇게 부스트캠프 리뷰어로 합류하게 되었다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">부스트캠프 웹 프론트 리뷰어</p>\n<ul>\n<li>웹 과정의 경우 백엔드/프론트엔드를 격주로 하기 때문에 총 3주 동안 활동하게 된다.</li>\n<li>매주 월요일, 온라인 세션에서 리뷰어 회고를 진행했다. 웹 프론트 리뷰어의 경우 격주로 참여했다.</li>\n<li>리뷰어마다 6명의 캠퍼(리뷰이)를 배정한다.</li>\n<li>3주간 주 2회의 리뷰를 한다.</li>\n<li>따라서 6명의 캠퍼에게 각각 6회, <strong>총 36회의 리뷰</strong>를 해야한다.</li>\n</ul>\n</div>\n<p></p>\n<p>격주로 <strong>화요일/목요일에 올라오는 PR에 리뷰</strong>를 했으며 대체로 위와 같은 내용으로 피드백을 남겼다.\n6명이 올린 PR을 하루만에 리뷰를 남겨야해서 생각보다 시간이 많이 소요됐다.\n대충 하기에는 또 찜찜해서 어떻게든 꼼꼼하게 보려고 애썼다.\n<s>애쓴만큼 잘 했는지는 모르겠다</s></p>\n<p>\n</p>\n<p>그렇게 9 ~ 10월, 두 달 동안 리뷰어로 활동했다.</p>\n<p></p>\n<p>리뷰어 활동이 끝난 후에 캠퍼 한 분에게 이렇게 연락이 왔다.</p>\n<p></p>\n<p>감사하기도 하고, 죄송하기도 하고, 다음에 또 부스트캠프의 리뷰어로 활동하게 된다면 더 좋은 리뷰를 남기리라 다짐하는 순간이었다.</p>\n<hr>\n<p>부스트캠프의 전반적인 과정을 지켜보면서 느낀 것은, <strong>이 사람들은 무조건 잘 할 수 밖에 없겠다</strong> 라는 점이다.</p>\n<p>전반적으로 캠퍼들 간에 상호 피드백도 활발하게 이루어 지고 있고, 학습 환경 또한 온라임에도 불구하고 끈끈한 네트워크가 형성된 것이 느껴졌다.\n서로가 서로에게 믿고, 신뢰하고, 의지할 수 있는 사람이 되는 것이다.</p>\n<p>그렇다면 개발은 덤으로 따라온다. 무언가를 함께할 사람이 있다는 것은 언제나 즐거운 일이고 그 자체만으로도 활력이 된다.</p>\n<p>여담으로 <u>앞서 언급한 <a href=\"#_4-%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%84%86%E1%85%A5%E1%84%89%E1%85%B3-%E1%84%85%E1%85%B5%E1%84%8B%E1%85%A2%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%84%83%E1%85%B5\">리액트 스터디</a>에도 부스트 캠프를 거쳐온 사람들이 있었다.</u> 그리고 그 분들이 스터디를 이끌어갔다고 해도 과언이 아니었다.</p>\n<hr>\n<p>리뷰어 활동이 끝난 후에 슬랙 채널에 다음과 같은 내용의 공지가 올라왔다.</p>\n<p></p>\n<p>공지가 뜨자 마자 바로 신청했다.</p>\n<p>발표자료를 만들고, 팀장님과 상의하여 내용을 조금 변경하고, 리허설도 잘 마무리했고, 발표도 잘 마무리했다.\n굉장히 많은 사람들 앞에서 내 의견을 어필해야 했기 때문에 긴장도 많이 했지만 재밌었다.</p>\n<p>발표가 끝난 후에 인지했던게 <a href=\"#_1-%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%84%86%E1%85%A5%E1%84%89%E1%85%B3-%E1%84%85%E1%85%B5%E1%84%8B%E1%85%A2%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%84%83%E1%85%B5\">리액트 스터디</a>를 같이 하는 사람 중 한 분(생활 연구소의 홍태의님)이 나와 똑같은 주제로 발표했다.\n<u>세상이 참 좁구나 👀</u></p>\n<p>저작권 때문에 발표자료를 전부 공개하기는 힘들고, <strong>몇 가지 핵심적인 내용</strong>만 다뤄보자면 다음과 같다.</p>\n<ul>\n<li>\n<p><em>1) 좋은 직장</em></p>\n<ul>\n<li>\n<p>좋은 직장과 좋은 회사는 다르다.</p>\n<ul>\n<li>좋은 회사는 <code>타인</code>, 즉 <code>외부의 시선</code>을 기준으로 한다.</li>\n<li>좋은 직장은 <code>나</code>를 기준으로 한다.</li>\n</ul>\n</li>\n<li>\n<p>직장 만족도에 대한 보편적인 카테고리</p>\n<ul>\n<li><code>일(업무)</code>, <code>돈(급여)</code>, <code>사람(팀원)</code></li>\n<li>세 가지 중 <strong>두 가지 이상</strong> 겹치면 대체로 <strong>좋은 직장</strong>일 가능성이 높다.</li>\n</ul>\n</li>\n<li>\n<p>나에게 있어서 좋은 직장을 판별할 때의 **우선순위*는 다음과 같다.</p>\n<ul>\n<li>0순위: <strong>팀원(사람)</strong></li>\n<li>1순위: 자사 서비스가 있는가(일)</li>\n<li>2순위: 기술스택(일)</li>\n<li>3순위: 잡플래닛(돈/일/사람)</li>\n<li>4순위: 강남/잠실/판교</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>2) 소프트웨어에 대하여</em></p>\n<ul>\n<li>\n<p>소프트웨어의 <u>특성</u></p>\n<ul>\n<li><strong>형체</strong>가 없다.</li>\n<li><strong>공장에서 찍어낼 수 없다.</strong></li>\n<li>무조건 <strong>사람의 손</strong>을 거쳐야 한다.</li>\n<li>소프트웨어의 <strong>가치</strong>를 측정하기가 힘들다.</li>\n<li>한 사람이 가진 기술력은 <strong>똑같은 규격</strong>으로 만드는게 불가능하다.</li>\n</ul>\n</li>\n<li>\n<p><strong>3000만원짜리 소프트웨어</strong>를 만들어보자.</p>\n<ul>\n<li>개발자 2명 / 기획자 2명 / 디자이너 2명이 투입한다고 가정하자.</li>\n<li>평균 200만원의 급여라고 가정하면 1개월에 1200만원의 인건비가 필요하다.</li>\n<li>오직 인건비로만 2개월에 2400만원, 3개월이면 3600만원의 비용이 든다.</li>\n<li>따라서 3000만원짜리 제품을 만들기 위해선 2개월을 알뜰하게 투자해야한다.</li>\n<li><u>당신은 2개월만에 누가 봐도 3000만원의 가치를 가진 제품을 만들 수 있는가?</u></li>\n</ul>\n</li>\n<li>\n<p>결국 <strong>소프트웨어를 만들 때 제일 중요한 것은 \"사람(인력)\" 그 자체</strong>라고 할 수 있다.</p>\n<ul>\n<li>앞서 언급한 내용에서 고려해야할 것 중 하나가 커뮤니케이션 비용(=시간)이다.</li>\n<li>구성원 간의 합이 잘 맞는다면 커뮤니케이션 비용(=시간)은 절약될 것이다.</li>\n<li>반대의 경우 커뮤니케이션만 하다가 끝날 가능성도 있다.</li>\n<li>중간에 인력이 교체되는 경우에도 마찬가지이다.</li>\n<li>비슷한 사람은 있어도 똑같은 사람은 없다.</li>\n<li>한 사람이 가진 기술력과 커뮤니케이션 능력은 <strong>똑같은 규격</strong>으로 만드는게 불가능하다.</li>\n<li>그래서 인력(인적자원)에 투자를 많이 하는 회사일수록 제품(소프트웨어, 서비스) 또한 좋을 확률이 높다.</li>\n<li>인력을 공장의 부품처럼 생각하는 회사라면 언제 망해도 이상할게 없다.</li>\n<li>같이 읽으면 좋은 아티클\n<ul>\n<li><a href=\"https://www.bsidesoft.com/8035\" target=\"_blank\" rel=\"noopener noreferrer\">구멍가게 개발사 이야기</a></li>\n<li><a href=\"https://steemit.com/development/@hikamaeng/re-1\" target=\"_blank\" rel=\"noopener noreferrer\">제로부터 시작하는 개발사 창업 #1</a></li>\n<li><a href=\"https://steemit.com/development/@hikamaeng/1-2\" target=\"_blank\" rel=\"noopener noreferrer\">[개발사 생존기] 완료금편 #1 / 4</a></li>\n<li><a href=\"https://steemit.com/development/@hikamaeng/2-4\" target=\"_blank\" rel=\"noopener noreferrer\">[개발사 생존기] 완료금편 #2 / 4</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>3) 내가 생각하는 개발자에게 제일 중요한 것</em></p>\n<ul>\n<li>커뮤니케이션 능력</li>\n<li>같이 성장하는 능력(빠른 피드백)</li>\n<li>같이 만드는 능력\n<ul>\n<li><s>분업 X</s></li>\n<li><strong>협업 O</strong></li>\n</ul>\n</li>\n<li>자존감\n<ul>\n<li>스스로를 존중하는 것, 믿는 것</li>\n<li>스스로를 존중하고 믿는 만큼 타인(팀원)을 존중하고 믿는 것</li>\n</ul>\n</li>\n<li>내가 존중받고 있다고 느끼게 해주는 팀, 그리고 회사\n<ul>\n<li>이러한 분위기를 만드는 것</li>\n<li>의견을 말함에 있어서 거리낌이 없는 것</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">함께 자라기</p>\n<p>발표를 한 뒤에 뒤늦게 <a href=\"http://www.yes24.com/Product/Goods/67350256\" target=\"_blank\" rel=\"noopener noreferrer\">함께 자라기</a>라는 책을 읽었다\n내가 생각 했던 내용들보다 더 심오하게 그리고 논리적으로 <strong>학습, 성장, 협업</strong> 등에 대해 다루고 있다.\n시간을 내서 꼭 한 번 읽어보길 권한다.</p>\n</div>\n<p><a href=\"https://m.blog.naver.com/boostcamp_official/222140296542\" target=\"_blank\" rel=\"noopener noreferrer\">부스트캠프 공식 블로그</a>에 가면 더 재미난 이야기들을 확인할 수 있다.</p>\n<p>이러한 내용에 대해 약 10분 정도 주절주절 떠들었다. 사실 다른 분들이 좋은 내용을 무척 많이 다뤄주셔서 약간 주눅들었다 😓</p>\n<p>어쨌든 스스로에게 좋은 경험을 만들어주었다고 생각한다.\n리뷰어 활동과 더불어 이러한 경험을 만들어준 부스트캠프 운영진 분들께 많은 고마움을 느끼고 있다.</p>\n<hr>\n<h3>6. 강사</h3>\n<p>나는 고등학교 때 <strong>기능경기대회</strong>에 참가했고 지방대회와 전국대회에서 입상했고, 이를 계기로 개발에 관심을 가지게 되어 현재의 길을 걷고 있는 중이다.</p>\n<p></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">기능경기대회</p>\n<ul>\n<li>정식 명칭은 기능올림픽이다.</li>\n<li>기능경기대회는 특성화고등학교의 수능이며 축제라고 할 수 있다.</li>\n<li>지방대회 - 전국대회 - 국가대표 선발전 - 세계대회 등의 과정이 있다.</li>\n<li>자세한 내용은 <a href=\"https://meister.hrdkorea.or.kr/main/main.do\" target=\"_blank\" rel=\"noopener noreferrer\">마이스터넷</a>참고</li>\n</ul>\n</div>\n<p>그리고 2013년도부터 현재까지 이 대회를 준비하는 다양한 학교의 학생들을 가르쳤다.</p>\n<p></p>\n<p><u>2019년(작년)에는 지도교사로 참가했는데 부담감 때문에 스트레스를 많이 받았다.</u> 그래서 정말 하기 싫었지만 어쩌다보니 또 학생들을 가르치게 되었다.</p>\n<blockquote>\n<p>사실 제일 큰 이유는 돈 때문이다. 시급 5만원!</p>\n</blockquote>\n<h4>(1) 서울디지텍고등학교</h4>\n<p>이번에는 코로나의 여파도 있고,\n여러모로 관리가 되지 않은 상태였기 때문에 학생들의 상태가 심상치 않았다.\n대회도 코앞이고 기술적으로 알려줄 시간적 여유도 많지 않기 때문에 코드리뷰를 통해서 문법 교정을 하고 유용한 API를 알려주는 위주로 진행했다.</p>\n<ul>\n<li><a href=\"https://github.com/sdhs-webskills/GJ-2020-MS/pull/1\" target=\"_blank\" rel=\"noopener noreferrer\">광주 문제 코드리뷰</a></li>\n<li><a href=\"https://github.com/sdhs-webskills/Seoul-2020/pull/1\" target=\"_blank\" rel=\"noopener noreferrer\">서울 문제 코드리뷰</a></li>\n</ul>\n<p>일단 깃허브를 최대한 활용해보려고 했으나,\n학생들이 깃허브에 익숙해지기엔 시간이 매우 촉박했다.</p>\n<p>사실 문제를 풀이할 여유도 없는 상태였기 때문에 그냥 물어보는 것들에 대해서 답변해주는 식으로 지도했다.\n다음 기수의 학생들에게는 조금 더 개발 자체에 집중할 수 있는 형태로 가르쳐볼 계획이다.\n여기에 언급할 내용이 많진 않지만, 8월은 기능반 학생들을 가르치는데 시간을 많이 썼다.</p>\n<p>그렇게 <strong>9월 14일</strong> 부터 전국대회가 시작되었다. 올해는 개최지가 전북이라서 전주까지 내려갔다.</p>\n<p></p>\n<p>경기장은 전북 하이텍 고등학교인데 코로나 때문에 선수들만 입장 가능했다. <s>덕분에 무척 편했다.</s></p>\n<p></p>\n<p>나는 학생들이 경기가 끝나고 숙소에 돌아오면, 문제 풀이를 옆에서 도와주었다.\n<strong>며칠 동안 새벽 3시에 자거나 혹은 새벽 5시에 일어났다.</strong>\n회사 일도 원격근무로 병행하고 있던 상태라서 정말 <strong>미친듯이 피곤했다.</strong></p>\n<p></p>\n<p><u>어쨌든 내가 가르친 학생들(서울디지텍고등학교)이 올해에도 입상했다.</u>\n학생 한 명이 제출을 잘못해서 대략 30점 정도를 채점도 못하고 통으로 날려보냈다.\n그래도 입상은 했으니.. 이걸 다행이라고 해야할지..\n이 때 실수한 기억은 경험상 평생 가기 때문에 괜히 안쓰럽다.</p>\n<p>전국대회가 끝난 뒤에 다음 기수의 학생들을 주 1회씩 학교로 방문하여 직접 가르쳤는데,\n대체로 대회 위주의 내용 보단 실무 위주로 교육 중이다.</p>\n<p>기능대회 문제가 워낙 이상하게 나오고 너무 옛날 기술을 사용하고 있기 때문에 학생들이 대회를 준비할 때 무척 힘들어 하는 편이고,\n가르치는 입장에서 즐겁지가 않은 상황이다.</p>\n<p>대회의 취지 자체가 나쁘지 않기 때문에 제발 개선 되길 바라곤 있지만.. 언제쯤 개선이 될지 미지수다.</p>\n<hr>\n<p>그리고 11월에 오직 기능대회를 위한 <a href=\"https://github.com/sdhs-webskills/php-architecture-step-by-step\" target=\"_blank\" rel=\"noopener noreferrer\">PHP Step By Step Tutorial</a>을 만들었다.\n데모는 <a href=\"https://stormy-coast-06452.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>에서 확인할 수 있으며 따로 문서는 없고 코드만 작성해놓은 상태이다.</p>\n<p></p>\n<p>요즘에 PHP를 하다 보면 내가 PHP라는 언어를 다뤄봤다는게 낯설다.\n옛날엔 Server-Side로 다룰줄 아는 언어가 PHP 밖에 없었는데 언제 이렇게 낯설어진걸까?</p>\n<p>이 튜토리얼을 작성하면서 <a href=\"https://dashboard.heroku.com/\" target=\"_blank\" rel=\"noopener noreferrer\">heroku</a>를 처음 사용해봤다.\n그리고 <a href=\"https://devcenter.heroku.com/articles/getting-started-with-php\" target=\"_blank\" rel=\"noopener noreferrer\">Getting Started on Heroku with PHP</a>를 따라해보면서 <a href=\"https://getcomposer.org/doc/00-intro.md\" target=\"_blank\" rel=\"noopener noreferrer\">composer</a>를 처음 사용해봤다.</p>\n<p>이제 <a href=\"https://www.php.net/releases/8.0/en.php\" target=\"_blank\" rel=\"noopener noreferrer\">PHP 8.0</a>이 나오면서 한 층 더 성숙해진 언어가 된 것 같다.\n여유 있을 때(대체 언제?) <a href=\"https://laravel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Laravel</a>로 토이 프로젝트를 진행해봐도 괜찮을 것 같다.</p>\n<p><a href=\"https://github.com/chodragon9\" target=\"_blank\" rel=\"noopener noreferrer\">국제대회 금메달을 받았으며 지금은 카카오에서 근무중인 친구</a>와 함께 위키를 조금씩 만들다가 현타가 와서 포기했었는데,\n그 당시에 만들었던 자료도 같이 첨부한다.</p>\n<ul>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">기능경기대회 Wiki</a></li>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/MySQL-%EA%B8%B0%EB%B3%B8-CRUD-%EB%AA%85%EB%A0%B9%EC%96%B4\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL 기본 CRUD 명령어</a></li>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/PHP-MySQL-CRUD-Tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">PHP+MySQL CRUD Tutorial</a></li>\n<li>PHP MySQL로 게시판 만들기 without MVC\n<ul>\n<li>Part 01\n<ul>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/PHP-MySQL%EB%A1%9C-%EA%B2%8C%EC%8B%9C%ED%8C%90-%EB%A7%8C%EB%93%A4%EA%B8%B0-without-mvc-01\" target=\"_blank\" rel=\"noopener noreferrer\">문서</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=lv5mxcGXnaU\" target=\"_blank\" rel=\"noopener noreferrer\">유튜브 영상</a></li>\n</ul>\n</li>\n<li>Part 02\n<ul>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/PHP-MySQL%EB%A1%9C-%EA%B2%8C%EC%8B%9C%ED%8C%90-%EB%A7%8C%EB%93%A4%EA%B8%B0-without-mvc-02\" target=\"_blank\" rel=\"noopener noreferrer\">문서</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=t0Q9U2VS0gQ\" target=\"_blank\" rel=\"noopener noreferrer\">유튜브 영상</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이제보니 <code>PHP 게시판</code> 이라는 키워드로 유튜브에 검색하면 내가 올린 동영상이 첫 번째로 나온다. 뭐지..? 이제와서..?</p>\n<hr>\n<h4>(2) 인천금융고등학교</h4>\n<p>어쩌다보니 친한 선생님(?)의 소개로 <strong>인천금융고등학교</strong> 학생들에게 <strong>웹 디자인 기능사</strong>를 주제로 <strong>온라인 방과후 수업</strong>을 진행하게 되었다.\n사실 처음에는 웹 개발 강의인줄 알고 기대했는데 알고보니 <u>디자인 계열의 학과</u> 학생들을 대상으로 진행해야 했기 때문에 <strong>웹 디자인 기능사</strong>로 강의 주제를 축소했다.\n<s>웹 디자인 기능사는 이제 정말 지겹다</s></p>\n<h4>1) Repl.it</h4>\n<p>에디터는 어떤 것을 사용할까 고민하다가 <a href=\"https://repl.it/\" target=\"_blank\" rel=\"noopener noreferrer\">Repl.it</a> 서비스를 이용하기로 했다.\n일단 에디터를 설치하고 세팅하고 교육하는데 생각보다 많은 시간이 소요된다.\n무엇보다 파일 시스템 내에서 작업해야 하기 때문에 실습 코드를 항상 들고다니는 학생이 아니라면 이를 따라오기가 쉽지 않으리라 생각했다.</p>\n<p><strong>repl.it</strong>의 경우 인터넷만 된다면 어떤 플랫폼이든 상관 없이 이용할 수 있으며 무료로 호스팅까지 해주기 때문에\n학생들이 결과물에 대해 흥미를 느끼는 과정이 일반적인 에디터를 사용하는 것 보다 좋아보였다.</p>\n<p>그리고 내가 온라인으로 결과물을 바로 확인할 수 있기 때문에 틀린 부분을 교정해주는 것도 훨씬 쉬웠다.</p>\n<h4>2) 강의 교재</h4>\n<p>강의 교재는 <strong>유승렬 교수님</strong>이 만드신 <a href=\"http://webskills.kr/2018/data/WEB_HTML_CSS.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">WEB &amp; HTML &amp; CSS</a>를 사용했다.\n사실 기초 개념에 대한 내용만 이 교재에서 찾아 설명하고, 웬만한 이론적인 내용은 그냥 스킵했다.</p>\n<p>이론을 초반에 아무리 주절 주절 떠들어도 이해하는 학생들이 경험상 거의 없었기 때문에 일단 실습부터 한 다음에 어떤 원리로 그렇게 되는지 설명했다.\n근데 CSS는 외워야 할게 너무 많아서.. 문제다.\n추상화를 너무 잘 해놔서(?) 처음 접하는 사람들은 진짜 미치도록 헷갈릴 수 밖에 없다.</p>\n<h4>3) Repository</h4>\n<p>예제 코드는 <a href=\"https://github.com/JunilHwang/oneline-lecture-note\" target=\"_blank\" rel=\"noopener noreferrer\">이 저장소</a>에 모아놨다.\n대충 핵심적인 내용만 README.md에 작성해놨는데, CSS를 처음 접하는 사람에게 CSS를 잘 설명하기란 정말 하늘의 별따기인 것 같다.\n특히 디자인을 전공하는 사람에게 설명하는 것은 배로 힘들다.</p>\n<h4>4) 분량</h4>\n<p>분량은 한 개의 영상당 40분씩 총 16개를 촬영했다.</p>\n<p></p>\n<p></p>\n<p>녹화는 Mac의 QuickTime Player를 이용했는데 이게 무조건 4k로 녹화되다 보니 용량을 쓸데없이 많이 차지했다.\n인코딩을 다시 해도 줄어들 기미가 보이지 않아서 그냥 포기했다.</p>\n<p><u>나중에 알게된 사실인데 Zoom을 이용하여 녹화하면 거의 용량을 20배 가까이 줄일 수 있는 것 같다. 이걸 왜 이제야 알았을까 🤣</u></p>\n<hr>\n<h3>7. 프로그래머스 챌린지</h3>\n<p></p>\n<p>5월에 재미로 친구들과 같이 <a href=\"https://programmers.co.kr/competitions/151/2020-kakao-fe-recruitment\" target=\"_blank\" rel=\"noopener noreferrer\">카카오 경력 개발자 영입 - 프론트엔드 개발 챌린지</a>에 지원했다.</p>\n<ul>\n<li>\n<p>6월 첫째 주에 <strong>알고리즘 테스트</strong>를 봤다.</p>\n<ul>\n<li>3문제 중에 2문제를 풀었고, 무조건 탈락이구나 생각했는데 통과해버렸다.</li>\n<li>같이 응시한 친구들 중에서 혼자 합격했다. 쓸쓸했다.. 😂</li>\n</ul>\n</li>\n<li>\n<p>6월 둘째 주에 <strong>프런트엔드 테스트</strong>를 봤다. 필수 요구사항은 다 해결했고, 추가 요구사항에서 고전했다.</p>\n</li>\n<li>\n<p>7월 첫째 주에 프런트엔드 테스트에 대한 코드리뷰 및 결과 발표를 안내받았다. 상위 13% 성적을 받았다.<br>\n</p>\n</li>\n</ul>\n<p>얼떨결에 최종면접까지 보게 되었는데, 이 과정에서 공부를 꽤 많이 했다.\n그렇게 폭풍 같던 7월이 지나갔다.</p>\n<hr>\n<p></p>\n<p>9월에 앞서 언급한 <a href=\"#_2-%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A2%E1%86%A8%E1%84%8F%E1%85%A5%E1%84%91%E1%85%B5-%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%84%83%E1%85%B5\">블랙커피 스터디</a>를 참여하면서 <strong>바닐라JS로 SPA 만드는 연습</strong>을 했다. <s>자신감 뿜뿜!</s>\n그리고 때마침 네이버 아폴로 프론트엔드 챌린지가 올라왔고, 바로 신청했다.</p>\n<ul>\n<li>\n<p>이번에도 지인들과 함께 신청했다.</p>\n</li>\n<li>\n<p><strong>알고리즘은 3문제</strong>가 출제되었고 다 풀이했다. 다만 마지막 문제에서 정확성 테스트를 통과하지 못했다.\n하지만 카카오 챌린지때도 두 문제만 풀었는데 통과했기 때문에 이번에도 알고리즘에서 떨어지진 않을 것이라고 생각했다.\n실제로 같이 응시한 사람이 1문제만 풀었는데 알고리즘 테스트는 통과했다.</p>\n</li>\n<li>\n<p>프론트엔드 테스트는 <strong>바닐라 JS로 영화 리뷰와 관련된 SPA(Single Page APP)를 만드는 내용의 과제</strong>였다.</p>\n</li>\n<li>\n<p>원래 프로그래머스에서 프론트엔드 챌린지를 볼 때 어느 정도 기본 컴포넌트 설계가 된 코드를 제공해줬는데 <strong>이번에는 아예 처음부터</strong> 만들어야 했다.\n<u>덕분에 블랙커피 스터디를 진행하면서 공부한 내용을 정말 알차게 써먹었다.</u></p>\n</li>\n<li>\n<p><code>Component</code> <code>Router</code> <code>RestClient</code> <code>Observer</code> <code>debounce</code> 등을 포함한 모든 코어를 적용했고, 결과적으로 완성도 있게 만들 수 있었다.</p>\n</li>\n<li>\n<p>예상보다 결과가 더 좋게 나왔다.<br>\n</p>\n</li>\n</ul>\n<p>경험을 목적으로 면접에 응시했고, 최종면접에서 떨어졌다. 사실 떨어질 수 밖에 없었다. 뚜렷한 이직 의사가 없었으니까.\n전체적으로 모든 질문이 인상 깊었지만, 이 질문이 계속 머릿속을 맴돌았다.</p>\n<p><strong>\"정말로 현재 회사에서 최선을 다했다고 말할 수 있을 만큼 무언가를 해보았는가?\"</strong></p>\n<p>이 한 문장으로 현재 내 상태를 정의해주었다. 지금의 이 자리에서 후회가 없도록 최선을 다하기를 다짐했다.</p>\n<hr>\n<h2>일상</h2>\n<hr>\n<h3>1. 학자금 대출 상환과 졸업</h3>\n<p></p>\n<p><strong>대학교 졸업 직전에 학자금 대출을 모두 갚았다.</strong>\n대학교를 다니는 동안 한 달 평균 100만원 정도를 사용했는데(월세, 교통비, 밥값, 통신비 및 기타 생활비),\n학비와 생활비를 스스로 벌어서 해결한 것이다.\n정말 눈물 겨운 여정이었다.</p>\n<p>학교 한 번 잘 다녀보겠다고 몇 년을 아등바등 애쓴게 아이러니 하게도\n학교 생활을 제대로 못하게 하지 않았나 싶다.</p>\n<p>불평불만도 많았지만 대부분의 수업이 재밌었다.\n다니다 보면 등산하는 기분이 들었지만 캠퍼스도 좋았다.\n엄청나게 많은 것들을 해보진 못했지만 하나씩 되새김질 해보면 나름 적지 않은 경험들 쌓인 것 같다.</p>\n<p></p>\n<p>때로는 길게, 때로는 짧게 느껴졌던 대학생활의 종지부를 찍었다.</p>\n<p>그냥 이렇게 내게는 조금 버거웠던 학교생활을 잘 마무리 한 것 자체가 만족스럽다!</p>\n<hr>\n<h3>2. 수영</h3>\n<p><img src=\"https://item.kakaocdn.net/do/7d250b3379c1a114fbd73bbd99310a34f43ad912ad8dd55b04db6a64cddaf76d\" alt=\"수영 bn\"></p>\n<p>입사를 하고 나서 운동을 해야겠다고 마음 먹었는데, 어떤 운동을 할까 고민하다가 수영을 하기로 마음먹었다.\n물에 빠져 죽을 고비를 넘긴 경험도 많이 있었고, 무엇보다 잘못된 자세를 교정하는데 좋은 운동이 수영이라고 하기에 나에게 적합한 운동이라고 생각했다.</p>\n<p>그래서 2월초에 회사 앞에 있는 <a href=\"http://www.phspo.com/cmm/main/mainPage.do\" target=\"_blank\" rel=\"noopener noreferrer\">평화 스포 웰빙</a>에 맛보기로 1개월치를 등록하고 다녔다.\n그 후에 마음에 들어서 6개월을 더 등록하고 다녔다.</p>\n<p><u>오전 6시 30분 ~ 7시 20분 강습이라서 월/수/금에는 최소 오전 5시 30분에 집에서 출발해야 했다.</u>\n문제는 코로나의 여파로 수영장에 등록한 7개월 중 제대로 다닌건 3개월도 안 되는 것 같다.</p>\n<p>일찍 일어나서 운동을, 다름아닌 수영을 하고 출근하니까 오전에 너무 피곤해서 힘들었다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/8f3c5af3fa1ca1557ad6cc0ef75d98c9f604e7b0e6900f9ac53a43965300eb9a\" alt=\"화남 bn\"></p>\n<p>빨리 코로나가 끝나고 다시 수영을 할 수 있기를 기대하고 있으나.. 대체 언제 끝날지</p>\n<hr>\n<h3>3. 고양이</h3>\n<p>\n</p>\n<p>나에게 있어서 2020년이 무척 뜻 깊은 이유 중 하나가 바로 지금 모시고 있는(?) <strong>주인님(포동이)과의 만남</strong> 때문이다.</p>\n<p></p>\n<p>지금 살고 있는 집에 이사온 직후에 집 근처에 길냥이 가족이 살고 있었다.\n왼쪽에 보이는 큰 고양이가 포동이 어미 고양이인 <strong>나비</strong>다.\n오른쪽에 보이는 새끼 고양이들이 포동이보다 먼저 태어난 형제 들인데, 가운데 고양이가 <strong>코코</strong>라고 불렸고, 오른쪽에 검정색 고양이는 어느 순간 보이지 않았다.\n소문으로는 어떤 아주머니가 냥줍을 했다고 한다.</p>\n<p></p>\n<blockquote>\n<p>작고 소중한 아기 고양이</p>\n</blockquote>\n<p>그렇게 몇 개월의 시간이 흐른 후에, 포동이가 태어났고 이 당시만 해도 포동이가 내 가족이 되리라곤 상상하지 못했다.</p>\n<p>\n</p>\n<p>사실 포동이보다 포동이의 언니인 <strong>코코</strong>와 먼저 친해졌는데, 계속 놀아주다 보니 나중엔 집까지 찾아왔다.</p>\n<p></p>\n<p>낮에 가서 보면 이렇게 다섯 가족이 광합성을 하고 있는 모습을 자주 볼 수 있었다.</p>\n<p></p>\n<p>영하 10도 밑으로 떨어지는 날이 있었는데, 이 고양이 가족들을 그냥 지나칠 수가 없었다.\n그래서 저 주황색 고양이 집을 들고 우리 집으로 직행했다.</p>\n<p></p>\n<p>누추한 곳에 귀하신 분들이 오셨다.\n고양이들의 포지션만 봐도 성격이 보인다.</p>\n<ul>\n<li><strong>코코</strong>: 동생들을 정말 잘 챙긴다. 거의 대리 육아 수준\n<ul>\n<li>놀랍게도 저 때 나비(어미고양이)는 다시 임신 중이었다.</li>\n<li>1년 동안 나비가 애기를 낳은 것만 3번 봤다.</li>\n</ul>\n</li>\n<li><strong>나비</strong>: 타고난 길냥이다. 집보다 밖이 좋다.</li>\n</ul>\n<p>그리고 구석에 있는 아기 고양이들은 정말 겁이 많았다. 그래서 <strong>쫄보</strong>를 쪼개어 <code>쫄이(검은무늬)</code>와 <code>보리(힌무늬+검은무늬)</code>로 이름을 지어줬다.\n삼색 고양이의 이름은 쫄보들에 비해 포동포동해서 <strong>포동이</strong>로 지어줬다.</p>\n<ul>\n<li><strong>쫄이</strong>: 사람을 매우 경계한다. 츄르를 줄 때 빼곤 먼저 다가오는 일이 없다.</li>\n<li><strong>보리</strong>: 사람에 대한 호기심이 강하다. 어느 정도 친해지면 먼저 다가온다.</li>\n<li><strong>포동이</strong>: 사람에 대한 경계가 아예 없다. 인싸냥이다.</li>\n</ul>\n<p></p>\n<p>포동이가 워낙 사람을 좋아하고 낯을 가리지 않아서 잘 놀아줬다.</p>\n<p></p>\n<p>여튼 하룻 밤만 고양이 가족을 재워줬는데, 그 이후로 자꾸 우리 집에 찾아왔다. 겨울이라서 추워죽겠는데 고양이들 때문에 계속 문을 열어 놔야했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/103750785-a0c50300-504a-11eb-8eaa-524351ffcf31.gif\" alt=\"포동이 다굴빵\"></p>\n<p>집 앞에다 상자를 놓으면 애기들이 이러고 놀았다.</p>\n<p></p>\n<p>포동이가 자꾸 집으로 찾아와서 그냥 아예 키우기로 마음먹었는데, 그렇게 집 안으로 아예 들여보낸 후 이러고 잠들었다.</p>\n<p></p>\n<p>이 때 재택근무 기간이라서 계속 집에 있었는데 포동이 때문에 집중이 잘 되질 않았다 😓\\</p>\n<p></p>\n<p>어떻게 이러고 잘 수 있지?</p>\n<p></p>\n<p>가끔은 토끼 같기도 하고</p>\n<p></p>\n<p>사람 같기도 하고</p>\n<p></p>\n<p>내가 유튜브를 보고 있으면 이렇게 따라 본다.</p>\n<p></p>\n<p>왜 낮잠을 이렇게 자는건데?</p>\n<p></p>\n<p>어쨌든 포동이와 함께한 2020년을 잘 마무리할 수 있었다.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCAzEvXGnwNis5akOJMwvn9w\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>로 가면 포동이 동영상을 볼 수 있다.</li>\n<li><a href=\"https://www.instagram.com/stories/highlights/17969932924305597/\" target=\"_blank\" rel=\"noopener noreferrer\">인스타그램</a>에서도 확인할 수 있다.</li>\n</ul>\n<hr>\n<h2>마무리하며</h2>\n<p>올해는 정말 열심히 살았다고 자부할 수 있다.\n2021년은 양보단 질로, 급하게 하기보단 천천히 음미하는 공부를 해볼 생각이다.</p>\n<p>그리고 TMI가 가득한 긴 글 읽어주신 모든 분들께 압도적 감사를 전합니다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/b888ef9aeedc7e048b34a7856ea2ce944022de826f725e10df604bf1b9725cfd\" alt=\"감사합니다 bn\"></p>\n",
      "date_published": "2021-01-07T11:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 12월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/12-December/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/12-December/",
      "summary": "개발자 황준일의 2020년 12월 회고입니다.",
      "content_html": "\n<p>벌써 올 해의 마지막 월 회고를 쓰게 되었다.\n아.. 2020년 회고는 언제 써야하나.. 불행인지 다행인지 쓸 내용이 너무 많다 😂</p>\n<h2>공적</h2>\n<p>이번 달에는 무언가 새로운걸 만들기 보다는 기존에 있는 것들을 개선하는 작업 위주로 진행했다.</p>\n<h3>1. Composition API로 리팩토링</h3>\n<p><a href=\"/TIL/Review/2020-year/11-November/\" target=\"_blank\">11월 회고</a>에서 <a href=\"https://composition-api.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a>에 대해 언급했었는데,\n그렇게 학습을 어느 정도 마무리 하고 사내 프로젝트에 적용했다.</p>\n<p></p>\n<p>기존에는 위와 같은 형태의 코드였는데, 리팩토링 작업 후에는</p>\n<p></p>\n<p>이렇게 간소화됐다. 각각의 로직을 <code>useMenus</code>, <code>useSchedule</code>, <code>useTemplateItem</code>, <code>usePreview</code> 처럼 <strong>카테고리별로 묶어서</strong> 유지보수 할 수 있게 작업했다.\n다만 아쉬운 점은 변수와 메소드를 구분할 수 있는 방법이 이름 밖에 없다는 점과 직접 만든 mapper 라이브러리의 경우 IDE 추적을 지원하지 않는 다는 점이다.</p>\n<p>Vuex에 <strong>Composition API 전용의 유틸성 라이브러리가 추가 되길</strong> 기도할 뿐이다.. 😇</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">작성 규칙</p>\n<p>Compositino API를 사용하면서 여러가지 나만의 규칙을 만들었는데, 추후에 제대로 정리해서 공유할 생각이다. <strong>회고에서 다루기에는 양이 너무 많다.</strong></p>\n</div>\n<p>어느정도 리팩토링을 하긴 했지만, 그래도 많이 부족하다. 틈틈이 시간날 때 마다 해야겠다.</p>\n<hr>\n<h3>2. 마지막 프로젝트</h3>\n<p>벌써 2020년의 마지막 프로젝트를 진행했다. <a href=\"/TIL/Review/2020-year/11-November/\" target=\"_blank\">11월 회고</a>에도 언급했던 <strong>크롬 브라우저 전용 서비스</strong>이다. 두 달동안 빠르게 거의 프로토타입 형태로 빠르게 만들었고, 월말에 사용자단에 노출될 예정이다.\n그러나 아직 정식으로 공개된 서비스가 아니라서 자세한 내용을 언급하긴 어렵다.</p>\n<p>기술스택정도만 언급해보자면,</p>\n<ul>\n<li>Java</li>\n<li>spring boot</li>\n<li>Node.js</li>\n<li>Vue.js</li>\n<li>SPA + CSR + SSR</li>\n</ul>\n<p>등을 사용했다.\n아마 <a href=\"https://zuminternet.github.io/ZUM-Mobile-NodeJS/\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>에 나온 내용과 겹치는 부분이 많을 것이다.</p>\n<p>흠.. 무언가 더 많은 내용을 쓰고 싶지만.. 여기까지만!</p>\n<hr>\n<h3>3. 떠나가는 팀원들</h3>\n<p>업무적인 내용은 아니지만, 이번 달에만 팀원 두 분이 이직한다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/b888ef9aeedc7e048b34a7856ea2ce9415b3f4e3c2033bfd702a321ec6eda72c\" alt=\"ㅠㅠ\"></p>\n<p>한 분은 <a href=\"https://www.kakaomobility.com/\" target=\"_blank\" rel=\"noopener noreferrer\">카카오 모빌리티</a>에 프론트엔드 파트로, 다른 한 분은 <a href=\"https://www.tosspayments.com/\" target=\"_blank\" rel=\"noopener noreferrer\">토스 페이먼츠</a>로 가신다.\n올 해에만 <strong>여섯 분이 이직</strong>을 하셨고 <strong>새로 들어온 사람은 한 명</strong>이다. <s>드디어 막내 탈출!</s></p>\n<p><img src=\"https://item.kakaocdn.net/do/1eb7b0fd47d19247cac42daa7547feabac8e738cb631e72fdb9a96b36413984e\" alt=\"^0^\"></p>\n<p>이번에 새로 들어온 사람은 사실 <strong>내가 추천해서 들어온 대학교 후배</strong>다.\n같은 팀에 친한 사람이 들어와서 즐겁다 😁</p>\n<p>내년에는 과연 얼마나 많은 분들이 떠나고, 또 새로 들어올까? 기대 반, 걱정 반.. 사실 걱정이 한 80%정도 되는 것 같다.</p>\n<hr>\n<h3>4. 사내 게임 대회</h3>\n<p>어쩌다보니 사내 게임대회(카트라이더 러쉬 플러스)에 출전하게 되었다.\n각 팀마다 의무적으로 한 명이상 출전해야 하는데, 우리 팀은 아무도 지원하지 않아서 팀 합류 순서로 오름차순하여 출전했다.</p>\n<p><strong>우승 상품은 닌텐도 스위치, 준우승 상품은 에어팟 프로였다.</strong>\n우여곡절 끝에 준결승까지 갔으나.. <u>지갑의 차이(?)를 극복하지 못하고 탈락했다.</u></p>\n<p></p>\n<p></p>\n<p>결승까지 진출했으면 최소 에어팟 프로를 받을 수 있었는데.. ㅠㅠ 너무 아쉽다.</p>\n<hr>\n<h2>사적</h2>\n<p>이번 달에는 뭘 했나 싶었는데.. 제목을 나열하고 보니 뭘 또 이리 많이 했나 싶다. 빈수레가 요란하다더니 😅</p>\n<h3>1. NextStep 리뷰어 활동</h3>\n<p>지난 달에 이어서 <a href=\"https://edu.nextstep.camp/s/MNii0Puk\" target=\"_blank\" rel=\"noopener noreferrer\">TDD, Clean Code with Java 10기</a>의 리뷰어로 활동했다.\n<strong>12월 23일</strong>까지였는데, 과정이 종료된 이후에도 포기하지 않고 끝까지 미션을 수행하신 분이 계셔서 <strong>12월 29일</strong>에 비로소 리뷰어 활동을 완전히 끝낼 수 있었다.</p>\n<p></p>\n<p>그래도 이번 달에는 어느 정도 난이도가 있는 미션들을 수행하는 사람들만 남아서 리뷰 요청이 많이 오진 않았다.\n<strong>저번 달에 60개의 Pull Request</strong>가 올라온 반면에, <strong>이번 달에는 20개의 Pull Request</strong>가 올라왔다.\n1/3로 줄어든 것이다.</p>\n<p>그리고 <strong>블랙커피 스터디</strong>를 함께 했던 사람들에게 이 과정을 소개해주었고,\n몇 분이 이번 기수에 신청해서 참여했다.\n그리고 쉽지 않은 여정임에도 불구하고 모든 미션을 잘 마무리 해주셨다.</p>\n<p></p>\n<p>한솔님의 경우 사다리 미션을 나와 함께 진행했고,</p>\n<p></p>\n<p>종완님의 경우 마지막 미션인 볼링 미션을 나와 함께 진행했다.</p>\n<p>음.. 좋은 피드백을 많이 남기진 못한 것 같아서 조금 죄송스럽다.\n이번 기수에는 내가 너무 힘들었다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/8f3c5af3fa1ca1557ad6cc0ef75d98c96fb33a4b4cf43b6605fc7a1e262f0845\" alt=\"gg\"></p>\n<p>리뷰를 워낙 많이 하기도 했고, 스스로의 역량이 부족하다는 점도 많이 느꼈다.\n<u>그래서 다음 기수에는 리뷰어로 활동하지 않고 스스로의 역량 강화에 집중할 예정이다.</u></p>\n<hr>\n<h3>2. 단쿠키 개발팀 합류</h3>\n<p>12월 초에 대면 면접을 진행했다. 면접 장소는 학교 근처였는데 오랜만에 학교 구경좀 하려고 아침 일찍 갔다.</p>\n<p>\n</p>\n<p>교내에 있는 세미나실에서 근무시간 동안 일도 하고, 오랜만에 학교 근처 맛집에서 점심도 먹었다.\n그토록 졸업하고 싶었고, 벗어나고 싶었던 곳인데 그래도 학교 다닐 때가 지금 보단 더 마음 편하고 즐거웠던 것 같다.</p>\n<p>어쨌든 그렇게 근무 시간이 끝나고 대면 면접을 진행했다.\n면접 분위기는 무척 좋았고, 단쿠키라는 서비스에 대한 여러가지 사정을 들을 수 있었다.\n여태까지 학생 신분으로 보상도 없이 서비스를 유지하느라 많이 힘들었던 것 같고,\n운영진이 얼마나 이 서비스에 애정을 가지고 있는지 느껴졌다.</p>\n<p></p>\n<p>이렇게 나도 단쿠키 개발팀에 합류하게 되었다.\n일정이 조금 촉박한 것 같아서 걱정이지만 <strong>걱정보단 기대가 더 앞선다.</strong></p>\n<p>그렇게 월말이 되었고 다시 단쿠키에서 메일이 왔다.\n슬랙 채널을 통해 커뮤니케이션이 진행되는 것 같다.</p>\n<p></p>\n<p>개발팀 인원은 대략 8명정도 되는 것 같은데, 아마 회의를 하게 되면 제대로 알게 되겠지 싶다.</p>\n<hr>\n<h3>3. Composition API 학습</h3>\n<p>11월에 <strong>Composition API로 TodoList 만들기</strong>를 시작했고, 이번 달 초에 마무리 했다.</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>Composition API를 사용하면서 느낀 것은 <a href=\"https://ko.reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">React Hook</a>과 굉장히 유사하다는 점이다.\n그래서 처음에는 Store 없이 오직 Composition API만 이용해서 전역 상태를 관리하도록 구현했다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reative<span class=\"token punctuation\">,</span> toRefs <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    state<span class=\"token punctuation\">.</span>todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">,</span> item <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token operator\">...</span><span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    addItem</span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> todoItems<span class=\"token punctuation\">,</span> addItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"test\"];</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위와 같이 useTodo를 <code>Composition API</code>의 <code>reative</code> <code>todRefs</code> 등을 이용하여 만들었다.</p>\n<p>그런데 이러한 방식으로 전역 상태를 관리하면 문제가 발생 가능성이 매우 높다.\n이 때 문제점은 <code>useTodo</code>가 <code>함수</code>라는 것이다.\n즉, <strong>여러번 실행</strong>할 수 있다는 것이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> todo1 <span class=\"token operator\">=</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> todo2 <span class=\"token operator\">=</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">todo1<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todo1<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"test1\"];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">todo2<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>todo2<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"test2\"];</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이를 해결하기 위해선 다음과 같은 방식으로 작성하거나</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reative<span class=\"token punctuation\">,</span> toRefs <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">todoItems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  state<span class=\"token punctuation\">.</span>todoItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>todoItems<span class=\"token punctuation\">,</span> item <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> addItem <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useTodo<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>아예 <strong>처음부터 Store(Vuex)를 사용</strong>하는 것이다.</p>\n<p>결론적으로 composition api만 이용하여 전역 상태를 관리하는 것은 무척 힘들다.\n하고자 한다면 못할 건 없으나.. 굳이 그렇게 해야할까 싶기도 하다.</p>\n<p>무엇보다 store(vuex)를 쓰면 좋은 이유 중 하나가 <a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd\" target=\"_blank\" rel=\"noopener noreferrer\">VueDevtools</a>을 이용하여 mutation이나 dispatch가 실행 한 시점의 데이터를 조회할 수 있다는 점이다.\n뿐만아니라 현재의 state도 바로바로 조회할 수 있으니 이를 포기하기란 쉽지 않은 선택이다.</p>\n<p></p>\n<p>다만 Composition API와 같이 사용할 때 힘든 점은 store에 대한 <strong>유틸성 라이브러리가 없다는 점</strong>이다.\n기본적으로 Vuex로 구성한 것들은 <code>createNamespaceHelper</code> <code>mapState</code> <code>mapGetters</code> <code>mapMutations</code> <code>mapActions</code> 등을 통해 컴포넌트에 쉽게 매핑할 수 있다.\n<u>그러나 Composition API에 Vuex를 매핑하는 라이브러리는 존재하지 않는다.</u></p>\n<p>그래서 이를 <strong>직접 만들어 사용</strong>해야 했다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vue/reactivity\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vuex\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useStoreModuleMapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">namespace</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapState</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>namespace<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapMutations</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namespace<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapActions</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namespace<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapGetters</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">keys</span> <span class=\"token operator\">=&gt;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namespace<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> mapState<span class=\"token punctuation\">,</span> mapMutations<span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">,</span> mapGetters <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>짧게 구성했지만, 기존의 mapper와 유사하게 사용할 수 있게 만들었다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> mapState<span class=\"token punctuation\">,</span> mapGetters<span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">,</span> mapMutations <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStoreModuleMapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"todo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>listLoading<span class=\"token punctuation\">,</span> appendLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"listLoading\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appendLoading\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>filteredTodoItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"filteredTodoItems\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>setTodoItems<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">SET_TODO_ITEMS</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SET_USER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fetchItems<span class=\"token punctuation\">,</span> addItem<span class=\"token punctuation\">,</span> updateItem<span class=\"token punctuation\">,</span> toggleItem<span class=\"token punctuation\">,</span> removeItem<span class=\"token punctuation\">,</span> removeAllItem<span class=\"token punctuation\">,</span> updatePriority<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token constant\">FETCH_ITEMS</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">ADD_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">UPDATE_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">TOGGLE_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">REMOVE_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">REMOVE_ALL_ITEM</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token constant\">UPDATE_PRIORITY</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그러나 state나 method를 직접 문자열로 매칭해야 하기 때문에 <strong>IDE에서 코드 추적이 쉽지 않기 때문에</strong> 불편하긴 마찬가지이다.\n제일 좋은 방법은 Vuex 측에서 만들어서 제공하는건데.. 과연 언제쯤 가능할까?</p>\n<p><img src=\"https://item.kakaocdn.net/do/e0506743e351cfe94dbe9e6f63973f26a88f7b2cbb72be0bdfff91ad65b168ab\" alt=\"when?\"></p>\n<hr>\n<p>결과물은 코드는 <a href=\"https://github.com/JunilHwang/vue-composition-todoapp\" target=\"_blank\" rel=\"noopener noreferrer\">이 저장소</a>에서 확인해볼 수 있다.\n데모는 아래의 링크에서 확인할 수 있다.</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/vue-composition-todoapp/#/step1\" target=\"_blank\" rel=\"noopener noreferrer\">TodoList - Step1 : localStorage</a></li>\n<li><a href=\"https://junilhwang.github.io/vue-composition-todoapp/#/step2\" target=\"_blank\" rel=\"noopener noreferrer\">TodoList - Step2 : Rest API</a></li>\n<li><a href=\"https://junilhwang.github.io/vue-composition-todoapp/#/step3\" target=\"_blank\" rel=\"noopener noreferrer\">TodoList - Step3 : Team/Member</a></li>\n</ul>\n<p>그리고 다음과 같은 문서와 저장소를 참고했다.</p>\n<ul>\n<li><a href=\"https://composition-api.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API RFC</a></li>\n<li><a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 3 공식문서 - Composition API</a></li>\n<li><a href=\"https://chodragon9.github.io/blog/composition-api-rfc-migration/\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API 경험 정리</a></li>\n<li><a href=\"https://github.com/devJang/nuxt-realworld\" target=\"_blank\" rel=\"noopener noreferrer\">devjang/nuxt-realworld</a></li>\n</ul>\n<hr>\n<h3>4. 블랙커피 스터디 레벨 2</h3>\n<p>지난 달에 시작했던 <a href=\"https://edu.nextstep.camp/s/mnUCGXab\" target=\"_blank\" rel=\"noopener noreferrer\">블랙커피 스터디 레벨 2</a>를 이번 달에 마무리했다.</p>\n<p></p>\n<p>2주차는 버퍼기간으로 건너 뛰고, <strong>3주차에 UI 테스트 미션</strong>을 진행했고, <strong>4주차에 E2E 테스트 미션</strong>을 진행했다.</p>\n<h4>(1) UI 테스트</h4>\n<p>UI 테스트는 <a href=\"https://testing-library.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Testing Library</a>를 이용하여 진행했다.\n<a href=\"https://testing-library.com/docs/dom-testing-library/api-queries\" target=\"_blank\" rel=\"noopener noreferrer\">Queries</a> 문서와 <a href=\"https://testing-library.com/docs/dom-testing-library/api-async\" target=\"_blank\" rel=\"noopener noreferrer\">Async Utilites</a>문서를 보면서 삽질을 많이 했다.</p>\n<p>특히, <code>wait</code> <code>waitFor</code> <code>waitForDomChange</code> 등의 API를 사용하는 방법이 무척 헷갈렸고,\n<code>waitFor</code>의 경우 IDE 자동완성을 사용하면 <code>babel</code>을 불러와서 당황스러웠다.</p>\n<p>그리고 비동기 테스트(API 테스트)의 경우 <a href=\"https://github.com/ctimmerm/axios-mock-adapter\" target=\"_blank\" rel=\"noopener noreferrer\">axios mock adapter</a> 혹은 <a href=\"https://github.com/wheresrhys/fetch-mock\" target=\"_blank\" rel=\"noopener noreferrer\">fetch mock</a> 등을 이용했는데 처음에 사용 방법을 착각해서 삽질을 많이 했다.</p>\n<p>미션 자체가 삽질의 연속이었달까.. 무척 힘든 작업이었다.</p>\n<p>mockAxios의 경우 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// mockAxios 초기화</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> mockAxios <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockAdapter</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Mock Request와 Response 정의</span></span>\n<span class=\"line\">mockAxios<span class=\"token punctuation\">.</span><span class=\"token function\">onGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John Smith'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// API 요청시 Mock Response 를 반환함</span></span>\n<span class=\"line\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">     <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { id: 1, name: 'John Smith' }</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 다음과 같이 한 번에 표현할 수도 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">initVal</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">response</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">isMax</span><span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">isMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">isMin</span><span class=\"token operator\">:</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">isMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\">mockAxios</span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">onGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">onPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/counter/inc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">onPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/counter/dec'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">dec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>전체적인 UI Test Code는 다음 링크에서 확인할 수 있다.</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/js-test-basic-step2/blob/main/step2/test/uiCounter/dom.spec.js\" target=\"_blank\" rel=\"noopener noreferrer\">Only UI Counter</a></li>\n<li><a href=\"https://github.com/JunilHwang/js-test-basic-step2/blob/main/step2/test/serverCounter.spec.js\" target=\"_blank\" rel=\"noopener noreferrer\">API + Ui Counter</a></li>\n<li><a href=\"https://github.com/JunilHwang/js-test-basic-step2/blob/main/step2/test/todoapp/todoapp.spec.js\" target=\"_blank\" rel=\"noopener noreferrer\">API + TodoApp</a></li>\n</ul>\n<hr>\n<h4>(2) E2E 테스트</h4>\n<p><strong>E2E 테스트</strong>는 <a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Cypress</a>를 이용하여 진행했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">cypress</p>\n<p>핵심적인 내용은 다음과 같다.</p>\n<ul>\n<li>브라우저를 다룰 수 있는 별도의 드라이버를 만들어서 사용</li>\n<li>E2E 뿐만 아니라, 통합, 단위 테스트까지 사용 가능</li>\n<li>GUI 도구를 지원. 스펙 관리 및 디버깅이 편리함.</li>\n<li>브라우저 내부에서 테스트</li>\n<li>DashBoard: 모든 테스트 과정과 결과를 저장하고, 한 눈에 분석/관리할 수 있는 서비스 (유료)</li>\n</ul>\n<p>상세한 내용은 <a href=\"https://docs.cypress.io/guides/overview/key-differences.html\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>서 확인할 수 있다.</p>\n</div>\n<p>cypress를 이용하여 테스트를 진행하면 다음과 같은 처음에 다음과 같은 대시보드가 나온다.</p>\n<p><img src=\"https://nextstep-storage.s3.ap-northeast-2.amazonaws.com/37e4a2bdb4564fd996fd8c1235057d59\" alt=\"대시보드\"></p>\n<p>그리고 대시보드에서 특정 테스트를 선택하여 실행하면 다음과 같이 브라우저내에서 차례대로 UI 테스트를 진행한다.</p>\n<p><img src=\"https://nextstep-storage.s3.ap-northeast-2.amazonaws.com/751848b6474941669abf18146b2e6a33\" alt=\"UI테스트\"></p>\n<p>그런데 이렇게 테스트를 진행하기 위해선 먼저 앱 자체를 정상적으로 실행할 수 있도록 만들어야한다.\n문제는 기존에 Level 1에서 만들었던 결과물을 가지고 테스트를 해야 하는데, 귀찮아서 그냥 건너뛴 오류들 때문에 테스트 자체를 실행할 수 없었다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/8f3c5af3fa1ca1557ad6cc0ef75d98c9f604e7b0e6900f9ac53a43965300eb9a\" alt=\"빡침\"></p>\n<p><s>과거의 나는 대체 무슨 생각이었던걸까</s></p>\n<p>어쨌든 테스트 코드를 정상적으로 실행하기 위해 3개월 전에 만든 코드를 뜯어고치고, 모든 오류를 없애버렸다.\n이 과정에 반절 이상의 시간을 쓴 것 같다 😇</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">고찰</p>\n<p>cypress를 이용하면서 든 생각이, 이건 꼭 테스트를 할 때만 필요한게 아니라 무언가 브라우저의 매크로랄까?\n그런걸 만들 때 사용해도 재밌을 것 같았다.</p>\n<p>실제로 이런 도구를 이용해서 공연 예매를 하거나, 항공사 티켓을 조회하거나, 아니면 SNS에 좋아요 매크로를 만들거나 하는 등에 쓴 사람이 많다고 한다.\n나의 지인 중 한 명은 <a href=\"https://github.com/microsoft/playwright\" target=\"_blank\" rel=\"noopener noreferrer\">playwright</a>를 이용하여 <a href=\"https://github.com/minuukang/army-letter-bot/\" target=\"_blank\" rel=\"noopener noreferrer\">육군훈련소 실시간 검색어 뉴스 전송 봇</a>을 만들었다.\n<a href=\"https://medium.com/@minukang/%EC%9C%A1%EA%B5%B0%ED%9B%88%EB%A0%A8%EC%86%8C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EA%B2%80%EC%83%89%EC%96%B4-%EB%89%B4%EC%8A%A4-%EC%A0%84%EC%86%A1-%EB%B4%87-%EA%B0%9C%EB%B0%9C%ED%9B%84%EA%B8%B0-f0c178a4e4dc\" target=\"_blank\" rel=\"noopener noreferrer\">후기</a>도 읽어보길 권한다.</p>\n</div>\n<p>우여곡절 끝에 테스트 코드를 작성했는데</p>\n<p></p>\n<p>위와 같이 특정 테스트 하나를 통과하지 못했다.\n<code>dblclick</code> 이벤트와 관련된 문제 같은데 아무리 구글링을 해봐도 원인을 찾을 수가 없었다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/8f3c5af3fa1ca1557ad6cc0ef75d98c9f604e7b0e6900f9ac53a43965300eb9a\" alt=\"빡침\"></p>\n<p>아무래도 API를 호출하고 다시 렌더링을 하는 과정에서 문제가 있는 것 같은데.. 시간이 너무 지체되어서 그냥 포기했다 😇</p>\n<p>전체 코드는 <a href=\"https://github.com/JunilHwang/js-test-basic-step3/blob/main/step3/cypress/integration/todolist.spec.js\" target=\"_blank\" rel=\"noopener noreferrer\">여기서</a> 확인할 수 있다.</p>\n<hr>\n<h4>(3) 후기</h4>\n<p>프론트엔드 테스트가 어렵긴 하지만 그래도 백엔드 테스트보다 재밌었다.\n눈에 보이는 것들을 코드로 정의하여 테스트하는 것 자체가 큰 매력라고 생각한다.</p>\n<p><img src=\"https://item.kakaocdn.net/do/8f3c5af3fa1ca1557ad6cc0ef75d98c98b566dca82634c93f811198148a26065\" alt=\"매력\"></p>\n<p>다음과 같은 글과 영상을 같이 봐도 좋을 것 같다.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=L1dtkLeIz-M\" target=\"_blank\" rel=\"noopener noreferrer\">Youtube - 프론트엔드에서 TDD가 가능하다는 것을 보여드립니다.</a></li>\n<li><a href=\"https://velog.io/@muchogusto/FeConf2020-%EB%A6%AC%EB%B7%B0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-TDD%EA%B0%80-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4%EB%8A%94-%EA%B2%83%EC%9D%84-%EB%B3%B4%EC%97%AC%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4\" target=\"_blank\" rel=\"noopener noreferrer\">FeConf2020 리뷰🖊: 프론트엔드에서 TDD가 가능하다는 것을 보여드립니다.</a></li>\n<li><a href=\"https://microprotect.github.io/2020/12/16/frontend-tdd-feconf2020/\" target=\"_blank\" rel=\"noopener noreferrer\">FEConf2020 프론트엔드 TDD 발표 후기</a></li>\n</ul>\n<p>그리고 전체 미션 코드는 <a href=\"https://github.com/JunilHwang/black-coffee-study-lv2\" target=\"_blank\" rel=\"noopener noreferrer\">여기서</a> 확인할 수 있다.</p>\n<hr>\n<h3>5. 블로그 스터디 2기</h3>\n<p>11월 말에 시작했던 <a href=\"https://edu.nextstep.camp/s/4dBdkika\" target=\"_blank\" rel=\"noopener noreferrer\">블로그 스터디 2기</a>가 이번 달 중순에 종료되었다.\n원래 한 달 동안 3개 이상의 글을 쓰는 것이 스터디의 목표인데, 이번에는 바쁘기도 했고 <s>귀찮기도 해서</s> 여러가지 핑계(?)로 두 개의 글만 작성했다.</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\" rel=\"noopener noreferrer\">유년시절 이야기 Part 03</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/02-2021-%EA%B3%84%ED%9A%8D/\" target=\"_blank\" rel=\"noopener noreferrer\">2021년 새해 계획</a></li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">유년 시절 이야기 모음</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\" rel=\"noopener noreferrer\">Part 01</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\" rel=\"noopener noreferrer\">Part 02</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\" rel=\"noopener noreferrer\">Part 03</a></li>\n</ul>\n</div>\n<p>사실상.. 거의 참여를 하지 않았다고 봐도 무방한 것 같다.</p>\n<p>다른 스터디 참가자가 올린 글은 <a href=\"https://github.com/next-step/blog/pulls\" target=\"_blank\" rel=\"noopener noreferrer\">여기서</a> 확인할 수 있다.</p>\n<p>그런데 스터디가 종료된 이후에 무언가를 계속 작성 중이다.\n음.. 내가 좀 변덕스러운 것 같기도 하고.</p>\n<p><img src=\"https://item.kakaocdn.net/do/f7833fcaf0a85fd066bd7d90ba61a634d0bbab1214a29e381afae56101ded106\" alt=\"하기 싫다\"></p>\n<hr>\n<h3>6. 독서</h3>\n<p>이번 달에는 업무가 엄청 많지 않아서 회사에서 책을 읽었다.</p>\n<h4>(1) 그림으로 배우는 Http &amp; Network Basic</h4>\n<p><a href=\"http://www.yes24.com/Product/Goods/15894097\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"http://image.yes24.com/momo/TopCate448/MidCate010/44791452.jpg\" alt=\"썸네일\"></a></p>\n<p>이 책은 꽤 오래전에 출간된 네트워크 관련 서적이다.\n<a href=\"https://www.youtube.com/channel/UC-mOekGSesms0agFntnQang\" target=\"_blank\" rel=\"noopener noreferrer\">우아한Tech Youtube</a>를 구독중인데  <a href=\"https://www.youtube.com/watch?v=g5sxpi0sJc4&amp;t=224s\" target=\"_blank\" rel=\"noopener noreferrer\">우아한형제들 개발자에게 묻는다</a> 라는 영상을 보고 구매한 책이다.</p>\n<p>내가 프론트엔드도 같이 병행하고 있기 때문에 네트워크와 관련된 내용은 꼭 익혀둘 필요가 있다고 생각했다.\n그래서 구매했고, 생각보다 쉽게 그리고 상세하게 설명되어 있어서 유익한 책이었다.</p>\n<p>다만 <strong>HTTP2.0이 나오기 전에 출간된 책</strong>이라서 최신 스펙을 공부하고 싶다면 다른 책을 추천한다.</p>\n<h4>(2) 함께 자라기</h4>\n<p><a href=\"http://www.yes24.com/Product/Goods/67350256\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"http://image.yes24.com/goods/67350256/300x0\" alt=\"썸네일\"></a></p>\n<p><a href=\"http://www.ac2.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">애자일 코칭(AC2)</a>을 운영하고 계신 <strong>김창준</strong>님이 지필한 책이다.</p>\n<p>워낙 유명한 책이고, 많은 사람들이 추천하는 책이라서 구매했다.</p>\n<ul>\n<li>자라기(학습)</li>\n<li>함께(협력)</li>\n<li>애자일</li>\n</ul>\n<p>등을 주제로 내용이 전개되는데 굉장히 와닿는 이야기가 많이 있었다.\n시간이 된다면 전체적인 내용을 정리해보고 싶다.</p>\n<p>개발자라면, 아니 개발자가 아니더라도 <u>직장에서 일하는 사람이라면 반드시 읽어야 할 책이라고 생각한다.</u></p>\n<p>참고: <a href=\"http://agile.egloos.com/\" target=\"_blank\" rel=\"noopener noreferrer\">애자일 이야기</a></p>\n<h4>(3) Effective Java 2판</h4>\n<p><a href=\"http://www.yes24.com/Product/Goods/65551284?OzSrank=1\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"http://image.yes24.com/goods/65551284/300x0\" alt=\"썸네일\"></a></p>\n<p>사실 3판을 읽고 싶었는데, 회사에 2판 밖에 없어서 그냥 2판을 읽었다.\n아직 전부 읽진 못했지만, 왜 사람들이 추천하고 읽으라고 하는지 충분히 이해 되는 내용의 책이다.</p>\n<p>2판을 다 읽은 후에 3판을 구매해서 다시 읽어볼 생각이다.</p>\n<p>이 책을 읽지 한고 리뷰어 활동을 했었다니.. 나는 대체 무슨 생각인걸까? 😇</p>\n<hr>\n<h3>7. Devears</h3>\n<p>저번 달에 <a href=\"https://github.com/dku-study/devears/\" target=\"_blank\" rel=\"noopener noreferrer\">Devears</a>라는 사이드 프로젝트를 시작했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Devears</p>\n<p>단국대의 상징이 곰(Bear)이다.</p>\n<ul>\n<li>Developer(개발자) + Bear(곰) = Devears</li>\n</ul>\n<p>즉, <strong>단국대 개발자들</strong>이라는 뜻을 가졌다고 볼 수 있다.</p>\n</div>\n<p>이번 달에는 대충(정말 대충..) <a href=\"https://dku-study.github.io/Devears/\" target=\"_blank\" rel=\"noopener noreferrer\">요구사항 문서</a>를 작성했고, Front-end 위주의 작업을 진행했다.</p>\n<p></p>\n<p>로고는 <a href=\"https://www.logogenie.net/\" target=\"_blank\" rel=\"noopener noreferrer\">logogenie</a>에서 로고의 키워드를 검색하고,\n여기서 나온 결과물 중에 마음에 드는 것을 참고하여 대충 급하게 만들었다.\n실제로 서비스 하기 전에 외주를 맡기던가 할 생각이다.</p>\n<p>사실 프론트가 어렵다기 보단 UI 구성이 어렵다. <strong>어떻게 만들어도 이상하게 보이는 마법</strong>이랄까..?\n일단 죽이 되든, 밥이 되든 만들어 보고자 한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">프론트엔드 TIP 정리</p>\n<ul>\n<li>\n<p>Create React App Custom</p>\n<ul>\n<li><a href=\"https://sustainable-dev.tistory.com/126\" target=\"_blank\" rel=\"noopener noreferrer\">CRA로 만든 리액트 프로젝트에서 eject하지 않고 optional chaining 사용하기</a>\n<ul>\n<li>customize-cra</li>\n<li>react-app-rewired</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>React Router Layout</p>\n<ul>\n<li><a href=\"https://reactrouter.com/web/guides/quick-start\" target=\"_blank\" rel=\"noopener noreferrer\">React Router</a></li>\n<li><a href=\"https://simonsmith.io/reusing-layouts-in-react-router-4\" target=\"_blank\" rel=\"noopener noreferrer\">Reusing layouts in React Router 4</a></li>\n<li><a href=\"https://stackoverflow.com/a/46201798\" target=\"_blank\" rel=\"noopener noreferrer\">React Router v4 with multiple layouts</a></li>\n</ul>\n</li>\n<li>\n<p>Mock API</p>\n<ul>\n<li><a href=\"https://react.vlpt.us/redux-middleware/08-json-mockServer.html\" target=\"_blank\" rel=\"noopener noreferrer\">json-mockServer - 벨로퍼트와 함께하는 모던 리액트</a></li>\n<li><a href=\"https://github.com/typicode/json-mockServer\" target=\"_blank\" rel=\"noopener noreferrer\">github/json-mockServer</a></li>\n</ul>\n</li>\n<li>\n<p>Proxy</p>\n<ul>\n<li><a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development\" target=\"_blank\" rel=\"noopener noreferrer\">CRA - Proxying API Requests in Development</a></li>\n<li><a href=\"https://velog.io/@velopert/create-react-app-v2#5-proxy-%EC%84%A4%EC%A0%95%EC%9D%84-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EA%B0%80%EB%8A%A5\" target=\"_blank\" rel=\"noopener noreferrer\">Create-react-app V2 릴리즈! 무슨 변경 사항이 있을까?</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Front-end 기술스택</p>\n<p>현재까지 진행하면서 사용한 프론트엔드 기술 스택은 다음과 같다.</p>\n<ul>\n<li>typescript</li>\n<li>Create React App</li>\n<li>react</li>\n<li>redux</li>\n<li>redux-saga</li>\n<li>react-router-dom</li>\n<li>connected-react-router</li>\n<li>antd</li>\n<li>styled-jsx</li>\n<li>sass</li>\n<li>json-server</li>\n</ul>\n</div>\n<p>그리고 <a href=\"https://programmers.co.kr/learn/courses/10658\" target=\"_blank\" rel=\"noopener noreferrer\">프로그래머스 리액트 스터디</a> 과정에서 만든 <a href=\"https://github.com/junilhwang/react-facebook-clone\" target=\"_blank\" rel=\"noopener noreferrer\">리액트 페이스북 클론 프로젝트</a>를 참고하여 개발 중이다.\n<strong>내년 상반기</strong>까지 완성해볼 예정이다(과연..?)</p>\n<hr>\n<h2>Summary</h2>\n<ul>\n<li>Composition API를 학습했다.</li>\n<li>Composition API로 사내 프로젝트를 리팩토링 했다.</li>\n<li>크롬 브라우저 전용 서비스를 만드는 중이다.</li>\n<li>사내 게임 대회에 출전했다. 준결승에서 탈락했다. 아쉽다.</li>\n<li>팀원이 2명 퇴사했고, 지인 1명이 입사했다.</li>\n<li>NextStep 리뷰어 활동이 끝났다. 다음 기수에는 신청하지 않을 생각이다.</li>\n<li>단쿠키 개발팀에 합류했다.</li>\n<li>블랙커피 스터디 레벨 2 과정이 끝났다. 이번에는 적극적으로 참여하질 못했다.</li>\n<li>블로그 스터디 2기 과정이 끝났다. 두 개의 글을 작성했다.</li>\n<li>세 권의 책을 읽었다.</li>\n<li>사이드 프로젝트를 진행 했다.</li>\n</ul>\n<p>그리고 본문에 언급하지 않은 내용도 몇 가지 소개하자면,</p>\n<ul>\n<li>여자친구가 생일 선물로 아이패드 프로 4를 선물해줬다.</li>\n<li>그래서 나는 아이폰 12 미니를 선물해줬다.</li>\n</ul>\n<p>마지막은 주인님 사진으로 마무리!</p>\n<p>\n\n\n</p>\n",
      "date_published": "2020-12-30T18:20:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 11월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/11-November/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/11-November/",
      "summary": "개발자 황준일의 2020년 11월 회고입니다.",
      "content_html": "\n<p>이번 달은 어떻게 지나갔는지 잘 모르겠다. 그래도 한 번 정리해보자.</p>\n<h2>공적</h2>\n<p>11월에는 큼직한 프로젝트를 하나 마무리했고, 신규 서비스 런칭을 위한 프로젝트를 시작했다.</p>\n<h3>1. CMS 마무리</h3>\n<p>몇 개월 동안 작업하던 CMS Project를 마무리했다. 정말 우여곡절이 많았지만 덕분에 공부한게 많은 프로젝트였다고 생각한다.\n아무래도 회사 프로젝트라서 구체적으로 어떤 것들을 했는지 이야기하기는 조금 어렵지만, 뜻 깊은 프로젝트였다.</p>\n<p><strong>그런데 한 컴포넌트에 무척 많은 기능을 구현해놨다.</strong></p>\n<p></p>\n<p>보통 API 관련 로직이나 Store를 다루는 로직은 컨테이너 컴포넌트에서 처리하고, 하위 컴포넌트가 Props나 Custom Event로 처리하도록 만든다.\n어쨌든 하나의 컴포넌트가 굉장히 무거워졌다.\n기능 자체가 많은 것도 있지만, 이해하기 어려운 로직도 있고 여러모로 잠재적 위험을 가진 컴포넌트가 되어버렸다.</p>\n<p>그래서 추후에 <strong>Vue Composition API로 리팩토링</strong> 할 예정이다.\n이를 위해 <a href=\"https://composition-api.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a>를 개인적으로 학습했는데, 이건 <a href=\"#_3-composition-api-%E1%84%92%E1%85%A1%E1%86%A8%E1%84%89%E1%85%B3%E1%86%B8\">Composition API 학습 섹션</a>에서 상세히 다루도록 하겠다.</p>\n<h3>2. 신규 프로젝트</h3>\n<p>이것도 대외비라서 어떤 프로젝트인지 구체적으로 언급하긴 어렵지만,\n핵심적인 내용은 <strong>크롬 브라우저(혹은 최신 브라우저)를 전용으로 서비스하는 프로젝트</strong>를 담당하여 진행중이다.</p>\n<p>올 해의 마지막 프로젝트이며 입사 이후에 처음으로 신규 서비스를 처음부터 만드는 것이기 때문에 무척 재밌다.\n이 프로젝트도 서비스가 런칭 되면 자세히 다뤄야겠다.</p>\n<h2>사적</h2>\n<p>회고 할게 있을까 싶었는데 제목을 나열하고 보니 뭘 이리 많이 했나 싶다.\n<s>하.. 11월 회고는 편하게 쓸 수 있을 것 같았는데!!</s></p>\n<h3>1. 넥스트 스텝 리뷰어</h3>\n<p>이번 달에는 <a href=\"https://edu.nextstep.camp/s/MNii0Puk\" target=\"_blank\" rel=\"noopener noreferrer\">NextStep - TDD, Clean Code with Java 10기</a> 리뷰어로 활동했다.\n다음 달까지 활동할 예정이다.</p>\n<hr>\n<h4>(1) 미션당 7명</h4>\n<p>기존에는 미션당 5명, 총 미션이 4개라서 최대 20명을 리뷰하는 방식이었다. 그런데 이번 기수에는 굉장히 많은 사람들(최대 28명)을 리뷰하게 되었다.</p>\n<blockquote>\n<p>포비(박재성님)와 슬랙으로 주고 받은 DM을 캡쳐하려고 했는데.. 무료 슬랙이라 그런지 메세지가 사라졌다 😇</p>\n</blockquote>\n<p>10기 리뷰어 신청 과정에서 미션당 원하는 리뷰이의 수를 적는 항목이 있었다.\n이 때는 아무 생각 없이(?) 자신만만하게 <strong>인원 무관</strong>이라고 적었다.\n그리고 포비가 <strong>미션당 7명을 배정할 예정이며 상관 없냐고 물었고</strong> 나는 괜찮다고 했다 <s>(반성해라 과거의 나)</s>.</p>\n<p><strong>결과적으로, 미션이 시작되고 나서야 괜찮지 않은 것을 알게 되었다.</strong></p>\n<p></p>\n<p>말 그대로 PR이 쏟아져나왔다 😂😂😂😂</p>\n<p>이번 달에 NextStep과 관련 PR 갯수만 60개인데, 대체로 <strong>한 PR 당 2번 이상의 리뷰</strong>를 하기 때문에 대략 하루에 3~4번의 리뷰를 했다고 볼 수 있다.\n알고보니 이번에 넥스트스텝과 카카오가 연계하여 <strong>카카오 리뷰어 양성 과정</strong>을 진행 중이었고 이에 해당하는 사람들이 이번 기수에 참여했다.\n그래서 <strong>뭔가 코드에서 심상치 않은 기운이 느껴진다 싶으면 대체로 카카오 사람들</strong>이었다.</p>\n<p></p>\n<p></p>\n<p>리뷰는 대체로 위와 같이 남겼다.\n각각의 코드에 대해 리뷰를 하고, 마지막으로 핵심적인 내용을 정리해서 중점적으로 개선해야 하는 부분들을 피드백했다.\n설계적으로 큰 문제가 없으면 바로 머지했고, 문법적으로 개선이 필요한 것들은 다음 스텝에서 진행하도록 유도했다.</p>\n<hr>\n<h4>(2) 나의 한계</h4>\n<p>내가 가진 현재 역량의 한계를 일깨워준 리뷰이가 있었다.</p>\n<p></p>\n<p>내가 남기는 피드백의 반절 이상은 뚜렷한 근거를 기반으로 하기 보단 <strong>경험적인 측면</strong>을 토대로 남기는 것들이 대부분이었다.\n그래서 이렇게 근거를 토대로 질문을 남기면 당황스러웠다.\n현재의 나는 남들은 다 한 번씩 읽어 본다는 <code>Clean Code</code>나 <code>Effective Java</code>도 안 읽어본 상태였기 때문에 명확한 근거 같은게 생각날 수가 없었다.</p>\n<p>그래서 또 이것 저것 자료를 찾아보다가 결국 답이 나오질 않아서 <u>내가 어쩌다 이런 생각을 했는지 다시 경험적인 측면을 토대로 리뷰를 남기게 된다.</u></p>\n<p></p>\n<p>덕분에 슬랙채널에서 여러가지 논쟁이 오고 갔으며,\n<strong>Stream은 어차피 사다리 미션에서 다루기 때문에 지금의 논쟁은 큰 의미가 없으며 자동차 미션 자체에 집중 하자</strong>는 이야기로 마무리 되었다.\n무엇보다 제일 큰 문제는 리뷰이의 <strong>신뢰를 잃어버렸다</strong>고 해야할까?</p>\n<p></p>\n<p>내가 정말 리뷰이가 말한 것 처럼 남겼나 확인해본 결과 <strong>리뷰이가 피드백을 잘못 해석했고(혹은 내가 제대로 전달을 하지 못했거나 😂)</strong> 다시 잘 설명드렸다.</p>\n<p>이러한 과정을 통해서 스스로의 한계와 문제점을 발견했고, 이를 극복하기 위한 재정비 기간이 필요하다는 것을 깨달았다.\n그래서 다음 리뷰어 활동은 접어두고 스스로의 역량 강화에 집중할 예정이다.</p>\n<hr>\n<h4>(3) 블랙커피 스터디의 연장</h4>\n<p>9월에 블랙커피 스터디에 참여했던 사람들에게 이 코스를 추천 했고, 세 분이 이번 기수에 신청했다.\n세 분 모두 잘 완주하길 기대중이다.</p>\n<p>다음엔 누굴 꼬드겨야하나 🤔</p>\n<hr>\n<h3>2. 단쿠키 리쿠르트 지원</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">단쿠키</p>\n<p><a href=\"https://www.dankookie.com/\" target=\"_blank\" rel=\"noopener noreferrer\">단쿠키</a>는 나의 모교인 단국대학교 커뮤니티 사이트이다.\n<a href=\"https://everytime.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">에브리타임</a>이 등장하기 전까진 굉장히 활성화된 커뮤니티였는데, <u>에브리타임 덕분에 이용자수가 대폭 감소했다.</u></p>\n</div>\n<p>나는 <strong>에브리타임</strong>이라는 대학교 커뮤니티를 자주 사용하는 편이다.\n개발과 관련된 정보를 공유하기도 하고, 진로에 대해 고민하는 후배들과 이야기를 나누는 등의 소통 창구로 사용하고 있다.</p>\n<p>그러던 중 눈에 띄는 글을 하나 발견했다.</p>\n<blockquote>\n<p>글을 캡쳐해서 올릴라 했는데.. 지금 찾아보니 삭제됐다. 아쉬운대로 단쿠키에 올라온 글을 캡쳐해서 올려야겠다.</p>\n</blockquote>\n<p></p>\n<p>보자마자 지원하고 싶다는 생각을 했다.\n그런데 나는 졸업생이다보니 이걸 지원해야하나 말아야하나 고민하다가 졸업생도 지원 가능한지 물어보는 댓글을 남겼고, 가능하다는 답변을 받았다.</p>\n<p></p>\n<p>그래서 고민 끝에 지원했다.</p>\n<p></p>\n<p>이렇게 코딩 테스트 및 온라인 면접 일정을 잡고 진행했다.\n코딩 테스트 문제 자체는 어렵지 않았으나, 내가 너무 어렵게 생각해서 조금 헤맸다.</p>\n<p>이 외에도 다양한 면접 질문을 받았는데 내가 생각하지도 못했던 부분들이 있어서 조금 당황했다.\n<u>당황했던 질문들은 대체로 보안과 관련된 질문이었고, 내가 보안과 관련된 도메인에 약하다는 것을 인지했다.</u>\n덕분에 공부할 것들이 늘었다 😅</p>\n<p>여담으로, 학부시절에 같이 단쿠키측에서 함께 하고 싶은 의향 있으면 연락 달라고 했었는데 그 당시에는 정말 미친듯이 바빠서 아예 연락을 하지 않았다.\n당시에 작은 에이전시 회사에서 원격근무도 하고 있었고, 학부 연구생도 하고 있었고, 같은 학부 연구생들과 정부 과제도 하고 있었고, 고등학교 강사도 하고 있었다.\n거기에 수업에 시험에 과제에 이것 저것 다 포함하면.. 거기서 무언가를 더 할 엄두가 나질 않았다.</p>\n<p></p>\n<p>어쨌든 12월에 대면 면접을 거치면 결과를 알 수 있겠지 싶다.\n내년엔 또 얼마나 바쁘려나 🤣</p>\n<hr>\n<h3>3. Composition API 학습</h3>\n<p>회사 프로젝트에 <a href=\"https://composition-api.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a>를 사용할 일이 생겼다.\n아직 <strong>Composition API</strong>를 제대로 사용해본적이 없어서 어떤 방식으로 공부해야 고민하다가,\n<a href=\"https://edu.nextstep.camp/c/L1Ma1gyX/\" target=\"_blank\" rel=\"noopener noreferrer\">Black Coffee Study</a> 할 때 만들었던 <strong>TodoList를 Composition API로</strong> 다시 만들어보자고 생각했다.</p>\n<p></p>\n<p>그리고 블랙커피 스터디를 통해서 알게된 <a href=\"https://github.com/devjang\" target=\"_blank\" rel=\"noopener noreferrer\">장현석님</a>님이 Composition API로 토이 프로젝트를 진행했고 꼭 사용해보길 권했던게 생각났다.\n그래서 해당 <a href=\"https://github.com/devJang/nuxt-realworld\" target=\"_blank\" rel=\"noopener noreferrer\">토이 프로젝트(nuxt-realworld)</a>를 참고하여 진행 중이다.</p>\n<p>지금은 막 시작한 단계로 접어섰기 때문에 <a href=\"/TIL/Review/2020-year/12-December/#_3-composition-api-%E1%84%92%E1%85%A1%E1%86%A8%E1%84%89%E1%85%B3%E1%86%B8\" target=\"_blank\">12월 회고</a>에서 더 자세히 다룰 예정이다.</p>\n<hr>\n<h3>4. 블랙커피 스터디 레벨 2</h3>\n<p><a href=\"https://edu.nextstep.camp/s/tUzCRWul\" target=\"_blank\" rel=\"noopener noreferrer\">블랙커피 스터디 레벨 1 3기</a>를 9월에 들었고, 이번 달에 <a href=\"https://edu.nextstep.camp/s/mnUCGXab\" target=\"_blank\" rel=\"noopener noreferrer\">레벨 2</a>가 열렸다.\n이번 과정은 Javascript로 Unit Test와 E2E Test를 작성하는 방법에 대해 다루고 있다.</p>\n<p></p>\n<p>월말에 시작했기 때문에 <strong>1주차 미션</strong> 까지만 완료한 상태이다.\n과연.. 이번 과정을 잘 마무리 할 수 있을지 걱정이다.\n아무래도 리뷰어 활동과 겹치기 때문에 쉽지 않으리라 생각한다.</p>\n<p>미션과 관련된 코드는 <a href=\"https://github.com/JunilHwang/black-coffee-study-lv2\" target=\"_blank\" rel=\"noopener noreferrer\">이 저장소</a>에 올려놨다.\n레벨 1을 할 때 보다 의욕이 많이 사라진 느낌이다.</p>\n<hr>\n<h3>5. 블로그 스터디 2기</h3>\n<p>지난 달에 이어서 <a href=\"https://edu.nextstep.camp/s/4dBdkika\" target=\"_blank\" rel=\"noopener noreferrer\">블로그 스터디</a>를 참여했다.\n이번에는 <a href=\"https://edu.nextstep.camp\" target=\"_blank\" rel=\"noopener noreferrer\">넥스트 스텝</a>에 정식으로 수강모집을 올려서 그런지 참여하는 사람이 훨씬 많았다.</p>\n<p>원래 일정대로면 이번 달에 두 개의 글을 썼어야 했는데, 한 개의 글만 썼다.</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\" rel=\"noopener noreferrer\">유년시절 이야기 Part 03</a></li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">유년 시절 이야기 모음</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\" rel=\"noopener noreferrer\">Part 01</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\" rel=\"noopener noreferrer\">Part 02</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\" rel=\"noopener noreferrer\">Part 03</a></li>\n</ul>\n</div>\n<p>해당 글을 작성하면서 2012년도에 공부했던 것들을 다시 들여다봤다. 그 때는 잘 만들었다 싶었는데 역시 과거의 코드는 보는 게 아니다. <s>나는 똥을 만들었다.</s>\n2012년도에 <a href=\"https://meister.hrdkorea.or.kr/sub/3/3/1/20160512111525375100_view.do\" target=\"_blank\" rel=\"noopener noreferrer\">전국대회</a>를 준비하면서 만든 <a href=\"https://github.com/JunilHwang/webskills-2012-national-furniture\" target=\"_blank\" rel=\"noopener noreferrer\">결과물 코드</a>이다.\n자세한 내용은 앞서 소개한 링크를 타고 들어가면 볼 수 있다.</p>\n<p>사실 아직 작성하지 않은 <strong>Part 04</strong>가 개발과 동떨어진 정말 진지한 나의 이야기일 것 같은데, 언제 쯤 작성할 수 있을지 모르겠다. <s>사실 쓰기 귀찮다.</s></p>\n<p>이번에는 인상 깊었던 글들을 소개하기보단 그냥 <a href=\"https://github.com/next-step/blog/pull/55\" target=\"_blank\" rel=\"noopener noreferrer\">PR 링크</a>만 달아놓겠다.\n사실 글을 읽을 여유도 거의 없었다..</p>\n<hr>\n<h3>6. 기능대회용 PHP Tutorial</h3>\n<p>기능대회 전용으로 <a href=\"https://github.com/sdhs-webskills/php-architecture-step-by-step\" target=\"_blank\" rel=\"noopener noreferrer\">PHP Step By Step Tutorial</a>을 만들었다.\n데모는 <a href=\"https://stormy-coast-06452.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>에서 확인할 수 있으며 따로 문서는 없고 코드만 작성해놓은 상태이다.</p>\n<p></p>\n<p>요즘에 PHP를 하다 보면 내가 PHP라는 언어를 다뤄봤다는게 낯설다.\n옛날에는 Server-side 언어로 할줄 아는거라곤 PHP 밖에 없었는데 언제 이렇게 낯설어진걸까?</p>\n<p>이 튜토리얼을 작성하면서 <a href=\"https://dashboard.heroku.com/\" target=\"_blank\" rel=\"noopener noreferrer\">heroku</a>를 처음 사용해봤다.\n그리고 <a href=\"https://devcenter.heroku.com/articles/getting-started-with-php\" target=\"_blank\" rel=\"noopener noreferrer\">Getting Started on Heroku with PHP</a>를 따라해보면서 <a href=\"https://getcomposer.org/doc/00-intro.md\" target=\"_blank\" rel=\"noopener noreferrer\">composer</a>를 처음 사용해봤다.</p>\n<p>이제 <a href=\"https://www.php.net/releases/8.0/en.php\" target=\"_blank\" rel=\"noopener noreferrer\">PHP 8.0</a>이 나오면서 한 층 더 성숙해진 언어가 된 것 같다.\n여유 있을 때(대체 언제?) <a href=\"https://laravel.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Laravel</a>로 토이 프로젝트를 진행해봐도 괜찮을 것 같다.</p>\n<hr>\n<p>이대로 마무리하기는 아쉬워서 마지막 스텝에서 작성한 <code>Router</code>에 대해 소개해본다.\n<a href=\"https://expressjs.com/ko/\" target=\"_blank\" rel=\"noopener noreferrer\">express.js</a>의 <a href=\"https://expressjs.com/ko/starter/basic-routing.html\" target=\"_blank\" rel=\"noopener noreferrer\">router</a>를 따라해보려고 했는데 URI Pattern을 파싱하고 매칭시키는게 귀찮아서 그냥 정규식으로 처리했다.</p>\n<div class=\"language-php line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"php\" data-title=\"php\"><pre><code><span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">namespace</span> <span class=\"token package\">src<span class=\"token punctuation\">\\</span>core</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Router</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">array</span> <span class=\"token variable\">$routes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">String</span> <span class=\"token variable\">$requestUri</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$baseUri</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\?.+/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REQUEST_URI'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">requestUri</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$baseUri</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">routes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">post</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">routes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"post\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">routes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"delete\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">put</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">routes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"put\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token variable\">$routes</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_reduce</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">routes</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$routes</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$route</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">[</span><span class=\"token variable\">$method</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$route</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">            <span class=\"token variable\">$uri</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'/^'</span><span class=\"token operator\">.</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\\/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'$/'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">                <span class=\"token variable\">$method</span> <span class=\"token operator\">!==</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'REQUEST_METHOD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></span>\n<span class=\"line\">                <span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">requestUri</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token variable\">$routes</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">            <span class=\"token function\">preg_match_all</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">requestUri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$params</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">            <span class=\"token variable\">$routes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$callback</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$params</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">            <span class=\"token keyword\">return</span> <span class=\"token variable\">$routes</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$routes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">            <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Not Found '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">requestUri</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">[</span><span class=\"token variable\">$callback</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$params</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$routes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token variable\">$callback</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드는 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-php line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"php\" data-title=\"php\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">UserController</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">Router</span> <span class=\"token variable\">$router</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Router</span> <span class=\"token variable\">$router</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token variable\">$router</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/api/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token variable\">$router</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/api/user/([0-9]+)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token variable\">$router</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/api/user'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getUserByEmail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token variable\">$router</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/api/user'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getUserByEmail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token variable\">$router</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BASE_URI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token variable\">$router</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">include_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VIEW</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/main.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserController</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$router</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token variable\">$router</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>다만 <code>PUT</code>과 <code>DELETE</code> method의 경우 <code>$_GET</code>, <code>$_POST</code> 처럼 읽어올 수 없기 때문에 귀찮아서 생략했다. <s>이정도만 있어도 하드코딩 하는데 큰 문제는 없겠지?</s></p>\n<hr>\n<p>국제대회 금메달을 받았고 지금은 카카오에서 근무중인 친구와 함께 위키를 조금씩 만들다가 현타가 와서 포기했었는데,\n그 당시에 만들었던 자료도 같이 첨부한다.</p>\n<ul>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">기능경기대회 Wiki</a></li>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/MySQL-%EA%B8%B0%EB%B3%B8-CRUD-%EB%AA%85%EB%A0%B9%EC%96%B4\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL 기본 CRUD 명령어</a></li>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/PHP-MySQL-CRUD-Tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">PHP+MySQL CRUD Tutorial</a></li>\n<li>PHP MySQL로 게시판 만들기 without MVC\n<ul>\n<li>Part 01\n<ul>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/PHP-MySQL%EB%A1%9C-%EA%B2%8C%EC%8B%9C%ED%8C%90-%EB%A7%8C%EB%93%A4%EA%B8%B0-without-mvc-01\" target=\"_blank\" rel=\"noopener noreferrer\">문서</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=lv5mxcGXnaU\" target=\"_blank\" rel=\"noopener noreferrer\">유튜브 영상</a></li>\n</ul>\n</li>\n<li>Part 02\n<ul>\n<li><a href=\"https://github.com/ChoDragon9/skills/wiki/PHP-MySQL%EB%A1%9C-%EA%B2%8C%EC%8B%9C%ED%8C%90-%EB%A7%8C%EB%93%A4%EA%B8%B0-without-mvc-02\" target=\"_blank\" rel=\"noopener noreferrer\">문서</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=t0Q9U2VS0gQ\" target=\"_blank\" rel=\"noopener noreferrer\">유튜브 영상</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이제보니 <code>PHP 게시판</code> 이라는 키워드로 유튜브에 검색하면 내가 올린 동영상이 첫 번째로 나온다. 뭐지..? 이제와서..?</p>\n<hr>\n<h3>7. 모각코</h3>\n<p>어쩌다보니 10월에 참여했던 <a href=\"http://localhost:8080/TIL/Review/2020-year/10-October/#_1-%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%84%86%E1%85%A5%E1%84%89%E1%85%B3-%E1%84%85%E1%85%B5%E1%84%8B%E1%85%A2%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%84%83%E1%85%B5\" target=\"_blank\" rel=\"noopener noreferrer\">프로그래머스 리액트 스터디</a>의 몇몇 스터디원과 <code>모각코(모여서 각자 코딩)</code>을 하기로 했다.</p>\n<p></p>\n<p>이렇게 먼저 제안을 주셨고, 둘 다 성남에 살다보니 첫 주에는 우리 집 근처에서 보기로 했다.</p>\n<p></p>\n<p>그 다음 모임에는 한 분이 더 껴서 만났다.</p>\n<p>태의님과 태현님은 <a href=\"https://boostcamp.connect.or.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">부스트캠프</a>를 통해서 이미 서로 알고 있던 사이라고 했다.\n태의님의 경우 10월 말에 <a href=\"https://m.blog.naver.com/boostcamp_official/222140296542\" target=\"_blank\" rel=\"noopener noreferrer\">부스트캠프 옥토버페스트</a>에서 <strong>나와 똑같은 주제(나와 찰떡인 회사)로 발표</strong>했었다.</p>\n<p></p>\n<p>이 때 언젠가 기회가 되면 뵈었으면 좋겠다고 말했었는데, 실제로 뵙게 되니까 반가웠다.\n태의님과 태현님 두 분 모두 정말 좋은 분들이고, 열심히 공부하고 살아가는 분들이라서 유독 반가웠다.\n이러한 인연을 맺게 해준 <a href=\"https://programmers.co.kr/learn/courses/10658\" target=\"_blank\" rel=\"noopener noreferrer\">프로그래머스 리액트 스터디</a>에 다시 한 번 감사를 전한다.</p>\n<p>그러나 갑자기 코로나 확진자가 많아지면서 모각코는 3회만 진행되었다. 빨리 코로나가 잠잠해지길 바랄 뿐이다 😂</p>\n<hr>\n<h3>8. 네이버 아폴로 면접</h3>\n<p></p>\n<p>9월에 프로그래머스 네이버 아폴로 챌린지에 접수했고, 알고리즘 테스트와 프론트엔드 과제 테스트를 진행했다.\n그런데 생각보다 결과가 잘 나왔다.</p>\n<p></p>\n<p>이어서 11월 중에 1차 면접을 진행했는데, 이것 저것 하는게 많다보니 너무 바빠서 면접 준비를 아예 하질 못했다.\n그나마 살펴본게 <code>이벤트 루프</code> 부분인데 이게 딱 면접 질문으로 나왔다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">이벤트 루프</p>\n<p>여기서 설명하긴 귀찮아서 링크로 대체하겠다.</p>\n<ul>\n<li><a href=\"https://meetup.toast.com/posts/89\" target=\"_blank\" rel=\"noopener noreferrer\">Toast Meetup - 자바스크립트와 이벤트 루프</a></li>\n<li><a href=\"https://velog.io/@thms200/Event-Loop-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84\" target=\"_blank\" rel=\"noopener noreferrer\">Velog - Event Loop (이벤트 루프)</a></li>\n<li><a href=\"https://www.zerocho.com/category/JavaScript/post/597f34bbb428530018e8e6e2\" target=\"_blank\" rel=\"noopener noreferrer\">Zerocho - 호출 스택과 이벤트루프</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener noreferrer\">MDN - 동시성 모델과 이벤트 루프</a></li>\n<li><a href=\"https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EB%B6%80%EC%83%81-async-await%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%BD%94%EB%94%A9-%ED%8C%81-%EB%8B%A4%EC%84%AF-%EA%B0%80%EC%A7%80-df65ffb4e7e\" target=\"_blank\" rel=\"noopener noreferrer\">자바스크립트는 어떻게 작동하는가: 이벤트 루프와 비동기 프로그래밍의 부상, async/await을 이용한 코딩 팁 다섯 가지</a></li>\n<li><a href=\"https://ko.javascript.info/event-loop\" target=\"_blank\" rel=\"noopener noreferrer\">Javascript.info - 이벤트 루프와 매크로·마이크로태스크</a></li>\n</ul>\n</div>\n<p>카카오 면접을 준비했던 경험 때문인지 생각보다 잘 진행되었다.\n모르는 부분은 모른다고 답했고, 아는 것들은 최대한 상세하게 설명했다.\n혹은 자세하게 이해하진 못하지만 이러저러하게 추측할 수 있을 것 같다는 식으로 설명한 부분도 있었다.\n대체로 매우 솔직하게 답변한 것 같다.</p>\n<p></p>\n<p>느낌적인 느낌이 맞았는지(?) 1차 면접은 통과했다.</p>\n<hr>\n<p>이어서 2차 면접을 진행했는데, 2차 면접은 인성면접과 조금 더 심화적인 기술면접으로 진행되었다.\n면접 질문에서 지원동기나 지원한 조직에 대해 얼만큼 알고 있는지에 물어보는 질문이 어려웠다. 사실 아폴로에 관심이 있어서 지원했다기 보단, 아폴로 챌린지 때문에 지원한 이유가 더 크기 때문이다.\n그래서 지원동기를 정말 솔직하게 말하기가 어려웠고, 이러한 이유 때문에 2차 면접은 반 쯤 포기하고 봤다.\n면접관 분들께 죄송한 마음만 한 가득이다.\n그래도 언젠간 제대로 이직을 준비하는 순간을 위한 경험이랄까?\n지금은 현재 회사에 머무르고 싶은 마음이 훨씬 크다.</p>\n<p>무엇보다 면접관 한 분이 해준 말씀이 계속 기억에 남는다.</p>\n<p><strong>\"정말로 현재 회사에서 최선을 다했다고 말할 수 있을 만큼 무언가를 해보았는가?\"</strong></p>\n<p>아직 이런 경험은 없는 것 같다.\n그래서 해보고 싶은 것도 많고, 아직 나는 많이 부족하다고 생각한다.</p>\n<p>어쨌든 결과는 12월에 나올 예정이다.</p>\n<hr>\n<h3>9. Devears</h3>\n<p>Spring + React로 사이드 프로젝트를 해보고 싶었는데, 어떤 주제로 할까 고민하다가 현재 <a href=\"https://dku-study.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">운영중인 스터디</a>를 관리할 수 있는 사이트를 만들어보기로 했다.\n항상 이런 사이드 프로젝트를 진행할 때 <strong>프로젝트 이름</strong>이 고민이었는데, <code>개발자(Developer)</code>와 <code>곰(Bear)</code>을 합쳐서 <code>Devears</code>라고 지었다.</p>\n<p>이번 달에는 Back-end 위주로 작업 했는데 사실 정확히 어떤 기능을 추가할지 정해놓질 않아서 갈팡 질팡 하는 중이다.\n현재 까지 구현한 기능은 <strong>Github 로그인</strong>과 <strong>토큰 발급</strong>, 그리고 <strong>로그아웃</strong>이 전부이다. <s>안 한 것과 다름 없다</s></p>\n<p>사이드 프로젝트 코드는 <a href=\"https://github.com/DKU-STUDY/Devears\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>에서 확인할 수 있다.</p>\n<hr>\n<h2>Summary</h2>\n<ul>\n<li>CMS 프로젝트를 마무리 했다.</li>\n<li>신규 프로젝트를 시작했다.</li>\n<li>넥스트 스텝 리뷰어로 활동했다. 너무 힘들다.</li>\n<li>단쿠키 리쿠르트에 지원했다. 아직 대면 면접이 남았다.</li>\n<li>블랙 커피 스터디 레벨 2를 진행했고, 첫 번째 미션까지 마무리 했다.</li>\n<li>10월에 이어서 블로그 스터디를 신청했고, 현재 까지 한 개의 글만 작성했다.</li>\n<li>기능대회 때문에 오랜만에 PHP 코드를 작성했다.</li>\n<li>Heroku와 Composer를 처음으로 사용해봤다.</li>\n<li>프로그래머스 리액트 스터디를 했던 사람들과 모각코를 했다.</li>\n<li>네이버 아폴로 면접을 봤다.</li>\n<li>새로운 사이드 프로젝트를 시작했다.</li>\n</ul>\n<p>그리고 본문에 언급하진 않았지만</p>\n<ul>\n<li>단국대 개발자 스터디의 첫 회식이 있었다. 와인 파티!</li>\n<li>오랜만에 대회 출신 친구/후배들과 모여서 이야기를 나눴다.</li>\n<li>포동이 팬클럽(?)을 초대했다.</li>\n</ul>\n<p></p>\n<p>마지막은 주인님 사진으로 마무리!</p>\n",
      "date_published": "2020-12-29T23:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 10월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/10-October/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/10-October/",
      "summary": "개발자 황준일의 2020년 10월 회고입니다.",
      "content_html": "\n<p>10월에는 바쁜듯 한가하게 살았다.</p>\n<h2>공적</h2>\n<h3>1. CMS 개발</h3>\n<p>9월과 마찬가지로 10월도 CMS를 만드는데 열중했다.\n다만 9월에 배포하고 나서 지속적으로 수정사항이 생기고 있었고 <strong>이 상태로 배포했다고?</strong>\n싶을 정도로 버그도 많고 QA를 하지 않고 넘어간 부분도 무척 많았다.</p>\n<p>제일 최악은, 이미 배포가 되어 있고 서비스 데이터까지 삽입된 상태의 DB의 설계를 건드려야 하는 부분이었다.\n외래키가 무척 복잡하게 만들어진 상태에서 스키마를 변경하는 것 보단 새로 만드는게 나아보였다.</p>\n<p>그래서 <code>hotissue_v2_schedule</code> <code>hotissue_v2_template</code> 처럼 <code>v2</code>라는 <code>suffix</code>를 붙여서 테이블을 새로 만들었고,\n테이블의 변경에 따라 서비스 로직도 대폭 수정했다.</p>\n<p>이 과정에서 드러난 제일 큰 문제는 기획쪽과 개발쪽의 커뮤니케이션 문제도 있었고,\n기획과 QA를 CMS를 사용하는 실무진이 했기 때문에(개발을 사용자에게 시킨 것과 비슷하달까?) 오히려 놓친 부분이 무척 많았던 것 같다.</p>\n<p>그래서 배포하는 도중에 수정사항이 생기기도 하고.. QA를 아예 하지 않은 부분도 있었고.. 다사다난 했다.</p>\n<p>결과적으로 트러블이 생긴 후에 많은 문제점이 겉으로 드러났기 때문에 문제를 잘 핸들링 할 수 있었다.\n2차 배포 전까지 QA도 완벽하게 끝냈고, 끊임 없이 커뮤니케이션을 했었다.\n일하는 시간 보다 커뮤니케이션 하는 시간이 많았다.</p>\n<p>만들고 나서 보니까 복잡한 로직이 너무 많이 있어서 리팩토링이 무조건 필요한 상태였다.\n그런데 11월부터 바로 다른 프로젝트를 들어가야해서, 리팩토링은 시간 있을 때 틈틈이 할 예정이다.</p>\n<h2>사적</h2>\n<h3>1. 프로그래머스 리액트 스터디</h3>\n<p>나는 개인적으로 <a href=\"https://programmers.co.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">프로그래머스</a>를 무척 애용하는 편이고, 주변에도 많이 추천하고 있다.\n프로그래머스에는 <a href=\"https://programmers.co.kr/learn/challenges\" target=\"_blank\" rel=\"noopener noreferrer\">알고리즘</a>과 관련된 서비스 뿐만 아니라 프론트와 백엔드를 포함한 여러가지 <a href=\"https://programmers.co.kr/competitions\" target=\"_blank\" rel=\"noopener noreferrer\">챌린지 서비스</a>도 있고,\n<a href=\"https://programmers.co.kr/learn\" target=\"_blank\" rel=\"noopener noreferrer\">온라인 강의</a>와 스터디 형태의 강의도 존재한다.</p>\n<p>제일 중요한게 취업 준비를 할 때 프로그래머스에 이력서를 작성했고, <strong>현재 재직 중인 회사가 프로그래머스를 통해 오퍼</strong>를 줬고 자연스럽게 취업이 되었다.</p>\n<p>각설하고, 주변 사람들이 프로그래머스에서 진행하고 있는 스터디에 참여했고 만족도가 높은 것 같아서 나도 한 번 참여해볼까 둘러보다가 <a href=\"https://programmers.co.kr/learn/courses/10658\" target=\"_blank\" rel=\"noopener noreferrer\">React Study</a>를 신청했다.\n결론부터 말하자면 무척 만족스러운 스터디였다.</p>\n<p><br>\n<s>다시 쓰기 귀찮아서</s> 프로그래머스에 올라온 후기를 첨부한다.</p>\n<p>어쨌든 이 스터디가 더 많이 알려졌으면 하는 바람으로 상세하게 소개해 보도록 하겠다.</p>\n<hr>\n<h4>(1) Facebook 클론 코딩</h4>\n<p>React로 Facebook의 뉴스피드와 로그인/회원가입 등을 만드는 과정이다.</p>\n<p></p>\n<p>위와 같이 뉴스피드를 구성해야 하고,</p>\n<p></p>\n<p>로그인과 회원가입 페이지도 만들어야 한다.</p>\n<hr>\n<h4>(2) CRA(Create React App)을 사용하지 않고 개발환경 구성하기</h4>\n<p>여태까지 번들러는 <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack</a>만 사용해봤는데, 이 스터디를 통해서 처음으로 <a href=\"https://ko.parceljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">parcel</a>을 사용해봤다.\n생각보다 훨씬 더 편했고, 환경 구성 또한 어렵지 않았다.</p>\n<ul>\n<li>설치하기</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># yarn</span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> parcel-bundler</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># npm</span></span>\n<span class=\"line\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> parcel-bundler</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>index.html 작성</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>페이스북 클론 코딩<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>index.js 작성</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>npm script 작성</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// package.json</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 앞 내용 생략 */</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel index.html\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 뒷 내용 생략 */</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>실행</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># npm</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">npm</span> run dev</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># yarn</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">yarn</span> dev</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>빌드</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># build script</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> parcel build ./src/entry.js</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># build path 지정</span></span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> parcel build ./src/entry.js --out-dir ./dist</span>\n<span class=\"line\"><span class=\"token operator\">&gt;</span> parcel build ./src/entry.js <span class=\"token parameter variable\">-d</span> ./dist</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>webpack보다 훨씬 단순하고 이해하기도 쉽다.</p>\n<p></p>\n<p>공식문서에 따르면, <code>4개의 물리 CPU가 있는 2016형 MacBook Pro에서 1726개의 module을 포함한 미 압축 6.5M의 app 기준으로 빌드</code>를 기준으로 위와 같은 성능을 보인다고 한다.\n위의 내용을 완전히 신뢰할 순 없지만 직접 사용해본 입장에서 확실히 빠른 속도가 체감된다.</p>\n<p>어쨌든, 스터디를 통해서 CRA를 사용하지 않고 parcel을 이용하여 직접 React를 개발하는데 필요한 각종 패키지를 설치했다.\n사실 <code>react</code> <code>react-dom</code>만 설치해도 무방하다.</p>\n<p>그래도 다양한 실습을 위해 <code>redux</code> <code>react-redux</code> <code>redux-thunk</code> <code>redux-saga</code> <code>react-router-dom</code> <code>connected-react-router</code> <code>styled-jsx</code> 등을 설치했고,\n각종 <code>babel plugin</code>과  <code>eslint</code> <code>prettier</code> 등을 설치했다.</p>\n<hr>\n<h4>(3) React Router</h4>\n<p>react-router-dom에 나와있는 내용와 보편적으로 사용하는 Router의 경우 다음과 같은 형태이다.</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">about</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">login</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">join</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">About</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Login</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Join</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Home</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그런데 각각의 라우터가 독립된 레이아웃을 가지는 것이 아니라 분명히 <strong>공통분모</strong>가 존재할 것이다.</p>\n<p>예를 들자면</p>\n<ul>\n<li>로그인/회원가입 페이지의 경우 회원은 접근할 수 없어야 하고 <strong>비슷한 레이아웃</strong>을 가질 것이다.</li>\n<li>헤더와 푸터를 가지고 있는 페이지가 있을 것이다. 반대로, 헤더와 푸터가 없는 페이지도 있을 수 있다.</li>\n<li>이 외에도 <strong>공통분모</strong>를 가진 여러가지 페이지 레이아웃이 있을 수 있다.</li>\n</ul>\n<p>이 때 다음과 같은 형태로 Router를 표현할 수 있다. 정확히는 재사용이랄까?</p>\n<div class=\"language-jsx line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"jsx\" data-title=\"jsx\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Home</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">about</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">login</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">join</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PublicLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Login<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PublicLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/join<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Join<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DefaultLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DefaultLayout</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Home<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\"></span>\n<span class=\"line\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>구현 방법은 <a href=\"https://simonsmith.io/reusing-layouts-in-react-router-4\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>를 참고하면 된다.(https://m.blog.naver.com/boostcamp_official/222140296542)에서 확인할 수 있다.\n여기에서 다루기엔 양이 너무 많다.</p>\n<hr>\n<h4>(4) 원리 부터 깨우친다.</h4>\n<p>단순하게 React로 무언가를 만드는 과정이 아니라</p>\n<ul>\n<li>어쩌다가 이러한 프레임워크가 등장했는지</li>\n<li>React의 철학은 무엇인지</li>\n<li>타 프레임워크와 비교했을 때 React의 장점이 무엇인지</li>\n<li>옳바르게 React를 사용하는 방법</li>\n<li>React를 공부하는데 필요한 기초 지식</li>\n</ul>\n<p>등을 먼저 설명하고 그 다음에 구현에 필요한 API를 공부할 수 있도록 방향이 잡혀있다.</p>\n<p>예를 들자면 다음과 같은 것들(도메인 지식이랄까?)에 대해 먼저 공부한다.</p>\n<ul>\n<li><code>spread 연산자</code>와 <code>rest 연산자</code>의 차이점/공통점</li>\n<li><code>Arrow Function</code>과 <code>this</code></li>\n<li><code>module loader</code> vs <code>module bundler</code></li>\n<li><code>ES Module</code></li>\n<li><code>Virtual DOM</code></li>\n<li><code>Element</code> vs <code>Component</code></li>\n<li><code>props</code></li>\n<li><code>propTypes</code></li>\n<li><code>state</code></li>\n<li><code>Component Life Cycle</code></li>\n<li><code>Controlled Component</code></li>\n<li><code>Uncontrolled Component</code></li>\n<li><code>Pure Component</code></li>\n<li><code>Memoization</code></li>\n<li><code>SPA(Single Page Application)</code></li>\n<li><code>Hook Motivation</code></li>\n<li><code>상태관리</code></li>\n<li>Javascript의 <code>실행 컨텍스트</code>\n<ul>\n<li>Outer Environment</li>\n<li>Lexical Environment</li>\n</ul>\n</li>\n<li>함수 생성과 호출규칙, 그리고 <code>클로저</code></li>\n<li><code>Currying</code>과 Middleware</li>\n<li><code>StateLess</code> 아키텍쳐와 <code>JWT(Json Web Token)</code></li>\n<li><code>Iterator</code>, <code>Iterable</code>, <code>Generator</code></li>\n<li><code>promise</code> 그리고 <code>async/await</code></li>\n<li><code>Saga Pattern</code></li>\n</ul>\n<p>이러한 개념들 이외에도 무척 많은 것들을 배웠으나, 사실 기억 나는게 많지 않다.. 😂\n어쨌든 중요한 점은 단순하게 React에 대해 공부하는 것이 아니라 어떤 과정을 통해서 React가 현재의 모습을 갖추게 되었고,\n어떤 Motivatino을 통해서 디자인 되었는지 알 수 있었기 때문에 <strong>스터디를 통해서 React에 대한 전반적인 이해도</strong>가 좋아졌다.</p>\n<hr>\n<h4>(5) 스터디 리더가 작성한 코드 공유</h4>\n<p>미션이 종료된 후에 리더가 작성한 코드를 공유해주기 때문에 내가 작성한 코드와 비교하며 부족한 부분을 채울 수 있다는 점도 큰 매리트라고 생각한다.\n코드에 정답은 없지만 그래도 내가 작성한 것 보단 정답에 가까운 코드를 보는 것 만으로도 굉장히 큰 도움이 된다.</p>\n<p>그리고 내가 현업에서 접하지 못했던 유용한 라이브러리를 많이 볼 수 있었다.\n무엇보다 Redux를 정말 제대로, 그리고 잘 사용할 수 있는 방법을 접할 수 있는 점도 좋았다.</p>\n<hr>\n<h4>(6) 유쾌한 운영진</h4>\n<p>스터디 리더와는 별개로, 스터디를 개설하고 관리하는 운영진 덕분에 매 스터디가 즐거웠다.</p>\n<p>크리시님 혹시 이 글을 읽고 계신가요? <strong>당근 상모돌리기</strong> 무척 인상 깊었습니다 😁</p>\n<hr>\n<h4>(7) 기술 외적 동기 부여</h4>\n<p>그리고 스터디 리더인 Harry의 경우 싱가포르 소재의 핀테크 회사에서 팀장급 Full-Stack 개발자로 근무 중이며,\n전 회사인 카카오 뱅크에서는 데이터 엔지니어로 근무했다.</p>\n<p></p>\n<p>여담으로, Harry는 프로그래머스에서 React Study 뿐만 아니라 다음과 같은 스터디의 리더로 활동하고 있다.</p>\n<ul>\n<li><a href=\"https://programmers.co.kr/learn/courses/11186\" target=\"_blank\" rel=\"noopener noreferrer\">단순 CRUD는 그만! 웹 백엔드 시스템 구현(Spring Boot)</a></li>\n<li><a href=\"https://programmers.co.kr/learn/courses/10617\" target=\"_blank\" rel=\"noopener noreferrer\">씹고 뜯고 맛보는 Node.js with REST&amp;GraphQL</a></li>\n</ul>\n<p>굉장히 화려한 이력을 가지고 있지만 Harry는 비전공자이다.\n그렇기 때문에 Harry라는 개발자의 존재는 나에게 무척 강렬한 인상을 남겼다.</p>\n<p>이렇게 다방면의 기술을 깊게 공부하고 전파할 수 있었던 이유 중 하나가 바로 <code>영어</code>라고 했다.\n<code>영어</code>는 <strong>모든 지식의 도메인 지식</strong>이라고 할 수 있다.\n특히 <strong>개발자의 경우 영어로된 문서를 항상 마주봐야 하기 때문에</strong> 어찌보면 개발자가 제일 먼저 공부해야 하는 것이 영어라고 할 수 있다.</p>\n<p><code>Harry</code>는 영어를 지속적으로 강조했고, 무척 설득력 있게 다가왔다.\n그래서 내년에는 일일커밋 대신 <code>일일영어</code>를 하기로 다짐했다.</p>\n<p>이 외에도 현업에 대한 다양한 이야기를 들을 수 있었고, 여러가지 갈증을 해소할 수 있었다.</p>\n<hr>\n<h4>정리</h4>\n<p>결국 내가 하고 싶은 이야기는 한 가지이다.\nReact를 학습 하고 싶다면 꼭 이 스터디에 참여해보길 권한다.</p>\n<hr>\n<h3>2. 블랙커피 블로그 스터디 1기</h3>\n<p><a href=\"/TIL/Review/2020-year/09-September/\" target=\"_blank\">9월 회고</a>의 주된 내용이었던 <a href=\"https://edu.nextstep.camp/s/tUzCRWul\" target=\"_blank\" rel=\"noopener noreferrer\">블랙커피 스터디 3기</a>가 종료된 후 이어서 블로그 스터디 모집을 한다고 공지가 올라왔다.\n망설임 없이 바로 신청했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">블랙커피 블로그 스터디 소개</p>\n<ul>\n<li>나의 경험, 다른 사람의 경험에서 통찰을 얻기 위한 블로그 스터디</li>\n</ul>\n<blockquote>\n<p>제대로 쓰려 말고, 무조건 써라 - 제임스 서버</p>\n</blockquote>\n<p>글을 쓴다는 것은 찰나적으로 지나쳐버린 나의 시간, 생각, 행동을 조립해나가는 과정입니다.\n그 과정에서 우리는 연결점을 이어가 의미를 도출할 수도 있고, 또 다른 통찰을 얻어갈 수도 있죠.\n쓰지 않는다면 결코 보지 못할 나의 경험들의 깊은 의미도 있을 것입니다.\n그래서 글을쓰고, 회고하고, 피드백하기 위해 이 블로그 스터디를 운영합니다.</p>\n</div>\n<p>스터디 내용은 굉장히 단순하다.</p>\n<ul>\n<li>1주에 글 1편</li>\n<li>1달에 글 3편</li>\n<li>애자일 프로세스에서 추천하는 20%의 일정을 버퍼기간을 두는 것을 착안하여, 1달에 총 3편의 글을 작성. <u>즉, 1주는 버퍼기간</u></li>\n</ul>\n<p>나는 이번 달에는 <strong>2편의 글</strong>을 작성했다.</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Review/2020-year/09-September/\" target=\"_blank\" rel=\"noopener noreferrer\">2020년 9월 회고</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/\" target=\"_blank\" rel=\"noopener noreferrer\">Vanilla Javascript로 웹 컴포넌트 만들기</a></li>\n</ul>\n<p>더 많이 쓰고 싶었지만, 10월에 생각보다 이벤트(?)가 많아서 짬내기가 힘들었다. <s>핑계는 청산유수</s></p>\n<p>그리고 인상 깊었던 글들을 소개해본다.</p>\n<ul>\n<li>\n<p><code>김종완</code>님 의 글</p>\n<ul>\n<li><a href=\"https://wani-coding.tistory.com/112?category=927131\" target=\"_blank\" rel=\"noopener noreferrer\">개발자를 위한 세금 시리즈 - 1</a></li>\n<li><a href=\"https://wani-coding.tistory.com/118?category=927131\" target=\"_blank\" rel=\"noopener noreferrer\">개발자들이 알아야하는 세금 꿀팁 - 중소기업 취업자 소득세 감면</a></li>\n</ul>\n</li>\n<li>\n<p><code>메이커준</code>님 의 글</p>\n<ul>\n<li><a href=\"https://makerjun.com/career/woowabros/programmer-story/\" target=\"_blank\" rel=\"noopener noreferrer\">0. 프롤로그: 새로운 출발을 향한 우아한형제들 입사 기록</a></li>\n<li><a href=\"https://makerjun.com/career/woowabros/why-programmer/\" target=\"_blank\" rel=\"noopener noreferrer\">1. 프로그래밍을 시작한 경위와 본격적으로 투신하고 생업으로 삼기로 결정한 이야기</a></li>\n</ul>\n</li>\n<li>\n<p><code>eyabc</code>님 의 글</p>\n<ul>\n<li><a href=\"https://eyabc.github.io/Doc/\" target=\"_blank\" rel=\"noopener noreferrer\">내 글 써보기</a></li>\n</ul>\n</li>\n<li>\n<p><code>김경록</code>님 의 글</p>\n<ul>\n<li><a href=\"https://rok93.tistory.com/entry/%EC%96%B4%EB%8A%90-%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%98-2020%EB%85%84-%EB%8A%A6%EC%9D%80-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0%EB%A1%9D\" target=\"_blank\" rel=\"noopener noreferrer\">어느 취준생의 2020년 늦은 상반기 회고록</a></li>\n</ul>\n</li>\n<li>\n<p><code>DevJang</code>님 의 글</p>\n<ul>\n<li><a href=\"https://devjang.github.io/2020/10/17/2020-10-17-woowahan-tech-learning-3rd/\" target=\"_blank\" rel=\"noopener noreferrer\">우아한 테크러닝 3기 React &amp; TypeScript 후기</a></li>\n</ul>\n</li>\n</ul>\n<p>이렇게 블로그 스터디를 하면서 느낀 것은, 소설을 읽는 것 처럼 다른 사람의 경험을 간접적으로 체험해보는 재미를 느낄 수 있다는 것이다.\n내가 겪지 못한 것들을 글로 채우는 느낌이랄까?</p>\n<p>블로그 스터디는 11월 까지 이어질 예정이다.</p>\n<hr>\n<h3>3. 블랙커피 스터디 4기 리뷰어</h3>\n<p>나는 블랙커피 스터디 3기에 참여했고, 굉장히 열심히 활동했다.\n그리고 이곳 저곳에 꼭 이 스터디에 참여해보라고 홍보했다.</p>\n<p>그렇게 <a href=\"https://edu.nextstep.camp/s/QfA29i5V\" target=\"_blank\" rel=\"noopener noreferrer\">블랙커피 스터디 4기</a> 모집이 시작되었고\n내가 가르치는 고등학생들도 신청하도록 유도했다.\n단국대 개발자 스터디원에게도 홍보했고, 학교 커뮤니티 사이트에도 홍보했고, 주변에 취준을 하는 후배들에게도 추천했다.</p>\n<p>그리고 나는 리뷰어로 참여했다.</p>\n<p></p>\n<p>덕분에 4기는 3기보다 훨씬 많은 사람들이 참여했고, 리뷰도 더 활발하게 이루어졌다.</p>\n<p></p>\n<p>문제는 내가 너무 바빠서 리뷰어 활동을 거의 하지 못했다는 점이다... 사실 다른 분들이 너무 열심히 해주셔서 굳이 내가 리뷰를 해주지 않아도 된다는 안도감이 있었던 것 같다.</p>\n<p></p>\n<p>그리고 리뷰어로 활동하면 스터디 기간 동안 페어프로그래밍을 최소 1회 진행해야 한다.\n그런데 내가 진행하는 날에 참여하는 분들이 많이 없었고, 생각보다 수월하게 진행할 수 있었다.\n어쩌다 보니 나도 같이 참여하게 된 것 같아서 짝 프로그래밍 보단 그룹(?) 프로그래밍이 되어버렸지만..\n어쨌든 좋은 경험이었다고 생각한다.</p>\n<p>그리고 <code>Virtual DOM</code>에 대해 찾아보다가 직접 구현해보는 내용의 포스트를 읽었고, 호기심에 한 번 따라해봤다.</p>\n<ul>\n<li><a href=\"https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060\" target=\"_blank\" rel=\"noopener noreferrer\">How to write your own Virtual DOM</a></li>\n<li><a href=\"https://medium.com/@deathmood/write-your-virtual-dom-2-props-events-a957608f5c76\" target=\"_blank\" rel=\"noopener noreferrer\">Write your Virtual DOM 2: Props &amp; Events</a></li>\n<li><a href=\"https://github.com/JunilHwang/practice-virtual-dom\" target=\"_blank\" rel=\"noopener noreferrer\">가상돔 만들기 연습 - junilhwang/practice-virtual-dom</a></li>\n</ul>\n<p>추후에 여유 있을 때 조금 더 보완해서 TodoList를 만들어 볼... 수 있을까? 😅</p>\n<hr>\n<h3>4. 부스트캠프 리뷰어 그리고 발표</h3>\n<p>부스트캠프 리뷰어는 8월에 신청했고, 9월 ~ 10월에 활동했다.</p>\n<p></p>\n<p></p>\n<p>차례대로 9월, 10월 리뷰 현황판이다.</p>\n<p>격주로 화요일/목요일마다 각각 6명의 캠퍼가 올린 PR을 리뷰했는데,\n생각보다 시간이 많이 걸렸고 그렇다고 대충 하기에는 또 찜찜해서 어떻게든 꼼꼼하게 보려고 애썼다. <s>애쓴만큼 잘 했는지는 모르겠다</s></p>\n<p></p>\n<p>대체로 위와 같은 형태의 리뷰를 남겼다.</p>\n<p>마지막주의 리뷰는 사실 리뷰할 내용이 거의 없었다.\n미션이 어렵기도 했고, 캠퍼들이 어려운 미션을 진행하면서 리팩토링까지 할 여력이 없어보였다.\n일단 구현 자체가 안 된 경우도 많이 있어서 어물쩡 넘어간 경우도 있었다.</p>\n<hr>\n<p></p>\n<p>리뷰를 해드렸던 캠퍼 한 분에게 이렇게 연락이 왔다.\n감사하기도 하고, 죄송하기도 하고, 다음에 또 부스트캠프의 리뷰어로 활동하게 된다면 더 좋은 리뷰를 남기리라 다짐하는 순간이었다.</p>\n<hr>\n<p>부스트캠프의 전반적인 과정을 지켜보면서 느낀 것은, <strong>이 사람들은 무조건 잘 할 수 밖에 없겠다</strong> 라는 점이다.</p>\n<p>전반적으로 캠퍼들 간에 상호 피드백도 활발하게 이루어 지고 있고, 학습 환경 또한 온라임에도 불구하고 끈끈한 네트워크가 형성된 것이 느껴졌다.\n서로가 서로에게 믿고, 신뢰하고, 의지할 수 있는 사람이 되는 것이다.</p>\n<p>그렇다면 개발은 덤으로 따라온다. 무언가를 함께할 사람이 있다는 것은 언제나 즐거운 일이고 그 자체만으로도 활력이 된다.</p>\n<p>여담으로 <u>앞서 언급한 리액트 스터디에도 부스트 캠프를 거쳐온 사람들이 있었다.</u> 그리고 그 분들이 스터디를 이끌어갔다고 해도 과언이 아니었다.</p>\n<hr>\n<p>리뷰어 활동이 끝난 후에 슬랙 채널에 다음과 같은 내용의 공지가 올라왔다.</p>\n<p></p>\n<p>공지가 뜨자 마자 바로 신청했다.</p>\n<p>발표자료를 만들고, 팀장님과 상의하여 내용을 조금 변경하고, 리허설도 잘 마무리했고, 발표도 잘 마무리했다.\n굉장히 많은 사람들 앞에서 내 의견을 어필해야 했기 때문에 긴장도 많이 했지만 재밌었다.</p>\n<p>발표가 끝난 후에 인지했던게 <a href=\"#_1-%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%84%86%E1%85%A5%E1%84%89%E1%85%B3-%E1%84%85%E1%85%B5%E1%84%8B%E1%85%A2%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%84%83%E1%85%B5\">리액트 스터디</a>를 같이 하는 사람 중 한 분(생활 연구소의 홍태의님)이 나와 똑같은 주제로 발표했다.\n<u>세상이 참 좁구나 👀</u></p>\n<p>저작권 때문에 발표자료를 전부 공개하기는 힘들고, <strong>몇 가지 핵심적인 내용</strong>만 다뤄보자면 다음과 같다.</p>\n<h4>(1) 좋은 직장</h4>\n<ul>\n<li>\n<p>좋은 직장과 좋은 회사는 다르다.</p>\n<ul>\n<li>좋은 회사는 <code>타인</code>, 즉 <code>외부의 시선</code>을 기준으로 한다.</li>\n<li>좋은 직장은 <code>나</code>를 기준으로 한다.</li>\n</ul>\n</li>\n<li>\n<p>직장 만족도에 대한 보편적인 카테고리</p>\n<ul>\n<li><code>일(업무)</code>, <code>돈(급여)</code>, <code>사람(팀원)</code></li>\n<li>세 가지 중 <strong>두 가지 이상</strong> 겹치면 대체로 <strong>좋은 직장</strong>일 가능성이 높다.</li>\n</ul>\n</li>\n<li>\n<p>나에게 있어서 좋은 직장을 판별할 때의 **우선순위*는 다음과 같다.</p>\n<ul>\n<li>0순위: <strong>팀원(사람)</strong></li>\n<li>1순위: 자사 서비스가 있는가(일)</li>\n<li>2순위: 기술스택(일)</li>\n<li>3순위: 잡플래닛(돈/일/사람)</li>\n<li>4순위: 강남/잠실/판교</li>\n</ul>\n</li>\n</ul>\n<h4>(2) 소프트웨어에 대하여</h4>\n<ul>\n<li>\n<p>소프트웨어의 <u>특성</u></p>\n<ul>\n<li><strong>형체</strong>가 없다.</li>\n<li><strong>공장에서 찍어낼 수 없다.</strong></li>\n<li>무조건 <strong>사람의 손</strong>을 거쳐야 한다.</li>\n<li>소프트웨어의 <strong>가치</strong>를 측정하기가 힘들다.</li>\n<li>한 사람이 가진 기술력은 <strong>똑같은 규격</strong>으로 만드는게 불가능하다.</li>\n</ul>\n</li>\n<li>\n<p><strong>3000만원짜리 소프트웨어</strong>를 만들어보자.</p>\n<ul>\n<li>개발자 2명 / 기획자 2명 / 디자이너 2명이 투입한다고 가정하자.</li>\n<li>평균 200만원의 급여라고 가정하면 1개월에 1200만원의 인건비가 필요하다.</li>\n<li>오직 인건비로만 2개월에 2400만원, 3개월이면 3600만원의 비용이 든다.</li>\n<li>따라서 3000만원짜리 제품을 만들기 위해선 2개월을 알뜰하게 투자해야한다.</li>\n<li><u>당신은 2개월만에 누가 봐도 3000만원의 가치를 가진 제품을 만들 수 있는가?</u></li>\n</ul>\n</li>\n<li>\n<p>결국 <strong>소프트웨어를 만들 때 제일 중요한 것은 \"사람(인력)\" 그 자체</strong>라고 할 수 있다.</p>\n<ul>\n<li>앞서 언급한 내용에서 고려해야할 것 중 하나가 커뮤니케이션 비용(=시간)이다.</li>\n<li>구성원 간의 합이 잘 맞는다면 커뮤니케이션 비용(=시간)은 절약될 것이다.</li>\n<li>반대의 경우 커뮤니케이션만 하다가 끝날 가능성도 있다.</li>\n<li>중간에 인력이 교체되는 경우에도 마찬가지이다.</li>\n<li>비슷한 사람은 있어도 똑같은 사람은 없다.</li>\n<li>한 사람이 가진 기술력과 커뮤니케이션 능력은 <strong>똑같은 규격</strong>으로 만드는게 불가능하다.</li>\n<li>그래서 인력(인적자원)에 투자를 많이 하는 회사일수록 제품(소프트웨어, 서비스) 또한 좋을 확률이 높다.</li>\n<li>인력을 공장의 부품처럼 생각하는 회사라면 언제 망해도 이상할게 없다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">같이 읽으면 좋은 아티클</p>\n<ul>\n<li><a href=\"https://www.bsidesoft.com/8035\" target=\"_blank\" rel=\"noopener noreferrer\">구멍가게 개발사 이야기</a></li>\n<li><a href=\"https://steemit.com/development/@hikamaeng/re-1\" target=\"_blank\" rel=\"noopener noreferrer\">제로부터 시작하는 개발사 창업 #1</a></li>\n<li><a href=\"https://steemit.com/development/@hikamaeng/1-2\" target=\"_blank\" rel=\"noopener noreferrer\">[개발사 생존기] 완료금편 #1 / 4</a></li>\n<li><a href=\"https://steemit.com/development/@hikamaeng/2-4\" target=\"_blank\" rel=\"noopener noreferrer\">[개발사 생존기] 완료금편 #2 / 4</a></li>\n</ul>\n</div>\n<h4>(3) 내가 생각하는 개발자에게 제일 중요한 것</h4>\n<ul>\n<li>커뮤니케이션 능력</li>\n<li>같이 성장하는 능력(빠른 피드백)</li>\n<li>같이 만드는 능력\n<ul>\n<li><s>분업 X</s></li>\n<li><strong>협업 O</strong></li>\n</ul>\n</li>\n<li>자존감\n<ul>\n<li>스스로를 존중하는 것, 믿는 것</li>\n<li>스스로를 존중하고 믿는 만큼 타인(팀원)을 존중하고 믿는 것</li>\n</ul>\n</li>\n<li>내가 존중받고 있다고 느끼게 해주는 팀, 그리고 회사\n<ul>\n<li>이러한 분위기를 만드는 것</li>\n<li>의견을 말함에 있어서 거리낌이 없는 것</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">함께 자라기</p>\n<ul>\n<li>발표를 한 뒤에 뒤늦게 <a href=\"http://www.yes24.com/Product/Goods/67350256\" target=\"_blank\" rel=\"noopener noreferrer\">함께 자라기</a>라는 책을 읽었다.</li>\n<li>내가 생각 했던 내용들보다 더 심오하게 그리고 논리적으로 <strong>학습, 성장, 협업</strong> 등에 대해 다루고 있다.</li>\n<li>시간을 내서 꼭 한 번 읽어보길 권한다.</li>\n</ul>\n</div>\n<p><a href=\"https://m.blog.naver.com/boostcamp_official/222140296542\" target=\"_blank\" rel=\"noopener noreferrer\">부스트캠프 공식 블로그</a>에 가면 더 재미난 이야기들을 확인할 수 있다.</p>\n<p>이러한 내용에 대해 약 10분 정도 주절주절 떠들었다. 사실 다른 분들이 좋은 내용을 무척 많이 다뤄주셔서 약간 주눅들었다 😓</p>\n<p>어쨌든 스스로에게 좋은 경험을 만들어주었다고 생각한다.\n리뷰어 활동과 더불어 이러한 경험을 만들어준 부스트캠프 운영진 분들께 많은 고마움을 느끼고 있다.</p>\n<hr>\n<h3>5. 인터넷 강의 영상 제작</h3>\n<p>어쩌다보니 친한 선생님(?)의 소개로 <strong>인천금융고등학교</strong> 학생들에게 <strong>웹 디자인 기능사</strong>를 주제로 <strong>온라인 방과후 수업</strong>을 진행하게 되었다.\n사실 처음에는 웹 개발 강의인줄 알고 기대했는데 알고보니 <u>디자인 계열의 학과</u> 학생들을 대상으로 진행해야 했기 때문에 <strong>웹 디자인 기능사</strong>로 강의 주제를 축소했다.\n<s>웹 디자인 기능사는 이제 정말 지겹다</s></p>\n<h4>(1) Repl.it</h4>\n<p>에디터는 어떤 것을 사용할까 고민하다가 <a href=\"https://repl.it/\" target=\"_blank\" rel=\"noopener noreferrer\">Repl.it</a> 서비스를 이용하기로 했다.\n일단 에디터를 설치하고 세팅하고 교육하는데 생각보다 많은 시간이 소요된다.\n무엇보다 파일 시스템 내에서 작업해야 하기 때문에 실습 코드를 항상 들고다니는 학생이 아니라면 이를 따라오기가 쉽지 않으리라 생각했다.</p>\n<p><strong>repl.it</strong>의 경우 인터넷만 된다면 어떤 플랫폼이든 상관 없이 이용할 수 있으며 무료로 호스팅까지 해주기 때문에\n학생들이 결과물에 대해 흥미를 느끼는 과정이 일반적인 에디터를 사용하는 것 보다 좋아보였다.</p>\n<p>그리고 내가 온라인으로 결과물을 바로 확인할 수 있기 때문에 틀린 부분을 교정해주는 것도 훨씬 쉬웠다.</p>\n<h4>(2) 강의 교재</h4>\n<p>강의 교재는 <strong>유승렬 교수님</strong>이 만드신 <a href=\"http://webskills.kr/2018/data/WEB_HTML_CSS.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">WEB &amp; HTML &amp; CSS</a>를 사용했다.\n사실 기초 개념에 대한 내용만 이 교재에서 찾아 설명하고, 웬만한 이론적인 내용은 그냥 스킵했다.</p>\n<p>이론을 초반에 아무리 주절 주절 떠들어도 이해하는 학생들이 경험상 거의 없었기 때문에 일단 실습부터 한 다음에 어떤 원리로 그렇게 되는지 설명했다.\n근데 CSS는 외워야 할게 너무 많아서.. 문제다.\n추상화를 너무 잘 해놔서(?) 처음 접하는 사람들은 진짜 미치도록 헷갈릴 수 밖에 없다.</p>\n<h4>(3) Repository</h4>\n<p>예제 코드는 <a href=\"https://github.com/JunilHwang/oneline-lecture-note\" target=\"_blank\" rel=\"noopener noreferrer\">이 저장소</a>에 모아놨다.\n대충 핵심적인 내용만 README.md에 작성해놨는데, CSS를 처음 접하는 사람에게 CSS를 잘 설명하기란 정말 하늘의 별따기인 것 같다.\n특히 디자인을 전공하는 사람에게 설명하는 것은 배로 힘들다.</p>\n<h4>(4) 분량</h4>\n<p>분량은 한 개의 영상당 40분씩 총 10개를 촬영했다.</p>\n<p></p>\n<p></p>\n<p>녹화는 Mac의 QuickTime Player를 이용했는데 이게 무조건 4k로 녹화되다 보니 용량을 쓸데없이 많이 차지했다.\n인코딩을 다시 해도 줄어들 기미가 보이지 않아서 그냥 포기했다.</p>\n<p>나중에 알게된 사실인데 Zoom을 이용하여 녹화하면 거의 용량을 20배 가까이 줄일 수 있는 것 같다. 이걸 왜 이제야 알았을까 🤣</p>\n<p>일단 빠르게 10개만 촬영했는데, 11월 ~ 12월 중에 더 촬영해서 총 20개를 만들어야 한다. <s>아.. 귀찮다</s>\n어쨌든 앞으로도 꾸준이 이 학교와 교류가 있을 것 같다. 뭐.. 좋은게 좋은거지!</p>\n<hr>\n<h2>Summary</h2>\n<ul>\n<li>이번 달도 CMS 때문에 고통받았다.</li>\n<li>리액트 스터디가 무척 유익했다.</li>\n<li>블로그 스터디를 통해서 유익한 글을 접했다.</li>\n<li>부스트 캠프 리뷰어 활동을 마무리 했고, \"나와 찰떡 같은 회사 찾기\"를 주제로 발표했다.</li>\n<li>인터넷 강의로 방과후 수업을 진행했다.</li>\n</ul>\n<p>그리고 본문에 언급하진 않았지만</p>\n<ul>\n<li>서울 디지텍 고등학교에서 강의를 진행했다.</li>\n<li>단국대 개발자 스터디는 이번 달도 잘 활성화 되고 있다.\n<ul>\n<li>11월에 첫 회식 예정이다.</li>\n</ul>\n</li>\n<li>코덕은 3위로 마무리 했다.</li>\n<li>이번 달은 13개의 Repository에서 500개의 commit을 했다.</li>\n<li>82개의 PR에 대해 리뷰를 남겼다.</li>\n</ul>\n",
      "date_published": "2020-12-28T23:30:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2021 새해 계획",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/02-2021-%EA%B3%84%ED%9A%8D/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/02-2021-%EA%B3%84%ED%9A%8D/",
      "summary": "다가오는 2021년에 대한 계획입니다.",
      "content_html": "\n<h2>1. 일일 커밋 대신 일일 영어</h2>\n<h3>계기</h3>\n<p>10월에 프로그래머스 스쿨에서 진행하는 리액트 스터디에 참여했었다.\n스터디 리더인 **해리(고재도)**님이 싱가폴에서 근무중이셨는데 <strong>영어공부를 무척 강조</strong>하셨고, 상당히 <strong>진정성</strong> 있게 다가왔다.\n나는 <strong>영어가 모든 지식의 도메인</strong>이라고 생각한다.\n앞으로 평생 공부해야 한다면, 제일 먼저 숙련해야 하는게 영어다.</p>\n<h3>계획</h3>\n<p>대체로 <strong>독해 및 쓰기</strong> 위주의 공부를 해볼 생각이다.\n일단 내가 해외에 나갈 일이 많지도 않고, 굳이 회화를 해야할 필요가 있을까 싶기 때문이다.</p>\n<ul>\n<li><strong><code>목표</code></strong>\n<ul>\n<li>구글 번역기를 사용하지 않고 개발 아티클 빠르게 읽고 이해하기</li>\n<li>원서로 된 책을 읽어보기</li>\n</ul>\n</li>\n<li><strong><code>구체적인 계획</code></strong>\n<ul>\n<li>문법 or 단어 공부\n<ul>\n<li>많은 단어를 한 번에 많이 외우기보단, 하나의 단어를 깊게 공부하기.</li>\n</ul>\n</li>\n<li>하루에 한 문장 이상 외우기</li>\n<li>하루에 한 문장 이상 작문해보기</li>\n<li>주 1회 이상 개발 관련 아티클 번역해서 올리기</li>\n</ul>\n</li>\n</ul>\n<p>사실 영어공부를 제대로 해본 적이 없어서 어떻게 해야 좋을지 막연하다. 토익이라도 준비해야 좋을까?</p>\n<h2>2. 개발 서적 위주의 공부</h2>\n<h3>계기</h3>\n<p>2020년에는 일일커밋 위주로 공부를 했다.\n덕분에 꾸준히 공부하는 습관은 만들 수 있었지만, 뭐랄까.. 공부와 커밋의 주객전도가 되어버렸다.</p>\n<p>그래서 내년에는 잔디밭을 꾸미기 보단, 스스로를 잘 가꾸기 위한 공부를 해볼 생각이다.</p>\n<h3>계획</h3>\n<ul>\n<li><strong><code>목표</code></strong>\n<ul>\n<li>한 달에 3권 이상</li>\n<li>일 주일에 1권 이상</li>\n</ul>\n</li>\n<li><strong><code>읽고 싶은 책 목록</code></strong>\n<ul>\n<li>PPP 시리즈\n<ul>\n<li>밑바닥 부터 만드는 컴퓨팅 시스템</li>\n<li>클린 아키텍쳐</li>\n<li>프로그래밍 심리학</li>\n<li>실용주의 프로그래머</li>\n<li>클린 코드</li>\n<li>테스트 주도 개발</li>\n<li>생각하는 프로그래밍</li>\n</ul>\n</li>\n<li>소프트웨어 장인</li>\n<li>함께 자라기</li>\n<li>리팩토링</li>\n<li>이펙티브 자바</li>\n<li>객체지향의 사실과 오해</li>\n<li>오브젝트</li>\n<li>함수형 자바스크립트</li>\n<li>코틀린 쿡북</li>\n</ul>\n</li>\n</ul>\n<p>심심할 땐 개발 서적 말고 다른 책도 읽어보자.</p>\n<h2>3. 저축</h2>\n<h3>계기</h3>\n<p>올해는 지출이 생각보다 많았다. 사회 초년생이다보니 펑펑(?)까진 아니지만 여기저기 많이 썼다.\n내년에는 지출을 조금 줄이고, 배달 음식도 줄이고, 잘 모아보자.</p>\n<p>그래서 내집 마련까진 아니더라도 다른 전셋집으로 이사갈 수 있도록 준비해보자.</p>\n<h3>계획</h3>\n<ul>\n<li><strong><code>목표</code></strong>\n<ul>\n<li>최소 2400만원, 최대 3000만원 모아보기</li>\n<li>매달 200만원 이상 저축하기</li>\n</ul>\n</li>\n<li><strong><code>구체적인 계획</code></strong>\n<ul>\n<li>가능하다면 월급을 전부 저축하기</li>\n<li>생활비는 다른 일로 대체하기\n<ul>\n<li>고등학교 외부강사\n<ul>\n<li>방과후 수업</li>\n<li>기능경기대회</li>\n</ul>\n</li>\n<li>넥스트스텝 리뷰어</li>\n<li>단쿠키 등의 사이드 프로젝트</li>\n<li>인터넷 강의</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>4. 사이드 프로젝트</h2>\n<h3>계기</h3>\n<ul>\n<li>2020년에는 끄적이기만 하고 완성을 못했다.</li>\n<li>2021년에는 반드시 완성까지 해보는 것을 목표로 하자.</li>\n<li>꼭 돈이 되는 서비스가 아니더라도 만들어보자.</li>\n</ul>\n<h3>계획</h3>\n<ul>\n<li><strong><code>목표</code></strong>\n<ul>\n<li>개발자를 위한 서비스를 만들기.</li>\n<li>나를 위한 서비스를 만들기.</li>\n<li>타인을 위한 서비스를 만들기.</li>\n</ul>\n</li>\n<li><strong><code>구체적인 계획</code></strong>\n<ul>\n<li><a href=\"https://programmers.co.kr/competitions/779/2021-kakaocommerce-fe-recruitment\" target=\"_blank\" rel=\"noopener noreferrer\">단쿠키</a> 리쿠르트에 참여했다.\n<ul>\n<li>3월까지 3.0을 만들 예정이다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/DKU-STUDY\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-STUDY</a>를 운영하기 위한 서비스를 만들 예정이다.</li>\n<li>나를 위한 서비스는 아직 구체적으로 정하지 않았다.</li>\n</ul>\n</li>\n</ul>\n<h2>5. 스터디 운영</h2>\n<h3>계기</h3>\n<ul>\n<li>지금은 스터디를 대충 운영중이다.</li>\n<li>이번에 인지도가 조금 쌓인 편이라서 이를 제대로 이용해보고자 한다.</li>\n<li>알고리즘 뿐만 아니라 다양한 서브 스터디를 만들어서 운영해볼 생각이다.</li>\n</ul>\n<h3>계획</h3>\n<ul>\n<li>스터디 인원 50명까지 만들어보기</li>\n<li>기수(1기, 2기, 3기, ...) 제도로 운영하기</li>\n<li>멘토를 많이 확보하기</li>\n</ul>\n<h2>6. 기타</h2>\n<ul>\n<li>운동: 자전거 / 수영 / 근력운동</li>\n<li>이사: 새로운 전셋집 알아보고 가능하다면 이사하기</li>\n<li>식사: 1주일에 3번 이상은 집밥 먹기</li>\n</ul>\n<h2>Summary</h2>\n<ul>\n<li>1순위\n<ul>\n<li>일일 영어</li>\n<li>개발 서적 공부</li>\n</ul>\n</li>\n<li>2순위\n<ul>\n<li>저축</li>\n<li>사이드 프로젝트</li>\n</ul>\n</li>\n<li>3순위\n<ul>\n<li>스터디 운영</li>\n<li>운동</li>\n<li>집밥 먹기</li>\n<li>이사</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2020-12-24T00:16:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "유년시절 이야기 (3)",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/",
      "summary": "짧았지만 강렬했던, 그리운 시절의 이야기입니다.",
      "content_html": "\n<p>2부로 만들려고 했는데, 3부까지 와버렸다... 분량조절실패!</p>\n<ul>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\">Part-01</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\">Part-02</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\">Part-03</a></li>\n</ul>\n<h2>급성장</h2>\n<p>겨울방학 집체교육 때 강의를 해주시는 분은 앞서 언급한 국가대표 선수와 같이 공부를 했던 분이었다.\n두 사람이 국가대표 선발전에 나가서 나란히 1, 2등을 했다고 들었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/98538828-b4641f80-22ce-11eb-894d-660bd494ae5d.png\" alt=\"성곡마을\">\n* 강사님이 직접 디자인한 사이트</p>\n<p>어쨌든 이 분의 강의는 정말 기초부터 시작했다.\n기능대회 문제를 풀이하는게 목적이 아니라 기능대회 문제 풀이에 필요한 기초 지식을 하나씩 알려준다고 해야하나?</p>\n<p>문법 정도는 당연한거고 GET과 POST의 차이부터 시작해서 최종적으로 게시판과 갤러리를 만들 수 있도록 강의를 해주셨다.\n내가 완전 기초가 없는 상태는 아니었기 때문에 수업은 금방 따라갈 수 있었다.\n더 정확히 묘사하자면, 다음에 할 내용을 내가 먼저 구현하는 수준까지 됐었다.\n<code>왠지 이렇게 하면 될 것 같아!</code> 라는 느낌으로 수업을 들었다고 해야할까?</p>\n<p>이 때 부터 나는 굉장히 빠르게 성장했다.\n1년전에 받았던 솔루션을 해석하는것도 무리가 없었고, 이제 외워서 공부하는 수준이 아니라 이해를 바탕으로 공부할 수 있게 되었다.\n하지만 그래도 어려운 내용은 있었기 때문에 그런 것들은 그냥 외워버렸다.</p>\n<p>2학년에서 3학년으로 넘어가는 시기에 나는 처음으로 <code>게시판</code>을 혼자서 만들 수 있게 되었다.\n1년만에 드디어 게시판 하나를 만들 수 있게 된 것이다.</p>\n<h2>유배</h2>\n<p>이렇게 자신감이 조금 붙어서 <code>왠지 가능성이 있는 것 같아</code>라고 스스로 생각하고 있을 때 즘,\n갑자기 선생님이 <code>내일 짐싸서 와. 나랑 어디좀 가자</code>라는 말을 듣고 <code>이게 무슨일이람</code>하면서 타지에서 일주일 정도 지낼 수 있게 짐을 챙겨서 학교에 갔다.</p>\n<p>그렇게 선생님의 차를 타고 목적지도 모르고(심지어 묻지도 않았다) 어디론가 계속 갔다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/98539333-7c111100-22cf-11eb-8950-997015134582.png\" alt=\"충북반도체고등학교\"></p>\n<p>도착하고 봤더니 <code>충북반도체고등학교</code>라는 곳이었다.\n여기에서 일주일정도 공부하고 오라고 하셨다.</p>\n<p>어쨌든 어안이 벙벙한, 이게 무슨일인가 싶은 그런 상태에서 이 학교의 선생님께 인사를 드렸고 나와 같은 학년의 친구를 소개해주셨고, 여기서 지내는 동안 이 친구가 도와줄 것이라고 했다.\n이야기를 들어보니 이미 전국대회에서 2등을 했고 세계대회를 준비중인 학생이라고 했다.</p>\n<hr>\n<p>후의 이야기지만, 이 친구는 세계대회에서 금메달을 받았고 더 나아가서 MVP라는 칭호를 획득했다.\nMPV는 역대 선수들 중 최고성적(세계신기록)을 의미한다.\n지금은 카카오에서 근무중이다.</p>\n<hr>\n<p>지내면서 알 수 있었던 것은, 이 학교에서는 기능반을 관리하는 체계가 굉장히 잘 되어 있었다.\n기숙사 생활을 하면서 정해진 스케쥴대로 훈련을 하고, 준비하는 종목도 굉장히 많았다.\n전체 기능반 학생을 합치면 대략 50명 정도 되었던 것 같다.</p>\n<p>그리고 학생들간의 사이도 무척 좋았고, 유대관계 같은게 것이 눈에 잘 보였다.\n그래서 이러한 환경에서 공부할 수 있다는 것 자체가 참 부러웠다.</p>\n<p>여기서 지내는 1주일 동안에는 친구도 없고, 인터넷도 안 되는 환경이었기 때문에 집중이 참 잘 됐었다.\n완벽하게 집중할 수 있는 장소였다보니 개발에 대한 부분은 대부분 혼자서 해결할 수 있었고 제일 도움을 많이 받았던 부분은 문제를 읽고, 해석하고, 채점하는 방법이었다.\n아무리 실력이 좋아도 엉뚱하게 문제를 해석하거나 문구만 다르게 써도 틀리기 때문에 생각보다 까다로웠다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899182-a1981480-2cea-11eb-86b6-530667a4daeb.png\" alt=\"과제도면\"></p>\n<p>메뉴 이름도 과제도면에 있는걸 그대로 사용해야 했으며 (글자하나만 틀려도 감점이다.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899230-ef148180-2cea-11eb-802d-c76ab6b6445c.png\" alt=\"예시\"></p>\n<ul>\n<li><code>\"통합검색\" 버튼</code> 이라고 명시되어 있다면, 무조건 버튼 형태로 디자인을 해야 했다.</li>\n<li>버튼의 경우 버튼영역에 마우스를 올렸을 때 커서가 변경되어야 했다.</li>\n<li>만약에 텍스트에 올렸을 때만 마우스 커서가 변경되면 감점이다.</li>\n<li><code>링크요소</code>라고 명시되어 있을 때도 태그에 마우스를 올리면 커서가 변경되어야 했다.</li>\n<li>덕분에 기능 구현을 잘 해놓고 사소한것들을 지키지 못해서 감점이 되는 경우가 많았다.</li>\n<li>성인이 된 후에 생가했던게 개발 능력보단 이렇게 문제를 분석하는 능력이 실무에서는 더 중요하다고 느꼈었다.</li>\n</ul>\n<p>어쨌든 충반고(충북반도체고등학교)에서 지내는 일주일 동안 디자인/기획서/문제해석방법 등에 대해 정말 알차게 배웠다.\n처음으로 대회 문제를 끝까지 풀이할 수 있었다.</p>\n<p>집에 돌아갈 때 같이 지냈던 후배들의 이야기를 빌려보자면, 내가 정말 기계 같았다고 했다.\n먹고/자고/싸는(?) 시간을 제외하곤 계속 컴퓨터 앞에 앉아서 문제만 풀었으니 그럴만 했다.</p>\n<p>앞에서 1년만에 게시판을 만들 수 있게 되었다고 했는데,\n다시 게시판을 만들게된지 1달만에 그럴싸한 사이트를 만들 수 있게 된 것이다.</p>\n<p>어쨌든 충반고에 다녀온 시점을 기준으로 눈에 띄게 실력이 향상되었고, 자신감도 많이 붙었다.\n다만 PHP는 어느 정도 다룰 줄 알게 되었으나, JS는 정말 봐도 봐도 이해 되지 않는 부분이 많았다.</p>\n<p>지금이야 JS를 주력언어로 사용하고 있지만 사실 그당시에는 PHP보다 JS를 공부하는게 무척 힘들었다.\nJS는 PHP보다 디버깅하기가 더 어려웠고, JS의 역할을 정확하게 이해하는게 힘들었다.\n그리고 IE6와 7을 사용하던 시절이라서 크롬의 존재도 모르고 있었고, jQuery의 존재도 모르고 있었다.</p>\n<p>그나마 다행인건 js 코드를 많이 써봐야 130줄 정도라는 것이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">//폰트 사이즈 조정</span></span>\n<span class=\"line\"><span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">zoom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    size <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token string\">\"12px\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    size <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//링크</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//정규식 검사</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">regChk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> reg<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[가-R]{2,}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"이름을 순 한글로 입력해주세요.\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'num'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[0-9]{1,2}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"숫자만 입력이 가능합니다.\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[0-9]{5}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"5자리의 숫자만 입력이 가능합니다.\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'email'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9._-]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"이메일을 양식대로 입력해주세요.\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'phone'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[0-9]{2,3}\\-[0-9]{3,4}\\-[0-9]{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"핸드폰 번호를 양식대로 입력해주세요.\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'pw'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">    <span class=\"token keyword\">case</span> <span class=\"token string\">'re_pw'</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\"을(를) 입력해주세요.\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> msg <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\"을(를) 입력해주세요.\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//폼 체크</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">frmChk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">frm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> ok <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> arg<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> argLen <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> argLen<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    arg <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    ok<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">regChk</span><span class=\"token punctuation\">(</span>frm<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      frm<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"#FF0\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      frm<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      frm<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> argLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    arg <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>ok<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//퀵메뉴</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">quick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  m<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">var</span> sp<span class=\"token punctuation\">,</span> ep<span class=\"token punctuation\">,</span> am<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      sp <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      ep <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      am <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>ep <span class=\"token operator\">-</span> sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      m<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> sp <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ep <span class=\"token operator\">&lt;</span> sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>am <span class=\"token operator\">:</span> am<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//하위 메뉴 보기</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">dep2view</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dep1idx<span class=\"token punctuation\">,</span> cnt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> dep1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dep1'</span> <span class=\"token operator\">+</span> dep1idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  dep1<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> dep1<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">==</span> <span class=\"token string\">'보기'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'닫기'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'보기'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  dep1<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> dep1<span class=\"token punctuation\">.</span>title <span class=\"token operator\">==</span> <span class=\"token string\">'보기'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'닫기'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'보기'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> cnt<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">var</span> dep2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dep2'</span> <span class=\"token operator\">+</span> dep1idx <span class=\"token operator\">+</span> <span class=\"token string\">'_'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    dep2<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> dep2<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">==</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'block'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//폼 전송</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">frmSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">frm<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> pass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> frm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">[</span>frm<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    frm<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    frm<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'정말로 삭제하시겠습니까?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      frm<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      frm<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//디스플레이</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">disp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> one <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> two <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  one<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  two<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>어쨌든 위의 내용도 부분 부분 이해는 되었지만, 완벽하게 이해가 되진 않았기 때문에 함수의 내용을 직접 종이에다 손으로 써가면서 외웠다.\n대회가 끝난 후에는 JS를 더 집중적으로 공부했고 jQuery의 존재를 알게 되었고 꽤 재미난 작업을 많이 했던 것 같다.</p>\n<h2>지방대회 입상</h2>\n<p>겨울방학 때는 <a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/#%E1%84%80%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%8B%E1%85%A6-%E1%84%8C%E1%85%A6%E1%84%83%E1%85%A2%E1%84%85%E1%85%A9-%E1%84%88%E1%85%A1%E1%84%8C%E1%85%A7%E1%86%BB%E1%84%83%E1%85%A1\" target=\"_blank\">1편</a>에서 언급 했던 <code>버블파이터</code>라는 게임에서 알게된 동갑내기 친구들과의 정모가 있었고, 이 친구들과 꽤 많이 친해져서 거의 주말마다 만났었다.\n필자를 포함하여 총 4명이었는데, 3명의 친구들이 전부 인천에 살아서 매주 인천으로 놀러갔었다. 그 당시에는 수인선이 없었기 때문에 <code>안산역 -&gt; 금정역 -&gt; 구리역 -&gt; 부평역</code> 코스로 인천을 가야했다. <s>정말 힘들었다</s>\n그렇게 힘들게 인천에 갔는데 어이없게도 <strong>전부 고3이라는 이유로 그냥 도서관가서 각자 공부했다.</strong>\n도서관이 마감될 때 쯤에 나와서 야식도 먹고 때로는 조금 일찍나와서 카페에서 수다도 떨고, 가끔 인천대공원에서 자전거도 타고, 혹은 게임을 했다.\n생각보다 재밌었다.</p>\n<p>그런데 방학이 끝날 때 즈음 충반고를 다녀왔고, 다녀오자마자 바로 개학했다.\n그래서 정말 여기에 모든걸 걸자는 생각으로 기숙사도 없는 학교에서 혼자 기숙을 했다. <s>정확히는 선생님의 강요가 반 정도 있었다</s></p>\n<img src=\"https://user-images.githubusercontent.com/18749057/99905657-84c50680-2d15-11eb-8156-d6b90ba06aae.JPG\" alt=\"기능반 실\" width=\"400\">\n<p>내가 지내던 기능방 동아리 실은 대충 위에서 보는 것 처럼 신발을 벗고 들어가는 실내였고,\n조리기구 + 냉장고가 있어서 동아리실에서 밥을 해먹기도 했고, 소파를 이어 붙인 간이침대(?)도 있었다.</p>\n<p>어쨌든 선생님이 조금 머리를 굴리더니 자기가 이불/베게/전기장판을 구해다줄테니 집에 가지 말고 학교에서 숙식을 해결하라고 하셨다.\n대충 이 때의 스케쥴을 나열해보자면</p>\n<ul>\n<li>주중에는 동아리 실에서 혼자 기숙하며 대회 문제를 풀었다.</li>\n<li>선생님의 지시로 금요일 밤에 충반고에 가서 일요일 저녁에 집으로 돌아간다.</li>\n<li>일요일 저녁에 일주일치의 짐을 다시 싸고, 월요일이 되면 학교로 간다.</li>\n</ul>\n<p>위의 내용을 한 달 동안 반복했다.</p>\n<p>주말에는 그래도 모두 똑같은 목표를 가지고 공부하는 사람들과 함께 있다보니 괜찮았는데 주중에는 혼자서 쓸쓸하게 공부해야 해서 뭐랄까 정말 너무 외로웠다.</p>\n<p>한 달 동안, 아직 봄이 되기 직전인 겨울에, 나홀로 학교에서 밤을 보내야하는 기분을 알겠는가?\n새벽 1시쯤 되면 소름이 돋을 정도로 무서웠다. 아무 빛도 들어오지 않았고 화장실이 가고 싶어서 복도에만 나가도 오금이 저려왔다.</p>\n<p>제일 힘들었던건, 학교에서 샤워실 같은게 있는 것도 아니었고, 심지어 따듯한 물도 나오지 않았다.</p>\n<p><img src=\"https://m.leadplan.co.kr/web/product/extra/big/201710/1819_shop1_854911.jpg\" alt=\"대형 플라스틱 통\"></p>\n<p>그래서 이런 대형플라스틱통에 찬물을 받은 다음에 선생님이 구해다주신 전기막대기 같은걸 물에 넣어놓고 콘센트를 꽂으면 물이 끓었다.\n그리고 플라스틱 바가지로 물을 퍼다 씻었다.</p>\n<p>한 번은 저녁에 씻을라고 받아놓은 물에 누가 빗자루를 투척해놓고 가서 무척 당황스러웠던 기억도 있다.</p>\n<p>어쨌든 이런 눈물겨운 시간을 보내면서 공부했고, 대망의 지방대회가 열렸다.\n나는 전국대회 문제를 기준으로 연습했기 때문에 지방대회 문제는 크게 어렵지 않았다.\n다만 심사위원이 채점기준에 없는 것들을 채점해서잠시 말다툼이 있었고 실격될 뻔했지만, 우여곡절 끝에 금메달을 받았다.</p>\n<img width=\"1008\" alt=\"스크린샷 2020-11-22 오후 11 13 59\" src=\"https://user-images.githubusercontent.com/18749057/99906102-6d3b4d00-2d18-11eb-80b6-871f27f7c6ea.png\">\n<p>사실 1등까진 생각하지 못했는데, 19년 인생을 살아오면서 제일 짜릿했던 순간이었다.</p>\n<h2>학교 공부</h2>\n<p>지방대회가 끝난 다음에 바로 중간고사가 있었지만, 선생님이 중간고사는 건너 뛰고 기말고사에서 한 번에 퉁치자고 하셨다.\n이게 무슨 의미냐면,\n고등학교의 내신은 1학년 20%, 2학년 30%, 3학년 50%인데 3학년 내신은 1학기만 반영된다.\n그런데 나는 3학년 1학기 중간고사를 건너 뛰고, 기말고사로만 1학기 내신이 결정되는 것이다.\n즉, 2년 동안 봤던 8번의 시험이 기말고사 시험 한 번과 똑같은 비중을 갖게 된 것이다. <strong>인생은 모 아니면 도인 걸까..?</strong></p>\n<p>그래서 나는 기말고사가 끝나기 전 까지 대회를 잠시 손절했다.</p>\n<p>그런데 중간고사가 끝나자 마자 기능반 신입생을 모집했고, 1 ~ 3학년 전체를 합하면 대략 8명의 인원이 기능반에서 함께 생활했다.\n후배들과 꽤 즐겁게 생활했는데 이 때의 기억이 즐거운 추억으로 남아서 삶의 활력이 되고 있다고 생각한다.</p>\n<p>어쨌든 약 3개월동안 학교 생활을 온전히 즐겼고, 기말고사도 잘 봐서 최종 평균 내신은 <code>1.5등급</code>으로 마무리할 수 있었다.</p>\n<p>그렇게 기말고사가 마지막날 짐을 대량으로 싸서 학교에 갔다. 기말고사가 끝나자마자 다시 선생님이 날 차에 태우고 충반고로 보내셨다.\n<strong>그리고 전국대회가 끝나기 전 까지 집에 돌아갈 수 없었다.</strong></p>\n<h2>전국대회 준비</h2>\n<p>앞서 언급한 것 처럼 기말고사가 끝나자마자 다시 충반고에 왔다.\n이번에는 전국대회가 끝나기 전까지 아예 이곳에서 죽치고 생활해야 했다.\n같이 대회를 준비하는 친구들이 있었기 때문에 공부도 많이 했고, 놀기도 많이 놀았다.</p>\n<p>사실 지방대회에 준비했던 자료가 남아있질 않아서 제대로 소개를 못했는데, 이번에는 어느정도 소개할 수 있을 것 같다.</p>\n<h3>디자인</h3>\n<p>개발이야 그렇다치고, 디자인은 정말 무척 힘들었다.\n제일 못한 디자인을 보여주면서 변천사를 나열해보고 싶은데 전국대회를 준비하기 이전에 만들었던 자료가 다 소실된 상태이다.</p>\n<h4>도서관</h4>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899454-c9887780-2cec-11eb-96ee-6459fb84fd2e.png\" alt=\"도서관1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899458-cd1bfe80-2cec-11eb-9830-acb1065f6779.png\" alt=\"도서관2\"></p>\n<p>2011년도 지방대회의 주제는 <code>도서관</code>이었다.\n전국대회를 준비할 때 디자인 했던건데 지금보니까 정말 촌스럽다.\n사실 이 당시의 디자인들은 대부분 촌스러웠다.</p>\n<h4>성곡마을</h4>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899431-b5447a80-2cec-11eb-9c2c-1315310405be.png\" alt=\"성곡마을1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899445-becde280-2cec-11eb-90ec-2d790c4ae59c.png\" alt=\"성곡마을2\"></p>\n<p>2011년도 전국대회의 주제는 <code>정보화마을</code> 이었는데, 쇼핑몰 + 달력 기능이 있던걸로 기억한다.\n이 디자인은 나름의 고심 끝에 로고를 이용했었는데 생각보다 많은 사람들에게 칭찬을 들었던 기억이 난다.\n내 머리에서 나온 것 치곤 괜찮은 아이디어였던 것 같다.</p>\n<h4>가구</h4>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899532-6a773280-2ced-11eb-8651-7301797a4a0a.png\" alt=\"가구1-1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899533-6d722300-2ced-11eb-988b-3724d8c316bb.png\" alt=\"가구1-2\"></p>\n<p>2012년도 전국대회의 주제는 \"가구\"였다. 문제의 주제는 대회 2주전에 공개되기 때문에 부랴부랴 디자인을 했었는데, 첫 번째로 만든 디자인은 정말.. 별로였다.\n별로라고 밖에 설명할 길이 없네.. 허허</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899477-ef158100-2cec-11eb-902f-1b0d08fd5aa1.png\" alt=\"가구2-1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/99899480-f2a90800-2cec-11eb-9b90-72c17b8fd815.png\" alt=\"가구2-2\"></p>\n<p>두 번째로 만든 디자인은, 첫 번째 디자인에서 색감과 레이아웃을 변경했다.</p>\n<p>내가 디자인을 무척 잘했던게 아니기 때문에 디자인에 대한 소개는 여기까지만!</p>\n<h3>플래시</h3>\n<p>이제는 고대 유물이 되어버린 플래시이다.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/b3hBODVJmYI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n<p>메인페이지에 삽입되는 플래시 애니메이션이다. 재생/정지/페이징 등의 기능이 있다.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ti37YswHIus\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n<p>이건 플래시로 만든 메뉴인데, DB와 연동해야 해서 XML로 메뉴의 내용을 관리해야 했다.\n이 때는 별 생각 없이 무조건 <code>/common/xml/menu.php</code>에 있는 것을 가져오도록 만들었는데 덕분에 복구해서 본다고 애좀 먹었다.. <s>반성해라 과거의 나</s></p>\n<div class=\"language-xml line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"xml\" data-title=\"xml\"><pre><code><span class=\"line\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"euc-kr\"?&gt;</span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>menu</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>m</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MAIN-MENU 01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 02<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 03<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 04<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>m</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>m</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MAIN-MENU 02<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 02<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 03<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 04<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>m</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>m</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MAIN-MENU 03<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 01<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 02<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 03<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUB-MENU 04<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">link</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>m</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>menu</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>심지어 인코딩이 무조건 <code>euc-kr</code>로 되어 있어서 메뉴를 한글로 만들면 전부 깨져서 나온다.\n정말 2012년도에나 출력 가능한 플래시랄까..</p>\n<p>참고로 플래시는 올해를 기점으로 크롬에서 조차 지원을 하지 않는다고 한다. <s>잘가라 고대의 유물이여</s></p>\n<h3>유물 복원</h3>\n<p>메뉴와 메인페이지, 배너 등의 플래시를 포함한 형태는 다음과 같다.</p>\n<div style=\"padding-top: 56.25%; position: relative;\">\n    <iframe style=\"position: absolute; top: 0;\" width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/TGLGOetql7Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n</div>\n<p>위의 동영상에서 나온 홈페이지에 대한 소스코드는 <a href=\"https://github.com/JunilHwang/webskills-2012-national-furniture\" target=\"_blank\" rel=\"noopener noreferrer\">여기서</a> 확인할 수 있다.\n<s>2012년도에 만든 코드라서 빈틈 투성이다.</s></p>\n<p>이번에 글을 작성하면서 홈페이지를 띄우려고 MySQL을 Sqlite 마이그레이션하고, DB관련된 부분을 PDO로 고치고, swf 파일 밖에 없는 플래시 파일을 띄우려고 삽질을 많이 했다.\n무엇보다 인코딩이 전부 euc-kr로 되어 있어서 파일을 오픈하면 한글이 전부 깨져나왔다. 이걸 전부 utf-8로 고치느라 또 애먹었다..</p>\n<h3>약간의 썰</h3>\n<p>전국대회를 준비하면서 일어났던 재미난(?) 이야기들을 소개해볼까 한다.</p>\n<h4>(0) 하루 일과</h4>\n<p>학교가 시골(?)에 있었기 때문에 모든 학생이 기숙사 생활을 했다.\n기숙사실 바로 옆이 훈련실이었다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/99908516-77fcde80-2d26-11eb-9e9c-1575c6c3b363.jpg\" alt=\"훈련실\" width=\"400\">\n<ul>\n<li>7시 기상</li>\n<li>8시 아침식사\n<ul>\n<li>아침은 도시락을 먹었는데, 선택지가 별로 없었다.</li>\n<li>어느 시점에 참치마요를 보면 구역질이 나올 정도로 참치마요를 많이 먹었던 것 같다.</li>\n</ul>\n</li>\n<li>식사 후 바로 훈련</li>\n<li>점심 식사</li>\n<li>점심 식사 후 저녁 먹기 전까지 훈련</li>\n<li>저녁 식사</li>\n<li>저녁 식사 후 자기 전까지 훈련</li>\n</ul>\n<p>점심/저녁은 학교에서 10분 정도 걸어서 내려가면 있는 식당에서 먹었는데 꽤 맛있었다.\n앉아만 있으면 병난다면서 주말에는 가끔 운동회 같은 것도 했다.</p>\n<h4>(1) 미친짓</h4>\n<p>필자가 풀이했던 전국대회 문제는 <a href=\"https://meister.hrdkorea.or.kr/common/filedown.do?filePath=/uploads/taskmng/&amp;fileName=%EC%B1%84%EC%A0%90%EA%B8%B0%EC%A4%80.pdf&amp;fileRename=201209241036381348450598192B.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>서 볼 수 있다.</p>\n<img width=\"656\" alt=\"스크린샷 2020-11-22 오후 11 36 41\" src=\"https://user-images.githubusercontent.com/18749057/99906659-b214b300-2d1b-11eb-9bb5-3124c559c8f7.png\">\n<p>이렇게 총 18시간 동안 풀이 해야 하는 문제인데, 같이 준비했던 친구들과 <code>우리 이거 하루만에 다 풀어볼까?</code>라는 이야기를 꺼냈고, 18시간 짜리를 대략 <strong>10시간</strong> 만에 풀이했다. <strong>다시는 이런 미친짓을 하지 말자고</strong> 서로 다짐했다. 그 날 전부 녹초가 되어 기절했다.</p>\n<h4>(2) 너네가 만든 게임이니?</h4>\n<p>한 번은 카트라이더에 빠져서 친구들과 신나게 게임을 하고 있는데 뒤에서 어떤 분이 <code>너네가 만든 게임이니?</code>라고 물어보셨다.\n뒤를 돌아보니 <strong>교장선생님</strong>이었다.</p>\n<p>남에 학교 학생이 전지훈련을 와서 게임을 하고 있는 모습을 보면 어떤 생각이 들까?</p>\n<p>그 이후로는 게임은 쳐다도 보질 않았다.</p>\n<h4>(3) 술</h4>\n<p>기숙사가 있는 학교에는 보통 사감 선생님이 당직을 서는데, 가끔 사감 선생님이 없는 날도 있었다.</p>\n<p>한 친구가 <strong>우리 술먹을까?</strong> 라고 해서 어떤 바람이 불었는지 <strong>가자!!</strong> 라고 외치며 약 10명의 학생들이 기숙사 담벼락을 넘었다.\n무리 중에 어느 정도 <s>삭은</s>얼굴에 무게감이 있는 1학년 친구가 편의점을 뚫었고, 그렇게 소주/맥주/콜라를 사들고 다시 기숙사로 갔다.\n기숙사 담을 넘으면서 몇 병 술을 깨먹으며 질책을 하고, 우여곡절 끝에 술을 사들고 기숙사로 들어갈 수 있었다.</p>\n<p>다른 학교에 전지훈련가서 술파티를 여는 기분이란.. 묘하게 붕 뜬 느낌이 들었다.</p>\n<p>너무 즐거웠던 나머지 화장실에서 피자파티(?)를 벌렸고, 다음 날은 난생 처음 겪어보는 숙취 때문에 아예 움직일 수 조차 없었다.</p>\n<h4>(4) 푹 자고와~</h4>\n<p>전국대회는 대구에서 열리는데, 대회 2주전에 우리는 미리 대구로 출발했다.\n고등학생 3명이서 좁디 좁은 모텔에 데스크톱을 풀어헤쳐놨더니 정말 미친듯이 좁았다.</p>\n<p>어쨌든 같이 대회를 준비하던 친구의 학교가 <code>대구관광고등학교</code>였는데, 약 2주 동안 해당 학교에서 훈련했다.\n그런데 아침 7시까지 학교에 가서 밤 12시까지 훈련하다가 숙소에 돌아오면 대략 1시 정도 됐었고, 이것저것 친구들과 문제 풀이에 대해 이야기하다 보면 2시 ~ 3시가 됐었다.</p>\n<p>그러면 또 6시 정도에 일어나서 부랴부랴 준비하고 또 학교로 출발해야 했는데,\n훈련을 마치고 숙소로 돌아갈 때 마다 해당 학교 선생님이 했던 말이 <code>푹 자고와~</code> 였다. <s>푹 자게 생겼냐고</s></p>\n<h2>전국대회</h2>\n<p>전국대회 경기장은 엑스코였는데, 넓기도 넓었지만 뭐랄까 답답한 느낌이 없어서 상당히 좋았다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/99907905-e6d83880-2d22-11eb-9d41-241c531d5b49.jpg\" alt=\"경기장 1\" width=\"400\">\n<img src=\"https://user-images.githubusercontent.com/18749057/99907928-ec358300-2d22-11eb-9a54-cce0197a65e8.jpg\" alt=\"경기장 2\" width=\"400\">\n<img src=\"https://user-images.githubusercontent.com/18749057/99907929-ed66b000-2d22-11eb-9076-c3f8887f6f6a.jpg\" alt=\"경기장 3\" width=\"400\">\n<img src=\"https://user-images.githubusercontent.com/18749057/99907932-ee97dd00-2d22-11eb-9369-25a3fc558a11.jpg\" alt=\"경기장 4\" width=\"400\">\n<p>문제 난이도는 예상했던 것 보다 더 쉬웠기 때문에 큰 무리없이 풀이할 수 있었다. 다만 내가 해석을 잘못해서 틀린 부분이 조금 있었다.</p>\n<p>함께 대회를 준비한 친구가 1등을 했고, 나는 4등(동메달)을 했다.\n<strong>1등이 금메달</strong>이고, <strong>2 ~ 3등이 은메달</strong>인데 <code>내가 3등과 0.01점 차이</code>였다.</p>\n<p>전국대회는 다음과 같이 상금이 조금 쎈 편인데,</p>\n<ul>\n<li>금메달: 1200만원</li>\n<li>은메달: 800만원</li>\n<li>동메달: 400만원</li>\n</ul>\n<p>0.01점 때문에.. 정말 사소한 실수 하나 때문에 메달이 바뀐 것이다. 1등을 했던 친구와도 2점 정도의 근소한 차이였는데, 이는 약 1 ~ 2개 정도의 문제 차이였다.\n그래서 한 동안 아쉬워서 잠을 제대로 못잤다. 열심히 했던 만큼 후회와 아쉬움이 남을 수 밖에 없는걸까?</p>\n<p>어쨋든 대회는 끝났고, 모든 에너지를 다 쏟아부었던 우리는 밤을 즐겼다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/99907930-edff4680-2d22-11eb-81d1-af2445cad629.jpg\" alt=\"기절\" width=\"400\">\n<img src=\"https://user-images.githubusercontent.com/18749057/99908054-98776980-2d23-11eb-8f5f-4fe8462d111b.jpg\" alt=\"추억\" height=\"300\">\n<p>같이 대회를 준비했던 친구들과 밤새도록 시내를 떠돌아다니면서 이야기도 하고, 맛있는 것도 먹고, 그리고 미래를 다짐했다.</p>\n<ul>\n<li>한 친구는 국가대표가 된 후에 2013년도에 열리는 세계대회에서 MVP(세계신기록)를 목표로 했다.\n<ul>\n<li>그 당시에는 그저 응원한다는 말로 대충 넘겼지만 이 친구가 실제로 MVP라는 칭호를 얻었다.</li>\n<li>그래서 같은 나이지만 매 순간 존경하고 있는 친구이다.</li>\n</ul>\n</li>\n<li>2학년 이었던 한 후배는 다음 대회에서의 입상을 목표로 했다.\n<ul>\n<li>실제로 그 다음 해(2013년도)에 금메달을 받았다.</li>\n<li>이어서 국가대표가 되었으며 2015년도 세계대회에서 입상했다.</li>\n</ul>\n</li>\n</ul>\n<p>사실 나는 뚜렷한 목표가 없었다. 전국대회가 끝나면 무엇을 어떻게 준비해야할지 막막했다. 딱히 대학을 간절하게 원하지도 않았고, 그렇다고 취업을 간절하게 원하지도 않았다.\n그래서 그냥 흐지부지 말하고 끝났는데, 그런 목표가 없었다는 것이 아쉬웠다.</p>\n<p>그렇게 하룻 밤이 지나고, 숙소로 돌아와서 오랜만에 혼자 남겨졌다. 항상 같이 하던 사람들이 없으니까 정말 미친듯이 외로움이 몰려왔다.\n타지에서, 선생님도 친구도 없는 곳에서, 홀로 숙소에 남겨졌다.</p>\n<p>그리고 지난 시간들을 되새겼다. 내가 이렇게 열심히 무언가에 몰입했던 순간이 있었을까?</p>\n<p>짧았지만 강렬했던 순간들이 지나갔고</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/99907933-ef307380-2d22-11eb-9058-638754596cf8.jpg\" alt=\"입상\" height=\"300\">\n<p>대회가 마무리 되는 날, 이렇게 메달 하나를 손에 움켜쥐고 집으로 돌아갔다.</p>\n",
      "image": "https://user-images.githubusercontent.com/18749057/98538828-b4641f80-22ce-11eb-894d-660bd494ae5d.png",
      "date_published": "2020-11-23T01:18:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "유년시절 이야기 (2)",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/",
      "summary": "본격적으로 개발을 시작하게 되는 이야기입니다.",
      "content_html": "\n<p>이제 부터가 본격적으로 개발에 입문하게 된 이야기이다.</p>\n<ul>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\">Part-01</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\">Part-02</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\">Part-03</a></li>\n</ul>\n<h2>기능반, 그리고 첫 대회</h2>\n<p>그렇게 1학년이 끝날 때 쯤, 앞서 언급한 <code>기능반</code>을 활동을 선생님이 권해주셨다. <s>그럴 꺼면 그냥 처음부터 하게 해주던가</s>\n내가 1학년 1학기 초에 기능반을 하고 싶어서 신청 했을 때는 <code>게임 개발 기능반</code>만 있었는데, 약 2학기 말에 <code>웹 디자인 기능반</code>이 생겼고 여기에 가입을 권해주신 것이었다.</p>\n<p>나는 가입과 동시에 바로 다음 해 4월에 열리는 지방대회를 준비했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">기능경기대회</p>\n<ul>\n<li>정식 명칭은 <strong>기능올림픽</strong>이다.</li>\n<li>기능경기대회는 <strong>특성화고등학교의 수능이며 축제</strong>라고 할 수 있다.</li>\n<li><strong>지방대회 - 전국대회 - 국가대표 선발전 - 세계대회</strong> 등의 과정이 있다.</li>\n<li><strong>지방대회</strong>는 4월에 개최된다. 그런데 올해는 <strong>코로나 때문에 6월</strong>에 개최되었다.</li>\n<li><strong>전국대회</strong>는 9월/10월 중에 개최된다. 올해는 <strong>9월 14일 부터 7일간</strong> 대회가 진행되었다.</li>\n<li><strong>세계대회</strong>는 2년에 한 번씩 개최된다. 세계대회 입상 혜택은 다음과 같다. <u>올림픽 입상 혜택과 동일하다고 보면 된다.</u>\n<ul>\n<li>병역대체복무</li>\n<li>신축 아파트 분양권 획득</li>\n<li>대기업 연봉급 상금</li>\n<li>대학 진학시 학비 전액 지원</li>\n<li>연금</li>\n</ul>\n</li>\n<li>자세한 내용은 <a href=\"https://meister.hrdkorea.or.kr/main/main.do\" target=\"_blank\" rel=\"noopener noreferrer\">마이스터넷</a> 참고\n<ul>\n<li><a href=\"https://meister.hrdkorea.or.kr/sub/3/2/1/20160512110924569100_view.do\" target=\"_blank\" rel=\"noopener noreferrer\">지방대회</a></li>\n<li><a href=\"https://meister.hrdkorea.or.kr/sub/3/3/1/20160512111525375100_view.do\" target=\"_blank\" rel=\"noopener noreferrer\">전국대회</a></li>\n<li><a href=\"https://meister.hrdkorea.or.kr/sub/3/4/1/20160512111859974100_view.do\" target=\"_blank\" rel=\"noopener noreferrer\">세계대회</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>사실 우리 학교에서 <code>웹 디자인</code> 종목에서의 입상은 고사하고 출전해본 경험 자체가 전무했다.\n어떻게 시작해야 할지 몰랐던 선생님과 나를 포함한 기능반 친구들은 일단 인터넷 강의부터 차근 차근 들었다.\n이름은 <code>웹 디자인</code> 이지만, 반 이상이 개발과 관련된 내용이었다.</p>\n<ul>\n<li><code>A-Module</code> 사이트 주제에 적합한 기획서 만들기 - <strong>3시간</strong></li>\n<li><code>B-Module</code> 기획서를 기반으로 포토샵으로 디자인 하기 - <strong>3시간</strong>\n<ul>\n<li>메인 페이지 1개, 서브 페이지 3~4개</li>\n</ul>\n</li>\n<li><code>C-Module</code> 웹 사이트에서 사용 될 플래시 애니메이션 만들기 - <strong>3시간</strong>\n<ul>\n<li>메인 페이지에서 사용될 애니메이션 1개</li>\n<li>서브 페이지에서 사용될 애니메이션 1개</li>\n</ul>\n</li>\n<li><code>D-Module</code> 기획서/디자인/플래시를 기반으로 사이트 기본 틀 구축하기 <strong>4시간</strong>\n<ul>\n<li>퍼블리싱 작업</li>\n<li>플래시로 메뉴 구현</li>\n<li>PHP + phpmyadmin + MySQL 로 기본 사이트 구축</li>\n<li>DB 설계</li>\n</ul>\n</li>\n<li><code>E-Module</code> 사이트 완성하기 <strong>5시간</strong>\n<ul>\n<li>로그인/회원가입/게시판</li>\n<li>검색</li>\n<li>달력</li>\n<li>쇼핑몰 기능(상품 구매 / 상품 예약 / 상품 예약 확인 / 예약 취소)</li>\n<li>기타 등등</li>\n</ul>\n</li>\n</ul>\n<p>즉, 기획/디자인/플래시(애니메이션/퍼블리싱/DB설계/개발 등 모든 일련의 과정을 단 18시간 안에 수행해야 하는 것이다. <strong>그것도 인터넷 없이 하드코딩으로!</strong></p>\n<p><code>눈을 감아보세요. 캄캄하죠? 그게 당신의 미래입니다.</code></p>\n<p>디자인 공부도, 개발 공부도 정말 처음 해보는 거라서 어디서 부터 어떻게 시작해야할지 막막했다.\n방학 직전까지는 어버버 하면서 시간을 때우다가 겨울방학 시작 직후에 학교에서 광주에 있는 호남대학교로 집체교육을 보내줬다.</p>\n<p>이 집체교육에서 기능반에서 공부하는 다양한 학교의 사람들을 만났는데 그 중에 <code>양영디지털고등학교</code>에서 온 선배님과 같은 방을 썼다.\n이 후에도 집체교육을 갈 때 마다 양영디지털고등학교 사람들과 마주쳤는데, 나랑 동갑이던 친구가 졸업할 때 즈음 op.gg라는 사이트를 만들었다고 들었다. <s>싹이 남다른 사람이었다</s></p>\n<p>각설하고, 다양한 학교의 사람들이 모여 특강을 듣는 형태였는데\n이 때 특강을 해주신 강사분이 2009년도에 전국대회에서 2등을 했고, 2008년도 입상자들과 2009년도 입상자들과 국가대표 선발전을 거쳐서 선별된 분이었다.\n2011년 런던 대회에서 2등을 했고, 지금은 야놀자에서 일하고 계신걸로 알고 있다. 이 분이 아니였으면 지금의 내가 없었을 것이다.</p>\n<p>강의 내용은 구체적으로 기억나지 않았지만 강의를 해주시는 분의 손이 매우 빨랐고, 무슨 설명을 하는지 하나도 모르겠지만 그래도 놓치면 큰일 난다는 느낌이 들었다.\n무엇보다 강의에 참여한 모든 학새들에게 국가대표 선수가 직접 작성한 소스코드 제공해주었기 때문에 그 자체로 공부할 때 정말 큰 도움이 되었다.\n말 그대로 기획서, 디자인, 플래시는 물론 js와 php, mysql 까지 모든 자료를 받았다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/98433517-0c522900-210b-11eb-941f-d1075ce66a43.png\" alt=\"독도 수호대\"><br>\n* 2010년에 봤던 웹 사이트의 디자인 파일 (index.psd)</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/98433595-d8c3ce80-210b-11eb-845d-c1696104d084.png\" alt=\"스킬스 퍼니쳐\"><br>\n*  2012년에 내가 전국대회를 준비하면서 만든 디자인. <strong>이러한 디자인을 1시간 만에 완성해야 한다.</strong></p>\n<p>문제는 기획서나 디자인은 어떻게든 따라 그릴 수 있었으나, 코드는 그렇지 못했다.\n어림 잡아도 책 한권 분량의 코드였기 때문에(100줄이 넘는 코드가 약 50개의 파일에 뿔뿔이 흩어져 있었다)\n지금 생각해보면 별거 아니지만 그 당시에는 정말 이걸 어떻게 공부해야하나 싶었다.</p>\n<p>이게 약 10년전에 내가 처음으로 프로그래밍을 공부하면서 봤던 코드이다.</p>\n<div class=\"language-php line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"php\" data-title=\"php\"><pre><code><span class=\"line\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?</span></span>\n<span class=\"line\">\t<span class=\"token comment\">//세션 시작</span></span>\n<span class=\"line\">\t<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//엔코딩</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'^2'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'$4'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//디코딩</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'$4'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'^2'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//주소값 저장</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$var_array</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'PATH_INFO'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$page_mode</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$midx</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$sidx</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$action</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$idx</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$parent</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$page_num</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$search_type</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$search_key</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">NULL</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$search_date</span> <span class=\"token operator\">=</span> \t<span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$search_date2</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var_array</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token variable\">$current</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$page_mode</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$midx</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$sidx</span> <span class=\"token operator\">?</span> <span class=\"token string single-quoted-string\">'sub'</span> <span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'main'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token variable\">$get_page</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"/index.php/<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$page_mode</span><span class=\"token punctuation\">}</span></span>/<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$midx</span><span class=\"token punctuation\">}</span></span>/<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$sidx</span><span class=\"token punctuation\">}</span></span>/\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//메시지 출력</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;script type=\\\"text/javascript\\\"&gt;alert('<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$msg</span><span class=\"token punctuation\">}</span></span>');&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span>\t\t</span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//페이지 이동</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">move</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;script type=\"text/javascript\"&gt;'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$url</span> <span class=\"token operator\">?</span> <span class=\"token string double-quoted-string\">\"document.location.replace('<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">}</span></span>');\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'history.back();'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;/script&gt;'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//페이지 액세스</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">access</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$bool</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$msg</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'해당 페이지를 액세스 할 수 없습니다.'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//사용권한 검사</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">lv_chk</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lv</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$cur_lv</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'lv'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'lv'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lv</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$msg</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'로그인 후 이용하실 수 있습니다.'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'/index.php/page/member/login/'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$msg</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'사이트 관리자만 접근 할 수 있습니다.'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t\t<span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cur_lv</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$lv</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$msg</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//이메일 부호화</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">hex</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$strlen</span> <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$strlen</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$hex</span> <span class=\"token operator\">.=</span> <span class=\"token string single-quoted-string\">'&amp;#x'</span><span class=\"token operator\">.</span><span class=\"token function\">bin2hex</span><span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">';'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$hex</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//html 엔티티</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">safe_html</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span><span class=\"token operator\">=&gt;</span><span class=\"token variable\">$val</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$arr</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//글자 수 제한</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">cut_str</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$len</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">html_entity_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$strlen</span> <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</span>\n<span class=\"line\">\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$strlen</span> <span class=\"token operator\">&gt;</span> <span class=\"token variable\">$len</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$len</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'..'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//하이라이팅</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">hit</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$keyword</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$keyword</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"&lt;span class=\\\"search_txt\\\"&gt;<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$keyword</span><span class=\"token punctuation\">}</span></span>&lt;/span&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//파일 다운로드</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">down</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$file_name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$file_name</span> <span class=\"token operator\">=</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"/page/down.php?dir=<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">}</span></span>&amp;amp;file=<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">}</span></span>&amp;amp;file_name=<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$file_name</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//컬럼값 추출</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">get_column</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$cancel</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$cancel</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$cancel</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span><span class=\"token operator\">=&gt;</span><span class=\"token variable\">$val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$cancel</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$entity_val</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysql_real_escape_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$column</span> <span class=\"token operator\">.=</span> <span class=\"token string double-quoted-string\">\", <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">}</span></span>='<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$val</span><span class=\"token punctuation\">}</span></span>'\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$column</span> <span class=\"token operator\">=</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$column</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$column</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//쿼리</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$table</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$column</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">global</span> <span class=\"token variable\">$connect</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t</span>\n<span class=\"line\">\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string single-quoted-string\">'insert'</span> <span class=\"token punctuation\">:</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"insert into <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">}</span></span> set \"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string single-quoted-string\">'update'</span> <span class=\"token punctuation\">:</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"update <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">}</span></span> set \"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string single-quoted-string\">'delete'</span> <span class=\"token punctuation\">:</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"delete from <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">}</span></span> \"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$column</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">' where '</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span>\t\t\t\t</span>\n<span class=\"line\">\t\t<span class=\"token variable\">$query</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$column</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t</span>\n<span class=\"line\">\t\t<span class=\"token function\">mysql_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$connect</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token operator\">.</span><span class=\"token function\">mysql_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//파일 업로드</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">file_upload</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$ex_name</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_pop</span><span class=\"token punctuation\">(</span><span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$type</span> <span class=\"token operator\">==</span> <span class=\"token string single-quoted-string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$ex_name_chk</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'gif'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ex_name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ex_name_chk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'이미지 파일만 업로드 할 수 있습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$ex_name_chk</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'htm'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'php'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'asp'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'jsp'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'exe'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ex_name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ex_name_chk</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'업로드가 제한된 확장자 파일입니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t\t\t</span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$date</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'ymdhis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$rand</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$upload_name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$date</span><span class=\"token punctuation\">}</span></span>_<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>_<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$rand</span><span class=\"token punctuation\">}</span></span>.<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$ex_name</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t</span>\n<span class=\"line\">\t\t\t<span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'DOCUMENT_ROOT'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>/data/<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">}</span></span>/<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$upload_name</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$upload_name</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t</span>\n<span class=\"line\">\t<span class=\"token comment\">//페이지 나누기</span></span>\n<span class=\"line\">\t<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cur_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$line</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$total</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$add_class</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$total</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&amp;&amp;'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$first_page</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$last_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$total</span><span class=\"token operator\">/</span><span class=\"token variable\">$line</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$prev_page</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$cur_page</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$next_page</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$cur_page</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t</span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$paginate</span>  <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"&lt;p class=\\\"paginate <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$add_class</span><span class=\"token punctuation\">}</span></span>\\\"&gt;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$paginate</span> <span class=\"token operator\">.=</span> <span class=\"token variable\">$cur_page</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$first_page</span> <span class=\"token operator\">?</span> <span class=\"token string single-quoted-string\">'&lt;span title=\"처음\"&gt;처음&lt;/span&gt;'</span> <span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"&lt;a href=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$first_page</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\\\" title=\\\"처음\\\"&gt;처음&lt;/a&gt;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$paginate</span> <span class=\"token operator\">.=</span> <span class=\"token variable\">$cur_page</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$first_page</span> <span class=\"token operator\">?</span> <span class=\"token string single-quoted-string\">'&lt;span title=\"이전\"&gt;이전&lt;/span&gt;'</span> <span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"&lt;a href=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$prev_page</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\\\" title=\\\"이전\\\"&gt;이전&lt;/a&gt;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$last_page</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">\t\t\t\t<span class=\"token variable\">$paginate</span> <span class=\"token operator\">.=</span> <span class=\"token variable\">$cur_page</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">?</span> <span class=\"token string double-quoted-string\">\"&lt;strong title=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">}</span></span>\\\"&gt;<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">}</span></span>&lt;/strong&gt;\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"&lt;a href=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\\\" title=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">}</span></span>\\\"&gt;<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">}</span></span>&lt;/a&gt;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$paginate</span> <span class=\"token operator\">.=</span> <span class=\"token variable\">$cur_page</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$last_page</span> <span class=\"token operator\">?</span> <span class=\"token string single-quoted-string\">'&lt;span title=\"다음\"&gt;다음&lt;/span&gt;'</span> <span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"&lt;a href=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$next_page</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\\\" title=\\\"다음\\\"&gt;다음&lt;/a&gt;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$paginate</span> <span class=\"token operator\">.=</span> <span class=\"token variable\">$cur_page</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$last_page</span> <span class=\"token operator\">?</span> <span class=\"token string single-quoted-string\">'&lt;span title=\"맨뒤\"&gt;맨뒤&lt;/span&gt;'</span> <span class=\"token punctuation\">:</span> <span class=\"token string double-quoted-string\">\"&lt;a href=\\\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$last_page</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\\\" title=\\\"맨뒤\\\"&gt;맨뒤&lt;/a&gt;\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token variable\">$paginate</span> <span class=\"token operator\">.=</span> <span class=\"token string single-quoted-string\">'&lt;/p&gt;'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token variable\">$paginate</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token delimiter important\">?&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>lib.php</code>라는 파일의 내용인데, 이 코드들을 이해하지 못하면 다른 코드는 보나 마나했었다.\n그런데 이해를 할 수가 없었다. 이해를 하고 싶어도 도저희 저건 프로그래밍을 제대로 해본적도 없는 내 머리로 감당할 수 있는 양의 내용이 아니었다.</p>\n<p>사실 그냥 튜토리얼 수준의 php 코드부터 접했다면 좋아겠지만 내가 받은건 견고하게 짜여진 솔루션 코드였다.\n그리고 이 솔루션에는 clean url 이라는 기법이 적용된 상태였는데\n<code>/board/view.php?idx=1</code> 이러한 형태의 주소를\n<code>/board/view/1</code> 처럼 보일 수 있도록 작업해주는 것이었다.</p>\n<p>뿐만 아니라 메인페이지나 서브페이지를 조회하기 위해서는 DB 설계도 이해하고 있어야 했다.</p>\n<ul>\n<li>모든 페이지를 index.php에서 보여줘야한다.</li>\n<li>DB접속과 라이브러리를 포함한 모든 내용을 index.php에서 가져온다.</li>\n<li><code>/index.php</code>로 접근하면 메인페이지를 보여줘야 한다.</li>\n<li><code>/index.php/page/1/1</code>로 접근하면 DB에서 <code>메인메뉴 1</code>에 대한 <code>서브메뉴 1</code>의 페이지 정보를 가져와서 보여줘야 한다.</li>\n<li><code>/index.php/page/1</code>로 접근하면 DB에서 <code>메인메뉴 1</code>의 <code>첫 번째 서브메뉴</code>를 가져와서 보여준다.</li>\n<li>이 때 메뉴의 타입(컨텐츠, 검색, 게시판, 회원 및 기타 커스텀 페이지)에 따라 보여지는 내용이 달라진다.</li>\n<li>각각의 메뉴에는 접근 가능한 레벨이 존재한다. 회원 가입할 때에도 레벨이 존재한다.</li>\n<li>메뉴의 레벨이 회원의 레벨보다 높을 경우 접근할 수 없다.</li>\n<li><code>/index.php/page/member/join</code>은 DB에 접근하지 않고 바로 회원가입 페이지를 보여준다.</li>\n<li><code>/index.php/page/member/login</code>은 DB에 접근하지 않고 바로 로그인 페이지를 보여준다.</li>\n<li><code>/index.php/admin/6/1</code>로 접근하면 관리자 수준의 레벨을 가진게 아니라면 접근을 방지한다.\n<ul>\n<li>관리자일 경우고 해당 메뉴의 정보와 페이지를 조립하여 사용자에게 보여줘야 한다.</li>\n</ul>\n</li>\n</ul>\n<p>프레임워크를 사용한다면 무척 간단하지만, 프레임워크를 사용하지 않고 하드 코딩으로 위의 내용을 구현하려면 여간 복잡한게 아니였다.</p>\n<p>누군가가 Step by Step 형태로 교육을 해주었다면 좋았을텐데, 아쉽게도 프로그래밍을 제대로 아는 선배도 없었고, 선생님은 더더욱 없었다.\n모든 것을 처음부터 끝까지 혼자 공부해야했다. <s>이렇게 공부해야 하는 줄 알았다면 나는 인문계 고등학교를 갔을 것이다</s></p>\n<p>그래서 내가 할 수 있던 일은 거짓말을 보태지 않고 <strong>위의 코드(lib.php)를 그대로 외워버렸다.</strong>\n스페이스바, 따옴표, 여백, 인던트, 라인수 등 모든 내용을 그대로 외웠다.\n일단 코드를 제대로 치지 않을 경우 에러가 빵빵 터지는데, 나는 에러를 해석할 줄 몰랐기 때문에 있는 그대로 외워야했다.</p>\n<p>이 당시에는 구글 검색도 제대로 할 줄 몰랐으며(검색을 해도 네이버검색..), 나에게 프로그래밍을 가르쳐줄 선배나 선생님도 없었다.\n모든 것을 혼자 해야 했다. 그래서 절망했었고, 내가 할 수 있는 일은 그냥 코드를 외우는 방법 밖에 없었던 것이다.</p>\n<p>문제는 그렇게 애써가며 코드를 외웠는데 앞서 말했던 것 처럼 이 코드를 제대로 사용하는 방법을 몰랐다.\n무엇보다 대회가 있다는 것을 인식한게 12월이었고, 대회는 4월에 치루어졌다.</p>\n<p>4개월만에 기획(PPT), 디자인(포토샵,일러스트), 플래시, HTML/CSS, Javascript, PHP 등을 모두 공부해야 했는데\nPHP는 고사하고 HTML/CSS도 제대로 할 수 있는 수준이 아니었다.</p>\n<p>그래도 내 생에 그렇게 열심히 공부했던 순간이 있었을까 싶을 정도로 죽어라 공부했다. <s>사실 지금은 일상이지만</s></p>\n<p>대회 때문에 수학여행도 못갔고 <s>보내준다고 뭐 달라지냐고!</s> 방학도 주말도 반납하고 <s>왕복 3시간인데..</s> 맨날 학교에 갔으며 항상 밤 10시 정도에 학교에서 출발했고,\n대중교통을 이용하면서도 계속 코드를 봤다.</p>\n<p>그렇게 2011년 4월이 되었고, 성남시에 있는 <strong>양영디지털고등학교</strong>라는 곳에서 대회를 치루었다.\n대회장에서 처음으로 기계식 키보드의 존재를 알았고, 학교 컴퓨터의 사양이 그렇게 좋을 수 있다는 것도 처음 알았다.</p>\n<p>어쨌든 나는 똥손을 이용하여 기획서도 만들고, 디자인도 만들고, 플래시도 만들고,\n아 그 당시에는 메뉴도 플래시로 만들었다.\n웹에서 JS로 플래시에 메뉴 정보에 대한 변수를 넘겨주면, 플래시가 메뉴 정보를 읽어와서 메뉴로 보여주어야 했었다.\n그런데 이것도 이해를 못해서 그냥 통으로 외웠다.\n본의 아니게 액션스크립트 까지 공부해야 했다.. <s>빌어먹을</s></p>\n<p>사실 코드만 외운게 아니라 이것 저것 할게 많았지만.. 이젠 뭐 플래시를 제대로 아는 사람도 많이 없기 때문에 생략하겠다.</p>\n<p>어쨌든 우여곡절 끝에 플래시까지 어거지로 만들었는데 대회장에서 여태까지 죽어라 외운 코드의 내용이 기억나질 않았다.\n그런데 그렇게 외운 코드의 내용이 이제 머릿속에서 어느정도 이해가 되었는지 그냥 내 멋대로 코드를 작성했고\n내가 원하는 데이터를 DB에서 뽑아내어 출력하는 것 까지 해낸 것이다.</p>\n<p>입상은 하지 못했지만 그 과정이 정말 신기했다. 내가 한건 외운 것 밖에 없었는데, 나도 모르게 코드가 이해되는 현상이 벌어진 것이다.</p>\n<p>문제는 코드는 이해한다고 쳐도 Web이라는 개념에 대해 이해한게 아니었기 때문에 Request, Response, GET, POST 같은 용어가 낯설고 생소했으며 그 이후에는 정말 어떻게 해야 할지 도통 알 수가 없었다.\n이렇게 나의 첫 대회는 마무리 되었고, 그 뒤로는 정말 암울한 생활이 이어졌다.</p>\n<h2>방황</h2>\n<p>2011년에 4월까지 모든 에너지를 소모하며 달려갔는데 어쨌든 결과는 허탈했다.\n어느 정도 코드에 대한 이해도는 좋아졌으나 사실 공부할 여력이 생기질 않았다.\n기능대회라는 명목으로 동아리가 만들어져서 공부할 공간이 생기긴 했으나,\n선생님도 이 대회에 대해 자세히 아는게 아니었고, 프로그래밍을 잘 하는 선배가 있는 것도 아니었다.</p>\n<p>마땅한 인터넷 강의가 있는 상태도 아니었고, 그냥 뭐랄까 공부하기가 정말 무척 싫었다.\n어쩌면 핑계였을지도 모른다. 그냥 내가 하기 싫은 이유를 주변 상황 때문이라고 탓하는 핑계.</p>\n<p>1학년 때는 야자라도 했으나 2학년 때는 기능반을 핑계로 수업이 끝나면 기능반실에서 노닥거렸다.\n수행평가가 있으면 수행평가를 했고, 시험기간이면 시험공부를 하고, 그게 아니면 그냥 놀았다.\n그 당시에 워크래프트의 랜덤디펜스가 유행이었는데</p>\n<p>나는 원랜디(원피스 랜덤 디펜스)를 굉장히 열심히 했다.</p>\n<p><img src=\"https://mblogthumb-phinf.pstatic.net/MjAxOTAzMDVfNzUg/MDAxNTUxNzU5NzQ4ODU0.TrFI2pZpBND2c39FKQC_HynrKpGdTCJyeo5AoOQyyvEg.3BPXLEcmfn_DJQVPG99wyNC2bSmNMEkRaJC6BD12EMMg.PNG.crazma/희귀보상_2222.png?type=w800\" alt=\"원랜디\"></p>\n<p>이 외에도 드라마를 보거나, 애니메이션을 보거나, 혹은 뭐 간간히 게임도 하면서 시간을 보냈다.\n정말 허송세월을 보낸 것이다.</p>\n<p>지난 편에 언급했던 버블파이터라는 게임도 열심히 했다.\n사실 학교에서 성적이 나쁜 편도 아니었고(졸업할 때 최종 내신이 1.5등급 이었다)\n부모님도 공부에 대해 알아서 하겠거니 하며 터치하는 편도 아니었다.</p>\n<p>그렇게 2학년 1학기가 그냥저냥 흘러갔고 여름방학 때 또 집체교육을 갔다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/98434003-2130bb80-210f-11eb-80da-f1120f2cea2e.png\" alt=\"2011년 집체교육\"><br>\n* 사진이고 뭐고 필요 없으니 집에 보내달라고 표정을 통하여 어필하는 중.</p>\n<p>집체교육에서 무언가를 하긴 했으나 사실 제대로 기억 나는 부분은 없었다.\n다만 내가 남들 보다 오롯이 혼자서 무언가를 많이 했다는 점을 강사분이 인정해주셨고 어깨를 조금 으쓱했다는 점 정도?</p>\n<p>그런다고 현실적으로 내가 문제를 잘 풀이 할 수 있는 수준도 아니었기 때문에 그렇게 대단한 일도 아니었다.</p>\n<p>그렇게 또 집체교육을 갔다온 후에 여름방학 내내 학교에 나오면서, 무언가 점점 불안감을 느꼈다.\n내가 제대로 하고 있다는 생각이 들질 않았다.\n그런데 정말 기능대회를 위한 공부를 하기가 너무 싫었다.</p>\n<p>말 그대로 방치된 기분이랄까?</p>\n<p>집에서도 나를 신경 쓰는 편이 아니었고, 기능반 담당 선생님도 거의 기능반 자체를 없는 것 처럼 취급 하셨다.</p>\n<p>생각과는 다르게 또 2학년 2학기도 대충 흘러갔다. 2학년 2학기의 기억은 거의 뿌리채로 없어진 듯한 느낌이다.\n그만큼 단조로웠고, 특별할게 없었다고 해야할까?</p>\n<p>2학기가 끝날 때 쯤, 이전에도 기능반을 지도해본 경험이 있는 연로한 선생님으로 기능반 담당 선생님이 교체되었다.\n지도교사가 달라진다고 해서 나의 생활이 달라지진 않았다.\n어차피 이 대회에 대해 자세히 아는 사람은 우리 학교에 없었다.\n그래서 나는 반쯤 포기하고 있었다.</p>\n<p>2학년 2학기 때 그나마 인상 깊었던 기억이 내가 학교 생활을 하면서 유일하게 선생님에게 목소리를 높여가며\n<code>이렇게 관리할꺼면 왜 우리에게 기능반을 제안했으며, 왜 이자리에 앉혀놓은 것이냐고, 이렇게 무관심할꺼면 차라리 기능반을 없애는게 낫지 않겠냐고</code>\n말하며 반행했다는 것이다.</p>\n<p>처음에는 선생님도 <code>이런 X놈이 어디서 배워먹은 버르장머리야!</code> 라며 화를 내셨지만 그래도 어떻게든 기능반 학생들을 방치하는 수준은 벗어나도록 신경써주셨다.</p>\n<p>그렇게 다시 겨울 방학이 시작되었고, 또 집체교육을 갔다.\n이 때의 집체교육을 기준으로 나는 빠르게 성장했다.</p>\n<hr>\n<p><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\">다음이야기</a></p>\n",
      "image": "https://user-images.githubusercontent.com/18749057/98433517-0c522900-210b-11eb-941f-d1075ce66a43.png",
      "date_published": "2020-11-09T10:16:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "유년시절 이야기 (1)",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/",
      "summary": "개발에 입문하기 이전의 유년시절 이야기입니다.",
      "content_html": "\n<p>첫 번째 글쓰기는 가볍게 성인이 되기 전 기억에 대해 쓰고자 한다.</p>\n<ul>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\">Part-01</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\">Part-02</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\">Part-03</a></li>\n</ul>\n<h2>책 읽는 소년</h2>\n<p>나는 중학교 때까지 책 읽는 것을 참 좋아했다.\n사실 책 자체가 좋았던 것 보다 <code>책 읽는 사람</code>으로 보여지는 것이 좋았다.\n뭔가 유식해보인다고 해야하나?\n그렇게 공부를 잘 하는 것도 아니었고, 남들 보다 무언가 특별한 재능이 있는 것도 아니었다.\n그냥 나만의 아이덴티티를 가질 수 있는 편한 방법이 <code>책 읽기</code> 였다.</p>\n<p>나는 자기 계발 관련 서적을 많이 읽었다.\n특히 좋아 했던 책이 <code>마시멜로 이야기</code> 였는데, 지금 생각해보면 저걸 왜 좋아했나 싶다.</p>\n<p>판타지 소설을 엄청 좋아하진 않았는데 <code>전민희</code> 작가님의 <code>룬의 아이들</code>과 <code>세월의 돌</code>을 정말 재밌게 읽었다.\n웃기게도 판타지 소설에서 한글의 아름다움을 정말 절절하게 느낄 수 있었다.\n소설의 내용도 좋았지만 전민희 작가님의 표현이 참 좋았다.</p>\n<p>이 외에도 셜록홈즈 시리즈도 다 읽었고, 역사와 관련된 책도 많이 읽었다.\n천문학과 관련된 책도 많이 읽었다. 우주라는 것 자체가 그 당시에는 판타지보다 더 판타지 같은 느낌이 있어서 뭔 소리인지 모르고 봐도 재밌었다.</p>\n<p>제일 인상 깊었던 책 중 하나가 <code>12살 소년</code>이 쓴 우주 판타지 소설 <a href=\"https://book.naver.com/bookdb/book_detail.nhn?bid=2620651\" target=\"_blank\" rel=\"noopener noreferrer\">빅뱅의 비밀</a>이다.\n처음엔 별 생각 없이 읽었는데 스토리가 정말 탄탄했다. 어떻게 13살의 머릿속에서 이런 이야기가 나올까? 하며 감탄하고 봤다.</p>\n<p>자의든 타의든 결국 책을 많이 읽었고, 다독상 같은 것도 몇 번 받았다.\n도서부 활동도 열심히 했고, 그 과정에서 친해진 사람들도 많이 있었다.</p>\n<p>고등학교에 올라오면서 핸드폰을 몇 번 박살내기도 했고,\n군대에 있을 때 홧김에 연락처를 초기화 하기도 하면서 유년시절 친구들과의 연락처가 다 사라졌다.</p>\n<p>다들 무엇을 하며 지내고 있을까? 무득 궁금하기도 하지만, 그냥 살아가는게 참 바쁘다보니 금새 다시 잊어버린다.</p>\n<p>각설하고 책 읽는 것을 좋아하던 내가,\n성적도 중상위 권이었던 내가,\n뜬금없이 전문계 고등학교를 간다고 했을 때 주변에서 <code>니가? 왜?</code> 라는 의문을 품었다.</p>\n<p>그래도 나에겐 막연하게 <code>프로그래머가가 되고 싶다</code> 라는 목표가 있었다.</p>\n<h2>프로그래머가 되고 싶다</h2>\n<p>나의 유년 시절은 평범하다면 평범했고, 어떻게 보면 참 다사다난 했다.\n가정형편이 좋지 않아서 이사도 많이 다녔고, 덕분에 동네 친구가 없었다.</p>\n<p>어쩌다 보니 6살 차이 나는 누나랑 떨어져 살기도 했고,\n부모님의 다툼에 질려 누나가 18살의 나이로 2년 동안 가출했었다.\n막연하게 <code>사는 게 뭔가 힘든거구나</code> <code>내 맘처럼 되는 게 없구나</code> 라고 생각했다.</p>\n<p>지금은 어느 정도 보기 좋은 중년 부부가 된 우리 부모님도 어릴적 나에겐 이해할 수 없는 대상들이었다.\n그냥 부모님도, 하나 뿐인 누나도 그 당시에는 말 그대로 이해를 할 수가 없었다.</p>\n<p>이러한 환경 때문에 나는 무척 소심했고, 겁도 많았고, 화도 많았고, 뭔가 스스로를 많이 초라하고 별 볼일 없는 사람으로 생각했다.\n자존감이 아예 없던 것이다. 형성도 되기 전에 밑바닥을 쳐버렸으니..</p>\n<p>덕분에 뭔가 되고 싶은 것도 없었고, 하고 싶은 것도 없었다.\n공부는 싫어 했기 때문에 굳이 부모님에게 학원을 보내달라고 조르지도 않았다.</p>\n<p>글을 쓰면서 생각난게 초등학교 1학년 때 컴퓨터 학원을 6개월 정도 다녔었다.\n그냥 뜬금없이 아빠가 가서 타자연습이나 해보라면서 컴퓨터 학원에 보내주셨다.</p>\n<p>학원에서 타자연습을 익혔고, 어느 정도 속도가 나자 한글97로 워드프로세서 실기 연습을 했다.\n초등학교 1학년 때 500타가 나왔다며 기뻐하던게 생각난다. 2학년 때는 1000타가 나와서 여기저기 자랑하고 다녔다.\n그렇게 타자연습이 익숙해지자 한글 문서 만드는 법을 배웠고, 지금의 내가 생각하기에도 어린 나이에 이럴 수 있을까 싶을 정도로 기가막히게 잘 다뤘었다.\n덕분에 실기 시험만 보면 항상 1등을 했는데, 문제는 자격증을 취득하기 위해선 일단 필기시험부터 통과해야 했다.\n그 당시에 필기 시험이 뭔지도 몰랐고 뭘 공부해야 하는지도 몰라서 <strong>자격증 시험은 아예 재꼈다.</strong> <s>아직 까지 재끼고 있음이 진행중이다.</s></p>\n<p>그렇게 1년 정도 컴퓨터 학원을 다녔는데,\n어느 순간 학원 선생님이 학원비가 거의 6개월 이상이 밀리고 있다는 이야기를 들었고 부모님이 학원을 가라고 해도 그냥 가기 싫다며 배째라 식의 태도를 취했다.</p>\n<p>결과적으로 그 당시에 부모님이 나를 컴퓨터 학원에 보낸 것은 탁월한 선택이었지 싶다. <s>결과만능주의</s></p>\n<p>어쨌든 이러한 계기로 컴퓨터라는 것에 흥미를 느꼈다. 무엇보다 게임을 할 수 있었다!\n그리고 집에 혼자 있는 시간이 많았기 때문에 자연스럽게 컴퓨터를 많이 접했다.</p>\n<p>그 당시에 꼬마들이 그렇듯 나 또한 친구들과 보내는 시간은 즐거웠고,\n컴퓨터 게임이 재밌었고,\n친구들과 컴퓨터 게임을 하는 것은 더더욱 재밌었다.</p>\n<p>굉장히 많은 게임을 했지만, 인상 깊었던 게임만 나열해보자면 <code>크레이지 아케이드</code> <code>메이플 스토리</code> <code>겟앰프드</code> <code>건즈</code> 등이 있다.\n나는 성격이 좀 급해서 <code>메이플 스토리</code> 같은 RPG 게임은 길어야 두 달 정도 했다.\n그래도 초등학교 시절 방학 때 마다 나의 시간을 채워 주던 게임이 메이플 스토리였다.</p>\n<p>일찍 자는 날에는 저절로 새벽에 눈이 떠져서 그 때 마다 부모님 몰래 새벽에 메이플 스토리를 했다.\n그 때의 스릴과 긴장감을 다시 느끼는 날이 올까? 아마 <s>불법적인을 하는 게 아닌 이상</s> 없겠지 싶다.</p>\n<p>어쨌든 메이플 스토리 때문에 PRG는 내 취향이 아니라는 것을 빨리 깨달았다.</p>\n<p>그 다음으로 즐겨 했던 게임이 <code>건즈</code> 라는 <code>TPS(3인칭)</code> 총 게임이다.\n앞서 언급했지만 나는 성격이 급했기 때문에 이 건즈라는 게임은 정말 나에게 딱 맞는 게임이었다.\n속도감이 좋았고 화려한 기술들을 익히는 재미도 있었고, 친구들이랑 같이 했기 때문에 더더욱 재밌었다.</p>\n<p>그런데 핵 때문에 망했다.... <s>빌어먹을 핵쟁이들..</s> 정말 어떤 방에 들어가도 핵을 쓰는 사람이 존재했고 덕분에 게임을 즐길래야 즐길 수 없었다.\n그래서 그냥 나도 이럴 꺼면 빨리 망해라 하는 심정으로 핵을 썼다. 그 당시에 건즈를 하면서 핵을 쓴 사람보다 안 쓴 사람이 더 적을 것이다.\n그 만큼 구하기도 쉬웠고 핵 사용자에 대한 조치 자체가 없었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">뜬근없는 핵에대한 고찰</p>\n<p><code>핵</code> 이라는 것을 만들어내는 행위가 사실 프론트 엔드 개발자가 하는 일과 어느 정도 유사하다.\n<strong>프론트 엔드 개발자는 클라이언트 사이드를 다루는 작업</strong>을 한다.</p>\n<p>핵을 만드는 과정도 이미 메모리상에 올라와 있는 프로그램을 조작하는 작업이다. 즉, <strong>클라이언트를 조작하는 작업</strong>이다.</p>\n</div>\n<p>그 다음으로 즐겨 했던 게임이 바로 <code>겟앰프드</code> 라는 격투 게임이었는데, 사실 이 게임 덕분에 지금 내가 개발자로 살아가고 있다고 말할 수 있다.\n겟앰프드라는 게임 자체도 재밌었지만 <code>싱글 겟앰프드</code>라는 이름의 베타 버전 리소스가 온라인에 돌아다니고 있었다.</p>\n<p>메이플 스토리로 따지면 <code>프리 메이플</code> 이라고 해야할까? 게임의 클라이언트를 조작할 수 있는 형태의 리소스가 공개되어 있는 것이었다.</p>\n<p>각설하고 내가 이 <code>싱글 겟앰프드</code> 라는 것에 관심을 가지게 된 계기는 안타깝게도 집에서 인터넷이 안 되기 시작할 때 부터였다.\n그 당시 집안 형편이 좋지 않았고, 인터넷 요금을 납부하지 않아서 한 2년 가까이 인터넷 없이 생활했었다.\n대신 게임을 하고 싶거나 인터넷을 이용 하고 싶을 때는 피시방에 갔다.</p>\n<p>겟앰프드라는 게임을 좋아해서 게임에 대해 찾아보다가 우연히 싱글 겟앰프드라는 것을 접하게 되었는데, 신기했던 것이 직접 리소스를 수정하여 자기 만의 악세사리나 캐릭터를 만들 수 있었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/97804779-54012c80-1c95-11eb-8c14-067c7506d93e.png\" alt=\"루피의 밀짚모자\"> <br>\n<strong>* 이것은 중학교 3학년 때 마지막으로 만들었던 <code>루피의 밀짚모자</code> 라는 악세사리이다.</strong></p>\n<p>그리고 수정하는 방법에 대해 강의가 올라오는 네이버 카페도 존재했다.\n그래서 정말 몇 개월 동안 싱글 겟앰프드 캐릭터나 악세사리를 만드는 재미에 빠져 살았다.</p>\n<p>이 때 <code>Hex editor</code> 라는 것을 이용했고, 소스 코드를 수정하는 게 아니라 아예 binary 파일을 수정하는 작업이 필요했다.\n<img src=\"https://user-images.githubusercontent.com/18749057/97805469-b3f9d200-1c99-11eb-8c2d-d0555d653bb8.png\" alt=\"hex editor\"></p>\n<p>지금은 내가 했던 일이 컴파일된 Binary 파일을 직접 수정하는 작업이라는걸 알고 있지만, 저 당시에는 그런 개념을 몰랐다.\n그냥 <code>hex editor</code>라는 프로그램으로 파일을 열어서 숫자를 수정했더니 게임을 열었을 때 그게 반영 되는구나 정도로만 생각했다.</p>\n<p>지금은 엄두도 낼 수 없는 일을 이미 초딩 때 한 것이다. 어느 정도 가이드라인이 있기에 가능 했지만 어쨌든 몇 년간 에디터를 보는 것이 나의 유년시절 업이었다.</p>\n<p>그렇게 3~4년 정도 <code>싱글 겟앰프드 마스터</code> 라는 카페에서 활동 했고, 여러가지 악세사리를 만들었고, 이 때 부터 막연하게 <code>프로그래머</code> 라는 직업을 목표로 했다.</p>\n<h2>공부라는걸 조금이라도 하게 되었다.</h2>\n<p>앞서 언급한 경험 때문에 인문계 고등학교를 가는 것 보단 뭔가 고등학교 때 조금 더 재밌고 특별한 일들이 하고 싶었다.\n이런 분야에서 좋은 학교가 어디있나 찾아봤는데 <code>선린인터넷고등학교</code>와 <code>디지털미디어고등학교</code> 등이 있었다.</p>\n<p>문제는 두 학교 모두 성적이 어느정도 받춰줘야 원서를 쓸 수 있었다.</p>\n<p>나는 중학교 1학년 때 까지 공부랑 담을 쌓고 살았다.\n사실 공부를 그렇게 열심히 한다고 해서 뭐가 좋은지도 몰랐고, 공부가 그냥 재미 없었다.</p>\n<p>그래도 수업 시간에 선생님들이 해주는 이야기들은 항상 재밌었다.\n수업은 열심히 들었고, 시험은 못봐도 이상하게 수행평가는 반에서 항상 1~2등 안에 들었다.\n공부하는 것 자체는 좋아하지 않았지만 공부하는 것들을 활용할 수 있는 행위(수행평가)는 좋았던 것 같다.\n공부의 의미를 알 수 있기 때문이랄까?</p>\n<p>막연하게 공부하기 보단, 공부에 의미를 부여하고 싶었던걸지도 모른다.</p>\n<p>그래도 내가 평균 이상의 성적이 되기 시작한건 좋아하던 학생 때문이었다.\n내가 좋아하던 학생이 공부를 엄청 잘하진 않았지만 그래도 꽤 성실하게 했다.</p>\n<p>지금 생각해보면 조금 동경했던 것 같다. <code>나도 저렇게 되고 싶다</code> 랄까.</p>\n<p>그렇게 그 친구와 같이 목표를 세우고(평균 점수 90점 넘기기 라던지) 공부를 시작했다.\n뭔가 거창한건 없었다. 그냥 평소처럼 수업시간에 수업 열심히 듣고, 평소에는 열심히, 매우 열심히, 격하게 놀았따.</p>\n<p>다만 조금 달라진 점은 시험기간이 되면 흔히들 말하는 벼락치기를 했다.\n수업시간에 필기를 꽤 열심히 했기 때문에 시험 2주 전 부터 하루에 한 과목씩 공부하고 복습하면서 시간을 보냈다.</p>\n<p>그렇게 1학년 때는 평균 70점을 넘기면 시험 잘봤다고 좋아하던 내가,\n2학년 때 앞서 언급한 그 친구와 목표를 세우고 공부하면서 처음으로 85점이라는 점수를 받았다.</p>\n<p>고백이라는 것을 해본 적도 없었고, 좋아한다는 표현을 해본적도 없었기 때문에 그렇게 그 친구와는 이도 저도 아닌 사이가 되었다.\n그래도 점점 공부하는 습관이 생기면서 중학교를 졸업 할 때 쯤엔 95점 정도가 되었다.\n<s>이 정도면 인생의 은인이 아닐까?</s></p>\n<p>하지만 1학년 때 부터 꾸준하게 공부를 잘했던게 아니기 때문에 최종 내신은 200점 만점에 180점 정도였다.</p>\n<p>그 당시에 <code>디지털미디어고등학교</code>에 입학하려면 190점 정도는 되어야 했고, 나에겐 역부족이었다.\n<code>선린인터넷고등학교</code>는 내신도 많이 보긴 하지만 내신 보다 프로그래밍 지식에 대해서 많이 봤던 것 같다.\n그런데 우습게도 나는 프로그래밍에 대해 아는 것이 정말 아예 없었다.\n바이너리 파일을 수정했으면서 프로그래밍은 몰랐다는게 말이 되는가? 내가 바로 그랬다.\n<s>이게 바로 시작의 중요성!</s></p>\n<p>어쨌든 <code>선린인터넷고등학교</code>에도 원서를 쓸 수 없었고, <code>디지털미디어고등학교</code>에도 원서를 쓸 수 없었다.\n그 당시에 나는 <code>경기도 안산</code>에 살았기 때문에 <code>안산공업고등학교</code>에 가고 싶었으나, 이상하게 가족들이 결사 반대를 했다.\n<s>안산공고에 갔으면 조금 더 평탄했을지도..</s></p>\n<p>그러다가 뜬금없이 누나가 수원에 있는 <code>삼일공업고등학교</code> 라는 곳을 소개해줬고 어떻게든 돼라 하는 심정으로 <code>삼일공업고등학교 멀티미디어과</code>에 원서를 썼다.\n그런데 정말 웃기게도 <code>과 수석</code>으로 입학하였다.</p>\n<p>공부와 담쌓고 지내던 내가 <code>과 수석</code>이라니!\n뭔가 스스로가 대견하기도 했고 나도 노력이라는걸 하면 뭐라도 할 수 있구나 하는 생각을 가지게 되었다.</p>\n<h2>게임에 제대로 빠졌다.</h2>\n<p>고등학교 시절은 힘들었지만 재밌었다.제일 힘들었던 것은 바로 왕복 3시간이 걸리는 통학 시간이었다.</p>\n<p>2010년 1월에 처음으로 학교를 방문했는데, 하필 눈이 무척 많이 온 날이었다.\n눈이 10cm 정도 쌓인 상태에서 안산에서 수원까지 버스를 타고 가야 했으니 첫 등교 부터 험난했다.\n쓰고 보니 이게 벌써 10년 전이다. 어제 일처럼 생생한데 어떻게 시간이 이렇게 흘렀을까?</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/97808241-1dcda800-1ca9-11eb-964b-8ba28e8bd6ea.png\" alt=\"삼일공업고등학교\"></p>\n<p>위의 지도를 보면 알 수 있지만, <code>삼일공업고등학교</code>는 수원 화성 안에 있다.\n그리고 바로 옆에 <code>삼일상업고등학교</code> <code>삼일중학교</code> <code>매향중학교</code> <code>매향여자정보고등학교</code> <code>연무초등학교</code> 가 있었다.\n이렇게 한 곳에 6개의 학교가 뭉쳐 있는 것은 처음 봐서 신기했다.</p>\n<p>무엇보다 학교의 위치가 문화제 안에 있었기 때문에 등교를 할 때 마다 일본인/중국인 관광객을 볼 수 있었다.\n어쨌든 첫 인상은 나쁘지 않았다.</p>\n<p>학교를 다닌지 얼마 되지 않았을 때 전문계 고등학교에는 <code>기능반</code> 이라는 것이 있다고 했다.\n학교 수업에서 배우지 않는 것을 따로 공부하고 대회를 준비하는 동아리라는 것이다.</p>\n<p>나는 처음부터 이걸 하고 싶었는데 선생님이 <code>넌 공부나 해라</code> 하며 바로 퇴짜를 맞았다.\n그래서 진짜 공부만 했다. 마음에 드는 동아리도 없었고, 그냥 저냥 친구들이랑 야자도 하고 보충수업도 들으면서 공부하는게 나쁘지 않았다.</p>\n<p>무엇보다 학교 시험이 무척 쉬웠기 때문에, 중학교 때 처럼 공부하지 않아도 손쉽게 1~2등은 할 수 있었다.\n시험 문제도 거의 알려주다 싶이 했고, 뭐랄까.. 그냥 말 그대로 쉬웠다.</p>\n<p>고등학교 1학년 때의 일과를 생각해보면</p>\n<ul>\n<li>새벽 5시 30분 쯤에 눈을 뜨고</li>\n<li>씻고, 밥먹고, 6시 쯤에 버스를 타고</li>\n<li>8시 이전에 학교에 도착하고,\n<ul>\n<li>웃긴게 6시에 버스를 타면 7시 10 ~ 20분 사이에 도착하고</li>\n<li>6시 10 ~ 20분 사이에 버스를 타면 8시 쯤에 도착한다.</li>\n<li>그래서 가능하면 1분이라도 빨리 버스를 타려고 뛰어다녔다.</li>\n</ul>\n</li>\n<li>1교시 시작 전까지 한자와 영어 공부를 학고</li>\n<li>수업을 들었다.\n<ul>\n<li>쓰다보니 생각난건데 우리 학교는 점심시간이 12시 50분 부터였다.</li>\n<li>그런데 특이하게 4교시는 선생님들이 10~20분 정도 빨리 끝내주셨는데 이게 이 학교의 문화인가 싶었다.</li>\n</ul>\n</li>\n<li>5교시는 1시 50분 시작했고,</li>\n<li>수업이 끝나면 보충수업을 듣고 야자를 9시~10시까지 하고</li>\n<li>집에 가면 11시 ~ 12시가 되고</li>\n<li>1시 까지 가볍게 게임을 하다가 잤다.</li>\n</ul>\n<p>그리고 중학교 3학년 때 부터 입대하기 전 까지 약 6년 ~ 7년 정도 <code>버블파이터</code> 라는 게임을 했다.\n웃기지만 나는 사회성을 <code>버블파이터</code>를 통해서 배웠다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">버블파이터</p>\n<p><code>버블파이터</code>는 <code>크레이지 아케이드</code>에 등장하는 캐릭터들 물총 싸움을 하는 <code>TPS</code> 게임이다.\n게임의 기본적인 특징은 다음과 같다.</p>\n<ul>\n<li>물총을 통해 적의 피를 전부 깎으면 <code>버블</code> 상태가 된다.</li>\n<li>팀원이 <code>버블</code> 상태일 때 터치하면 다시 살아난다.</li>\n<li><code>버블</code>이 5번 되면 저절로 죽는다.</li>\n<li>적이 <code>버블</code> 상태일 때 다가가서 터트려야 완전히 죽는다.</li>\n</ul>\n<p>즉, 일반 FPS처럼 피를 깎아서 죽이는게 아니라 다가가서 터트리기 까지 해야 죽는 게임인 것이다.\n말 그대로 크레이지 아케이드에 총 게임을 섞어 놓은 컨셉이다.</p>\n</div>\n<p>초등학교 때 <code>건즈</code>라는 게임을 제일 재밌게 했는데 <code>버블파이터</code>가 딱 <code>건즈</code> 느낌이 났다.</p>\n<p>커뮤니티 활동도 꽤 열심히 했고, 게임 자체도 열심히 했다.\n지금의 <code>오버워치</code>로 따지면 <code>경쟁전 랭킹 Top 10</code> 안에 들었었다.</p>\n<p>처음으로 하나의 게임을 1년이상 했다. 게임에 과도한 현질 유도만 없었다면 아마 지금도 즐겁게 하고 있지 않았을까?</p>\n<p>하는 사람도 많지 않은 게임을 오랫동안 하게 되면 게임을 할 때 마다 아는 사람들이 보이게 된다.\n그렇게 랜선 친구들을 많이 사귀게 되었는데, 자연스럽게 모든 말과 행동을 신경써야 했고, 게임을 통해서 친해진 친구들과 실제로 만나서 노는 일이 많았다.</p>\n<p>각설하고, 고등학교 1학년 때는 집에 오면 가볍게 1 ~ 2시간 정도 버블파이터를 했고, 주말만 되면 정말 하루 종일 버블파이터를 했다.\n게임에 모든 시간을 투자했다고 해도 과언이 아닐 정도로 열심히 했다.</p>\n<p>그래도 가슴 한 켠에는 <code>프로그래머가 되고 싶다</code> 라는 목표가 자리 잡고 있었고, 무언가 내가 허송 세월을 보낼 때 마다 이래도 되는 건가 싶은 생각이 들었다.</p>\n<hr>\n<p>사실 내 인생의 클라이막스는 이 이야기 이후부터 시작된다.\n밤이 깊어서 더 이상 길게 쓸 자신이 없으므로, 내일의 나에게 바톤터치!</p>\n<hr>\n<p><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\">다음이야기</a></p>\n",
      "image": "https://user-images.githubusercontent.com/18749057/97804779-54012c80-1c95-11eb-8c14-067c7506d93e.png",
      "date_published": "2020-11-01T11:45:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 9월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/09-September/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/09-September/",
      "summary": "개발자 황준일의 2020년 9월 회고입니다.",
      "content_html": "\n<img width=\"778\" alt=\"image32\" src=\"https://user-images.githubusercontent.com/18749057/96290347-689cbe00-1021-11eb-873c-612efe8ec1d7.png\">\n<p>9월은 정신 없이 시간이 흘러갔다. 사실 왜 벌써 10월인지, <strong>왜 벌써 여름이 저물었고 가을이 왔는지 혼란스럽다.</strong>\n9월 말에 리액트 스터디 세션을 하면서 <strong>이제 2020년이 100일도 남지 않았다는 것</strong>을 알았다.\n기똥찬 한 해를 보내자고 다짐했던게 엊그제 같은데.. 언제 이렇게 시간이 흘렀는지..</p>\n<p>각설하고, 회고 시작!</p>\n<h2>공적</h2>\n<p>한 달 내내 재택근무를 했는데 덕분에 회사에 대한 약간의 그리움(?)을 느꼈다.</p>\n<h3>1. 크롬 확장프로그램</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95010212-7128e800-0662-11eb-918d-da7a31d64d7f.png\" alt=\"크롬 확장프로그램\"></p>\n<p>8월에는 확장프로그램 베타 버전 배포를 했고, 9월에는 회사 기술블로그에 <a href=\"https://zuminternet.github.io/Zum-Chrome-Extension/\" target=\"_blank\" rel=\"noopener noreferrer\">확장프로그램에 대한 포스팅</a>을 완료했다.</p>\n<p>확실히 확장프로그램을 만들면서 <strong>기술적으로 많은 생각을 하는 계기</strong>가 되었다.\n일반적인 웹 서비스가 아니기 때문에 고려해야할 것도 많았고, <strong>완성도에 대한 중요성</strong> 또한 다시 한 번 깨우칠 수 있었다.</p>\n<p><s>그런데 또 하고 싶다는 생각이 들진 않는다.</s></p>\n<p>언젠간 <s>죽기 전에</s> 확장프로그램으로 재미난 일들을 해보고 싶다.</p>\n<h3>2. CMS QA</h3>\n<p>8월에 진행 하던 CMS 개발을 완료했고, 9월에는 QA를 진행하면서 각종 이슈 및 버그를 해결했다.\n이번에 작업한 CMS는 약 5개 정도의 서비스와 맞물려 있기 때문에 어떤 부분을 작업했다고 하기가 조심스럽다.</p>\n<p>그래도 그중에 꽤 인상 깊었던 작업만 적어보자면, 서비스에 노출중인 아이템의 순서를 <code>Sortable.js</code>로 변경하는 것이었다.\n기존에도 <code>Sortable.js</code>를 이용하여 아이템의 순서를 변경하긴 했다. <u>그런데 <code>Sortable.js</code>는 <code>DOM</code>을 직접적으로 조작하는 라이브러리다.</u>\n그래서 <code>Vue</code>와 깊게 연관되면 오작동 하는 경우가 꽤 많았다.\n<u><code>Vue</code>의 경우 데이터를 기반으로 <code>DOM</code>을 그린다. 즉, <code>DOM</code>이 변경되어도 데이터는 변경되지 않는 것이다.</u></p>\n<p>덕분에 다음과 같은 문제들을 맞닥뜨렸다.</p>\n<ul>\n<li>Sortable.js로 DOM의 순서를 변경했다.</li>\n<li>그러나 Vue에서 관리중인 data의 순서는 변경되지 않는다.</li>\n<li><u>따라서 DOM을 보고 data를 업데이트 해야한다.</u></li>\n<li>그런데 data를 업데이트하면 DOM이 꼬여버린다. 왜냐하면 <strong>현재 데이터에 바인딩 되어 있는 DOM은 변경되지 않기 때문</strong>이다.</li>\n</ul>\n<p>글로 읽는 것 보단 눈으로 보고 직접 체험해 보는게 제일 빠르다.</p>\n<p>일단 다음과 같이 간단하게 Vue에 Sortablejs를 적용할 수 있다.</p>\n<div style=\"display: none\">\n<p>::: demo [vanilla]</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\">  window<span class=\"token punctuation\">.</span>loadedScript <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">[</span><span class=\"token string\">'https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">   <span class=\"token string\">'https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      script<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>:::</p>\n</div>\n<p>::: demo [vanilla]</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sortable-app1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>아이템을 드래그앤 드롭으로 섞어주세요<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$sortedList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(item, k) in items<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>k<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>실제 Vue Data상의 아이템 순서: {{ JSON.stringify(items) }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\">loadedScript<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> </span>\n<span class=\"line\">  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#sortable-app1'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item04'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sortable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>$sortedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>:::</p>\n<p>문제는 Sort를 하여도 데이터의 변화는 없다는 점이다. 그래서 데이터를 직접 조작해야한다.</p>\n<p>::: demo [vanilla]</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sortable-app2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>아이템을 드래그앤 드롭으로 섞어주세요<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$sortedList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(item, k) in items<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>k<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:data-key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>k<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>실제 Vue Data상의 아이템 순서: {{ JSON.stringify(items) }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\">loadedScript<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> </span>\n<span class=\"line\">  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#sortable-app2'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item04'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sortable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>$sortedList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token function-variable function\">onEnd</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>$sortedList<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>:::</p>\n<p>위의 코드는 다음과 같은 로직을 수행한다.</p>\n<ul>\n<li>DOM을 섞는다.</li>\n<li>DOM을 기준으로 items를 다시 만든다.</li>\n<li><strong>items를 기준으로 이미 섞인 DOM을 다시 렌더링한다.</strong> (이 부분이 핵심이다.)</li>\n</ul>\n<p>따라서 DOM을 기준으로 items를 섞은 다음에, <strong>다시 DOM을 원상복구 해야한다.</strong></p>\n<p>::: demo [vanilla]</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sortable-app3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>아이템을 드래그앤 드롭으로 섞어주세요<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$sortedList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(item, k) in items<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>k<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:data-key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>k<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>실제 Vue Data상의 아이템 순서: {{ JSON.stringify(items) }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\">loadedScript<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> </span>\n<span class=\"line\">    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'#sortable-app3'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item04'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $sortedList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sortable</span><span class=\"token punctuation\">(</span>$sortedList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">          <span class=\"token function-variable function\">onEnd</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> oldIndex<span class=\"token punctuation\">,</span> newIndex <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">            <span class=\"token keyword\">const</span> newItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>$sortedList<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line\">            <span class=\"token comment\">/* 섞인 DOM을 원상복구 하는 코드 */</span></span>\n<span class=\"line\">            <span class=\"token keyword\">const</span> isAfter <span class=\"token operator\">=</span> newIndex <span class=\"token operator\">&lt;</span> oldIndex<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">            $sortedList<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">              $sortedList<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">li:nth-child(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">              $sortedList<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">li:nth-child(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>oldIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>isAfter<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line\">            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> newItems<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>:::</p>\n<p>사실 <code>vue-sortable</code> 컴포넌트를 사용해도 되지만 생각보다 커스텀 하기가 쉽지 않았다. 그래서 <code>Sortable</code>을 그대로 사용해야 했고, 위와 같은 문제들과 맞닥뜨린 것이다.\n굉장한 삽질 끝에 <code>DOM</code>을 원상복구 하는 해결 방안을 찾을 수 있었다.</p>\n<p><s>그런데 지금 Vuepress에서 예제를 만든다고 더 삽질한 것 같다.</s></p>\n<p>이외에도 <code>Sortable</code>을 그대로 사용하는게 아니라 <code>Swap</code>을 연동하여 사용하는 등의 과정이 있으나 글이 너무 길어질 것 같아서 이만 다음 주제로 넘어가야겠다.</p>\n<h3>3. API 관련 이슈 해결</h3>\n<p>8월에 <code>Mobile API</code>를 <code>Internal API</code>에서 분리시키는 작업을 했다.그리고 운영하는 과정에서 몇 가지 이슈가 있었다.</p>\n<p>분리 작업 중 리팩토링을 진행하면서 캐싱 관련 코드를 전체적으로 수정했다.\n그런데 정말 약 100개 가까이 되는 서비스 코드 중 정말 딱 한 개의 서비스 코드만 리팩토링을 진행하지 않았고 그 부분에서 에러가 터졌다.. 😢</p>\n<p>어쨌든 전체적인 코드를 훑어볼 수 있는 기회가 되기도 했고, 한 번 더 불필요한 코드를 제거하는 등의 리팩토링을 진행했다.</p>\n<p>그리고 <code>Internal API</code>에서 <code>Mobile API</code> 관련 코드를 모두 제거했고, <code>Sentry</code>도 연결했다.\n입사 후에 계속 관리해오던 것들이라서 마음이 많이 홀가분해졌다.</p>\n<h2>사적</h2>\n<p>9월은 정말 정말 바쁘게 살았다.</p>\n<h3>1. Black Coffee Study</h3>\n<p>매달 <code>NextStep</code>에서 메일로 뉴스레터를 보내주고 있다. 그런데 눈에 띄는 항목이 보였다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/96161643-80594100-0f52-11eb-8254-76e542afff4c.png\" alt=\"image01\"></p>\n<p><strong>처음으로 Javascript Study가 진행되고 있다는 내용</strong>이다. <strong>무료로 신청</strong>할 수 있었기 때문에 고민 없이 바로 신청했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">블랙 커피 스터디</p>\n<ul>\n<li>스터디 이름은 <code>훌륭한 의사소통은 블랙커피처럼 자극적이며, 후에 잠들기가 어렵다.</code> 라는 문장에 감명 받아 <code>블랙 커피 스터디</code>라고 짓게 되었다고 한다.</li>\n<li>이름의 유래에서 유추할 수 있듯 <code>함께 좋은 커뮤니케이션으로 통찰을 이끌어내고, 그 통찰과 함께 성장하고, 소프트웨어 장인으로 거듭나기</code>가 목표인 스터디이다.</li>\n<li>이 스터디는 위와 같은 목표를 달성하기 위해서 <code>페어 프로그래밍</code>과 <code>코드리뷰</code>라는 수단을 이용한다.</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">소프트웨어 장인이란?</p>\n<ol>\n<li>동작하는 소프트웨어 뿐만 아니라 정교하고 솜씨있게 만들어직 작품을</li>\n<li>변화에 대한 대응하는것 뿐만이 아니라, 계속해서 가치를 더하는 것을</li>\n<li>개별적으로 협력하는 것 뿐만이 아니라, 프로페셔널 커뮤니티를 조성하는 것을</li>\n<li>고객과 협업하는 것 뿐만 아니라, 생산적인 동반자 관계를 추구한다.</li>\n</ol>\n</div>\n<h4>(1) 스터디 미션소개</h4>\n<p>\n  <img src=\"https://user-images.githubusercontent.com/18749057/96161916-d928d980-0f52-11eb-9138-b75d03d0f442.png\" alt=\"image02\" width=\"600\">\n</p>\n<p>스터디의 미션은 생각보다 간단했다.</p>\n<ul>\n<li><code>1주차</code> Todo App 만들기\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=1yADBI27NCg\" target=\"_blank\" rel=\"noopener noreferrer\">Document Object Model</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=BYRTKmPAr8c\" target=\"_blank\" rel=\"noopener noreferrer\">Browser Object Model</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=u49E4_4hyeI\" target=\"_blank\" rel=\"noopener noreferrer\">Event</a></li>\n</ul>\n</li>\n<li><code>2주차</code> API 연동</li>\n<li><code>3주차</code> SPA 만들기 (Router 사용하기)</li>\n</ul>\n<p>사실 <strong>수준 높은 코드를 만들기 위한 적합한 미션</strong>이라고 생각한다.\n현재 보다 더 어려웠어도 혹은 더 쉬웠어도 <strong>설계에 집중</strong>하기가 힘들었을 것 같다.</p>\n<p>일단 <strong>1주차 때 3주차 미션까지 모두 구현</strong>했다. 그리고 <strong>한 달 동안 계속 리팩토링</strong>만 했다.</p>\n<h4>(2) 스터디 진행 방식</h4>\n<p>스터디는 다음과 같이 진행되었다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96162462-8996dd80-0f53-11eb-84bc-7bb3db19ed17.png\" alt=\"image03\" width=\"800\">\n<p>요약하자면 아래와 같다.</p>\n<ul>\n<li><code>주 1회 온라인 세션</code>을 통한 미션 소개 및 회고</li>\n<li><code>주 2회 페어프로그래밍</code></li>\n<li><code>코드리뷰</code> : PR 순서대로 3명씩 묶어서 코드리뷰를 진행한다. 혹은 자유롭게 리뷰를 남겨도 상관없다.</li>\n</ul>\n<p><s>온라인 세션이 무척 길었지만</s> 모든 과정이 마음에 들었다.\n<strong>온라인 세션에서 한 주에 대한 회고</strong>를 진행하는데,\n이 때 회고의 주제가 항상 달라져서 <strong>여러가지 면에서 생각</strong>할 수 있는 기회가 되어서 좋았고,\n다른 사람들의 이야기를 많이 들을 수 있어서 좋았다.</p>\n<ul>\n<li><code>1주차</code>에는 <strong>미션과 스터디에 대한 내용 위주</strong>로 세션이 진행되었다.</li>\n<li><code>2주차</code>에는 1주차에 대한 회고와 <strong>좋은 개발자에 대한 덕목</strong>에 대해서 토의 하는 과정이 좋았다.\n<ul>\n<li>이 때 대부분의 사람들이 비슷한 이야기를 했고, 마지막 차례였던 나는 조금 다른 이야기를 했다.</li>\n<li>내가 생각하는 좋은 개발자의 덕목은 <strong>좋은 영향력을 행사</strong>하는 것, <strong>같이 일하고 싶은 사람</strong>이 되는 것이다.\n<ul>\n<li>현재 같은 팀 소속의 <a href=\"https://github.com/integerous\" target=\"_blank\" rel=\"noopener noreferrer\">체대생 개발자로 알려진 한정수 담당님</a>이 그렇다.\n<ul>\n<li><a href=\"https://ryan-han.com/post/memoirs/memoirs2018/\" target=\"_blank\" rel=\"noopener noreferrer\">체대 출신 개발자의 2018년 회고</a></li>\n<li><a href=\"https://ryan-han.com/post/memoirs/memoirs2019/\" target=\"_blank\" rel=\"noopener noreferrer\">체대 출신 개발자의 2019년 회고</a></li>\n<li><a href=\"https://www.edwith.org/sef-2019/lecture/44869/\" target=\"_blank\" rel=\"noopener noreferrer\">체대생, 개발자가 되다! (한정수ㅣ줌인터넷 포털개발팀)</a></li>\n<li><a href=\"https://github.com/Integerous/goQuality-dev-contents\" target=\"_blank\" rel=\"noopener noreferrer\">고퀄리티 개발 컨텐츠 모음</a></li>\n<li>이런 분과 <strong>같은 팀에서 일할 수 있다는 것은 큰 행운</strong>이라고 생각한다.</li>\n</ul>\n</li>\n<li>그리고 <a href=\"https://beyondj2ee.wordpress.com/\" target=\"_blank\" rel=\"noopener noreferrer\">우리 팀장님</a> 또한 그렇다.\n<ul>\n<li><a href=\"https://beyondj2ee.wordpress.com/2014/05/16/%ec%a0%91%ec%86%8d-%ec%a0%9c%ea%b0%80-%ed%95%9c%eb%b2%88-%ea%b0%9c%eb%b0%9c%ec%9e%90%eb%a5%bc-%eb%a7%8c%eb%82%98-%eb%b4%a4%ec%8a%b5%eb%8b%88%eb%8b%a4-my-story/\" target=\"_blank\" rel=\"noopener noreferrer\">이 글</a>은 팀장이 인터뷰한 내용을 정리한 것인데 읽으면서 굉장히 마음에 와닿았다.</li>\n<li>항상 긍정적인 마인드로 주변을 이끌어 가는 사람과 일할 수 있는 것은 큰 행운이라고 생각한다.</li>\n<li>제일 인상 깊은 내용이다. <br> <img src=\"https://user-images.githubusercontent.com/18749057/96334105-35057680-10a9-11eb-9791-ab828a734df8.png\" alt=\"팀장님의 명언\" width=\"500\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>이 외에도 우리 팀에는 좋은 분들이 너무 많이 있다. <strong>필자 또한 긍정적인 영향력을 가진 구성원이 되는 것이 목표</strong>이다.</li>\n</ul>\n</li>\n<li><code>3주차</code>에는 회고 주제가 기억나지 않았다. 기억나는건 공개 코드리뷰를 하면서 <code>Typescript</code>에 대해 설명하고 덤으로 <strong><code>intellij</code>를 이용하여 git을 운영하는 방법과 코드리뷰를 하는 방법</strong> 등을 설명했다.</li>\n<li><code>4주차</code>에는 스터디 자체에 대한 회고와 <strong>앞으로의 계획</strong>, 그리고 그냥 각자에 대한 이야기를 했던걸로 기억한다.</li>\n</ul>\n<h4>(3) 페어프로그래밍</h4>\n<p><a href=\"https://www.youtube.com/watch?v=ts-ErQNUGNo\" target=\"_blank\" rel=\"noopener noreferrer\">페어프로그래밍</a>은 들어보기만 했고 실제로 해본 경험은 없었기 때문에 많이 생소했다.\n결과적으로 <strong>총 3회</strong>를 참여했으며, 충분히 좋은 경험이 되었다고 생각한다.</p>\n<p>페어프로그래밍은 요약하자면 정해진 시간동안 <code>드라이버</code> 코드를 작성하고,\n<code>네비게이터</code>는 <strong>드라이버가 작성하는 코드를 실시간으로 리뷰</strong>를 하면서 진행하는 것이다.\n그리고 시간이 다 되거나 혹은 드라이버가 목표로하는 기능을 구현했을 때 서로 역할을 바꾸는 것이다.\n<u>페어프로그래밍이 끝나면 각자 짧게 회고 및 서로에 대한 피드백을 한다.</u></p>\n<p>코로나 때문에 <code>행아웃</code>과 <code>줌</code>의 화면공유 기능을 이용하여 온라인으로 진행했다.</p>\n<ul>\n<li><code>1주차</code>\n<ul>\n<li>스터디를 여자친구와 같이 신청했다. <u>설마설마 했는데 첫 번째 페어 프로그래밍 부터 지인과 매칭이 되었다.</u></li>\n<li>덕분에 매우 <s>조심스럽게</s> 편하게 진행할 수 있었다.</li>\n<li><strong>15분 간격</strong>으로 역할을 바꿨고, <strong>총 3시간</strong> 정도 진행했다.</li>\n<li>페어프로그래밍을 할 때 작성한 코드를 기준으로 <strong>다시 내 코드를 리팩토링</strong> 했다.</li>\n</ul>\n</li>\n<li><code>2주차</code>\n<ul>\n<li>JS를 시작한지 얼마 되지 않은 분과 매칭이 되었다.</li>\n<li>그래서 <strong>주로 네비게이터의 역할</strong>을 맡아서 했다.</li>\n<li>피드백 시간에 스터디장님과 같이 어떤식으로 개발 공부를 하면 되고, <strong>피드백과 코드리뷰의 중요성</strong>에 대해서 열변을 토한걸로 기억한다.</li>\n<li>확실히 같이 공부하는 사람이 많을 수록, <strong>주변에 피드백을 해주는 사람이 많을 수록 빠르게 성장</strong>할 수 있는 것 같다.</li>\n</ul>\n</li>\n<li><code>3주차</code>\n<ul>\n<li>또 다시 지인과 매칭이 되었다.</li>\n<li>이번에는 전체적인 기능 구현이 아닌 <strong>옵저버를 구현하기로 합의</strong>하고 진행했다. <s>내가 제안했는데, 내가 많이 헤맸다.</s></li>\n<li>단순한 옵저버 패턴 구현이 아니라 만드는게 아니라 <code>Object.defineProperty</code>를 이용하여 <strong>자동으로 옵저빙</strong> 하는 코드를 만들었다.</li>\n<li><u>이 때 코드가 잘 만들어졌고 이를 2주차 / 3주차 미션에 적용했다.</u> 다만 리팩토링할 부분이 너무 많아서 <strong>거의 처음부터 다시 만들었다.</strong> <s>리팩토링의 연속</s></li>\n</ul>\n</li>\n</ul>\n<p>결과적으로 <strong>페어프로그래밍을 하면서 고민했던 것들을 내 코드에 전부 녹였다.</strong>\n확실히 다른 사람과 같이 무언가를 만들면 더 고민을 많이 하게 된다.\n<strong>당장 서로가 알아볼 수 있게 코드를 만들어야 한다는 점</strong>이 매리트라고 생각한다.\n그리고 <strong>즉각적인 피드백</strong>을 주고 받기 때문에 잘못된 점을 빠르게 고칠 수 있다.</p>\n<p>다만 한 번 하면 3시간 정도 소요되기 때문에 굉장히 피곤했다. <s>그냥 하는 일이 많아서 피곤했다.</s></p>\n<h4>(4) 코드리뷰</h4>\n<p>블랙 커피 스터디를 진행하는 동안 <s>정말 미친놈처럼</s> <strong>코드리뷰를 굉장히 많이 했다.</strong></p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96168601-f1512680-0f5b-11eb-8118-15e2a1a1b680.png\" alt=\"image05\" width=\"500\">\n<p><code>1주차</code>에는 마지막에 올라온 5개의 PR을 제외한 모든 PR에 리뷰를 남겼다. 갯수를 세어보니 총 10개의 PR이었다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96168541-dbdbfc80-0f5b-11eb-982a-1cc4737f53dc.png\" alt=\"image04\" width=\"700\">\n<p>하루 날잡고 종일 리뷰만 했는데, JS 코드를 마음껏 볼 수 있어서 좋았다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96169597-56f1e280-0f5d-11eb-92e6-cc2553ea10ed.png\" alt=\"image07\" width=\"700\">\n<p>1주차에 올라온 코드는 대부분 비슷한 스타일로 작성되어 있어서 <strong>설계적인 측면보단 문법적인 측면의 리뷰</strong>를 많이 했던 것 같다.</p>\n<ul>\n<li>리뷰 모음\n<ul>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/30\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#30</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/31\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#31</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/33\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#33</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/34\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#34</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/35\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#35</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/36\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#36</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/37\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#37</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/38\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#38</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/40\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#40</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step1/pull/41\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step1#41</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><code>2주차</code>에는 PR을 올린 모든 사람이 코드를 굉장히 많이 개선했다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96169303-e5199900-0f5c-11eb-8103-ea57f18594ec.png\" alt=\"image06\" width=\"700\">\n<p>대부분의 사람들이 <code>Observer Pattern</code>을 이용해서 컴포넌트를 설계했다.\n<code>Store</code>를 구현한 사람도 있었고, 혹은 다른 사람들과 아예 다른 방식으로 설계한 사람도 있었다.</p>\n<p>그래서 리뷰를 할 때 고민을 더 많이 했고, 내가 작성한 코드에 맡게 다른 사람이 작성한 코드를 적용했다.\n<strong>똑같은 기능을 구현할 때 다른 사람이 작성한 코드를 볼 수 있다는 것은 큰 행운이라고 생각한다.</strong></p>\n<p>2주차에 올라온 PR은 전부 리뷰를 완료했다.</p>\n<ul>\n<li>리뷰 모음\n<ul>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/16\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#16</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/17\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#17</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/18\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#18</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/19\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#19</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/20\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#20</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/22\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#22</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/23\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#23</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step2/pull/24\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step2#24</a>\n<ul>\n<li><code>#24</code>는 자신만의 확고한 신념을 가지고 설계한게 느껴진다. 그래서 마지막으로 PR을 올린게 아닐까 싶다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><code>3주차</code>에는 필자를 포함하여 4명의 사람이 PR을 올렸다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96171996-b0a7dc00-0f60-11eb-8348-ca62003836c6.png\" alt=\"image09\" width=\"700\">\n<p>그래서 리뷰 자체는 어렵지 않았다. 대부분 2주차의 설계를 그대로 가져온 모습을 보였다.\n나의 경우 한 분이 <code>typescript</code>에 대해 언급해주셔서 스터디장님의 허락을 맡고 <code>typscript</code>를 적용했다. <s>괜히 한 것 같다</s></p>\n<p>사실 말이 3주차고 대부분 4주차에 코드를 올렸다.</p>\n<ul>\n<li>리뷰 모음\n<ul>\n<li><a href=\"https://github.com/next-step/js-todo-list-step3/pull/12\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step3#12</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step3/pull/13\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step3#13</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step3/pull/16\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step3#16</a></li>\n<li><a href=\"https://github.com/next-step/js-todo-list-step3/pull/17\" target=\"_blank\" rel=\"noopener noreferrer\">next-step/js-todo-list-step3#17</a></li>\n</ul>\n</li>\n</ul>\n<p>이 때 PR을 올린 사람들은 <strong>1주차와 비교했을 때 굉장히 발전을 많이한게 느껴졌다.</strong> 확실히 스터디의 효과가 느껴지는 코드들이었다.</p>\n<h4>(5) 내가 작성한 Core 코드</h4>\n<p>나는 <code>Step3</code>를 시점으로 <code>Observer</code> <code>Component</code> <code>Router</code> <code>Store</code> <code>RestClient</code> 등 5개의 코어를 설계했다.</p>\n<hr>\n<p>먼저 <code>Observer.ts</code>에 대해 살펴보자.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token comment\">// Observer.ts</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>debounceOneFrame<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">let</span> currentObserver<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// observable이 observer에서 사용되었다면 observable이 변경되었을 때 observer가 저절로 실행되도록 만들었다.</span></span>\n<span class=\"line\"><span class=\"token comment\">// 이 때 currentObserver가 observable에서 사용된다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>observer<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> <span class=\"token function\">debounceOneFrame</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  currentObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// obj의 key가 변하면 observe를 실행하도록 만들어주는 코드이다.</span></span>\n<span class=\"line\"><span class=\"token comment\">// obj에 새로운 key를 할당할 때도 사용할 수 있다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observableOfKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> defaultValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> observers<span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> defaultValue <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> defaultValue <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span></span>\n<span class=\"line\">                <span class=\"token operator\">?</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">                <span class=\"token operator\">:</span> defaultValue<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>currentObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      _value <span class=\"token operator\">=</span> value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span></span>\n<span class=\"line\">                  <span class=\"token operator\">?</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">                  <span class=\"token operator\">:</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>observer <span class=\"token operator\">=&gt;</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// target으로 받은 object의 key를 전부 observable로 만들어서 반환한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> defaultValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">observableOfKey</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">          target</span>\n<span class=\"line\">        <span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드는 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">state.a = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">state.b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">state.c : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>c<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">state.a + state.b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">state.a + state.b + state.c = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>c<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">111</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">state<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">222</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><img src=\"https://user-images.githubusercontent.com/18749057/96173666-33319b00-0f63-11eb-8f29-bb8063e6433d.png\" alt=\"image10\" widht=\"500\">\n<p>마찬가지로 <strong>컴포넌트 렌더링</strong>에 사용할 수 있다.</p>\n<p>주목해야할 점 중에 하나가 <code>observer</code>에 <code>debounce</code>를 씌운 부분이다. <code>observable</code>에 변화가 생겼을 때 한 프레임 단위로 <code>observer</code>를 실행하도록 한 것이다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounceOneFrame</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>callback<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> timer<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    timer <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드를 이용하면 한 프레임 단위로 함수를 지연시킬 수 있다.</p>\n<hr>\n<p>다음으로 <code>Component.ts</code>에 대해 살펴보자.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token comment\">// Component.ts</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>addEventBubblingListener<span class=\"token punctuation\">,</span> selectAllElement<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>CommonEvent<span class=\"token punctuation\">,</span> ComponentConstructable<span class=\"token punctuation\">,</span> PickEvent<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/domains\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observe<span class=\"token punctuation\">,</span> observable<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/_core\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컴포넌트에서 앞서 언급한 Observer의 observe, observable을 사용한다. </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildrenProp</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  constructor<span class=\"token operator\">:</span> ComponentConstructable<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  props<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ChildrenProps</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ChildrenProp<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component<span class=\"token operator\">&lt;</span>Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> State <span class=\"token keyword\">extends</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> $state<span class=\"token operator\">?</span><span class=\"token operator\">:</span> State<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> $children<span class=\"token operator\">:</span> ChildrenProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> $target<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> $props<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Props</span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">componentInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// state는 observable로 만들었다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// render는 observe로 만들었다.</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 따라서 state(observable)가 변경되면 자동으로 render(observe)가 실행된다.</span></span>\n<span class=\"line\">    <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token function\">buildChildren</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">selectAllElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-component]'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> componentName <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>component <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> constructor<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$children<span class=\"token punctuation\">[</span>componentName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">new</span> <span class=\"token class-name\">constructor</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">componentInit</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">componentDidMount</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">setState</span> <span class=\"token punctuation\">(</span>payload<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> State<span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">keyof</span> State<span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token generic-function\"><span class=\"token function\">addEvent</span> <span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> CommonEvent<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    ref<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    eventType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> PickEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">addEventBubblingListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[data-ref=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ref<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 컴포넌트 코드는 다음과 같이 사용된다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Kanban <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token keyword\">extends</span></span> Component <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">async</span> <span class=\"token function\">componentInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">await</span> todoOfTeamStore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FETCH_TEAM</span><span class=\"token punctuation\">,</span> todoRouter<span class=\"token punctuation\">.</span>$query<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$children <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      TodoHeader<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> constructor<span class=\"token operator\">:</span> TodoHeader <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      TodoListOfTeam<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> constructor<span class=\"token operator\">:</span> TodoListOfTeam <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      TodoMemberAppendForm<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> constructor<span class=\"token operator\">:</span> TodoMemberAppendForm <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;h1 data-component=\"TodoHeader\" id=\"user-title\"&gt;&lt;/h1&gt;</span>\n<span class=\"line\">      &lt;ul data-component=\"TodoListOfTeam\" id=\"todo-list-of-team\" class=\"todoapp-list-container flex-column-container\"&gt;&lt;/ul&gt;</span>\n<span class=\"line\">      &lt;div data-component=\"TodoMemberAppendForm\" id=\"member-append-form\"&gt;&lt;/div&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> TeamList <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token keyword\">extends</span></span> Component <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">template</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> teams <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> teamStore<span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>teams<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> _id<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">        &lt;div class=\"team-card-container\" data-id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span>\n<span class=\"line\">          &lt;a href=\"#!\" class=\"card\" data-ref=\"view\"&gt;</span>\n<span class=\"line\">            &lt;div class=\"card-title\"&gt;</span>\n<span class=\"line\">              </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">            &lt;/div&gt;</span>\n<span class=\"line\">          &lt;/a&gt;</span>\n<span class=\"line\">        &lt;/div&gt;</span>\n<span class=\"line\">      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span>\n<span class=\"line\">      </span>\n<span class=\"line\">      &lt;div class=\"add-team-button-container\"&gt;</span>\n<span class=\"line\">        &lt;button id=\"add-team-button\" class=\"ripple\" data-ref=\"add\"&gt;</span>\n<span class=\"line\">          &lt;span class=\"material-icons\"&gt;add&lt;/span&gt;</span>\n<span class=\"line\">        &lt;/button&gt;</span>\n<span class=\"line\">      &lt;/div&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">protected</span> <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> event <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">selectParent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-id]'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      todoRouter<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./kanban.html?id=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEvent</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      teamStore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_OPENED_TEAM_APPEND_FORM</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 컴포넌트 코드에서 주목해야할 부분은 <code>addEventBubblingListener</code> 이다.\n<strong>컴포넌트가 마운트될 때 컴포넌트를 감싸는 DOM에 전체 이벤트를 버블링을 이용하여 등록</strong>한다.\n따라서 이벤트를 조금 더 유연하게 관리할 수 있게 된다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addEventBubblingListener <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> CommonEvent<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  parent<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  childSelector<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  eventType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> PickEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTarget</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">selectAllElement</span><span class=\"token punctuation\">(</span>childSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></span>\n<span class=\"line\">                                            <span class=\"token function\">selectParent</span><span class=\"token punctuation\">(</span>childSelector<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  parent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> event <span class=\"token keyword\">as</span> PickEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isTarget</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그런데 <strong>이벤트의 type 때문에 무척 고생</strong>했다.</p>\n<ul>\n<li><strong>기본 event type 자체가 애매모호</strong> 하다. 제대로 할 수 있는게 정말 하나도 없다.</li>\n<li><strong>event의 target이 dom을 가르키고 있지 않고 있다.</strong> 그래서 아무런 타입 선언 없이 <code>event.target</code>을 가져와서 사용하면 무조건 에러가 발생한다.</li>\n</ul>\n<p>즉, <strong>명시적으로 event의 type을 직접 정의</strong>해야 하고, event에서 사용되는 <strong>target의 type 또한 정의</strong>해야 제대로 사용할 수 있다.\n문제는 태그의 종류도 굉장히 많고, 이벤트의 종류도 굉장히 많이 있다는 것이다.</p>\n<p>그래서 React는 <code>React.ChangeEvent&lt;HTMLTextAreaElement&gt;</code> 이런식으로 사용할 수 있도록 <strong>모든 Event와 DOM 타입을 정의</strong>했다.</p>\n<p>일단 그냥 <code>any</code>로 처리할까 고민했지만 그럴꺼면 <code>ts</code>를 왜쓰겠냐는 생각 때문에 조금 머리를 굴렸다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CommonEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> HTMLElement <span class=\"token operator\">=</span> HTMLElement<span class=\"token operator\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span>Event<span class=\"token punctuation\">,</span> <span class=\"token string\">'target'</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  target<span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">KeyEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> HTMLInputElement <span class=\"token operator\">=</span> HTMLInputElement<span class=\"token operator\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span>KeyboardEvent<span class=\"token punctuation\">,</span> <span class=\"token string\">'target'</span><span class=\"token operator\">|</span><span class=\"token string\">'key'</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  target<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PickEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span>CommonEvent <span class=\"token operator\">|</span> KeyEvent<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> addEventBubblingListener <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> CommonEvent<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">  parent<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  childSelector<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  eventType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> PickEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span></span>\n<span class=\"line\"><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTarget</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">selectAllElement</span><span class=\"token punctuation\">(</span>childSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></span>\n<span class=\"line\">                                            <span class=\"token function\">selectParent</span><span class=\"token punctuation\">(</span>childSelector<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  parent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> event <span class=\"token keyword\">as</span> PickEvent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isTarget</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token generic-function\"><span class=\"token function\">addEventBubblingListener</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CommonEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">&gt;&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'priority'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드를 정리해보자면,</p>\n<ul>\n<li>기본 이벤트 타입에서 <code>Omit</code>을 이용하여 기존 <code>target</code>의 타입을 제거하고, 제네릭으로 받아온 타입을 <code>target</code>에 대입한다.</li>\n<li>위와 같은 방식으로 앱 내에서 사용중인 이벤트만 커스텀하여 만든다.</li>\n<li>커스텀으로 정의한 이벤트 중 하나를 Extract를 통하여 선택할 수 있는 새로운 타입을 정의한다 (<code>PickEvent</code>)</li>\n<li><code>addEventBubblingListener</code>에서 <code>event</code> 파라미터의 타입을 unkown으로 정의한다.</li>\n<li><code>addEventBubblingListener</code>의 제네릭으로 받아온 타입을 <code>event</code>에 명시적으로 타입 캐스팅을 해준다.</li>\n</ul>\n<hr>\n<p>다음으로 <code>Store</code>에 대해서 살펴보자.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observable<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/_core\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Getter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Getters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Getter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Mutations<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ActionContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  state<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function-variable function\">commit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function-variable function\">dispatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Actions<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> ActionContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StoreProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  state<span class=\"token operator\">:</span> <span class=\"token constant\">T</span></span>\n<span class=\"line\">  getters<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Getters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">  mutations<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Mutations<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">  actions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Actions<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> $state<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> $getters<span class=\"token operator\">:</span> Getters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> mutations<span class=\"token operator\">:</span> Mutations<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> actions<span class=\"token operator\">:</span> Actions<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> StoreProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$getters <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>getters<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">                          <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>getters<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> getter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">                            Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>getters<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">                              <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">                            <span class=\"token keyword\">return</span> getters<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">                          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mutations <span class=\"token operator\">=</span> mutations<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>actions <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">commit</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mutations<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">dispatch</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function-variable function\">commit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token function-variable function\">dispatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      state<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>Store</code>는 <code>Vuex</code>를 모방하여 만들었다. 그래서 거의 똑같이 사용했다. 따라서 위의 코드는 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Store<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/_core\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>TodoService<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/services\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SET_TEAMS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'SET_TEAMS'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TeamState</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  teams<span class=\"token operator\">:</span> TodoTeam<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> teamStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store<span class=\"token operator\">&lt;</span>TeamState<span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    teams<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token punctuation\">[</span><span class=\"token constant\">SET_TEAMS</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> teams<span class=\"token operator\">:</span> TodoTeam<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      state<span class=\"token punctuation\">.</span>teams <span class=\"token operator\">=</span> teams<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    async <span class=\"token punctuation\">[</span><span class=\"token constant\">FETCH_TEAMS</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> commit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_TEAMS</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> TeamService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchTeams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    async <span class=\"token punctuation\">[</span><span class=\"token constant\">ADD_TEAM</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">await</span> TeamService<span class=\"token punctuation\">.</span><span class=\"token function\">addTeam</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FETCH_TEAMS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">teamStore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_TEAMS</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">teamStore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FETCH_TEAMS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">teamStore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_TEAMS</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'TEAM A'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> teams <span class=\"token operator\">=</span> teamStore<span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">.</span>teams<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>다음으로 <code>RestClient.ts</code>를 살펴보자.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token comment\">// RestClient</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>HttpMethod<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/constants\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>RequestBody<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/domains\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestClient</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> baseURL<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token function\">getUrlOf</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> slash <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>slash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>uri<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token function\">request</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> HttpMethod <span class=\"token operator\">=</span> HttpMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUrlOf</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> method <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">private</span> <span class=\"token function\">requestWithBody</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> HttpMethod<span class=\"token punctuation\">,</span> body<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RequestBody<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> requestInit<span class=\"token operator\">:</span> RequestInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> method<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUrlOf</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> HttpMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RequestBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">requestWithBody</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> HttpMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">put</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RequestBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">requestWithBody</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> HttpMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">patch</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RequestBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">requestWithBody</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> HttpMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">PATCH</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>아쉬운 부분은 에러처리를 <code>RestClient</code>에서 하지 않는다는 점이다. <s>그냥 귀찮아서 안 했다.</s>\n어쨌든, 위의 코드는 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token comment\">// 먼저 Adapter를 만들어야 한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoAdapterURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://js-todo-list-9ca3a.df.r.appspot.com/api'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoAdapterClient<span class=\"token operator\">:</span> RestClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">(</span>todoAdapterURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 그리고 adapter를 service에서 불러와 사용하면 된다. </span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoService <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"> <span class=\"token function\">fetchTeams</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">   <span class=\"token keyword\">return</span> todoAdapterClient<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teams'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"> <span class=\"token function\">fetchTeam</span> <span class=\"token punctuation\">(</span>teamId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">   <span class=\"token keyword\">return</span> todoAdapterClient<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/teams/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>teamId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"> <span class=\"token function\">addTeam</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">   <span class=\"token keyword\">return</span> todoAdapterClient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/teams</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"> <span class=\"token function\">addTeamMember</span> <span class=\"token punctuation\">(</span>teamId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">   <span class=\"token keyword\">return</span> todoAdapterClient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/teams/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>teamId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/members</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"> <span class=\"token function\">deleteTeam</span> <span class=\"token punctuation\">(</span>teamId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">   <span class=\"token keyword\">return</span> todoAdapterClient<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/teams/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>teamId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"> <span class=\"token function\">deleteTeamMember</span> <span class=\"token punctuation\">(</span>teamId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> memberId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">   <span class=\"token keyword\">return</span> todoAdapterClient<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/teams/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>teamId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/members/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>memberId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>최대한 추상화를 한 코드이다. 아마 <code>axios</code>를 사용한다면 더 단축될 것이다.</p>\n<hr>\n<p>마지막으로 <code>Router.ts</code>를 살펴보자.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token comment\">// Router.ts</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>parseQuery<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>RequestQuery<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/domains\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> $query<span class=\"token operator\">:</span> RequestQuery <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 주소의 변경을 감지한다. 주소가 변경되면 load를 실행한다.</span></span>\n<span class=\"line\">    window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpopstate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// load는 현재 주소에 매칭되는 일을 수행한다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">load</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$query <span class=\"token operator\">=</span> <span class=\"token function\">parseQuery</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// push는 주소를 변경한 해당 주소에 다음에 매칭되는 일을 수행하낟.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">push</span> <span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> query<span class=\"token operator\">:</span> RequestQuery <span class=\"token operator\">=</span> <span class=\"token function\">parseQuery</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>로직은 매우 단순하다.</p>\n<ul>\n<li>주소가 변경되면 <code>Callback</code> 함수가 실행된다.</li>\n<li><code>Callback</code>함수는 주소에 매칭되는 컴포넌트를 최상위 DOM에 렌더링하는 형태의 코드로 만든다.</li>\n<li>혹은 <code>push</code>를 이용하여 직접 <code>Callback</code>을 호출할 수 있다.</li>\n</ul>\n<p>그래서 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-typescript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"ts\" data-title=\"ts\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> <span class=\"token function\">selectElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoRouter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'kanban'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Kanban</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 현재 주소에 대한 컴포넌트 렌더링</span></span>\n<span class=\"line\">todoRouter<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 라우터 변경</span></span>\n<span class=\"line\">todoRouter<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/kanban'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Kanban 렌더링</span></span>\n<span class=\"line\">todoRouter<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Team 렌더</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>이렇게 만들어본 코어는 추후에 <a href=\"https://programmers.co.kr/competitions/383/2020-naver-fe-recruitment\" target=\"_blank\" rel=\"noopener noreferrer\">네이버 아폴로 챌린지</a>에서 프론트엔드 과제를 만들 때 큰 도움이 되었다.\n다만 라우터에 몇 가지 문제가 있어서 다시 개선해야 했다.. 너무 대충만들었달까.. 😅</p>\n<h4>(6) 정리</h4>\n<hr>\n<p>필자가 작성한 코드는 다음 저장소에서 볼 수 있다.</p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/js-todo-list-step1\" target=\"_blank\" rel=\"noopener noreferrer\">JunilHwang/js-todo-list-step1</a></li>\n<li><a href=\"https://github.com/JunilHwang/js-todo-list-step2\" target=\"_blank\" rel=\"noopener noreferrer\">JunilHwang/js-todo-list-step2</a></li>\n<li><a href=\"https://github.com/JunilHwang/js-todo-list-step3\" target=\"_blank\" rel=\"noopener noreferrer\">JunilHwang/js-todo-list-step3</a></li>\n</ul>\n<p>그리고 위에 있는 내용을 정리한 저장소가 별개로 존재한다. <s>사실 깃허브 잔디를 만들기 위해서 따로 만들었다.</s></p>\n<ul>\n<li><a href=\"https://github.com/JunilHwang/black-coffee-study\" target=\"_blank\" rel=\"noopener noreferrer\">JunilHwang/black-coffee-study</a></li>\n</ul>\n<p>데모는 다음 링크에서 확인할 수 있다.</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/black-coffee-study/step1/\" target=\"_blank\" rel=\"noopener noreferrer\">step1 데모</a></li>\n<li><a href=\"https://junilhwang.github.io/black-coffee-study/step2/\" target=\"_blank\" rel=\"noopener noreferrer\">step2 데모</a></li>\n<li><a href=\"https://junilhwang.github.io/black-coffee-study/step3/\" target=\"_blank\" rel=\"noopener noreferrer\">step3 데모</a></li>\n</ul>\n<hr>\n<h4>(7) 짧막한 회고</h4>\n<p>이렇게 다른 사람들과 <code>Javascript Study</code>를 해보는게 처음이었기 때문에 굉장히 재밌었다.\n그리고 <strong>주변 사람들에게도 많이 소개</strong>했다.</p>\n<p>먼저 팀원의 지인 중에 이 스터디에 대해 궁금해하는 사람이 있어서 최대한 자세히 설명해줬고,\n<strong>내가 가르치고 있는 학생들에게도 다음 기수에 꼭 신청하라고 신신당부</strong> 해놨다.\n<u>글을 작성하는 시점을 기준으로 3명의 학생이 4기 스터디를 신청했다.</u></p>\n<p>그리고 같이 신청한 친구 중 한 명이 아예 활동을 안 했다.\n왜 활동을 안 하냐고 물어보니 <a href=\"https://programmers.co.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">프로그래머스</a>에서 진행한 <a href=\"https://programmers.co.kr/learn/courses/10785\" target=\"_blank\" rel=\"noopener noreferrer\">프론트엔드 개발을 위한 자바스크립트 스터디(feat. VanillaJS)</a>에 참여했었는데,\n<strong>블랙커피 스터디의 커리큘럼이 이와 매우 유사해서</strong> 일부로 하지 않았다고 한다. <s>어디서 핑계를</s></p>\n<p>나도 어떤 스터디인가 궁금해서 추천사를 봤는데,</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96236182-a9231a00-0fd6-11eb-9076-d5472c201514.png\" alt=\"image11\" width=\"600\">\n<p><u>블랙커피 스터디장인 임동준님도 이 스터디를 거쳐오신 것 같았다.</u> <s>사실 여부는 잘 모르겠음</s></p>\n<p>각설하고, 이 스터디를 통해서 <strong>많은 사람들과 소통</strong>할 수 있었고 <strong>스스로에게 자극</strong>을 많이 줄 수 있어서 좋았다.\n<code>Javascript</code> 공부를 어떻게 시작 해야할지 모르는 사람에게 꼭 추천해주고 싶다. 그리고 <u>혼자서 공부하는 사람에게도!</u></p>\n<p>앞서 언급했지만 <strong>개발 공부는 다른 사람들과 같이</strong> 해야한다. 개발은 절대 혼자하는게 아니기 때문이다.</p>\n<p>아 그리고 현재 스터디는 <code>Level01</code>이다.\n<a href=\"https://edu.nextstep.camp/c/30DRya3u/\" target=\"_blank\" rel=\"noopener noreferrer\">Level02</a>에서는 주로 <strong>테스트에 대한 내용</strong>을 다루고 있다.</p>\n<p>스터디장님은 최종 레벨을 <a href=\"https://edu.nextstep.camp/c/8fWRxNWU/\" target=\"_blank\" rel=\"noopener noreferrer\">클린코드를 위한 TDD, 리팩토링 with Java</a>와 유사한 커리큘럼으로 만들어서 운영하는게 목표라고 하셨다.</p>\n<h4>(8) 짧막한 목표</h4>\n<p>뒤늦게 알았지만, <u>스터디를 운영 중인 동준님이 우아한 테크코스에서 Front-end 파트를 운영하고 계셨다.</u>\n사실 옛날부터 나의 직업적 꿈이 <strong>개발과 교육을 같이 하는 것</strong>이였기 때문에 동준님을 동경하게 되었다.</p>\n<p>어쨌든 지금도 주업은 개발을 하고 있고 부업을 교육으로 하는 중이다.\n매주 고등학생들을 지도하기도 하고, 인강을 찍어서 특성화고등학교의 방과후 수업에 활용하기도 하는 중이다.</p>\n<p>지금은 주로 고등학생을 대상으로 교육을 하고 있으나, 조금 더 기회가 된다면 더 많은 사람들과 교류하며 나의 지식을 전달하는 일을 하고 싶다.\n그게 꼭 동준님처럼 우아한 테크코스에서 일하는게 아닐지라도 말이다!</p>\n<p>그럴라면 또 열심히 공부해야지!</p>\n<h3>2. 부스트캠프 리뷰어 활동</h3>\n<p>8월에 <a href=\"https://github.com/connectfoundation/review_2020\" target=\"_blank\" rel=\"noopener noreferrer\">부스트캠프 리뷰어</a>를 신청했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95013576-1e5c2a00-067c-11eb-8759-f7cf70cab6c7.png\" alt=\"부스트캠프 리뷰어\" width=\"600\"> <br></p>\n<img width=\"587\" alt=\"image11\" src=\"https://user-images.githubusercontent.com/18749057/96238793-d3c2a200-0fd9-11eb-983d-f3c5e182edd1.png\">\n<p>본격적인 활동은 9월부터 시작했으며, <strong>매주 월요일에 온라인 세션에서 회고</strong>를 진행했다. 그런데 <strong>웹 리뷰어의 경우 격주로 리뷰</strong>하기 때문에, 회고 참여 또한 격주로 했다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96239127-49c70900-0fda-11eb-9ff9-b1c649c864ff.png\" alt=\"image12\" width=\"700\">\n<p><strong>격주</strong>로 <strong>화요일/목요일</strong>에 올라오는 PR에 리뷰를 남기면 됐는데 처음에 리뷰할 때 <strong>캠퍼들에게 대체로 위와 같은 내용의 리뷰</strong>를 남겼다.\n사실 첫 리뷰만 좀 힘들었고, 그 이후의 리뷰는 힘들진 않았다. 다만 <strong>6명을 리뷰하는게 생각보다 시간이 많이 소요</strong>됐다.</p>\n<p>그리고 <code>블랙커피 스터디</code>의 <code>온라인 세션</code>은 화요일 <code>페어프로그래밍</code>은 목요일이었기 때문에 <u>화요일/목요일에는 정말 미친듯이 피곤했다... 😭😭😭</u></p>\n<p>어쨌든 부스트캠프에 관련된 내용은 리뷰 외에 특별한게 없었기 때문에 회고는 여기까지만 하겠다.\n활동이 끝나면 다시 전체적인 내용을 정리해서 올릴 예정이다.</p>\n<h3>3. 넥스트스탭 리뷰어 활동</h3>\n<p>7월 말부터 시작한 <code>클린코드를 위한 TDD, 리팩토링 with Java 9기</code> 과정이 9월 말에 종료되었다. <strong>약 8주간의 과정</strong>이었다.</p>\n<img width=\"952\" alt=\"image12\" src=\"https://user-images.githubusercontent.com/18749057/96241001-8e53a400-0fdc-11eb-869e-3bab4ecf7225.png\">\n<p><strong>총 15명을 리뷰</strong>했다. 예정대로라면 각 미션당 5명, 총 20명을 리뷰해야 하는데 5명이 아예 리뷰를 신청하지 않은 것이다.</p>\n<img width=\"925\" alt=\"image13\" src=\"https://user-images.githubusercontent.com/18749057/96241936-d4f5ce00-0fdd-11eb-98c7-d7365a440b5b.png\">\n<p>내가 맡은 리뷰이 중 딱 <strong>한 분만 최종 미션까지 완료</strong>했다.</p>\n<p>리뷰어를 하기 전에는 java 자체를 깊게 공부해본적이 없어서 걱정이 많았다.\n그런데 TDD 과정은 <strong>대부분 설계에 대한 내용</strong>이 많았기 때문에 생각보다 수월하게 리뷰할 수 있었다.</p>\n<p>지금은 javascript 공부에 집중하고 있는 상태라서 어느 정도 만족할 만한 수준이 된다면, java에 투자할 생각이다. <s>그게 대체 언제일까?</s></p>\n<p>그냥.. 공부할게 너무 많다... 😭</p>\n<h3>4. 기능경기대회 - 전국대회</h3>\n<p>8월부터 선생님의 부탁으로 기능반 학생들을 지도했고, <strong>숙소(전주)까지 따라가서 학생들의 훈련을 도왔다.</strong></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">기능경기대회</p>\n<ul>\n<li>정식 명칭은 <strong>기능올림픽</strong>이다.</li>\n<li>기능경기대회는 <strong>특성화고등학교의 수능이며 축제</strong>라고 할 수 있다.</li>\n<li><strong>지방대회 - 전국대회 - 국가대표 선발전 - 세계대회</strong> 등의 과정이 있다.</li>\n<li><strong>지방대회</strong>는 4월에 개최된다. 그런데 올해는 <strong>코로나 때문에 6월</strong>에 개최되었다.</li>\n<li><strong>전국대회</strong>는 9월/10월 중에 개최된다. 올해는 <strong>9월 14일 부터 7일간</strong> 대회가 진행되었다.</li>\n<li><strong>세계대회</strong>는 2년에 한 번씩 개최된다. 세계대회 입상 혜택은 다음과 같다. <u>올림픽 입상 혜택과 동일하다고 보면 된다.</u>\n<ul>\n<li>병역대체복무</li>\n<li>신축 아파트 분양권 획득</li>\n<li>대기업 연봉급 상금</li>\n<li>대학 진학시 학비 전액 지원</li>\n<li>연금</li>\n</ul>\n</li>\n<li>자세한 내용은 <a href=\"https://meister.hrdkorea.or.kr/main/main.do\" target=\"_blank\" rel=\"noopener noreferrer\">마이스터넷</a> 참고\n<ul>\n<li><a href=\"https://meister.hrdkorea.or.kr/sub/3/2/1/20160512110924569100_view.do\" target=\"_blank\" rel=\"noopener noreferrer\">지방대회</a></li>\n<li><a href=\"https://meister.hrdkorea.or.kr/sub/3/3/1/20160512111525375100_view.do\" target=\"_blank\" rel=\"noopener noreferrer\">전국대회</a></li>\n<li><a href=\"https://meister.hrdkorea.or.kr/sub/3/4/1/20160512111859974100_view.do\" target=\"_blank\" rel=\"noopener noreferrer\">세계대회</a></li>\n</ul>\n</li>\n</ul>\n<p>필자 또한 <strong>2012년도 경기도대회, 전국대회에서 입상</strong>을 했고 이를 계기로 본격적인 개발공부를 시작했다.</p>\n</div>\n<p><strong>9월 14일</strong> 부터 대회 시작이었고, 올해는 전북에서 진행되었다.</p>\n<div style=\"padding-top: 40%; position: relative;\">\n    <img style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0; object-fit: cover;\" src=\"https://user-images.githubusercontent.com/18749057/96245616-7717b500-0fe2-11eb-8e0a-524b36ee50bd.jpeg\" alt=\"image19\">\n</div>\n<p>경기장은 <code>전북 하이텍 고등학교</code>인데 코로나 때문에 선수들만 입장 가능했다. <s>덕분에 무척 편했다.</s></p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96245480-52bbd880-0fe2-11eb-9a33-f2e702a8dc10.png\" alt=\"image14\" width=\"500\">\n<p>나는 학생들이 경기가 끝나고 숙소에 돌아오면, 문제 풀이를 옆에서 도와주었다.\n<strong>며칠 동안 새벽 3시에 자거나 혹은 새벽 5시에 일어났다.</strong>\n회사 일도 재택근무로 병행하고 있던 상태라서 <strong>정말 미친듯이 피곤</strong>했다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96245578-6e26e380-0fe2-11eb-8226-0213e5fa6bd5.jpeg\" alt=\"image15\" width=\"600\">\n<p>어쨌든 <strong>필자가 가르친 학생들(서울디지텍고등학교)이 올해에도 입상</strong>했다.\n학생 한 명이 제출을 잘못해서 대략 30점 정도를 채점도 못하고 통으로 날려보냈다.\n그래도 입상은 했으니.. 이걸 다행이라고 해야할지.. 이 때 실수한 기억은 경험상 평생 가기 때문에 괜히 안쓰럽다.</p>\n<hr>\n<p>그리고 이 글을 작성하는 시점을 기준(10/16)으로 <strong>다음 기수의 학생들을 가르치는 중</strong>이다.\n이번 대회는 준비기간이 한 달 정도 밖에 되지 않았기 때문에 이번에 가르치는 학생들은 조금 더 차근차근 준비해서 <strong>역량 자체를 키워줄 생각</strong>이다.</p>\n<p>기능대회는 이제 너무 꼰대같은 대회가 되어버렸다. <u>제발 제발 제발 문제 출제 기준좀 좀 변경했으면... ㅠㅠ</u></p>\n<h3>5. 프로그래머스 리액트 스터디</h3>\n<p>앞서 블랙커피 스터디를 다룰 때 언급한 프로그래머스에 올라온 스터디 목록을 쭉 보다가 <strong>리액트 스터디</strong>가 눈에 보였다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96252260-a7645100-0fec-11eb-89da-129fe0814166.png\" alt=\"image20\" width=\"700\">\n<img width=\"818\" alt=\"image24\" src=\"https://user-images.githubusercontent.com/18749057/96285184-9120ba00-1019-11eb-9304-5ca917681409.png\">\n<p>여기서도 <strong>블랙커피 스터디장님의 추천사</strong>를 볼 수 있었다 😮</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96252674-4be69300-0fed-11eb-85ec-ef0abaa09e05.png\" alt=\"image21\" width=\"700\">\n<p>그래서 고민하지 않고 바로 신청했다. 이게 바로 <strong>추천사의 중요성</strong> 인가.. 🤔</p>\n<p>스터디는 <strong>매주 목요일마다 진행되는 온라인 세션</strong>을 통해 미션 진행에 필요한 기반 지식 및 미션 내용을 숙지할 수 있었다.</p>\n<p>첫 번째 미션을 완수하고 PR을 올렸더니 <strong>스터디 리더를 포함한 3명의 리뷰어 분들이 리뷰</strong>를 남겨주셨다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/96283857-c3311c80-1017-11eb-89db-6d9b3710f949.png\" alt=\"image22\" width=\"700\"><br></p>\n<img src=\"https://user-images.githubusercontent.com/18749057/96283876-cb895780-1017-11eb-9b86-1eaef07a9a9a.png\" alt=\"image23\" width=\"700\">\n<p>일단 미션의 내용 자체가 굉장히 유익했기 때문에 재밌었다. 확실히 혼자 공부할 때 보다 빠르게 기술을 익히고 있다는 느낌이 들었다.</p>\n<p>이 스터디는 4주 동안 진행된다. <strong>10월에 조금 더 상세하게 회고</strong>할 예정이다.</p>\n<hr>\n<p>뒤늦게 알았는데 스터디를 리드하시는 분이 프론트엔드, 백엔드, 그리고 데이터 엔지니어 업무를 겸하는 굉장히 다재다능한 분이었다.\n이제 경력 13년차라고 하셨는데, 정말 꾸준히 공부를 했다는게 느껴졌다.</p>\n<p><strong>나는 과연 10년 정도의 시간이 흐른 뒤에 어떤 모습일까?</strong></p>\n<hr>\n<h3>6. 네이버 아폴로 챌린지</h3>\n<p>프로그래머스에서 <a href=\"https://programmers.co.kr/competitions/383/2020-naver-fe-recruitment\" target=\"_blank\" rel=\"noopener noreferrer\">Naver Apollo CIC 경력 개발자 채용 - 프론트엔드 개발 챌린지</a>를 신청했다.</p>\n<img width=\"919\" alt=\"image25\" src=\"https://user-images.githubusercontent.com/18749057/96285579-199f5a80-101a-11eb-9095-1fe19d9b6123.png\">\n<p>먼저 <strong>9월 20일에 알고리즘 테스트</strong>를 통과하면 <strong>9월 27일에 프론트엔드 테스트</strong>를 볼 수 있는 과정이었다.\n<strong>알고리즘은 3문제</strong>가 출제되었고 다 풀이했다. 다만 마지막 문제에서 정확성 테스트를 통과하지 못했다.</p>\n<p>카카오 챌린지때도 두 문제만 풀었는데 통과했기 때문에 이번에도 알고리즘에서 떨어지진 않을 것이라고 생각했다.\n실제로 같이 응시한 사람 중 한 명이 한 문제만 제대로 풀었는데도 통과했다.</p>\n<p>프론트엔드 테스트는 <strong>바닐라 JS로 영화 리뷰와 관련된 SPA(Single Page APP)를 만드는 내용의 과제</strong>였다.</p>\n<p>원래 프로그래머스에서 프론트엔드 챌린지를 볼 때 어느 정도 기본 컴포넌트 설계가 된 코드를 제공해줬는데 <strong>이번에는 아예 처음부터</strong> 만들어야 했다.\n덕분에 블랙커피 스터디를 진행하면서 <strong>공부한 내용을 정말 알차게 써먹었다.</strong></p>\n<p><code>Component</code> <code>Router</code> <code>RestClient</code> <code>Observer</code> <code>debounce</code> 등을 포함한 모든 코어를 적용했고,\n결과적으로 완성도 있게 만들 수 있었다.</p>\n<p><strong>한 달 전의 나였으면 불가능했을 일이었다.</strong>\n<s>물론 내가 열심히 했기 때문도 있었지만</s> 이 모든것이 블랙커피 스터디 덕분이었다.</p>\n<p>결과는 10월 말에 나오는데, 카카오 챌린지는 상위 10% 였기 때문에 <strong>이번엔 상위 5% 정도는 되리라 예상</strong>해본다.</p>\n<blockquote>\n<p>10월 말에 결과가 나왔고, 무려 상위 0%의 점수를 획득했다. <s>아싸가오리</s></p>\n</blockquote>\n<h3>7. 단국대 개발자 스터디</h3>\n<p>이번 달도 큰 일 없이 스터디가 진행되었다.</p>\n<img width=\"700\" alt=\"image31\" src=\"https://user-images.githubusercontent.com/18749057/96289265-b1537780-101f-11eb-91ca-d2531e50fa7a.png\">\n<p>위의 사진 처럼 현재 이 글을 작성하는 시점을 기준으로 <strong>2,247개의 commit</strong>이 존재한다.</p>\n<img width=\"700\" alt=\"image30\" src=\"https://user-images.githubusercontent.com/18749057/96288817-fcb95600-101e-11eb-862b-eda2980496ea.png\">\n<p>이번 달에는 <strong>약 50개의 PR에 리뷰</strong>를 남겼다.\n현재는 나만 꾸준히 리뷰를 남기고 있는데, 다른 사람들도 조금만 의욕을 가지고 서로에게 피드백을 했으면 하는 바람이 있다.</p>\n<img width=\"838\" alt=\"image31\" src=\"https://user-images.githubusercontent.com/18749057/96289514-28890b80-1020-11eb-99bd-570a22ffc29f.png\">\n<p>그리고 스터디장이 <u>돈을 써야 돈이 생긴다면서</u> 큰맘먹고 사비를 들여 활발하게 활동하는 사람들에게 상금을 지급했다.</p>\n<hr>\n<p>이 외에 기분 좋은 이슈가 있었다. 8월 리뷰에 언급했었지만 <a href=\"https://www.e-mirim.hs.kr/main.do\" target=\"_blank\" rel=\"noopener noreferrer\">미림여자정보과학고등학교</a>에서 우리 스터디를 모방하여 알고리즘 스터디를 진행 중이었다.\n그런데 이 스터디를 운영하는 학생에게 메일이 한 통 왔다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/96286371-3d16d500-101b-11eb-9d68-35a7a1694fd4.png\" alt=\"image26\"></p>\n<p>사실 내가 원해서 시작한 스터디는 아니지만, 나름 잘 굴러가고 있었고 이렇게 누군가가 모방할 만큼 성장했다는게 믿기지 않았다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/96288105-dba43580-101d-11eb-8191-3f7b9d20ed26.png\" alt=\"image27\"></p>\n<p>그래서 다음과 같이 답변을 하면서 현재 운영하고 있는 방식들을 소개했다.\n그리고 겸사 겸사 간간이 리뷰도 해주게 되었다.</p>\n<img width=\"700\" alt=\"image28\" src=\"https://user-images.githubusercontent.com/18749057/96288516-8583c200-101e-11eb-858a-d44da5f2c612.png\">\n<p><strong>한 달 동안 대략 25개의 리뷰</strong>를 남겼다.</p>\n<img width=\"700\" alt=\"image29\" src=\"https://user-images.githubusercontent.com/18749057/96288752-e4e1d200-101e-11eb-854a-5c21c4f4e00e.png\">\n<p>고등학교 때 부터 이렇게 준비하는 이 학생들이 내심 부럽기도 하고 또 힘 닿는 만큼 도와주고 싶다는 생각도 든다. <s>지금 내 코가 석자인데 오지랖만 넓어지고 있다.</s></p>\n<hr>\n<p>그리고 스터디원 중에 굉장히 <a href=\"https://github.com/Jaewon0702\" target=\"_blank\" rel=\"noopener noreferrer\">성실한 사람</a>이 있다.\n내용이 너무 많아서 이곳에 보여주긴 힘들고, 궁금한 사람만 <a href=\"https://github.com/DKU-STUDY/TodayReview/issues/136#issuecomment-684861911\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>에서 확인해보길 바란다.</p>\n<p>이러한 분량의 <a href=\"https://github.com/DKU-STUDY/TodayReview/issues\" target=\"_blank\" rel=\"noopener noreferrer\">TodayReview</a>를 거의 매일 남기고 있다.\n이러한 열정이 부럽기도 하고, 존경스럽기도 하고, <strong>같이 스터디를 할 수 있음에 감사함을 느낀다.</strong></p>\n<h3>8. 일일커밋 및 코덕</h3>\n<p>이번 달에는 확실히 깃허브에 기록을 많이 남겼다.</p>\n<img width=\"778\" alt=\"image32\" src=\"https://user-images.githubusercontent.com/18749057/96290347-689cbe00-1021-11eb-873c-612efe8ec1d7.png\">\n<p>핵심적인 내용만 정리하자면</p>\n<ul>\n<li>Commit <code>770개</code></li>\n<li>Pull Request <code>15개</code></li>\n<li>Code Review <code>133개</code> -&gt; 사실 커밋 갯수보다 이게 더 놀랍다.</li>\n</ul>\n<p>그리고 <strong>글을 작성하는 시점을 기준으로 올 해에 4785개의 기여(Contributions)를 했다.</strong></p>\n<img width=\"934\" alt=\"image33\" src=\"https://user-images.githubusercontent.com/18749057/96290964-625b1180-1022-11eb-9609-078d376126c6.png\">\n<p><strong>원래 5000개가 목표였는데, 6000개로 늘려야겠다.</strong></p>\n<p>이렇게 왕성하게 활동한 덕분에 8월에 이어서 <strong>9월 코덕 랭킹 1위</strong>를 달성했다.</p>\n<img width=\"634\" alt=\"image34\" src=\"https://user-images.githubusercontent.com/18749057/96291283-c8479900-1022-11eb-92c9-f18174124dfc.png\">\n<p>다만 이번에는 <code>우아한 테크코스</code> 그룹에게 1등을 내어주었다. <code>DKU-STUDY</code>는 2등으로 마무리했다.  <s>스터디원을 더 모집해야 할까?</s></p>\n<img width=\"535\" alt=\"image35\" src=\"https://user-images.githubusercontent.com/18749057/96291354-e1e8e080-1022-11eb-9b27-27230437b212.png\">\n<h2>이쯤에서 돌아보는 스케쥴 정리</h2>\n<ul>\n<li><code>월요일</code> 부스트 캠프 세션 (약 2시간 정도 진행)</li>\n<li><code>화요일</code> 블랙커피 스터디 세션 (약 2시간 정도 진행) + 부스트캠프 리뷰</li>\n<li><code>목요일</code> 블랙커피 스터디 페어프로그래밍 (약 3시간 정도 진행) + 부스트캠프 리뷰</li>\n</ul>\n<p>이 외에도 다음과 같은 상시 스케쥴이 존재했다.</p>\n<ul>\n<li><code>블랙커피 스터디</code>에 PR 리뷰</li>\n<li><code>클린코드를 위한 TDD, 리팩토링 with Java 9기</code> 리뷰</li>\n<li><code>서울디지텍고등학교 기능반</code> 학생들이 올리는 코드에 대한 리뷰</li>\n</ul>\n<p>덕분에 본문에서 언급한 것 처럼 한 달 동안 코드리뷰만 100개 넘게 했다.. 😰</p>\n<h2>Summary</h2>\n<ul>\n<li>확장프로그램 관련 포스팅 완료</li>\n<li>Sortable.js 때문에 고생했음</li>\n<li>블랙커피 스터디 덕분에 공부를 많이 했음</li>\n<li>부스트 캠프 리뷰어 활동</li>\n<li>넥스트 스텝 리뷰어 활동</li>\n<li>프로그래머스 리액트 스터디</li>\n<li>기능반 학생들 지도 및 입상</li>\n<li>9월 코덕 랭킹 1위</li>\n</ul>\n<hr>\n<p>마지막은 주인님 사진으로 마무리!</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/96334155-86ae0100-10a9-11eb-95bc-ad5d5a3f19ff.jpeg\" alt=\"포동이\"></p>\n",
      "image": "https://user-images.githubusercontent.com/18749057/95010212-7128e800-0662-11eb-918d-da7a31d64d7f.png",
      "date_published": "2020-09-30T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 8월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/08-August/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/08-August/",
      "summary": "2020년 8월 회고 입니다.",
      "content_html": "\n<p>7월 못지 않게 8월도 꽤나 바쁘게 지낸 것 같다.</p>\n<h2>공적</h2>\n<h3>1. Sentry 적용</h3>\n<p><a href=\"https://sentry.io/welcome/\" target=\"_blank\" rel=\"noopener noreferrer\">Sentry</a>는 서비스내에서 오류가 발생했을 때 다양한 방식으로 개발자에게 알려주는 제공해주는 서비스다.</p>\n<p>이번에 사내 프로젝트에 <code>Sentry</code>를 적용했다.\n내가 담당하고 있는 프로젝트는 약 4개 정도 있었고, 적용하는 것도 딱히 어렵진 않았다.</p>\n<p><code>Sentry</code>를 적용하면서 좋았던 점은, 서비스가 내재하고 있는 문제점들을 어느정도 파악할 수 있다는 점이다.\n사내 서비스의 경우 망 분리가 철저하게 되어있기 때문에 직접 로그를 보거나 에러를 실시간으로 확인하는게 수월하지 않은 상태이다.\n그런데 <code>Sentry</code>를 적용하면서 실시간으로 에러를 확인할 수 있게 되었고, 에러 발생시에 알림도 오기 때문에 여러가지 문제점을 확인하기가 쉬웠다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/94988755-95c18900-05aa-11eb-9221-f11c86da4d9e.png\" alt=\"Sentry\"></p>\n<p>위의 사진 처럼 여태까지 <strong>큰 문제 없이 굴러가고 있다고 생각했던 API들이 사실 폭탄 투성이</strong>였다.\n그래서 해당 API의 담당자들과 상의하여 이러한 폭탄을 미리 미리 제거할 수 있는 기회가 되었다.\n하지만 워낙 꼬여있는 로직들이 많은 상태였고, <strong>어쩔 수 없이 방치해야 하는 부분들</strong>도 있었기 때문에 조금 찝찝하다.</p>\n<p>어쨌든 결과적으로 <code>Sentry</code> 도입으로 인하여 해결 가능한 문제들은 빠르게 조치할 수 있었고,\n당장 해결하지 못한 부분도 있지만 어느 정도 문제점을 인지할 수 있기 때문에 <strong>장애가 발생했을 때 어느 정도 선방</strong>이 가능하게 되었다.</p>\n<h3>2. 크롬 확장프로그램</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>확장프로그램에 대한 자세한 내용은 <a href=\"https://zuminternet.github.io/Zum-Chrome-Extension/\" target=\"_blank\" rel=\"noopener noreferrer\">줌인터넷 기술블로그 - 크롬 확장프로그램 개발 회고</a>에서 확인해볼 수 있습니다!</p>\n</div>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95010212-7128e800-0662-11eb-918d-da7a31d64d7f.png\" alt=\"크롬 확장프로그램\"></p>\n<p>확장프로그램 베타 버전은 이미 지난 달에 완성되었으나 <strong>스토어 게시요청이 계속 반려</strong>되면서 이후의 일정이 계속 지연되고 있었다.\n반려의 원인은 <code>http</code> 때문인데, 가능하면 모든 요청에 <code>SSL</code>을 적용하는 것이 좋다.\n문제는 확장프로그램에서 사용하는 사내 서비스 중에 쉽게 <code>https</code>로 전환할 수 없는 부분이 있었으며\n팀 내에서 자체적으로 이 문제를 해결할 수 없는 상태였고, 인프라팀에 업무요청을 하여 처리해야 했다.\n근데 인프라팀에서도 이것 저것 밀린 일정이 많다보니 <code>https</code> 전환을 바로 처리하기가 곤란한 입장이었다.</p>\n<p>일단 혹시나 하는 마음에 <code>URL</code>만 <code>https</code>로 변경하여 검수 요청을 시도했고, 결과는 예상과 다르게 통과했다. <s>막장이네 구글놈들.</s>\n그래서 아예 <code>Apache</code>설정에서 <code>https://pass.abc.com</code>으로 요청하면 <code>http://abc.com</code>으로 <code>redirect</code> 되도록 설정해놨다.</p>\n<p>그렇게 검수도 통과 했고, 확장프로그램도 문제 없이 작동하게 되었다.</p>\n<p>확장프로그램은 <strong>사내에서 꽤 긍정적인 반응</strong>을 보이고 있고, 조금 더 완성도를 높여 사용자에게 선보일 예정이다.</p>\n<h3>3. Mobile API 분리 이전</h3>\n<p>드디어 <code>Zum Front Backend Project</code>에서 <code>Mobile</code>를 관련 코드를 완전히 분리하여 <code>Zum Mobile Backend Project</code>로 만들었다.\n다음과 같이 기존에는 하나의 프로젝트에 너무 많은 코드가 존재했다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/PL9BRiCW4DrpYb7st22guZIkcaKbI-qYoeuOfBWDZ8Mn6YdAtJi633PbDU_3_60tE67Tg6_Ce5ImEOyQtYmQjm4n024F5k87NhgRcjM05dBLzr0rHwzJJ24hCyDUj3-raT1O_5OjLNeme1DiwN9p_8n25b-l5hM2-kwK6JeqgLHz-YgieRDaY8qMwL3hHP802y_xU4a6YWkradbQwRLddgMIedVAPc8lN7jTwhep6HvG2y9Fnk95u5pYh-4lVXaiw9cSkl4frfGlKhZyGy2Myx7dyohMP9nzJKvRJOzSNF_7nmppbvdfgNx9qQfsoaZwTNy0\" alt=\"uml diagram\">\n<p>덕분에 <strong>하나의 프로젝트에 담당자도 많았고 잠재적인 위험</strong>도 역시 무시할 수 없었다.</p>\n<p>일단 위에 언급한 코드 중 제일 빈번하게 배포와 수정이 발생하는 부분인 <code>Mobile API</code>를 분리하기로 결정했다.</p>\n<p><code>Mobile API</code>는 <code>DB</code>를 사용하고 있지 않았고, <code>Domain</code> 관련 코드도 없었다.\n그래서 생각보다 쉽게 분리할수 있었다.</p>\n<p>분리한 다음의 형태는 다음과 같다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/ZLFBQiCm4BpxAvRSzGUXn6bSsaCXq1v2ReebYDj8Ch9C0o7_thKUrYD9gK-QdV7iIreDXcepYbCb5UEms8y2NhIIPW5q04GM9EIxEdGd7bY74hhkUwYtRvR7CnwhqXdMjFrk98EjLb-ynKoN2l1pil2pbIBuy6nKl8w7EGMU2xPcCJ-pt3MwrupsXklext0KhAbfZwbUT3B2ZH8KyRMwcSV_UdBQkqqz7xKI79gpuNBeb9oRQ7QVXTHdp4rBEoL4OkBW7zFmbVbnO8DP00XXwaUI9rlD0yhNyO3r5QHJZ-IqnViChj0DFHVRlUGXkxb2PUyVB0aPUnBgouE-h3muDJdVxUBtcxXt22ybXAVyPGoRMN79yB7z0W00\" alt=\"uml diagram\">\n<p><strong>분리 과정에서 리팩토링도 진행하고, 시스템 환경도 변경하는 등의 추가 작업</strong>도 있었다. 앞서 언급한 <code>Sentry</code>도 적용했다.</p>\n<p>어쨌든 조금 더 <strong>관리하기가 수월</strong>해진 것은 확실하다.</p>\n<h3>4. CMS 작업 (feat. Legacy)</h3>\n<p>8월까지 작업하고 있던 <strong>CMS 개발을 마무리</strong>해야 했다. 사실 7월에 대부분의 기능을 만들어놔서 8월에 내가 할 일은 많지 않았다.\n일단 <strong>미리보기</strong> 기능을 만들기 위해서 CMS와 엮여있는 <code>Zum Lego Project</code>를 분석해야 했다.</p>\n<p><code>Zum Lego Project</code>는 <strong>굉장히 오래전부터 많은 사람들의 손을 거쳐 관리되어온 레거시 프로젝트</strong>다.\n덕분에 왜 이렇게 만들어졌는지 의문을 갖게 될 수 밖에 없는 코드들이 굉장히 많았고, 구조의 복잡도 또한 심상치 않았다.\n<s>차라리 처음부터 만들고 말지</s></p>\n<p><strong>언젠간 사수가 이직하게 된다면, 이 프로젝트의 담당자는 내가 될 것</strong>이다. 생각만해도 끔찍하다... 😭</p>\n<p><u>그리고 그 시기는 멀지 않았다.</u></p>\n<p>마음의 준비를 단단히 하고 있어야지..</p>\n<p>어쨌든 CMS 작업은 생각보다 많지 않았다.\nQA를 진행하고, 해당 사항을 반영하는 과정을 반복했는데 사실 반영하는 것도 굉장히 간단했기 때문에 큰 어려움은 없었다.</p>\n<p><s>그리고 9월에 고통받았다</s></p>\n<h2>사적</h2>\n<p>8월에는 꽤 많은 일을 했다. 그래서 사실 굉장히 힘들었다.</p>\n<h3>1. 카카오 면접관련</h3>\n<p>7월 말에 면접을 봤고, 8월 초에 결과가 나왔다. <strong>결론적으로는 떨어졌다.</strong>\n아마 여러가지 이유가 있겠지만 사실 그건 <strong>지금의 나에게 중요하지 않다고 생각</strong>한다.</p>\n<p>이번에 면접 준비를 하면서 <strong>내적으로 스트레스</strong>를 너무 많이 받았다.\n합격해도 문제고 합격을 하지 않아도 문제인 그런 상황이었다.\n그냥 <strong>면접을 본 것 자체가 잘못</strong> 된게 아닐까?</p>\n<ul>\n<li>입사한지 1년도 되지 않았다</li>\n<li>이제 막 업무에 익숙해졌고, 혼자서도 잘 할 수 있게 되었다.</li>\n<li>팀원들과의 트러블이 없었다. 오히려 잘 지내고 있다.</li>\n<li>연봉도 나쁘지 않은 상태다.</li>\n</ul>\n<p><strong>이리보고 저리봐도 이직할 이유가 없었다.</strong></p>\n<p>그래서 면접을 볼 당시 <strong>제일 대답하기 힘들었던 것이 이직을 하는 이유</strong>였다.\n<u>재미로 본 코딩테스트 때문에 최종 면접까지 가게 될 줄 누가 알았겠는가?</u></p>\n<p>이 일 때문에 팀장님과 많은 이야기를 했다.\n일단 현재의 나는 많이 부족하다는 것을 인정하기로 했다.\n그리고 아직 <strong>사내에서 무언가를 뚜렷하게 보여주질 못했다.</strong>\n조금 더 경험을 쌓고, 공부도 많이 하고, 이제 정말 떠날 때가 되었다고 생각이 들면 진짜 이직 준비를 해야지 아직은 아닌 것 같다.</p>\n<hr>\n<p>팀장님 가라사대</p>\n<ul>\n<li>네이버, 라인, 카카오 같은 국내 기업이 아닌 <strong>구글, 마이크로소프트 같은 해외 기업을 목표로</strong> 하든가 😨</li>\n<li>혹은 아예 <strong>파격적인 조건으로 스카웃이 될 정도의 역량</strong>을 갖추든가 😨</li>\n</ul>\n<p>둘 중의 하나가 아니라면 그냥 이직은 아직 생각하지 말라고 하신다. <s>말이 쉽지</s></p>\n<hr>\n<p>음.. 일단 이건 팀장님의 바람이고 😅 스스로에게 부족한 부분을 계속 해서 채워나가야겠다.</p>\n<p><u>너무 조급하게 생각하지 말자.</u>\n기회가 언제나 오진 않지만,\n준비된 자만이 그런 기회를 쟁취할 수 있는 것이다.</p>\n<p><u>잘 준비 하자!</u></p>\n<h3>2. Next Step Reviewer</h3>\n<p><a href=\"https://edu.nextstep.camp/c/8fWRxNWU/\" target=\"_blank\" rel=\"noopener noreferrer\">클린코드를 위한 TDD, 리팩토링 with Java</a>의 <strong>8기를 좋은 성적으로 수료하게 되어 9기는 리뷰어 활동</strong>을 할 수 있게 되었다.\n이렇게 리뷰어로 활동하는게 처음이다보니 어떻게 해야 좋을지 고민이 많았었는데, 생각보다 수월하게 진행할 수 있었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95013250-0daab480-067a-11eb-8ae8-f74248a334d1.png\" alt=\"리뷰이\"></p>\n<ul>\n<li>8월 한 달 동안 10명을 리뷰했으며 그 중에 3명이 미션을 완료했다.</li>\n<li>일단 각 미션당 5명, 전체 미션에 대해 최대 20명을 리뷰해야 한다.</li>\n<li>그런데 생각보다 자동차 미션에서 포기하는 사람이 많은 것 같다.</li>\n<li>아무래도 회사 일과 병해하는 사람이 많다 보니 미션 수행 자체가 굉장히 부담스러울 수 있기 때문이라 생각한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95013428-2c5d7b00-067b-11eb-8ec9-c5b64796f5ad.png\" alt=\"리뷰\"></p>\n<p>어쨌든 리뷰를 하면서 스스로도 굉장히 많이 성장할 수 있는 기회가 되었다.\n그리고 *8리뷰이가 점점 좋은 코드를 만들어내는 과정에 참여할 수 있다는 것도 큰 행운**이라고 생각한다.</p>\n<p><u>Javascript도 이런 식으로 참여/운영 해보고 싶다는 생각을 많이 하고 있다.</u></p>\n<h3>3. Boost Camp Reviewer</h3>\n<p>8월 초에 네이버의 <code>커넥트 재단</code>에서 운영하는 <code>부스트 캠프</code>에서 리뷰어를 구한다는 소식을 접했다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/95013561-02f11f00-067c-11eb-9b32-e343d5e7c265.png\" alt=\"부스트 캠프 리뷰어 모집 공고(1)\" width=\"400\">\n<p>대략적인 내용은 다음과 같았다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/95013576-1e5c2a00-067c-11eb-8759-f7cf70cab6c7.png\" alt=\"부스트 캠프 리뷰어 모집 공고(2)\" width=\"700\">\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">부스트캠프 리뷰어</p>\n<p>내용에는 6주라고 되어 있는데, 웹 과정의 경우 백엔드/프론트엔드를 격주로 하기 때문에 <strong>총 3주 동안 활동</strong>하게 된다.</p>\n<ul>\n<li>리뷰어마다 6명의 캠퍼(리뷰이)를 배정한다.</li>\n<li>3주간 주 2회의 리뷰를 한다.</li>\n<li>따라서 6명의 캠퍼에게 각각 6회, <strong>총 36회의 리뷰</strong>를 해야한다.</li>\n</ul>\n</div>\n<p>NextStep의 리뷰어 활동은 java에 대한 리뷰이기 때문에 사실 스스로 생각하기에 약간 아쉬운점이 있었다.\n<strong>나의 주력 언어는 javascript이고, 당연히 java보다 javascript를 더 좋아하기 때문이다.</strong></p>\n<p>그래서 부스트캠프의 리뷰어 모집 공고는 굉장히 반가웠다. 빠르게 지원했다.</p>\n<p>단, 지원하기 위해서는 모집공고 저장소에 올라온 코드에 대해 <a href=\"https://github.com/connectfoundation/review_2020/pull/3\" target=\"_blank\" rel=\"noopener noreferrer\">코드리뷰</a>를 남겨야했다.</p>\n<img src=\"https://user-images.githubusercontent.com/18749057/95013663-beb24e80-067c-11eb-80f1-73e790f76d5e.png\" alt=\"부스트 캠프 리뷰어 모집 공고(3)\" width=\"700\">\n<p>일단 코드가 <code>React</code>로 작성되어 있어서 조금 당황했다. React는 취업 준비를 할 때 아주 잠깐 공부했고, hooks는 사용해본적도 없기 때문이다.\n그래서 <strong>일단 코드 스타일, 변수명, 코딩컨벤션 위주의 리뷰</strong>를 했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95013761-544dde00-067d-11eb-8a72-884238a9281a.png\" alt=\"image\"></p>\n<p>* 위의 리뷰에 대한 자세한 내용은 <a href=\"https://github.com/connectfoundation/review_2020/pull/3\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>를 참고해주세요.</p>\n<p>며칠 후에 <a href=\"https://codesquad.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">코드스쿼드</a>, <a href=\"https://woowacourse.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">우아한테크코스</a>, <a href=\"https://woowabros.github.io/devrel/2020/04/13/techcamp3.html\" target=\"_blank\" rel=\"noopener noreferrer\">우아한테크캠프</a> 등을 운영하고 계시는 <a href=\"https://github.com/crongro\" target=\"_blank\" rel=\"noopener noreferrer\">윤지수(크롱)</a> 마스터님께서 피드백을 남겨주셨다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95013767-5ca61900-067d-11eb-8128-111df6f0dbaf.png\" alt=\"image\"></p>\n<p>이렇게 부스트캠프 리뷰어로 활동할 수 있게 되었다. 다만 <strong>8월 까지는 모집기간이고, 활동은 9월부터</strong> 하기 때문에 이에 대한 기록은 <a href=\"/TIL/Review/2020-year/09-September/\" target=\"_blank\">9월 회고</a>에 남길 예정이다.</p>\n<p>그리고 <a href=\"https://github.com/minuukang\" target=\"_blank\" rel=\"noopener noreferrer\">개인적인 친분이 있는 사람</a>에게도 이 모집공고를 소개했고 결과적으로 같이 활동할 수 있게 되었다.\n굉장히 존경하는 지인이며 <a href=\"https://github.com/connectfoundation/review_2020/pull/22\" target=\"_blank\" rel=\"noopener noreferrer\">코드리뷰</a> 또한 감탄이 나올 만큼 잘 작성해주었다.</p>\n<p>개인적으로 내 또래의 프런트엔드 개발자 중에서 이 친구가 제일 잘하는 사람이 아닐까 생각한다.</p>\n<h3>4. React Study</h3>\n<p>사내에 <strong>이스트소프트 계열사</strong>에 근무하는 사람들끼리 스터디를 할 수 있는 시스템이 만들어졌다.\n이 중에 <a href=\"https://github.com/est-react-study\" target=\"_blank\" rel=\"noopener noreferrer\">리액트 스터디</a>가 있어서 지원했다.\n<s>지원하고 보니 나만 줌인터넷 소속..</s></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">이스트소프트 계열사</p>\n<p>대표적인 이스트소프트 계열사는 다음과 같다.</p>\n<ul>\n<li>이스트소프트</li>\n<li>이스트시큐리티</li>\n<li>이스트게임즈</li>\n<li>줌인터넷</li>\n</ul>\n<p>이 외에도 더 있지만 잘 알려지지 않았기 때문에 <a href=\"https://www.estsoft.ai/company/subsidiary\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>를 참고해주세요!</p>\n</div>\n<p>일단 스터디에 참여하는 사람들 중 대부분이 리액트를 아예 해본적이 없는 경우가 많았기 때문에 간단하게 무엇을 만들어야 좋을지 회의했고, <a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Postman</a> Clone Coding을 하기로 결정되었다.</p>\n<ul>\n<li><a href=\"https://github.com/est-react-study/postman-junil\" target=\"_blank\" rel=\"noopener noreferrer\">est-react-study/postman-junil</a></li>\n<li><a href=\"https://est-react-study.github.io/postman-junil/\" target=\"_blank\" rel=\"noopener noreferrer\">데모 확인해보기</a></li>\n</ul>\n<p>서버를 사용하지 않았기 때문에 <code>http reuqest</code> 요청은 <code>github api</code>를 기준으로 테스트 했다.</p>\n<h4>(1) Recoil</h4>\n<p>이번에 스터디를 하면서 <a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Recoil</a> 이라는 상태관리 라이브러리를 사용했다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Recoil</p>\n<p>Recoil은 React(Facebook) 진영에서 <strong>직접 만든</strong> 상태관리 라이브러리이다.</p>\n</div>\n<p>일단 Redux나 Mobx보단 확실이 편리하다. 무엇보다 Hook으로 쉽게 사용할 수 있다보니 딱히 라이브러리를 사용한다는 느낌이 들지 않았다.</p>\n<ul>\n<li><a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a></li>\n<li><a href=\"https://medium.com/humanscape-tech/recoil-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-285b29135d8e\" target=\"_blank\" rel=\"noopener noreferrer\">Recoil 알아보기</a></li>\n<li><a href=\"https://dev.to/chandan/recoil-vs-redux-the-ultimate-react-state-management-face-off-35b\" target=\"_blank\" rel=\"noopener noreferrer\">Recoil vs Redux | The Ultimate React State Management Face-Off</a></li>\n<li><a href=\"https://ui.toast.com/weekly-pick/ko_20200616/\" target=\"_blank\" rel=\"noopener noreferrer\">Recoil - 또 다른 React 상태 관리 라이브러리</a></li>\n<li><a href=\"https://github.com/chandan-reddy-k/redux-vs-recoil-example\" target=\"_blank\" rel=\"noopener noreferrer\">사용 예제 Repository</a></li>\n</ul>\n<p>예시 코드는 다음과 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token doc-comment comment\">/** requestStore/index.js **/</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> atom<span class=\"token punctuation\">,</span> RecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Method <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRequestTable</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> string</span>\n<span class=\"line\">  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string</span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> Method<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PATCH'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DELETE'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">configTabs</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Params'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Headers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Body'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">methodState</span><span class=\"token operator\">:</span> RecoilState<span class=\"token operator\">&lt;</span>Method<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'methodState'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> methods<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">addressState</span><span class=\"token operator\">:</span> RecoilState<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'addressState'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">tabState</span><span class=\"token operator\">:</span> RecoilState<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'tabState'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> IRequestTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">headersState</span><span class=\"token operator\">:</span> RecoilState<span class=\"token operator\">&lt;</span>IRequestTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'headersState'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> headers</span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> IRequestTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">paramsState</span><span class=\"token operator\">:</span> RecoilState<span class=\"token operator\">&lt;</span>IRequestTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'paramsState'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> params</span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">requestBodyState</span><span class=\"token operator\">:</span> RecoilState<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'requestBodyState'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 공통 state를 정의 한 다음에, <code>hook</code>으로 사용할 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token doc-comment comment\">/** RequestContainer.js **/</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RequestAddress <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/Request/RequestAddress\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RequestConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/Request/RequestConfig\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getHeadersOf<span class=\"token punctuation\">,</span> getQueryParamsOf <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utils\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilValue<span class=\"token punctuation\">,</span> useSetRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> headersState<span class=\"token punctuation\">,</span> methodState<span class=\"token punctuation\">,</span> paramsState<span class=\"token punctuation\">,</span> requestBodyState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"stores/requestStore\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> responseState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"stores/responseStore\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> historyState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"stores/historyStore\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HistoryService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"services\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"components/Common/Alert\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getJSON</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">||</span> <span class=\"token string\">'null'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JSON 형식이 아닙니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">RequestContainer</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> setResponse <span class=\"token operator\">=</span> <span class=\"token function\">useSetRecoilState</span><span class=\"token punctuation\">(</span>responseState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> setHistories <span class=\"token operator\">=</span> <span class=\"token function\">useSetRecoilState</span><span class=\"token punctuation\">(</span>historyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>paramsState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>headersState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>methodState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>requestBodyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submitRequest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">requestURL</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>requestURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getQueryParamsOf</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'patch'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token operator\">?</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">setResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token function\">getHeadersOf</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      HistoryService<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">setHistories</span><span class=\"token punctuation\">(</span>HistoryService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">setResponse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    <span class=\"token operator\">&lt;</span>section<span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span>Request<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">      <span class=\"token operator\">&lt;</span>RequestAddress submitRequest<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submitRequest<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">      <span class=\"token operator\">&lt;</span>RequestConfig <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>(2) react-app-rewired</h4>\n<p><code>CRA(Create React App)</code>로 React App을 만들면 기본적으로 웹팩 설정이 내장된 형태로 프로젝트를 구성해준다.\n따라서 웹팩 설정을 변경하기 위해선 <code>eject</code> 명령을 이용하여 모든 설정파일을 밖으로 꺼내야한다.</p>\n<ul>\n<li><a href=\"https://helloinyong.tistory.com/174\" target=\"_blank\" rel=\"noopener noreferrer\">CRA eject란?</a></li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">eject</p>\n<p>eject는 해당 프로젝트에 숨겨져 있는 모든 설정을 밖으로 추출해주는 명령어다.</p>\n</div>\n<p>그런데 이렇게 설정파일을 밖으로 꺼낼 경우 신경써야 할게 무척 많아진다. 그리고 CRA가 업그레이드 될 때 마다 설정파일을 번거롭게 직접 수정하거나 아예 건드릴 수 없게 되어버린다.\n이 때 <code>react-app-rewired</code>을 사용하면 된다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">react-app-rewired</p>\n<ul>\n<li><code>CRA</code> 프로젝트를 <code>eject</code>하지 않고 <strong><code>customizing</code> 할 수 있게 도와주는 라이브러리</strong>이다.</li>\n<li>그러나 이 라이브러리를 사용한다고 해서 절대적으로 <code>CRA</code>가 가지는 안정성을 보장해주지 않는다</li>\n</ul>\n</div>\n<ul>\n<li><a href=\"https://medium.com/@jsh901220/create-react-app%EC%97%90%EC%84%9C-eject%EC%82%AC%EC%9A%A9%EC%95%88%ED%95%98%EA%B8%B0-customize-cra-react-app-rewired-10a83522ace0\" target=\"_blank\" rel=\"noopener noreferrer\">Create-React-App에서 Eject사용안하기(customize-cra, react-app-rewired)</a></li>\n<li><a href=\"https://github.com/timarney/react-app-rewired\" target=\"_blank\" rel=\"noopener noreferrer\">react-app-rewired repository</a></li>\n</ul>\n<p>일단 <code>react-app-rewired</code>을 사용하기 위해선 <code>npm scripts</code>를 수정해야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 앞 내용 생략 */</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-app-rewired start\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-app-rewired build\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-app-rewired test\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-app-rewired eject\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 뒷 내용 생략 */</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 프로젝트 루트에 다음과 같이 <code>config-overrides.js</code>를 통하여 웹팩 설정을 덮어씌울 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// config-overrides.js </span></span>\n<span class=\"line\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">override</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GH_PAGES</span> <span class=\"token operator\">===</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    config<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>publicPath <span class=\"token operator\">=</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// build 경로 변경</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> config</span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>필자는 <strong>build 경로를 변경</strong>하기 위해서 이 라이브러리를 사용했다.</p>\n<h4>(3) [CSS-in-JS] emotion</h4>\n<p>Vue를 사용할 땐 굳이 <a href=\"https://d0gf00t.tistory.com/22\" target=\"_blank\" rel=\"noopener noreferrer\">CSS-in-JS</a> 관련 라이브러리를 사용하지 않아도 어차피 컴포넌트 파일 안에 Style을 포함시켜 작성할 수 있다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">CSS-in-JS</p>\n<p>CSS-in-JS는 다음과 같은 장점을 가지고 있다.</p>\n<ul>\n<li>더이상 스타일시트의 묶음을 유지보수 할 필요가 없다.</li>\n<li>CSS-in-JS는 CSS 모델을 문서 레벨이 아니라 컴포넌트 레벨로 추상화 한다.</li>\n<li>CSS-in-JS는 JavaScript 환경을 최대한 활용하여 CSS를 향상 시킨다.</li>\n<li>CSS에는 명시적으로 정의 하지 않은 경우, 부모 요소에서 자동으로 상속되는 속성이 있다. CSS-in-JS의 경우 부모 요소의 속성을 상속하지 않는다.</li>\n<li>생성된 CSS 규칙은 자동적으로 벤더 프리픽스가 붙어있으므로 생각할 필요가 없다.</li>\n<li>JavaScript와 CSS사이에 상수와 함수를 쉽게 공유할 수 있다.</li>\n<li>현재 화면에 사용중인 스타일만 DOM에 있다.</li>\n</ul>\n<p>반대로 새로운 것을 배워야 하는 부담 정도의 단점이 있다.</p>\n</div>\n<p>하지만 React의 경우 다양한 선택지가 존재한다. 일단 스터디 리더의 주도로 <code>@emotion/css</code>를 사용하기로 합의했다.\n사실 여태까지 CSS-in-JS를 한 번도 사용해본적이 없어서 약간 낯설었다.</p>\n<ul>\n<li><a href=\"https://emotion.sh/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a></li>\n<li><a href=\"https://2019.stateofcss.com/technologies/css-in-js/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 2019 - CSS IN JS</a>\n<ul>\n<li><code>@emotion</code>의 사용자 만족도 비율이 제일 높았다.\n<img src=\"https://user-images.githubusercontent.com/18749057/95018635-fe3c6300-069b-11eb-96b6-c892988d644e.png\" alt=\"만족도 조사\"></li>\n<li>그런데 주변 사람들에게 설문해보면 만족도를 떠나서 비교우위는 Styled-Components를 더 높게 평가하고 있다.\n<img src=\"https://user-images.githubusercontent.com/18749057/95018860-2aa4af00-069d-11eb-8415-4f975fba7425.png\" alt=\"못생겨서\" width=\"300\"></li>\n</ul>\n</li>\n<li><a href=\"https://brunch.co.kr/@kmongdev/17\" target=\"_blank\" rel=\"noopener noreferrer\">emotion을 활용한 크몽 프론트엔드 스타일링 시스템</a></li>\n<li><a href=\"https://velog.io/@velopert/react-component-styling\" target=\"_blank\" rel=\"noopener noreferrer\">다양한 방식의 리액트 컴포넌트 스타일링 방식</a></li>\n<li><a href=\"\">Thinking about emotion js vs styled component</a>\n<ul>\n<li>개인적으로 이 포스트의 내용이 제일 괜찮았다.</li>\n</ul>\n</li>\n</ul>\n<p>직접 사용해본 결과, 나쁘진 않았다.</p>\n<h4>(4) 공통 컴포넌트와 Storybook</h4>\n<p>React를 하든, Vue를 하든, UI를 만들 때 제일 중요한 포인트는 <code>공통 컴포넌트</code>를 만드는 것이 아닐까 생각한다.\n재활용할 수 있는 컴포넌트를 만드는 것. <strong>어떤 상황에서든 사용할 수 있는 컴포넌트가 진정한 의미의 컴포넌트가 아닐까?</strong></p>\n<p>이러한 생각을 가지고 깃허브를 뒤적뒤적 거리다가 <a href=\"https://hyunseob.github.io/2018/01/08/storybook-beginners-guide/\" target=\"_blank\" rel=\"noopener noreferrer\">Storybook</a>에 대해 알게 되었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Storybook</p>\n<ul>\n<li>Storybook은 <strong>컴포넌트 단위의 개발 환경</strong>을 지원하는 도구다.</li>\n<li>개발자가 뷰를 개발할 때 고립된 환경을 제공해서 <strong>관심사를 의존성과 환경으로부터 분리</strong>시켜 준다.</li>\n</ul>\n<p>즉, 외부 상태에 의존하지 않으면서 고립된 상태로 스스로를 표현하는 컴포넌트를 개발할 수 있도록 도와주는 도구라고 할 수 있다.</p>\n</div>\n<p>관련 예제는 <a href=\"https://velog.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Velog</a>의 개발자인 <a href=\"https://github.com/velopert\" target=\"_blank\" rel=\"noopener noreferrer\">김민준(velopert)</a>님의 저장소에서 볼 수 있었다.</p>\n<ul>\n<li><a href=\"https://github.com/velopert/storybook-tutorial-code\" target=\"_blank\" rel=\"noopener noreferrer\">Repository: react-uikit-sample</a></li>\n<li><a href=\"https://react-uikit-sample.surge.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Storybook</a></li>\n</ul>\n<p>일단 나도 <code>Storybook</code>으로 공통 컴포넌트를 띄워볼 생각이었지만, <strong>이 스터디 이외에도 해야할게 너무 많아서 설치까지만 했다.</strong></p>\n<h4>짤막한 스터디 후기</h4>\n<p>일단 스터디 자체는 좋았다. 리액트를 공부할 수 있는 기회도 되었고, 여러가지 정보도 얻을 수 있었다.\n다만 스터디에 참여하는 사람들 대부분이 프런트엔드 자체가 친숙하지 않기 때문에 스터디가 점점 흐지부지 되어가고 있다.</p>\n<p><u>일단 올해 말까지 진행하기로 하였으니 최대한 많은 경험을 할 수 있기를 바랄 뿐이다.</u></p>\n<h3>5. DKU-STUDY</h3>\n<p>여전히 단국대 스터디는 활발하게 진행중이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95019254-34c7ad00-069f-11eb-8339-977bade6b500.png\" alt=\"DKU-STUDY\"></p>\n<p><code>8월 31일</code>을 기준으로 <code>1,859</code>개의 커밋이 발생했다.</p>\n<p>그리고 github에서 우연히 <a href=\"https://github.com/Mirim-Study/Algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Mirim-Study/Algorithm</a>을 봤다.\n<a href=\"https://www.e-mirim.hs.kr/main.do\" target=\"_blank\" rel=\"noopener noreferrer\">미림여자정보과학고등학교</a>에 다니고 있는 학생들이 우리 스터디를 모방하여 진행하고 있었다.</p>\n<p>우리 스터디가 잘 굴러가고 있다는 증표라고 생각한다.</p>\n<p>언제나 그렇듯 <a href=\"https://co-duck.com\" target=\"_blank\" rel=\"noopener noreferrer\">코덕</a>을 기준으로 DKU-STUDY가 전체 그룹 중 1위를 했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95019363-e666de00-069f-11eb-86fe-e5faad159579.png\" alt=\"co-duck\"></p>\n<p>그리고 나는 스터디 내에서 참여하고 있진 않지만, <strong>몇몇 구성원이 javascript study를 하고 있다.</strong></p>\n<p>개인적으로 면접준비를 할 때 <a href=\"https://gitlab.com/siots-study/topics/-/wikis/home\" target=\"_blank\" rel=\"noopener noreferrer\">siots-study</a>의 내용을 많이 참고했고, 우리 스터디 구성원들에게도 이 자료를 소개해줬다.\n그리고 이 자료를 기준으로 공부하는 중이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95019430-3cd41c80-06a0-11eb-99ac-8e4b2df696bb.png\" alt=\"js study\"></p>\n<p>step5 까지는 나도 어느정도 피드백을 했으나, <u>8월에는 좀 많이 바쁜 관계로 알고리즘 코드리뷰만 하는 중이다.</u></p>\n<p>그런데 스터디 구성원이 아직 한 번도 모인적이 없다. <u>코로나가 어느 정도 잠잠해지면 시간 내서 식사자리를 마련해야겠다.</u></p>\n<h3>6. 코덕과 일일커밋</h3>\n<p>의도치 않게 <strong>8월 코덕 랭킹 1위</strong>가 되었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95019632-693c6880-06a1-11eb-9461-c8226e65d7e8.png\" alt=\"코덕 1위\"></p>\n<p>그리고 <code>Top 5</code> 안에 필자를 포함하여 3명의 스터디 구성원이 랭킹되었다.</p>\n<p>커밋을 많이 하진 않았는데, 만든 저장소가 많아서 그런게 아닐까?</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/95019686-cafcd280-06a1-11eb-8ffd-3d3c2b62c61f.png\" alt=\"8월 통계\"></p>\n<ul>\n<li>7월의 경우 <strong>8개의 Repository에서 357개의 commit</strong>이 발생했다.</li>\n<li>8월의 경우 <strong>19개의 Repository에서 393개의 commit</strong>이 발생했다.</li>\n</ul>\n<p>이번에 서울디지텍고등학교의 기능반을 지도하면서 만든 저장소 때문이 아닌가 싶다.</p>\n<h3>7. 서울 디지텍고등학교 기능반</h3>\n<p>8월부터 전국대회 기간까지 선생님의 부탁으로 <strong>기능반 학생들</strong>을 지도하게 되었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">기능경기대회</p>\n<ul>\n<li>정식 명칭은 <strong>기능올림픽</strong>이다.</li>\n<li>기능경기대회는 <strong>특성화고등학교의 수능이며 축제</strong>라고 할 수 있다.</li>\n<li><strong>지방대회 - 전국대회 - 국가대표 선발전 - 세계대회</strong> 등의 과정이 있다.</li>\n<li><strong>지방대회</strong>는 4월에 개최된다. 그런데 올해는 <strong>코로나 때문에 6월</strong>에 개최되었다.</li>\n<li><strong>전국대회</strong>는 9월/10월 중에 개최된다. 올해는 <strong>9월 14일 부터 7일간</strong> 진행될 예정이다.</li>\n<li>세계대회는 2년에 한 번씩 개최된다.</li>\n<li>자세한 내용은 <a href=\"https://meister.hrdkorea.or.kr/main/main.do\" target=\"_blank\" rel=\"noopener noreferrer\">마이스터넷</a> 참고</li>\n</ul>\n<p>필자 또한 2012년도 경기도대회, 전국대회에서 입상을 했고 이를 계기로 본격적인 개발공부를 시작했다.</p>\n</div>\n<p>이번에는 코로나의 여파도 있고, 여러모로 관리가 되지 않은 상태였기 때문에 학생들의 상태가 심상치 않았다.\n대회도 코앞이고 기술적으로 알려줄 시간적 여유도 많지 않기 때문에 간단하게 코드리뷰를 하는 방식으로 진행했다.</p>\n<ul>\n<li><a href=\"https://github.com/sdhs-webskills/GJ-2020-MS/pull/1\" target=\"_blank\" rel=\"noopener noreferrer\">광주 문제 코드리뷰</a></li>\n<li><a href=\"https://github.com/sdhs-webskills/Seoul-2020/pull/1\" target=\"_blank\" rel=\"noopener noreferrer\">서울 문제 코드리뷰</a></li>\n</ul>\n<p>일단 깃허브를 최대한 활용해보려고 했으나, 학생들이 깃허브에 익숙해지기엔 시간이 매우 촉박했다.\n사실 문제를 풀이할 여유도 없는 상태였기 때문에 그냥 물어보는 것들에 대해서 답변해주는 식으로 지도했다.</p>\n<p>다음 기수의 학생들에게는 조금 더 개발 자체에 집중할 수 있는 형태로 가르쳐볼 계획이다.</p>\n<p>여기에 언급할 내용이 많진 않지만, 8월은 기능반 학생들을 가르치는데 시간을 많이 썼다.</p>\n<h2>Summary</h2>\n<ul>\n<li>회사일 열심히 했다.</li>\n<li>React에 대해 공부했다.</li>\n<li>리뷰어 활동 열심히 했다.</li>\n<li>기능반 학생들을 가르쳤다.</li>\n</ul>\n",
      "image": "https://user-images.githubusercontent.com/18749057/94988755-95c18900-05aa-11eb-9221-f11c86da4d9e.png",
      "date_published": "2020-08-31T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Javascript 한글 초성검색",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Hangul-Consonants-Search/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Hangul-Consonants-Search/",
      "summary": "복잡한 계산식 없이, 간단하게 초성 검색을 구현할 수 있다.",
      "content_html": "\n<blockquote>\n<p>본 게시물은 초성 검색 구현에 대한 여러 게시물을 보다가 이해하기가 힘든 경우가 많아서 어떻게 할까 고민하다가 작성하는 글입니다.</p>\n</blockquote>\n<p>먼저 초성검색을 하기 위해선 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\" target=\"_blank\" rel=\"noopener noreferrer\">String.prototype.charCodeAt</a>에 대해 알아야 한다.\n<code>String.prototype.charCodeAt</code> 메서드는 주어진 인덱스에 대한 UTF-16 코드를 나타내는 0부터 65535 사이의 정수를 반환한다.</p>\n<p>다음과 같이 사용해볼 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 44032</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 44619</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드를 보고 알 수 있는 부분은 다음과 같다.</p>\n<p><code>ㄱ</code>으로 검색하면 <code>가 ~ 깋</code>에 해당하는지 검사하는 함수가 필요하다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> range<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> start <span class=\"token operator\">&lt;=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'깋'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이게 초성검색의 전부라고 할 수 있다.\n한 번 모든 초성의 대한 범위를 정의해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> ranges <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄱ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄲ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'까'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'낗'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄴ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'나'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'닣'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄷ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'다'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'딯'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄸ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'따'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'띻'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄹ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'라'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'맇'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅁ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'마'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'밓'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅂ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'바'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'빟'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅃ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'빠'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'삫'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅅ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'사'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'싷'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅆ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'싸'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'앃'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅇ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'아'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'잏'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅈ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'자'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'짛'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅉ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'짜'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'찧'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅊ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'차'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'칳'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅋ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'카'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'킿'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅌ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'타'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'팋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅍ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'파'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'핗'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅎ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'하'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'힣'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>여기서 조금 더 발전시켜보자. 일단 ㄱ ~ ㅎ 까지에 대한 초성의 범위를 최대한 편하게 한 번에 표현해야 한다.\n이를 위해서 규칙을 한 가지 찾아내야한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 587</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'힣'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'하'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 587</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'힣'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'하'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그래서 다음과 같이 표현할 수 있을 것 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> rangeSize <span class=\"token operator\">=</span> <span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> ranges <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄱ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄲ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'까'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'까'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄴ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'나'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'나'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄷ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'다'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'다'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄸ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'따'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'따'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄹ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'라'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'라'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅁ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'마'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'마'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅂ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'바'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'바'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅃ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'빠'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'빠'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅅ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'사'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'사'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅆ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'싸'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'싸'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅇ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'아'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'아'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅈ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'자'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'자'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅉ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'짜'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'짜'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅊ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'차'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'차'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅋ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'카'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'카'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅌ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'타'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'타'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅍ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'파'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'파'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅎ\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'하'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'하'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>다시 이걸 이렇게 표현할 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> rangeSize <span class=\"token operator\">=</span> <span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> rangeStarts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄱ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄲ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'까'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄴ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'나'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄷ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'다'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄸ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'따'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄹ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'라'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅁ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'마'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅂ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'바'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅃ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'빠'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅅ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'사'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅆ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'싸'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅇ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'아'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅈ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'자'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅉ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'짜'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅊ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'차'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅋ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'카'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅌ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'타'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅍ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'파'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅎ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'하'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">,</span> query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rangeStarts<span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> char <span class=\"token operator\">===</span> query<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> rangeStarts<span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> start <span class=\"token operator\">&lt;=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄱ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'깋'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄱ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄴ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄴ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'닣'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄴ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'다'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄴ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'나'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'가'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'나'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 한 글자 검색의 토대는 만들어졌다.\n이를 이용해서 문자열에 대해 초성이 포함된 문자열로 검색할 수 있게 만들어보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> rangeSize <span class=\"token operator\">=</span> <span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> rangeStarts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">,</span> query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> searchQuery</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 문자열을 배열로 만든다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> strArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// 검색 시작 위치를 저장 </span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> startIndex <span class=\"token operator\">=</span> strArray<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> searchQuery<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// 검색 시작 위치가 없으면 검색 실패</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// contains로 한 글자씩 검사 후, filter된 길이와 검색어의 길이가 일치하면 검색 성공</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> strArray<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> startIndex <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> searchQuery<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> searchQuery<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㅇㄴ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄴㅎ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㅇㅎ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'안녕'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㅇ녕ㅎ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㅎㅅㅇ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㅎㅅ요'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㅇㅇ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕하세요'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ㄴ하ㅎ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>생각보다 쉽지 않은가?</p>\n<p>전체 코드는 다음과 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> rangeSize <span class=\"token operator\">=</span> <span class=\"token string\">'깋'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> rangeStarts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄱ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'가'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄲ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'까'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄴ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'나'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄷ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'다'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄸ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'따'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㄹ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'라'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅁ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'마'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅂ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'바'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅃ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'빠'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅅ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'사'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅆ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'싸'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅇ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'아'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅈ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'자'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅉ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'짜'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅊ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'차'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅋ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'카'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅌ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'타'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅍ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'파'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"ㅎ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'하'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">,</span> query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rangeStarts<span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> char <span class=\"token operator\">===</span> query<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> rangeStarts<span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> rangeSize<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> start <span class=\"token operator\">&lt;=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> searchQuery</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> strArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> startIndex <span class=\"token operator\">=</span> strArray<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> searchQuery<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">return</span> strArray<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> startIndex <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> searchQuery<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> searchQuery<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2020-08-30T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "자바스크립트 실행 컨텍스트",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Execution-Context/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Execution-Context/",
      "summary": "자바스크립트 실행 컨텍스트에 대해 다룹니다.",
      "content_html": "\n<p>실행 컨텍스트는 자바스크립트에서 가장 중요한 핵심 개념 중에 하나다.\n이를 정확히 이해하는 것은 자바스크립트 개발자에게 매우 중요하다.</p>\n<h2>1. 개념</h2>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">실행 컨텍스트</p>\n<ul>\n<li><strong>실행할 코드에 제공할 환경 정보들을 모아놓은 객체</strong></li>\n<li>자바스크립트의 동적 언어로서의 성격을 가장 잘 파악할 수 있는 개념</li>\n</ul>\n</div>\n<p>자바스크립트는 실행 컨텍스트가 활성화되는 시점에 다음과 같은 현상이 발생한다.</p>\n<ul>\n<li>호이스팅이 발생한다(선언된 변수를  위로 끌어올린다)</li>\n<li>외부 환경 정보를 구성한다</li>\n<li>this 값을 설정한다.</li>\n</ul>\n<p>이로 인해 다른 언어에서 발견할 수 없는 특이한 현상들이 발생한다.</p>\n<h2>2. 실행 컨텍스트 구성</h2>\n<p>실행 컨텍스트는 다음과 같은 것들을 이용하면 <code>call stack</code>에 쌓이게 된다.</p>\n<ul>\n<li><code>전역공간</code>은 자동으로 컨텍스트로 구성된다.</li>\n<li><code>함수</code>를 실행한다.</li>\n<li><code>eval()</code>함수를 실행한다.</li>\n<li><code>block</code>을 만든다 <strong>(ES6+)</strong></li>\n</ul>\n<p>일반적으로 <strong>함수를 이용한 실행 컨텍스트</strong>를 사용한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전역 컨텍스트</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// outer 컨텍스트</span></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// inner 컨텍스트</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></span>\n<span class=\"line\">    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위와 같이 코드를 구성했을 때 실행 컨텍스트의 스택은 다음과 같은 순서로 실행된다.</p>\n<ul>\n<li>프로그램 실행: <code>[전역컨텍스트]</code></li>\n<li>outer 실행: <code>[전역컨텍스트, outer]</code></li>\n<li>inner 실행: <code>[전역컨텍스트, outer, inner]</code></li>\n<li>inner 종료: <code>[전역컨텍스트, outer]</code></li>\n<li>outer 종료: <code>[전역컨텍스트]</code></li>\n</ul>\n<p>그리고 이러한 실행컨텍스트를 구성할 때 생기는 것들이 있다.</p>\n<ul>\n<li><code>VariableEnvironment</code>\n<ul>\n<li>현재 컨텍스트 내의 식별자(변수)들에 대한 정보</li>\n<li>외부 환경 정보</li>\n<li>선언 시점의 LexicalEnvironment의 스냅샷(변경사항 반영 X)</li>\n</ul>\n</li>\n<li><code>LexicalEnvironment</code>\n<ul>\n<li>처음에는 VariableEnvironment와 같음</li>\n<li>변경 사항이 실시간으로 반영됨</li>\n</ul>\n</li>\n<li><code>ThisBinding</code>\n<ul>\n<li>식별자가 바라봐야 할 대상 객체</li>\n</ul>\n</li>\n</ul>\n<h3>Variable Environment</h3>\n<p>VariableEnvironment에 담기는 내용은 LexicalEnvironment와 같지만, <strong>최초 실행 시의 스냅샷을 유지</strong>한다.\n실행 컨텍스트를 생서할 때 VariableEnvironment에 정보를 먼저 담은 다음, 이를 복사해서 LexicalEnvironment를 만든다.</p>\n<p>주로 활용하는 것은 LexicalEnvironment이다. 즉, VariableEnviroment는 스냅샷 유지를 목적으로 사용한다.</p>\n<h3>Lexcial Environment</h3>\n<p>LexicalEnvironment의 내부에는 <strong>environmentRecord</strong>와 <strong>outerEnvironmentReference</strong>로 구성돼 있다.</p>\n<ul>\n<li>environmentRecord로 인하여 호이스팅이 발생한다.</li>\n<li>outerEnvironmentReference로 인하여 스코프와 스코프체인이 형성된다.</li>\n</ul>\n<h2>3. environmentRecord와 Hoisting(호이스팅)</h2>\n<p>자바스크립트는 코드를 실행하기전에 식별자를 수집한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">environmentRecord</p>\n<p>현재 컨텍스트와 관련된 코드의 식별자 정보들이 저장된다.</p>\n<ul>\n<li>매개변수 식별자</li>\n<li>함수 자체</li>\n<li>함수 내부의 식별자</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Host Object(호스트 객체)</p>\n<ul>\n<li>전역 실행 컨텍스트는 변수 객체를 생성하는 대신 전역 객체를 활용한다.</li>\n<li>브라우저의 Window 객체, Node의 Global 객체 등이 이에 해당한다.</li>\n<li>이들은 Host Object로 분류된다.</li>\n</ul>\n</div>\n<p>즉, 코드가 실행 되기 전에 자바스크립트의 엔진은 이미 실행 컨텍스트에 속한 변수명들을 모두 알고 있게 되는 셈이다.</p>\n<p><u>이 때 호이스팅이란 개념이 이용된다.</u></p>\n<p>엔진의 실제 동작 방식 대신에 <code>자바스크립트 엔진은 식별자들을 최상단으로 끌어올려놓은 다음, 실제 코드를 실행한다</code> 라고 생각해도 코드 해석에 문제되는 것이 없기 때문이다.</p>\n<p>중요한 점은, 자바스크립트 엔진이 실제로 변수를 끌어올리지는 않지만, <u>편의상 끌어올리는 것으로 간주하자는 것이다.</u></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> x <span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드는 다음과 같이 해석될 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 매개변수 할당</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> x <span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>다시 위의 코드에서 호이스팅이 발생한다고 가정하면, 다음과 같이 해석될 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></span>\n<span class=\"line\">  x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>변수의 호이스팅은 이처럼 해석될 수 있다. 함수의 호이스팅은 조금 다르다.</p>\n<p>다음 예를 통해 살펴보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>변수의 경우 정의부만 호이스팅 되지만, 함수는 <strong>함수 전체가 호이스팅 된다.</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f b () {}</span></span>\n<span class=\"line\">  b <span class=\"token operator\">=</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bbb</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bbb</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 자바스크립트의 함수는 일급객체(혹은 일급시민)이기 때문에 함수 표현식이 가능하다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">일급객체(일급시민)</p>\n<p>여기 x라는 것이 있다.</p>\n<ul>\n<li>x를 변수에 담을 수 있다.</li>\n<li>x를 매개변수에 넘길 수 있다.</li>\n<li>x를 함수에서 반환할 수 있다.</li>\n</ul>\n<p>x를 만족할 때, 이를 일급객체라고 한다.</p>\n<p>즉, 자바스크립트의 함수는 일급객체이므로</p>\n<ul>\n<li>함수를 변수에 담을 수 있다.</li>\n<li>함수를 매개변수로 넘길 수 있다.</li>\n<li>함수를 함수에서 반환할 수 있다.</li>\n</ul>\n<p>위의 같은 조건을 만족한다.</p>\n</div>\n<p>앞의 예제의 함수를 표현식으로 변경해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b에 익명함수를 할당했다.</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 이 코드는 다음과 같이 해석될 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></span>\n<span class=\"line\">  b <span class=\"token operator\">=</span> <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bbb</span></span>\n<span class=\"line highlighted\">  <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b에 익명함수를 할당했다.</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f () {}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>4. outerEnvironmentReference와 Scope</h2>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">scope</p>\n<p>스코프란 식별자에 대한 유효범위이다.</p>\n<ul>\n<li>Scope A의 외부에서 선언한 변수는, A의 외부/내부 모두 접근 가능하다.</li>\n<li>A의 내부에서 선언한 변수는 오직 A의 내부에서만 접근할 수 있다.</li>\n</ul>\n</div>\n<p>스코프의 개념은 대부분의 언어에 존재하지만,\nES5까지의 Javascript는 특이하게도 <strong>오직 함수에 의해서</strong>만 스코프가 생성된다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">scope chain</p>\n<ul>\n<li><strong>식별자의 유효범위</strong>를 안에서 바깥으로 차례로 검색해나는 것</li>\n<li>이를 가능하게 하는 것이 <strong>outerEnvironmentReference</strong>이다.</li>\n</ul>\n</div>\n<p>outerEnvironmentReference는 <u>현재 호출된 함수가 선언될 당시의 LexicalEnvironment를 참조한다.</u><br>\n<code>선언하다</code>라는 행위가 실제로 일어날 수 있는 시점은 <u>콜 스택 상에서 어떤 실행 컨텍스트가 활성화된 상태일 때뿐이다.</u>\n<strong>모든 코드는 실행 컨텍스트가 활서화 상태일 때 실행되기 때문이다.</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전역 컨텍스트</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// outer 컨텍스트</span></span>\n<span class=\"line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// inner 컨텍스트</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// inner가 실행될 때 outer의 LexcicalEnvironemnt를 outerEnvironmentReference로 참조한다.</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outer가 실행될 때 전역 컨텍스트의 LexcicalEnvironemnt를 outerEnvironmentReference로 참조한다.</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드는 다음과 같은 scope chain을 형성한다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">inner LexicalEnvironment {</span>\n<span class=\"line\">    식별자 a</span>\n<span class=\"line\">    outerEnvironmentReference = outer LexicalEnvironment {</span>\n<span class=\"line\">            식별자 a</span>\n<span class=\"line\">            outerEnvironmentReference = global LexicalEnvironment {</span>\n<span class=\"line\">                식별자 a</span>\n<span class=\"line\">            }</span>\n<span class=\"line\">        }</span>\n<span class=\"line\">    }</span>\n<span class=\"line\">}</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이러한 구조적 특성 덕분에 여러 스코프에 동일한 식별자를 선언할 경우,\n<u>무조건 scope chain 상에서 가장 먼저 발견된 식별자에만 접근 가능하게 된다.</u></p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">inner LexicalEnvironment {</span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">    식별자 a        # inner function에서 a에 접근할 때 여기에 가장 먼저 접근</span>\n<span class=\"line\"></span>\n<span class=\"line\">    outerEnvironmentReference = outer LexicalEnvironment {</span>\n<span class=\"line\"></span>\n<span class=\"line\">            식별자 a        # outer function에서 a에 접근할 때 여기에 가장 먼저 접근</span>\n<span class=\"line highlighted\">            식별자 b        # inner function에서 b에 접근할 때 여기에 가장 먼저 접근</span>\n<span class=\"line\"></span>\n<span class=\"line\">            outerEnvironmentReference = global LexicalEnvironment {</span>\n<span class=\"line\"></span>\n<span class=\"line\">                식별자 a        # 전역에서 a에 접근할 때 여기에 가장 먼저 접근</span>\n<span class=\"line\">                식별자 b        # 전역에서 b에 접근할 때 여기에 가장 먼저 접근</span>\n<span class=\"line highlighted\">                식별자 c        # inner function에서 c에 접근할 때 여기에 가장 먼저 접근</span>\n<span class=\"line\"></span>\n<span class=\"line\">            }</span>\n<span class=\"line\"></span>\n<span class=\"line\">        }</span>\n<span class=\"line\"></span>\n<span class=\"line\">    }</span>\n<span class=\"line\"></span>\n<span class=\"line\">}</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>5. this</h2>\n<p>실행 컨텍스트의 thisBinding에는 this로 지정된 객체가 저장된다.\nthis는 여기에 다루기에 복잡한 내용이 많기 때문에 따로 작성할 예정이다.</p>\n<h2>Summary</h2>\n<ul>\n<li>실행 컨텍스트는 실행할 코드에 제공할 환경 정보들을 모아놓은 객체이다.\n<ul>\n<li>전역 공간에서 자동으로 생성되는 전연 컨텍스트</li>\n<li>eval함수</li>\n<li>함수 실행에 의한 컨텍스트</li>\n</ul>\n</li>\n<li>실행 컨텍스트 객체는 활성화 되는 시점에 VariableEnviroment, LexcialEnvrionment, ThisBinding의 세 가지 정보를 수집한다.</li>\n<li>실행 컨텍스트를 생서할 때 VariableEnvironment와 LexicalEnvironment가 동일한 내용으로 구성된다.</li>\n<li>LexicalEnvironment는 함수 실행 도중에 변경되는 사항이 즉시 반영된다.</li>\n<li>LexicalEnvironment와 VariableEnvironment는 다음과 environmentRecord와 outerEnvironmentReference로 구성돼 있다.\n<ul>\n<li>environmentRecord는 매개변수 식별자, 변수 식별자, 선언한 함수의 식별자 등을 수집한다.\n<ul>\n<li>이것 때문에 호이스팅이라는 개념이 사용된다.</li>\n<li>호이스팅은 코드 해석을 좀 더 수월하게 하기 위해 environmentRecord의 수집 과정을 추상화한 개념이다.</li>\n<li>변수 선언부와 함수 선언문에 호이스팅이 발생한다.</li>\n<li>함수 표현식을 사용할 경우 함수의 선언부만 호이스팅이 발생한다.</li>\n</ul>\n</li>\n<li>outerEnvironmentReference는 상위(직전) 컨텍스트의 LexcicalEnviroment 정보를 참조한다.\n<ul>\n<li>이것 때문에 스코프가 형성되고, 스코프 체인을 통해 상위 컨텍스트에 접근할 수 있다.</li>\n<li>스코프는 변수의 유효범위를 말한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Reference</h2>\n<p><a href=\"http://www.yes24.com/Product/Goods/78586788\" target=\"_blank\" rel=\"noopener noreferrer\">코어 자바스크립트</a></p>\n<ul>\n<li>2장. 실행 컨텍스트</li>\n</ul>\n",
      "date_published": "2020-08-01T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 7월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/07-July/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/07-July/",
      "summary": "2020년 7월 회고 입니다.",
      "content_html": "\n<p>7월은 개발 서적, 특히 javascript의 core에 대한 서적을 많이 읽었다.</p>\n<h2>공적</h2>\n<p>회사에서는 CMS 개발, API 분리, 크롬 확장프로그램 검수 위주의 일을 진행했다.</p>\n<h3>1. 크롬 확장프로그램</h3>\n<p><a href=\"/TIL/Review/2020-year/05-May/\" target=\"_blank\">5월 회고</a>와 <a href=\"/TIL/Review/2020-year/06-June/\" target=\"_blank\">6월 회고</a>에 이어 확장프로그램과 관련된 일에 고통받는 중이다.</p>\n<p>6월에 1차 개발이 완료되었고, 7월 말에 프로젝트 완료 보고를 진행했다.\n사실 7월에 뭔가 기능을 확장하거나 하진 않았고, 버그 수정만 했는데 문제는.. 검수가 너무 오래 걸린다.</p>\n<h4>(1) 지긋지긋한 검수 과정</h4>\n<p>단지 UI를 수정했을 뿐인데 계속 사용자 데이터 보호와 관련된 내용으로 반려되고 있다.\n모든 호스트 권한을 https로 변경하면 잘 작동하지만, 검색줌 같은 경우에는 아직 http를 사용하고 있어서 문제가 되고 있다.</p>\n<p>검색줌만 https로 전환 되면 완벽한데.. 생각보다 일정이 지연되고 있는 상황.</p>\n<p>여기서 무엇을 어떻게 얼마나 더 해야 좋을지 고민 중이다.</p>\n<h4>(2) 프로젝트 완료 보고</h4>\n<p>입사 후 처음으로 프로젝트 완료 보고 발표를 했다.\n사장님이 참여하시는 줄 알고 꽤나 공들여 준비했는데, 불행인지 다행인지 참관하시진 않았다. <s>다행인듯</s></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">프로젝트 완료 보고</p>\n<p>줌인터넷은 진행하던 프로젝트가 어느 정도 마무리되면 프로젝트 완료 보고를 진행한다.<br>\n다른 팀과 프로젝트의 의의, 목적, 성과 그리고 기술 스택 등을 공유한다.<br>\n<s>그런데 우리 팀만 하는 것 같다.</s></p>\n</div>\n<p>발표는</p>\n<ol>\n<li>개요</li>\n<li>확장프로그램 개발과정</li>\n<li>확장프로그램 배포과정</li>\n<li>프로젝트 구조</li>\n<li>검수 과정</li>\n<li>앞으로의 계획</li>\n</ol>\n<p>순서로 진행했다.</p>\n<p><strong>줌인터넷</strong>이라는 회사는 참 좋은 회사지만,\n<strong>줌</strong>이라는 서비스에는 아쉬움이 많기에 개인적으로 사내에서 이런 서비스를 많이 만들어 봤으면 하는 바람이 있다.</p>\n<p>불행인지 다행인지, 회사에서 개발 직군이 할 수 있는 것은 개발밖에 없다.\n어쨌든 개발자로서 최대한 좋은 퀄리티의 서비스를 만드는 것이 회사에 헌신하는 방법인 것 같다.</p>\n<h3>2. CMS 작업</h3>\n<p>이번 달의 주요 업무는 핫이슈 CMS를 개발이었다. 현재 UI 개발까지 완료된 상태이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">줌프런트의 핫이슈 영역</p>\n<p><a href=\"https://zum.com\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://user-images.githubusercontent.com/18749057/89117592-f3b5ef80-d4d9-11ea-9470-ddb68c4d6076.png\" alt=\"줌프런트의 핫이슈\" width=\"400\"></a></p>\n<p>기획자가 핫이슈 영역에 들어갈 링크와 이미지를 직접 작업해서 올린다. 현재 뉴스 CMS에 붙어 있는데, 이걸 줌프런트 CMS로 분리하는 과정이 필요한 상태.</p>\n</div>\n<p>CMS페이지는 Vue-element-admin을 이용하여 작업했다. 다만 Vue-element-admin의 경우 쓸데없는 패키지가 많고,\n보일러플레이트 자체가 매우 무겁기 때문에 필요한 컴포넌트만 가져다 사용 중이다.</p>\n<p>이번 CMS 작업이 조금 까다로운 점은,\n기존에는 뉴스 파트에서 작업하여 뉴스 API에 데이터를 얹어서 보내줬다면 이제는 아예 <strong>줌프런트 파트에서 모든 것을 작업해야 한다는 점</strong>이다.</p>\n<ul>\n<li>CMS만 만들면 되는 것이 아니라 CMS에서 정제한 데이터를 기반으로 새로운 API를 만들어야 한다.</li>\n<li>미리보기 기능까지 있기 때문에 미리보기와 관련된 도메인에서 페이지를 요청할 경우, 실서비스 데이터 데신에 미리보기 데이터로 구성해서 보여줘야 한다.</li>\n</ul>\n<p>따라서 핫이슈 CMS 하나 때문에 Internal API, Zum Front CMS, Zum Lego 등의 프로젝트에서 작업해야 한다.\nCMS 하나 때문에 최초 배포에 필요한 프로젝트만 3개인 것이다.</p>\n<p>원래 이번 달까지 마무리 해야 했지만, 같이 작업하는 팀원이 다른 일을 진행하느라 약간 지연되고 있다.\n8월에는 마무리할 수 있을 것 같다.</p>\n<h3>3. API 분리 작업</h3>\n<p>현재\n<a href=\"https://m.zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">모바일줌</a>,\n<a href=\"https://zum.com\" target=\"_blank\" rel=\"noopener noreferrer\">줌프런트</a>,\n<a href=\"https://chrome.google.com/webstore/detail/zum-newtab/bghgeookcfdmkoocalbclnhofnenmhlf\" target=\"_blank\" rel=\"noopener noreferrer\">크롬 확장프로그램</a>,\n<a href=\"https://play.google.com/store/apps/details?id=com.zum.android.search&amp;hl=ko\" target=\"_blank\" rel=\"noopener noreferrer\">줌 앱</a>\n등을 포함하여 <strong>최소 4개 이상의 서비스</strong>에서 Internal API를 사용하고 있다.\n<u>즉 Internal API가 매우 비대하다.</u></p>\n<p>이 중에서 배포 비중을 가장 많이 차지하고 있는 것은 모바일줌과 관련된 <u>Mobile API</u> 이다.\n그래서 Mobile API를 분리하기로 하였다.</p>\n<ul>\n<li>Mobile API는 데이터베이스를 사용하지 않기 때문에 <strong>데이터베이스와 관련된 모든 의존성을 제거</strong>했다.</li>\n<li>기존의 <strong>캐싱 로직</strong>을 리팩토링했다.</li>\n<li>버전업이 되면서 <strong>필요 없어진 코드를 제거</strong>했다.</li>\n<li>사내의 IDC 인스턴스로 사용하던 것을 <strong>도커 컨테이너</strong>와 <strong>쿠버네티스</strong>로 전환했다.</li>\n</ul>\n<p>이 중 제일 큰 시간이 소요된 것은 캐싱 로직 변경이다.\n<strong>약 100개 이상의 파일</strong>을 수동으로 작업했다.</p>\n<p>하지만.. 꼭 필요한 작업이였기 때문에.. <s>울며 겨자 먹기로</s> 할 수 밖에 없었다.</p>\n<p>Mobile API의 분리는 거의 끝났다. 서비스존 배포까지 완료된 상태이기 때문에 <u>8월 중에</u> 모바일줌에 적용하지 않을까 싶다.</p>\n<p>그다음에 <strong>Internal API에서 Mobile API를 제거하는 작업</strong>도 필요하다. <s>싹 다 지워~!</s></p>\n<h2>사적</h2>\n<p>이번 달은 <strong>카카오 면접</strong> 덕분에 주로 Javascript 관련 서적을 읽고, 코딩 인터뷰를 준비했다.</p>\n<h3>1. 디스코드 봇</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/89118668-5a3f0b80-d4e2-11ea-825d-9909b0026de0.png\" alt=\"디스코드 봇\"></p>\n<p>6월에 <a href=\"https://github.com/DKU-STUDY/\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-STUDY</a> 채팅방을 디스코드로 옮기면서 <a href=\"https://github.com/JunilHwang/discord-study-bot\" target=\"_blank\" rel=\"noopener noreferrer\">디스코드 봇</a>을 만들었다.</p>\n<p>현재 <u>Pull Request, Push, Issue, Review 등이 발생하면 디스코드 봇이 디스코드 채널에 메시지를 보내도록</u> 만들어놨다.</p>\n<p>일단 목표로 하는 기능은 다음과 같다.</p>\n<ul>\n<li><strong>Github 관련</strong>\n<ul>\n<li>Github 로그인 (완성)</li>\n<li>Github Repository 불러오기 (완성)</li>\n<li>Github Repository를 선택하면 관련된 Hooks 불러오기 (완성)</li>\n<li>Hooks를 추가/수정/삭제하기</li>\n<li>Hooks와 관련된 템플릿 작성하기\n<ul>\n<li>Pull Request</li>\n<li>Code Review</li>\n<li>Issue Comment</li>\n<li>Push</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Discord 관련</strong>\n<ul>\n<li>Discord 로그인</li>\n<li>Discord 채널 목록 불러오기</li>\n<li>Discord의 채널 ID 복사하기</li>\n</ul>\n</li>\n<li><strong>Discord와 Github 연동 관련</strong>\n<ul>\n<li>Github Hooks에 Discord Channel ID 연결하기</li>\n</ul>\n</li>\n</ul>\n<p>Github 로그인은 일단 <strong>Basic Auth</strong>로 만들었는데, 이걸 <strong>OAuth</strong>로 수정해야 하나 고민중이다.\n아무래도 <u>로그인과 관련된 권한은 최소화할수록 좋은 것 같다.</u></p>\n<p>사이드 프로젝트를 진행하면서 Github API에는 매우 익숙해졌기 때문에 만드는 데 큰 무리는 없다.</p>\n<p>다만, 카카오 면접 준비 때문에 일시 중단된 상태다. 8월 부터 다시 만들어야지.. ㅋㅋ</p>\n<h3>2. 카카오 면접 준비</h3>\n<p>5월에 재미로 친구들과 같이 <a href=\"https://programmers.co.kr/competitions/151/2020-kakao-fe-recruitment\" target=\"_blank\" rel=\"noopener noreferrer\">카카오 경력 개발자 영입 - 프론트엔드 개발 챌린지</a>에 지원했다.</p>\n<ul>\n<li>6월 첫째 주에 <strong>알고리즘 테스트</strong>를 봤다.\n<ul>\n<li>3문제 중에 2문제를 풀었고, 무조건 탈락이구나 생각했는데 통과해버렸다.</li>\n<li>같이 응시한 친구들 중에서 혼자 합격했다.</li>\n<li>쓸쓸했다... 쳇</li>\n</ul>\n</li>\n<li>6월 둘째 주에 <strong>프런트엔드 테스트</strong>를 봤다. 필수 요구사항은 다 해결했고, 추가 요구사항에서 고전했다.</li>\n</ul>\n<hr>\n<ul>\n<li>7월 첫째 주에 프런트엔드 테스트에 대한 코드리뷰 및 결과 발표를 안내받았다.<br>\n상위 13% 성적으로 합격했다.<br>\n<img src=\"https://user-images.githubusercontent.com/18749057/89118842-033a3600-d4e4-11ea-8d3d-2040baf201d8.png\" alt=\"코드 리뷰\"></li>\n<li>이력서를 작성했고, FE플랫폼 팀의 <strong>비즈니스 서비스 파트</strong>와 <strong>티스토리,브런</strong>파트에 지원했다.\n<ul>\n<li>비즈니스 서비스 파트에 친한 친구가 근무하고 있다.<br>\n그 친구를 존경하고 좋아했기 때문에 같이 일해보고 싶었고 그래서 지원했다.</li>\n</ul>\n</li>\n<li>7월 둘째 주에 면접 과제를 풀이했다\n<ul>\n<li>이 때 직접 <strong>반응형 시스템</strong>을 구축하여 풀이했다.</li>\n<li>프런트엔드 과제에 대한 <strong>코드 리뷰를 반영</strong>했다.</li>\n</ul>\n</li>\n<li>7월 셋째 주에 <strong>1차 인터뷰</strong>를 진행했다.<br>\n<img alt=\"1차 인터뷰 안내\" src=\"https://user-images.githubusercontent.com/18749057/89119015-c8d19880-d4e5-11ea-9ac4-4e0fb6060ed1.png\" width=\"400\">\n<ul>\n<li>인사이드 자바스크립트, 코어 자바스크립트, 각종 코딩 인터뷰 포스팅 및 레포, 프레임워크 관련 서적을 참고했다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>7월 넷째 주에 <strong>1차 인터뷰 합격</strong>을 안내받았다.<br>\n<img alt=\"1차 인터뷰 합격\" src=\"https://user-images.githubusercontent.com/18749057/89119025-e0108600-d4e5-11ea-9fb1-91c1c88b04fb.png\" width=\"400\">\n<ul>\n<li>원래 한 시간 인터뷰인데, 한 시간 반 정도 진행했다.</li>\n<li>사실 애매하게 대답한 부분들이 있어서 큰 기대를 하지 않았는데, 1차까지 합격했다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>7월 다섯째 주에 <strong>2차 인터뷰</strong>를 진행했다.\n<ul>\n<li>1차 인터뷰와 마찬가지로 원래 한 시간 인터뷰인데, 한 시간 반 정도 진행했다.</li>\n<li>긍정적인 신호라고 받아들여도 되겠지..?</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>그리고 <strong>내일(8/3 월)</strong> 최종 합격에 대한 안내를 받을 것 같다... 긴장 돼서 미칠 지경</p>\n<h4>(1) 반응형 시스템 구축</h4>\n<p>면접 과제를 준비하면서 과제를 어떤 식으로 풀이해야 좋을지 고민 하다가 Vue와 같이 MVVM 시스템을 직접 구축해서 사용하는 것을 목표로 하여 공부했다.</p>\n<p>이 때 참고한 자료는 다음과 같다.</p>\n<ul>\n<li><strong>Taost Meetup</strong>의 <a href=\"https://meetup.toast.com/posts/188\" target=\"_blank\" rel=\"noopener noreferrer\">0.7KB로 Vue와 같은 반응형 시스템 만들기</a></li>\n<li><strong>코드스피츠 86기</strong> <a href=\"https://www.youtube.com/watch?v=E9NZ0YEZrYU&amp;t=3320s\" target=\"_blank\" rel=\"noopener noreferrer\">객체지향 자바스크립트, MVVM</a></li>\n<li>그리고 위의 내용을 정리한 나의 포스트\n<ul>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/01-Intro/\" target=\"_blank\" rel=\"noopener noreferrer\">객체지향의 기본 이론</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/02-MVVM/\" target=\"_blank\" rel=\"noopener noreferrer\">MVVM System 만들기</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/03-Strategy-Observer/\" target=\"_blank\" rel=\"noopener noreferrer\">MVVM System 개선 (1)</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/\" target=\"_blank\" rel=\"noopener noreferrer\">MVVM System 개선 (2)</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/05-Extension/\" target=\"_blank\" rel=\"noopener noreferrer\">MVVM System 개선 (3)</a></li>\n</ul>\n</li>\n</ul>\n<p>처음에는 <code>Proxy</code>를 이용하여 Component Class를 만들었다.</p>\n<p><code>$data</code>에 Proxy를 씌워서, $data의 property 값이 변경되면 render를 실행시키는 방식으로 만든 것이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  $target<span class=\"token punctuation\">;</span> $components<span class=\"token punctuation\">;</span> $eventEmitter<span class=\"token punctuation\">;</span> $eventListener<span class=\"token punctuation\">;</span> $stores<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  $proxyHandler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$target<span class=\"token punctuation\">,</span> $components <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$components <span class=\"token operator\">=</span> $components<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eventListening</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stores <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_initStore</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $target<span class=\"token punctuation\">,</span> $proxyHandler<span class=\"token punctuation\">,</span> $observable<span class=\"token punctuation\">,</span> $stores <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    $proxyHandler<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      $observable<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>$stores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerGet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        store<span class=\"token punctuation\">.</span><span class=\"token function\">addObservable</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    $target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearGetOfProxyHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">clearGetOfProxyHandler</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $proxyHandler<span class=\"token punctuation\">,</span> $stores <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">delete</span> $proxyHandler<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>$stores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">removeHandlerGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token function\">observing</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $proxyHandler<span class=\"token punctuation\">,</span> observer <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">    $proxyHandler<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">return</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$data<span class=\"token punctuation\">,</span> $proxyHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">observer</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">property</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$observable<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">eventListening</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$eventListener <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$eventEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$eventListener<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">$on</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$eventListener<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">$emit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$eventEmitter<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 때 문제가 되는 점은, proxy의 경우 <strong>IE에서 지원을 아예 안 한다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/89119627-bdcd3700-d4ea-11ea-8f68-a2920a3d0980.png\" alt=\"Proxy 호환성\"></p>\n<p>그래서 <code>Object.defineProperty</code>로 변경했다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>HTMLElement<span class=\"token operator\">|</span>HTMLElementTagNameMap<span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $target<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">.</span><span class=\"token punctuation\">&lt;</span>string<span class=\"token punctuation\">,</span> Function<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $eventListener <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">.</span><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Store<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $stores<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">.</span><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $data<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Set<span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $observable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token operator\">|</span>Function<span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $getDescriptor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 컴포넌트 초기화</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">$target</span> <span class=\"token punctuation\">{</span>HTMLElement|HTMLElementTagNameMap<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컴포넌트의 태그 설정</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $data와 $stores 초기화</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $data와 $stores의 값들의 변화 감지</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 렌더링</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** $data와 $stores 초기화 **/</span></span>\n<span class=\"line\">  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stores <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_initStore</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 렌더링</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setGetDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $data와 $stores의 state에서 렌더링에 필요한 property를 감지한다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 렌더링</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resetGetDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 렌더링이 종료된 후 감지를 제거한다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 렌더링 후에 발생하는 이벤트 리스너 등록</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** $data와 $stores의 state에서 렌더링에 필요한 property를 감지한다. **/</span></span>\n<span class=\"line\">  <span class=\"token function\">setGetDescriptor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$getDescriptor</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$observable<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerGet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addObservable</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** 렌더링이 종료된 후 감지를 제거한다. **/</span></span>\n<span class=\"line\">  <span class=\"token function\">resetGetDescriptor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$getDescriptor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">removeHandlerGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** 렌더링 후에 발생하는 이벤트 리스너 등록 **/</span></span>\n<span class=\"line\">  <span class=\"token function\">setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">_setEvent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * $data와 $stores의 state에 변화가 생기면, 렌더링 실행</span>\n<span class=\"line\">   * 이 때 setGetDescriptor를 통하여 observable에 등록된 property에 대해서만 렌더링을 실행한다.</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">observing</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $data<span class=\"token punctuation\">,</span> $getDescriptor <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">    <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line highlighted\">     * setter 실행 시 해당 property가 observable에 있으면 렌더링 실행</span>\n<span class=\"line highlighted\">     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">property</span> <span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">     */</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observer</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">property</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$observable<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\"></span>\n<span class=\"line highlighted\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>$data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> $data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>$data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$getDescriptor<span class=\"token punctuation\">)</span> <span class=\"token function\">$getDescriptor</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">          <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">          _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">          <span class=\"token function\">observer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 이벤트 감지</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">eventName</span> <span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span> 감지할 이벤트 이름</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">set</span> <span class=\"token punctuation\">{</span>Function<span class=\"token punctuation\">}</span> 이벤트 발생시 실행될 callback 함수</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">$on</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">set</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$eventListener<span class=\"token punctuation\">,</span> eventName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> set <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 이벤트 발생</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">eventName</span> <span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span> 발생 시킬 이벤트 명</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">payload</span> <span class=\"token punctuation\">{</span>any<span class=\"token punctuation\">}</span> 콜백함수의 인자</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">$emit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$eventListener<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 컴포넌트간에 공유하는 데이터가 존재했기 때문에 <code>Store</code>를 구성했다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">.</span><span class=\"token punctuation\">&lt;</span>string<span class=\"token punctuation\">,</span> Set<span class=\"token punctuation\">&lt;</span>Component<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $observable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token operator\">|</span>Function<span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  $getDescriptor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/** <span class=\"token keyword\">@type</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">.</span><span class=\"token punctuation\">&lt;</span>string<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">}</span></span> **/</span></span>\n<span class=\"line\">  state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 스토어 생성</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">state</span> <span class=\"token punctuation\">{</span>Object.&lt;string, any&gt;<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">mutations</span> <span class=\"token punctuation\">{</span>Object.&lt;String, Function&gt;<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> mutations <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observing</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerMutations</span><span class=\"token punctuation\">(</span>mutations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * state에 변경이 있을 경우, 등록된 component에 대한 rendering 실행</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">state</span> <span class=\"token punctuation\">{</span>Object.&lt;string, any&gt;<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">observing</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>$getDescriptor<span class=\"token punctuation\">)</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">$getDescriptor</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">          <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">        <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">          _value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>$observable<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">            self<span class=\"token punctuation\">.</span>$observable<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component</span> <span class=\"token operator\">=&gt;</span> component<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">          <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * mutations의 메소드를 Store의 메소드로 등록</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">mutations</span> <span class=\"token punctuation\">{</span>Object&lt;String, Function&gt;<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">registerMutations</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mutations</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>mutations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mutations<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * proerty에 대한 observer 추가</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">property</span> <span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">component</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">addObservable</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">property<span class=\"token punctuation\">,</span> component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> $observable <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    $observable<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> $observable<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    $observable<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * - Component가 렌더링 되기 전에 descriptor함수를 만들어줌</span>\n<span class=\"line\">   * - descriptor에서 렌더링에 사용되는 Property 있을 경우 addObservable 실행 및 등록</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">getter</span> <span class=\"token punctuation\">{</span>Function<span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">setHandlerGet</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">getter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$getDescriptor <span class=\"token operator\">=</span> getter<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * Component의 렌더링이 끝나면 descriptor 제거</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">removeHandlerGet</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$getDescriptor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Store에서 사용하는 데이터에 변경이 발생할 경우, <strong>Store가 붙어있는 컴포넌트를 렌더링 하는 방식</strong>으로 만들었다.</p>\n<p>Component와 Store를 이용한 호스트 코드는 다음과 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>getDateFormat<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../utils\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../core\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>alarmStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 컴포넌트 생성</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">$target</span> <span class=\"token punctuation\">{</span> HTMLElementTagNameMap|HTMLElement <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">components</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>$target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clockInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 100ms 단위로 시간 변경</span>\n<span class=\"line\">   * <span class=\"token keyword\">@private</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">clockInterval</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>$data<span class=\"token punctuation\">,</span> updateNow<span class=\"token punctuation\">,</span> clockInterval<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    $data<span class=\"token punctuation\">.</span>increment <span class=\"token operator\">+=</span> <span class=\"token number\">100</span></span>\n<span class=\"line\">    <span class=\"token function\">updateNow</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    $data<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token function\">clockInterval</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * $data 초기화</span>\n<span class=\"line\">   * <span class=\"token keyword\">@returns</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>timer<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> start<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> increment<span class=\"token operator\">:</span> number<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span></span>\n<span class=\"line\">   * <span class=\"token keyword\">@private</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">_init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">timer</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">increment</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * store 초기화</span>\n<span class=\"line\">   * <span class=\"token keyword\">@returns</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>alarmStore<span class=\"token operator\">:</span> Store<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span></span>\n<span class=\"line\">   * <span class=\"token keyword\">@private</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">_initStore</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>alarmStore<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * $target에 렌더링</span>\n<span class=\"line\">   * <span class=\"token keyword\">@returns</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span></span></span>\n<span class=\"line\">   * <span class=\"token keyword\">@private</span></span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">_render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"line\">      &lt;section&gt;</span>\n<span class=\"line\">        &lt;h2&gt;현재시각&lt;/h2&gt;</span>\n<span class=\"line\">        &lt;p&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stores<span class=\"token punctuation\">.</span>alarmStore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p&gt;</span>\n<span class=\"line\">      &lt;/section&gt;</span>\n<span class=\"line\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * - 현재 시간을 업데이트함.</span>\n<span class=\"line\">   * - store에 반영</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">updateNow</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>$data<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">$stores</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>alarmStore<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    alarmStore<span class=\"token punctuation\">.</span><span class=\"token constant\">SET_NOW</span><span class=\"token punctuation\">(</span>$data<span class=\"token punctuation\">.</span>start <span class=\"token operator\">+</span> $data<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkAlarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 초기 시간과 시간 증가값을 업데이트함</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">datetime</span> <span class=\"token punctuation\">{</span>string<span class=\"token punctuation\">}</span> 새로운 초기 시간</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">updateStart</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">datetime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>$data<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    $data<span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    $data<span class=\"token punctuation\">.</span>increment <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 현재 시간에 대한 알람을 찾은 후 pushing</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">checkAlarm</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>queue<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stores<span class=\"token punctuation\">.</span>alarmStore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> nowTime <span class=\"token operator\">=</span> <span class=\"token function\">getDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h:i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    queue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>alarmTime<span class=\"token punctuation\">,</span> activation<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> activation <span class=\"token operator\">&amp;&amp;</span> alarmTime <span class=\"token operator\">===</span> nowTime<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">         <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pushAlarm</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token doc-comment comment\">/**</span>\n<span class=\"line\">   * 알람에 대한 메시지(알림)를 보냄</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">alarm</span> <span class=\"token punctuation\">{</span>Alarm<span class=\"token punctuation\">}</span> 알람 정보</span>\n<span class=\"line\">   * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">queueIndex</span> <span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span> 제거할 alarmQueue의 index number</span>\n<span class=\"line\">   */</span></span>\n<span class=\"line\">  <span class=\"token function\">pushAlarm</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">alarm<span class=\"token punctuation\">,</span> queueIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$stores<span class=\"token punctuation\">.</span>alarmStore<span class=\"token punctuation\">.</span><span class=\"token constant\">ADD_PUSH_MESSAGE</span><span class=\"token punctuation\">(</span>alarm<span class=\"token punctuation\">,</span> queueIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>어찌저찌 만들긴 했으나, 퇴근 후에 고작 2일 동안 고민하면서 만든 코드이기 때문에 문제가 좀 많은 편이다.</p>\n<p>위의 코드를 요약하자면 다음과 같다.</p>\n<ul>\n<li>Store의 $state에 Component Render Observer 등록</li>\n<li>Component의 $data에 Render Observer 등록</li>\n<li><strong>Component에 등록된 $data와 Store의 State의 property에 변경이 발생하면 render 실행</strong></li>\n</ul>\n<p>이렇게 구축한 코드를 나중에 좀 더 다듬어서 인강으로 만들던가 할 예정이다.</p>\n<h4>(2) 독서</h4>\n<p>7월 초에 별 생각 없이 회사 복지몰에서 쇼핑을 하다가 <strong>Yes24 북클럽 6개월 정기권</strong>을 발견하였고 바로 결제했다.</p>\n<p>여태까지 본 eBook 쇼핑몰 중에서 IT관련 서적이 제일 많이 등록되어 있었다.\n다른 eBook 쇼핑몰의 경우 정기권을 구매했을 때 IT서적을 볼 수 있는 경우는 거의 없었기 때문에 무척 놀랐다.</p>\n<p>다만 최신 서적은 거의 볼 수 없었고 출판된 지 2~3년 정도 된 서적은 거의 다 볼 수 있었다.</p>\n<hr>\n<ul>\n<li><a href=\"http://m.yes24.com/Goods/Detail/78586788\" target=\"_blank\" rel=\"noopener noreferrer\">코어 자바스크립트</a>\n<ul>\n<li>2019년에 출간된 서적임에도 불구하고 Yes24 북클럽에서 볼 수 있었다. 무척 운이 좋았다.</li>\n<li>전반적으로 설명이 구체적이고 이해하기 쉽게 서술되어 있었다.</li>\n<li>특히 메모리와 실행 컨텍스트에 대해 어떤 서적보다도 구체적으로 설명되어 있었다. 이 부분이 제일 도움이 많이 됐다.</li>\n<li>메소드와 함수에 대한 구분도 직관적으로 이해할 수 있게 설명되어 있다.</li>\n<li>프로토타입에 대한 부분도 이렇게 쉽게 서술될 수 있을까? 싶을 정도로 쉽게 되어 있었다.</li>\n<li>그리고 여러 가지 용어에 대한 저자의 견해가 마음에 들었다. 특히 클로저에 대해 설명하는 부분이 인상 깊었다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/37157296\" target=\"_blank\" rel=\"noopener noreferrer\">인사이드 자바스크립트</a>\n<ul>\n<li>코어 자바스크립트를 먼저 읽고, 이 책을 읽어서 그런지 그렇게 만족스럽진 못했다.</li>\n<li>객체지향 파트의 경우 그저 문법 개선이라는 부분을 보고 그냥 접었다.</li>\n<li>마음에 들었던 부분은 메모이제이션에 대한 설명</li>\n<li>특히 프로토타입에 대한 설명은 코어 자바스크립트와 너무 비교되었기 때문에 매우 실망했다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/66815171\" target=\"_blank\" rel=\"noopener noreferrer\">프론트엔드 개발 첫걸음</a>\n<ul>\n<li>FE 프레임워크에 탄생에 대한 서술이 인상 깊었다.</li>\n<li>각각의 프레임워크(React, Angular, Vue)에 대한 비교를 한 눈에 볼 수 있었다.</li>\n<li>무엇보다 Flux 패턴이 쉽게 설명되어있었기 때문에 좋았다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>이 외에 재미로 읽은 책도 몇 권 있다.</p>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/57703297\" target=\"_blank\" rel=\"noopener noreferrer\">팟캐스트 나는 프로그래머다</a>\n<ul>\n<li>2015년에 출판된 책이다.</li>\n<li><a href=\"http://www.podbbang.com/ch/9126\" target=\"_blank\" rel=\"noopener noreferrer\">팟캐스트</a>의 내용을 책으로 옮긴 것이다.</li>\n<li>재미로 읽었지만, 생각보다 유익했다.</li>\n<li>Scala, Go, Node.js 등에 대한 특징과 장단점 등을 엿볼 수 있었다.</li>\n<li>스타트업, SI, 서비스회사 등의 특징도 엿볼 수 있었다.</li>\n<li>이후의 시리즈가 없는 게 아쉽다.</li>\n<li>팟캐스트에서 모든 라디오를 들어볼 수 있다.</li>\n</ul>\n</li>\n<li><a href=\"http://www.yes24.com/Product/Goods/9440838\" target=\"_blank\" rel=\"noopener noreferrer\">부의 추월차선</a>\n<ul>\n<li>부자가 되기 위한 방법</li>\n<li>인도, 서행차선, 추월차선을 기준으로 설명되어 있다.</li>\n<li><code>부</code>에 대한 의미를 되새기기에 좋은 책이다.</li>\n<li>사업을 하지 않더라도, 이 정도의 내용은 숙지해놓으면 살아가면서 분명 도움이 될 것이다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>앞으로도 대중교통을 이용할 때 혹은 점심시간, 취침 전 등의 시간을 이용해서 꾸준히 책을 읽어야겠다.</p>\n<h4>(3) 코딩 인터뷰 공부</h4>\n<p>카카오 면접을 앞두고 꽤 많은 포스트와 인터뷰에 대한 글들을 읽었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">깊이 있는 면접 준비를 위한 자료</p>\n<ul>\n<li><a href=\"https://gitlab.com/siots-study/topics/-/wikis/home\" target=\"_blank\" rel=\"noopener noreferrer\">시옷 스터디</a>\n<ul>\n<li>개인적으로 인터넷에 나와 있는 자료 중에서는 이게 제일 잘 정리되어있는 것 같다.</li>\n<li>모든 자료에 추가적인 레퍼런스가 있기 때문에 특히 도움이 많이 된다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/yangshun/front-end-interview-handbook/\" target=\"_blank\" rel=\"noopener noreferrer\">프런트엔드 인터뷰 핸드북</a>\n<ul>\n<li>프런트엔드와 관련된 내용을 전반적으로 훑어볼 수 있어서 좋았다.</li>\n<li>다만 깊이는 기대하기 어렵다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jobhope/TechnicalNote\" target=\"_blank\" rel=\"noopener noreferrer\">TechnicalNote</a>\n<ul>\n<li>프런트엔드 뿐만 아니라 개발에 필요한 기초적인 질문들이 포함되어 있어서 보기 좋았다.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner\" target=\"_blank\" rel=\"noopener noreferrer\">초보자를 위한 코딩 인터뷰 질문 모음</a>\n<ul>\n<li>커뮤니티에서 유명한 한재엽님을 필두로 하여 정리된 자료들</li>\n<li>말 그대로 초보자들이 읽기 쉽게 정리되어 있다.</li>\n</ul>\n</li>\n<li><a href=\"https://ui.toast.com/fe-guide/ko_PERFORMANCE/\" target=\"_blank\" rel=\"noopener noreferrer\">프런트엔드 성능 최적화</a>\n<ul>\n<li>성능 최적화를 위한 모든 내용이 들어있다.</li>\n<li>사실 성능 최적화와 관련된 내용보단 <strong>브라우저 렌더링</strong>과 관련된 내용이 더 잘 들어온다.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">가볍게 읽기 좋은 것들</p>\n<ul>\n<li><a href=\"https://h5bp.org/Front-end-Developer-Interview-Questions/translations/korean/\" target=\"_blank\" rel=\"noopener noreferrer\">프런트엔드 면접 문제 은행</a></li>\n<li><a href=\"https://velog.io/@honeysuckle/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8-%EB%AA%A8%EC%9D%8C\" target=\"_blank\" rel=\"noopener noreferrer\">신입 프런트엔드 면접 질문 모음</a></li>\n<li><a href=\"https://sunnykim91.tistory.com/121\" target=\"_blank\" rel=\"noopener noreferrer\">프런트엔드 개발자 면접 질문 정리</a></li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">자극이 되고, 뼈가 되고, 살이 되는 글</p>\n<p>정리하면서 알았는데, 둘 다 OKKY 미니 세미나와 관련된 글이다.</p>\n<ul>\n<li><a href=\"https://ict-nroo.tistory.com/72\" target=\"_blank\" rel=\"noopener noreferrer\">OKKY 미니 세미나 - 유명 IT 기업 입사 도전기</a></li>\n<li><a href=\"https://jojoldu.tistory.com/247\" target=\"_blank\" rel=\"noopener noreferrer\">OKKY 미니 세미나 - 비전공 학원출신 SI개발자, 유명스타트업 들어간.ssul</a></li>\n</ul>\n<p>정말, 읽으면서 두 분의 노력이 존경스러웠으며 <u>나도 저렇게 할 수 있을까?</u> 라는 의문과\n<strong>나도 저렇게 하고 싶다</strong>라는 소망이 공존했다.</p>\n<p>자극되는 긁은 언제 읽어도 좋은 것 같다.</p>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">난이도 최상의 심화 자료</p>\n<p>사실 <a href=\"https://www.bsidesoft.com/\" target=\"_blank\" rel=\"noopener noreferrer\">비사이드소프트</a>에 존재하는 모든 포스팅이 심오하다.\n그중에 제일 인상 깊었던 글은 <a href=\"https://www.bsidesoft.com/5370\" target=\"_blank\" rel=\"noopener noreferrer\">ES6의 class문은 특별할까?</a> 이다.</p>\n</div>\n<h4>(4) 결과</h4>\n<p><strong>결론만 말하자면 떨어졌다.</strong></p>\n<ul>\n<li>월요일에 결과가 나온다고 했는데 수요일에 나왔다. 기다리느라 무척 힘들었다. 이직은 하지 않더라도 합격은 하고 싶었는데.. 아쉼이 많이 남는다.</li>\n<li>면접 준비는 항상 해야할 것 같다. 시간내서 준비하려고 하니까 너무 고생했다.</li>\n</ul>\n<h3>3. Java Clean Code 9기 Reviewer</h3>\n<p>8기에는 수강생으로 참여했는데, 9기에는 리뷰어로 참여하게 되었다.\n<s>그런데 대체 언제 PR이 올라오는 거지?</s></p>\n<p>내가 <code>잘 할 수 있을까</code>라는 의문과 <code>정말 잘하고 싶다</code>는 생각을 같이하게 된다.\n<s>일단 리뷰를 올려주세요..</s></p>\n<p>어쨌든, 시간적 여유만 충분하다면 앞으로 꾸준히 리뷰어 활동을 하고 싶다.</p>\n<h3>4. Github Contribution 3,000개 달성</h3>\n<p>7월 10일, 문득 현재 몇 개의 잔디가 심어졌나 확인하고 싶어서 Github에 들어갔더니 <strong>딱 3,000개의 잔디</strong>가 심겨 있었다.</p>\n<p><img src=\"https://scontent-ssn1-1.xx.fbcdn.net/v/t1.0-9/106926405_1011541565964885_8375374465964372512_n.jpg?_nc_cat=103&amp;_nc_sid=730e14&amp;_nc_ohc=Wnq-a0D4l8UAX87nRNp&amp;_nc_ht=scontent-ssn1-1.xx&amp;oh=74282dd9b4e6ef67a2f5cc8b054a1472&amp;oe=5F4C44FE\" alt=\"3,000개의 잔디\"></p>\n<p><strong>2020년이 끝날 때 까지 5,000개</strong>의 잔디를 심는 것이 목표이다.</p>\n<p>이 글을 작성하는 시점(8/2)을 기준으로 3,262개의 잔디가 심어진 상태이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/89124819-d2262980-d514-11ea-9789-e04e715489c8.png\" alt=\"3,262 잔디\"></p>\n<p>지난 1년이 아닌, <strong>2020년을 기준</strong>으로 한다면 약 2,800개의 잔디가 심어졌다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/89124841-f41fac00-d514-11ea-947b-ae3504b5cbde.png\" alt=\"2,802 잔디\"></p>\n<p>사실 최근 일주일 정도는 면접 준비 때문에 힘이 빠져서 커밋을 거의 못 했다.\n8월에는 조금 더 열심히 커밋 해야지!</p>\n<h2>기타</h2>\n<h3>1. 수영</h3>\n<p>7월에는 수영을 5번도 못한 것 같다.</p>\n<p>핑계야 많지만, 면접 준비 때문에 수영까지 할 수 있는 체력이 남질 않았음이 제일 큰 이유다.</p>\n<h3>2. 오버워치</h3>\n<p>뜬금없이 ABC 대학 최강자전에 출전하게 되었다. <s>결과는 1차전부터 3:0으로 완패</s></p>\n<p>뭐.. 최선을 다했으니 후회는 없다. <s>최선을 다해서 던진 건가..?</s></p>\n<h2>Summary</h2>\n<ul>\n<li>회사 일 열심히 했다.</li>\n<li>카카오 면접을 준비했다.</li>\n<li>책을 많이 읽었다.</li>\n<li>자극을 받았다.</li>\n<li>수영은 못했다.</li>\n</ul>\n",
      "image": "https://user-images.githubusercontent.com/18749057/89118668-5a3f0b80-d4e2-11ea-825d-9909b0026de0.png",
      "date_published": "2020-07-31T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 2분기 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/02-Second-Quarter/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/02-Second-Quarter/",
      "summary": "개발자 황준일의 2020년 2분기 회고입니다.",
      "content_html": "\n<p>정신을 차리고 보니 벌써 2020년의 7월이 되었다.</p>\n<p>그래서 다시 정신을 가다듬고, 2020년의 2분기는 얼마나 알차게 보냈는지 정리해보고자 한다.</p>\n<h2>개발 역량 강화</h2>\n<h3>1. 일일커밋</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/89799319-4772a980-db68-11ea-8c89-02751f863561.png\" alt=\"일일커밋\"><br>\n<u>* 글을 작성하는 시점(8월) 기준의 Github Contributions 이다.</u></p>\n<p>올해의 첫 번째 목표이자 제일 큰 목표는 바로 <strong>일일커밋</strong>이다.\n이전에는 일일커밋이 부질없다고 생각했는데, 그 생각을 고쳐먹었다.\n<u>무언가를 거창하게 하기보단, 작더라도 꾸준히 하는 것이 중요하다.</u></p>\n<p>이런 생각은 <a href=\"https://www.youtube.com/watch?v=V9AGvwPmnZU\" target=\"_blank\" rel=\"noopener noreferrer\">지방대 개발 비전공자가 배달의민족 리드 개발자가 되기까지</a>에 언급된 <code>하루키 법칙</code>에서 비롯되었다.</p>\n<p>나는 <strong>관성</strong>의 영향을 크게 받는 사람이다.\n그래서 일일커밋이라는 관성에 탑승하기로 했다.\n<s>강제로 꾸준히 공부하다 보면 뭐라도 되어있겠지 하며..</s></p>\n<p>너무 피곤해서 못할뻔한 적도 있었지만, 머릿속으로 계속 <u>'그래도 오늘 커밋을 해야 하는데...'</u> 하며 몸을 일으켜 공부 했다.\n이렇게까지 해야 하는 건가 싶을 때도 있었지만 어쨌든 결과적으론 나쁘지 않았다.</p>\n<p>2분기에는 일일커밋의 양분으로</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/\" target=\"_blank\" rel=\"noopener noreferrer\">Today I Learned</a></li>\n<li>사이트 프로젝트: <a href=\"https://github.com/JunilHwang/DKU-Software-Engineering-Logging-service\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-Software-Engineering-Logging-service</a></li>\n<li><a href=\"https://github.com/JunilHwang/java-clean-code\" target=\"_blank\" rel=\"noopener noreferrer\">Java Clean Code TDD 8기</a></li>\n<li><a href=\"https://github.com/DKU-STUDY\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-STUDY</a></li>\n<li><a href=\"https://github.com/JunilHwang/discord-study-bot\" target=\"_blank\" rel=\"noopener noreferrer\">디스코드 깃허브 알림 봇</a></li>\n</ul>\n<p>등을 이용했다.</p>\n<p>학과 자료는 옛날부터 생각했던 거라서 그냥 시간 있을 때 조금씩 정리했고,\n<code>TIL</code>도 팀원들과 유명한 개발자들이 하고 있었기 때문에 나도 하고 싶다는 생각으로 시작했다.</p>\n<p>그리고 사이드 프로젝트의 경우 학교에 다닐 때부터 해야지 해야지 하다가 결국 못했는데,\n어떻게든 끝맺음을 짓고 싶어서 시작했다. <s>결과적으로 지금은 방치중이다.</s>\n<strong>3분기에 꼭 배포까지 해보자!</strong></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">2분기 커밋 정산</p>\n<ul>\n<li><code>2분기</code>에 총 <strong>1537개</strong>의 커밋을 했다.</li>\n<li><code>4월</code>에 <strong>462개</strong>의 커밋을 했다.<br>\n<img src=\"https://user-images.githubusercontent.com/18749057/89785055-bd6d1580-db54-11ea-918c-0e018e454a17.png\" alt=\"4월\"></li>\n<li><code>5월</code>에 <strong>641개</strong>의 커밋을 했다. <br>\n<img src=\"https://user-images.githubusercontent.com/18749057/89785083-c3fb8d00-db54-11ea-89dd-b959992b5153.png\" alt=\"5월\"></li>\n<li><code>6월</code>에 <strong>434개</strong>의 커밋을 했다.<br>\n<img src=\"https://user-images.githubusercontent.com/18749057/89785375-4a17d380-db55-11ea-9b8b-af0bf178d230.png\" alt=\"6월\"></li>\n<li><code>한 달</code> 평균 <strong>약 512개</strong>의 커밋을 했다.</li>\n<li><code>하루</code> 평균 <strong>약 17개</strong>의 커밋을 했다.</li>\n</ul>\n</div>\n<p>확실히 3개월 동안 매우 많은 <s>기록을</s>공부를 했다.\n적어도 내가 여태까지 살아왔던 다른 시간들과 비교하면 그렇다.\n이 밀도를 최대 3년 정도 유지하는 것이 나의 최대 목표다.</p>\n<p>그리고 이 목표를 얼마나 착실하게 이루어가느냐에 따라서 앞으로의 인생이 달라지겠지?</p>\n<p>성공까진 아니더라도 <strong>나 자신에게 떳떳하게 살기 위한 한 걸음</strong>이리라.</p>\n<hr>\n<h3>2. Today I Learned</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">나의 자극제</p>\n<ul>\n<li><a href=\"https://github.com/namjunemy\" target=\"_blank\" rel=\"noopener noreferrer\">남준님의 TIL</a></li>\n<li>체대생 개발자로 유명한 <a href=\"https://github.com/Integerous/TIL\" target=\"_blank\" rel=\"noopener noreferrer\">정수님의 TIL</a></li>\n<li>TIL은 아니지만, <a href=\"https://github.com/gmlwjd9405/gmlwjd9405.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">희정님의 블로그</a></li>\n</ul>\n<p>입사 했을 때 이런 분들과 같이 일할 수 있음에 감사했다.</p>\n</div>\n<p>일일 커밋의 좋은 양분 중 하나가 <code>Today I Learn</code>이었다.\n공부한 것들을 기록하는 단순한 행위지만 그 효과는 상당히 좋다고 생각한다.</p>\n<p>기록하고 싶은 것들이 참 많은데, 내가 글을 작성할 때 공을 너무 많이 들여서 한 가지 주제로 무언가를 쓸 때 시간을 너무 많이 소모한다.\n그렇다고 대충 쓰기는 또 싫다. 그래서 자연스럽게 글쓰기 자체를 멀리하게 된다.. <s>핑계도 가지가지</s></p>\n<p>일단 사이드 프로젝트를 완료한 다음에 다시 꾸준히 쓰든가 해야지.. <s>대체 언제하겠다는걸까?</s></p>\n<p>2분기는 <strong>월간 리뷰</strong>만 작성했다.</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/Review/2020-year/01-January/\" target=\"_blank\" rel=\"noopener noreferrer\">1월 리뷰</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Review/2020-year/02-February/\" target=\"_blank\" rel=\"noopener noreferrer\">2월 리뷰</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Review/2020-year/03-March/\" target=\"_blank\" rel=\"noopener noreferrer\">3월 리뷰</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Review/2020-year/04-April/\" target=\"_blank\" rel=\"noopener noreferrer\">4월 리뷰</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Review/2020-year/05-May/\" target=\"_blank\" rel=\"noopener noreferrer\">5월 리뷰</a></li>\n<li><a href=\"https://junilhwang.github.io/TIL/Review/2020-year/06-June/\" target=\"_blank\" rel=\"noopener noreferrer\">6월 리뷰</a></li>\n</ul>\n<p>1~3월 리뷰는 기억이 가물 가물 해서 대충 작성했다. <s>사실 그렇게 특이한 일도 없었다.</s></p>\n<hr>\n<h3>3. Side Project</h3>\n<p><strong>Github와 관련된 주제</strong>로 사이드 프로젝트를 진행하고 있다.\n자신의 Github에 올린 <strong>Markdown 파일</strong>을 읽어올 수 있고,\n<strong>Webhooks</strong>를 이용하여 자동으로 포스트가 업데이트되도록 만들었다.\n(물론 수동으로 갱신할 수도 있다.)</p>\n<p>일단 위에 언급한 기능들은 일찍이 다 만들었는데, 문제는 <strong>디자인도 구리고 퀄리티가 낮았다.</strong>\n그래서 이것저것 서브 기능을 넣어야 하는데 그것마저 쉽지가 않다.\n<u>혼자서 사이드 프로젝트를 하는 게 이럴 때 버겁구나 느끼는 중이다.</u></p>\n<p>그래서 만족할 때 까지 리팩토링을 하거나, 기술 스택을 최대한 많이 공부하는 등의 목표를 가지고 진행 중이다.\n<s>벌써 리팩토링만 몇 번 한 것인지...</s></p>\n<h4>첫 번째 성과, Open API 습득</h4>\n<p>사이드 프로젝트를 하면서 얻은 첫 번째 성과는 <strong>Open API를 사용하는 방법</strong>을 완전히 터득한 것이다.\n이전에는 API를 연동할 때 문서를 봐도 모르겠고,\n다른 사람들이 작성한 글들을 봐도 감이 오질 않았는데 정말 어떤 API를 사용하더라도 큰 문제가 없을 정도로 이해한 상태다.</p>\n<p>사실 사이드 프로젝트 덕분이라기보단 입사 직후에 진행했던 파일럿 프로젝트의 영향이 더 큰 것 같다.</p>\n<h4>두 번째 성과, NestJS 습득</h4>\n<p>두 번째 성과로 <code>NestJS</code>에 대한 사용법 습득이다.</p>\n<p>재학중에 <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS</a>가 뭔가 좋아보여서 공부했었는데, 너무 어려워서 포기했다.\n그런데 이번에 무심코 다시 적용을 시도했고, 결과적으로 좋은 선택이 되었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">NestJS 소개</p>\n<ul>\n<li>NestJS는 <strong>Google</strong>에서 만든 <strong>Server Side Framework</strong>이다.</li>\n<li><strong>Java의 Spring과 매우 비슷한 방식</strong>으로 작동한다.</li>\n<li><strong>DI(Dependency Injection)</strong> 방식으로 구성한다.</li>\n<li><strong>DDD</strong> 형태의 프로젝트 구조를 권장한다.</li>\n<li><strong>Typescript</strong>를 사용한다.</li>\n<li><strong>express</strong> 기반이다.</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">NestJS의 철학</p>\n<p>NestJS는 Angular의 영향을 받아 다음과 같은 철학 기반을 만들어졌습니다.</p>\n<ul>\n<li>고도의 테스트 지원</li>\n<li>효율적인 확장</li>\n<li>느슨한 결합</li>\n<li>유지 관리가 용이​​한 애플리케이션</li>\n</ul>\n</div>\n<p>이건 <strong>객체지향 공부의 영향</strong>이 컸다.\n국내 자료를 아무리 찾아봐도 NestJS에 대한 내용은 거의 볼 수 없었다.\n대부분 해외에서 사용하고 있는데, 영어에 너무 취약하다 보니.. 이해가 너무 어려웠다.</p>\n<p>하지만 Spring을 많이 사용해봤고 <strong>Spring에 사용된 기본적은 디자인패턴이나 철학을 이해하고 있다면</strong>,\nNestJS를 이해하는 데 큰 무리가 없는 것 같다.</p>\n<p>그래서 사이드 프로젝트의 제일 큰 수확은 사실 NestJS의 사용 숙지가 아닐까 싶다.</p>\n<h4>세 번째 성과, SSR</h4>\n<p>진짜 SSR 때문에 한 동안 고생을 너무 많이 했다.\nVue에서 제공하는 가이드라인이 너무 빈약하고,\nAPI 문서도 잘못 되었거나 반영되지 않은 것들이 많았다.</p>\n<p>각설하고 문제점과 약간의 해결과정을 나열해보자면,</p>\n<p><em>첫 번째 문제: SSR과 CSR을 같이 하기 위한 가이드라인이 없다.</em></p>\n<p><a href=\"https://ssr.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue의 공식문서</a>, 각종 커뮤니티 사이트,\n기술 블로그 등을 폼하여 눈씻고 찾아봐도 SSR과 CSR을 같이 사용하는 방법에 대한 가이드라인은 없었다.\n<u>있다면 누가 좀 알려주길..</u></p>\n<p>어쨌든 SSR에 CSR을 연동하기 위해선 다음과 같은 과정이 필요하다.</p>\n<ul>\n<li>CSR의 Template에 SSR의 Template을 합쳐야 한다.</li>\n<li>CSR 코드를 번들링(빌드) 한다. <u>이 때 Template도 Bundling 코드에 포함된다.</u></li>\n<li>CSR에서 Build된 Template를 SSR에서 사용한다.</li>\n</ul>\n<p>이와 관련 내용도 추후에 상세하게 정리해서 올릴 예정이다.</p>\n<p><em>두 번째 문제: window와 document를 사용하는 코드들</em></p>\n<p>SSR은 CSR의 코드를 Server에서 실행하여 HTML 코드를 만들고 바로 렌더링한다.\n이 때 발생하는 문제가 <u>window와 document는 Server Side에서 사용할 수 없다는 것이다.</u></p>\n<p>그래서 직접 window와 document를 만들어주거나 Render와 관련된 코드에는 window와 document를 사용하지 않는 것이다.\n<strong>그런데 이게 말이 쉽지 직접 해보면 욕나온다.</strong></p>\n<p>어쨌든 어떤 방법이 제일 좋을까 고민하다가 찾아난 해결책이 JSDOM을 사용하는 것이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">JSDOM</p>\n<ul>\n<li>JSDOM은 말 그대로 가상의 window와 document를 만들어주는 것이다.</li>\n<li>가상의 존재여도 <u>존재한다는 것</u> 자체만으로도 그 가치가 있다.</li>\n</ul>\n</div>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> join <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BundleRenderer<span class=\"token punctuation\">,</span> createBundleRenderer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-server-renderer'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DOMWindow<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSDOM</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'jsdom'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token number\">3000</span> <span class=\"token operator\">:</span> <span class=\"token number\">8080</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> bundlePath <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../../../resources/vue-ssr-server-bundle.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> htmlStr <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SSRService</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token function\">getRenderer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BundleRenderer <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token function\">createBundleRenderer</span><span class=\"token punctuation\">(</span>bundlePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token literal-property property\">runInNewContext</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">        <span class=\"token function-variable function\">template</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">renderState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">renderScripts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> <span class=\"token string\">'Renderer Error'</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">public</span> <span class=\"token function\">getDom</span> <span class=\"token punctuation\">(</span>contextURL<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> DOMWindow<span class=\"token punctuation\">,</span> Document <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>contextURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>window<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSDOM</span><span class=\"token punctuation\">(</span>htmlStr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">]</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">throw</span> <span class=\"token string\">'JSDOM Error'</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><em>세 번째 문제: 제대로된 Tutorial을 찾을 수 없다.</em></p>\n<p>SSR의 가장 큰 문제점 중 하나가 바로 제대로된 튜토리얼이 없다는 것이다.\ngithub를 찾아봐도 구글링을 해봐도 <u>이것만 보면 이해할 수 있다 싶은 튜토리얼은 존재하지 않았다.</u></p>\n<p>그래서 내가 만들었다 --&gt; <a href=\"https://github.com/JunilHwang/vue-ssr-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">Vue SSR Tutorial</a></p>\n<p>일단 설명은 없고 소스코드만 존재한다. <s>뭐.. 이해할 사람은 이해하겠지.</s></p>\n<h4>네 번째 성과, Mono Repo 적용</h4>\n<p>Client와 Server에 Typescript를 적용하면서 생긴 고민이 <u>공통 타입을 잘 활용할 수 있는 방법이 없을까?</u> 였다.</p>\n<p>예를들어 Server에서 Github API를 이용하여 <code>Repository</code> 정보에 대한 타입을 <code>GithubRepository</code>로 정의했다.\n<strong>그런데 이 타입은 Client에서도 필요하다.</strong></p>\n<p>그래서 처음엔 Client가 프로젝트의 코드상으로 Server에 접근할 수 있도록 만들어야 했다.\n만들면서 계속 찜찜했다. <u>Type이 Server에 종속되어있는게 맞을까?</u> 라는 생각 때문이다.</p>\n<p>그래서 Mono Repository에 대해 찾아봤고, 두 가지 방법이 존재했다.</p>\n<ul>\n<li>Yarn Workspace\n<ul>\n<li><a href=\"https://musma.github.io/2019/04/02/yarn-workspaces.html\" target=\"_blank\" rel=\"noopener noreferrer\">[Node] yarn workspaces (프로젝트 참조)</a></li>\n<li><a href=\"https://medium.com/@deptno/monorepo-yarn-workspace-e81e3e078100\" target=\"_blank\" rel=\"noopener noreferrer\">🌸 모노레포. Lerna? Yarn Worksapce!</a></li>\n</ul>\n</li>\n<li>Lerna\n<ul>\n<li><a href=\"https://medium.com/@pks2974/mono-repo-%EB%A5%BC-%EC%9C%84%ED%95%9C-lerna-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-65c22029988\" target=\"_blank\" rel=\"noopener noreferrer\">Mono Repo 를 위한 Lerna 간단 정리하기</a></li>\n<li><a href=\"https://www.awesomezero.com/development/lerna/\" target=\"_blank\" rel=\"noopener noreferrer\">Lerna 훑어보기</a></li>\n</ul>\n</li>\n</ul>\n<p>권장하는 것은, 두 가지를 같이 사용하는 것이다.</p>\n<ul>\n<li><a href=\"https://simsimjae.tistory.com/384\" target=\"_blank\" rel=\"noopener noreferrer\">yarn workspace와 Lerna.js로 모노레포 만들기 - 심심재</a></li>\n</ul>\n<p>필자 또한 두 가지 모두 사용하기로 결정했다.</p>\n<p>먼저 폴더 구조를 다음과 같이 만들었다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">┌─ /</span>\n<span class=\"line\">├─ package.json</span>\n<span class=\"line\">├─ lerna.json</span>\n<span class=\"line\">├─ front-end/</span>\n<span class=\"line\">│  ├─ package.json</span>\n<span class=\"line\">│  └─ src/</span>\n<span class=\"line\">├─ back-end/</span>\n<span class=\"line\">│  ├─ package.json</span>\n<span class=\"line\">│  └─ src/</span>\n<span class=\"line\">└─ domain/</span>\n<span class=\"line\">   ├─ package.json</span>\n<span class=\"line\">   └─ src/</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 각각의 <code>package.json</code>을 수정해야 한다.</p>\n<p><code>/package.json</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DKU-Software-Engineering-Logging-Service\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token string\">\"front-end\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// front-end 폴더</span></span>\n<span class=\"line\">    <span class=\"token string\">\"back-end\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// back-end 폴더</span></span>\n<span class=\"line\">    <span class=\"token string\">\"domain\"</span> <span class=\"token comment\">// front와 back이 공유하는 타입 혹은 로직</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"lerna\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.20.2\"</span> <span class=\"token comment\">// learn 사용하기 </span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 이 명령을 실행할 경우 front와 back의 dev 명령 실행</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"lerna:dev:stream\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lerna run lerna:dev --stream\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 직렬 실행(front-&gt;back)</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"lerna:dev:parallel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lerna run lerna:dev --parallel\"</span> <span class=\"token comment\">// 병렬 실행(front와 back 동시에)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/lerna.json</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"packages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"back-end\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"front-end\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 관리하는 repo 목록</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"npmClient\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// yarn 사용</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span> <span class=\"token comment\">// 공통으로 관리하는 버전</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 <u>front-end와 back-end의 package.json에 domain을 불러와야 한다.</u></p>\n<p><code>/back-end/pacakge.json</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"back-end\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dankook University Developer Logging Service\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"junil hwang\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"lerna:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development nest start --watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// root의 npm script에서 실행</span></span>\n<span class=\"line\">    <span class=\"token comment\">/* 생략 */</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token string-property property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"domain\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// domain package를 불러와야 사용할 수 있다.</span></span>\n<span class=\"line\">    <span class=\"token comment\">/* 생략 */</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/front-end/package.json</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"front-end\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token string-property property\">\"lerna:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-cli-service serve\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token comment\">/* 생략 */</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token string-property property\">\"domain\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token comment\">/* 생략 */</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 생략 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>결과적으로 다음과 같이 사용 가능했다.</p>\n<p><code>/front-end/src/services/GithubService.ts</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> $http <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GithubProfile<span class=\"token punctuation\">,</span> GithubRepository<span class=\"token punctuation\">,</span> GithubContent<span class=\"token punctuation\">,</span> GithubTrees<span class=\"token punctuation\">,</span> GithubBlob<span class=\"token punctuation\">,</span> ContentVO<span class=\"token punctuation\">,</span> GithubHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'domain/src'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> responseProcessor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/helper'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> baseURI <span class=\"token operator\">=</span> <span class=\"token string\">'/api/github'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">getRepo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> login <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> GithubProfile<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubRepository<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> responseProcessor<span class=\"token operator\">&lt;</span>GithubRepository<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/repo/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>login<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">getContent</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> ContentVO<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubContent<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> responseProcessor<span class=\"token operator\">&lt;</span>GithubContent<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/content</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">getTrees</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> ContentVO<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubTrees<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> responseProcessor<span class=\"token operator\">&lt;</span>GithubTrees<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/trees</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">getBlob</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> ContentVO<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubBlob<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> responseProcessor<span class=\"token operator\">&lt;</span>GithubBlob<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/blob</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">getHook</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubHook<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> responseProcessor<span class=\"token operator\">&lt;</span>GithubHook<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/hook</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">addHook</span> <span class=\"token punctuation\">(</span>repo<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubHook<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> responseProcessor<span class=\"token operator\">&lt;</span>GithubHook<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/hook</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> repo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">removeHook</span> <span class=\"token punctuation\">(</span>idx<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubHook<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> responseProcessor<span class=\"token operator\">&lt;</span>GithubHook<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseURI<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/hook/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idx<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>/back-end/src/api/githbu/github.service.ts</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Inject<span class=\"token punctuation\">,</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GithubRepository<span class=\"token punctuation\">,</span> GithubContent<span class=\"token punctuation\">,</span> GithubResponseToken<span class=\"token punctuation\">,</span> GithubProfile<span class=\"token punctuation\">,</span> GithubTrees<span class=\"token punctuation\">,</span> GithubBlob <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'domain/src'</span></span>\n<span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GithubAdapter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./github.adapter'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GithubService</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GithubAdapter'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> readonly githubAdapter<span class=\"token operator\">:</span> GithubAdapter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getRepo</span> <span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>GithubRepository<span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>githubAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getRepo</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'githubService.getRepo'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> e</span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getContent</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubContent<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>githubAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'githubService.getContent'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> e</span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getToken</span> <span class=\"token punctuation\">(</span>code<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubResponseToken<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>githubAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'githubService.getToken'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> e</span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getProfile</span> <span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubProfile<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>githubAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'githubService.getProfile'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> e</span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getTrees</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubTrees<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>githubAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getTrees</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'githubService.getTrees'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> e</span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getBlob</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>GithubBlob<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>githubAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">getBlob</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'githubService.getBlob'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">throw</span> e</span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>여기까지는 사이드 프로젝트를 통해서 얻은 성과였고, 이제 <strong>사이드 프로젝트에 꼭 적용해야 하는 것들</strong>을 나열해보자.</p>\n<h4>첫 번째 과제, Vue Composition API 사용</h4>\n<ul>\n<li><a href=\"https://github.com/choDragon9\" target=\"_blank\" rel=\"noopener noreferrer\">카카오에 근무하는 친구</a>가 작성한 <a href=\"https://chodragon9.github.io/blog/composition-api-rfc-migration/#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API 문서</a>를 보고 개인적으로 애매한 내용을 <a href=\"https://github.com/ChoDragon9/ChoDragon9.github.io/pull/7\" target=\"_blank\" rel=\"noopener noreferrer\">PR로 같이 개선하면서</a> 흥미가 생겼다.</li>\n<li>일단 Composition API로 간단한 서비스를 한 번 만들어봐야 한다.</li>\n<li>Vue 3.0이 먼저 배포된다면, 그냥 Vue 3.0으로 마이그레이션 할 예정</li>\n</ul>\n<h4>두 번째 과제, MongoDB 사용</h4>\n<ul>\n<li>지금은 MySQL 기반인데, 공부를 하다보니 <a href=\"https://alwayspr.tistory.com/44\" target=\"_blank\" rel=\"noopener noreferrer\">Non-Blocking I/O의 경우 NoSQL이 어울리다는 것</a>을 알았다.</li>\n<li>따라서 MySQL로 작성된 것을 MongoDB로 마이그레이션할 예정이다.</li>\n</ul>\n<h4>세 번째 과제, AWS 배포</h4>\n<ul>\n<li>아직까지 AWS를 제대로 사용해본적이 없다.</li>\n<li>AWS 공부만 해도 한참 걸릴 것 같다.</li>\n</ul>\n<h4>네 번째 과제, Jenkins로 배포 자동화</h4>\n<ul>\n<li>회사에서 Jenkins를 이용하여 배포하는 중이다.</li>\n<li>개인적으로 Jenkins 배포 환경을 구축해보고 싶다.</li>\n</ul>\n<hr>\n<p>그리고 이건 꼭 <strong>적용할 필요는 없지만</strong> 한 번 해보고 싶은 것들이다.</p>\n<h4>Optional 01: GraphQL 사용</h4>\n<ul>\n<li>이건 참 애매하다.</li>\n<li>그냥 개인적으로 공부해도 나쁘지 않을 것 같다.</li>\n</ul>\n<h4>Optional 02: Docker Container와 kubernetes 사용</h4>\n<ul>\n<li>사실.. 이것 까지 가능할지 의문이다.</li>\n<li>일단 가능한 만큼 해보고 싶다.</li>\n</ul>\n<hr>\n<h3>4. 객체지향 개발방법론</h3>\n<p><a href=\"https://junilhwang.github.io/TIL/CodeSpitz/Object-Oriented-Javascript/01-Intro/\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 86기</a>와\n인프런에서 백기선 님이 강의하신 <a href=\"https://www.inflearn.com/course/spring#curriculum\" target=\"_blank\" rel=\"noopener noreferrer\">스프링 프레임워크 입문</a>,\n그리고 <a href=\"https://expert0226.tistory.com/category/%EA%B0%95%EC%A2%8C/Spring%203.0\" target=\"_blank\" rel=\"noopener noreferrer\">여름나라 겨울이야기</a> 블로그의 주인장님이 집필한\n<a href=\"https://wikibook.co.kr/java-oop-for-spring/\" target=\"_blank\" rel=\"noopener noreferrer\">스프링 입문을 위한 자바 객체 지향의 원리와 이해</a> 라는 책을 읽고 객체지향에 대해 어느 정도 깨우칠 수 있었다.</p>\n<p><strong>여태까지 내가 작성했던 코드는 말 그대로 쓰레기</strong>였다는 것을 알 수 있게 해준 강의들과 책이었다.</p>\n<p>그리고 이러한 개념들을 숙지하지 않은 상태에서 프레임워크를 공부한다는 것은 어불성설이라는 생각이 들었다.\n요즘 누군가가 나에게 어떤 프레임워크를 공부하면 좋겠냐는 말에 이처럼 대답한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">XXX라는 프레임워크를 공부하고 싶습니다. 무엇부터 해야 좋을까요?</p>\n<ol>\n<li>객체지향 개발 방법론을 익혀라.</li>\n<li>디자인패턴을 익혀라.</li>\n<li>MVVM을 익혀라.</li>\n<li>IoC나 DI에 대해 이해하라.</li>\n<li>그리고 프레임워크 문서를 보아라.</li>\n</ol>\n</div>\n<p><u>객체지향의 궁극적인 목적은 바로 IoC(제어역전) 를 제공하는 것이다.</u></p>\n<p>그리고 보통 <strong>프레임워크 수준에서 IoC를 제공</strong>한다.\n<u>따라서 IoC를 이해하지 못한다면 프레임워크를 사용하고 있다고 해도, 제대로 사용하는 경우는 드물다.</u></p>\n<p>이러한 것들을 이해하고 있는 상태라면 어떤 프레임워크를 사용하여도 기본 이상은 할 수 있다.</p>\n<p>객체지향 개발론을 공부하면서 아쉬웠던 점은, <u>왜 학부 과정에서 이러한 것들을 설명해주는 교수님이 없었을까</u> 하는 점이다.\n이렇게 중요한 개념을 왜 이제야 알았을까? 참 의문이다.</p>\n<hr>\n<h3>5. 단국대학교 알고리즘 스터디</h3>\n<p>여자친구의 취업 준비를 도우면서 <s>꼴 보기도 싫던</s> 알고리즘 공부를 같이 하게 되었다.\n오랜만에 <s>빌어먹어도 시원찮을</s> 알고리즘을 공부하니까 나름 오기도 생기고,\n<s>커밋의 양분이 되기도 했고</s> 코딩테스트를 응시하는 것도 재밌었다.</p>\n<p>그래서 여자친구와 같이 다음과 같은 코딩테스트에 응시했다.</p>\n<ul>\n<li>카카오 인턴 코딩테스트</li>\n<li>카카오 프런트엔드 개발자 경력직 코딩테스트</li>\n<li>프로그래머스 프런트엔드 개발자 코딩테스트</li>\n<li>프로그래머스 백엔드 개발자 코딩테스트</li>\n<li>프로그래머스 여름방학 인턴 코딩테스트</li>\n<li>우아한테크코스 코딩 테스트</li>\n<li>이스트소프트 코딩 테스트</li>\n</ul>\n<p>풀이하면서 느낀것은, 그냥 내 수준은 정해져 있는 것 같았다. <s>하긴 뭐.. 공부를 제대로 했어야 달라지지</s></p>\n<p>그리고 코딜리티와 프로그래머스를 통해서 준비했는데, 다음과 같은 특징을 가지고 있다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">프로그래머스</p>\n<ul>\n<li>한글로 되어 있다.</li>\n<li>UX/UI가 좋다.</li>\n<li>테스트케이스에 대한 설명이 너무 빈약하다.</li>\n<li>피드백이 없다.</li>\n<li>왜 틀렸는지 안 알려준다.</li>\n<li>질의응답 게시판이 있다.</li>\n</ul>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Codility</p>\n<ul>\n<li>영어로 되어 있다.</li>\n<li>UX/UI가 망했다. <s>어떻게 이렇게 구릴 수 있지?</s></li>\n<li>피드백이 확실하다.</li>\n<li>왜 틀렸는지 알 수 있다.</li>\n</ul>\n</div>\n<p>그래서 두 사이트를 섞어서 공부하는게 적절한 것 같다.\n커뮤니티를 보니 <a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Leetcode</a>를 통해서 많이 준비하는 것 같은데.. 아직 살펴보진 않았다.</p>\n<p>각설하고, 여자친구가 혼자서 공부하기 힘들다며 갑자기 4월 말에 <a href=\"https://github.com/DKU-STUDY\" target=\"_blank\" rel=\"noopener noreferrer\">알고리즘 스터디</a>를 만들었다.\n스터디 구성원은 먼저 에브리타임을 통해서 모집하고, 알고 지내던 후배들 중 같이 하고 싶은 의향이 있는 사람들을 초대했다.</p>\n<p>스터디는 다음과 같이 진행했다.</p>\n<ul>\n<li>\n<p>먼저 <a href=\"https://www.youtube.com/watch?v=pR5SNFyzdg8&amp;t=21s\" target=\"_blank\" rel=\"noopener noreferrer\">Github Pull Request 튜토리얼 영상</a>을 본다.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/DKU-STUDY/pull-request-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">pull-request-tutorial 저장소</a>에서 tutorial을 진행한다.</p>\n</li>\n<li>\n<p>코딜리티/백준/프로그래머스 등 원하는 플랫폼에서 선택하여 알고리즘 문제를 풀이한다.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/DKU-STUDY/Algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">원본 저장소</a>를 fork한다.</p>\n</li>\n<li>\n<p>fork한 저장소에 풀이한 알고리즘 문제를 올린다.</p>\n</li>\n<li>\n<p>PR을 올린다.</p>\n</li>\n<li>\n<p>코드 리뷰를 진행한다.<br>\n<img src=\"https://user-images.githubusercontent.com/18749057/89857384-e6ce8580-dbd6-11ea-97a8-3e0e94a88a5c.png\" alt=\"image\"></p>\n</li>\n<li>\n<p>리뷰가 마무리 되면 머지한다.<br>\n<img src=\"https://user-images.githubusercontent.com/18749057/89857507-42007800-dbd7-11ea-8ae2-0a75b0b6a765.png\" alt=\"image\"></p>\n</li>\n</ul>\n<p>그리고 <u>생각보다 잘 진행되고 있는 중이다.</u></p>\n<p><strong>진행한지 한 달이 조금 넘었을 때(5월 말) 800개의 커밋과 160개의 PR이 올라왔다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83351894-d69e5c80-a382-11ea-9121-f7882c9c3473.png\" alt=\"5월 결산(1)\">\n<img src=\"https://user-images.githubusercontent.com/18749057/83351941-1a916180-a383-11ea-8a7a-3e39e6ef4a3a.png\" alt=\"5월 결산(2)\"></p>\n<p>6월에는 기말고사가 있기 때문에 활동이 매우 활발하진 않았다. 그래도 하는 사람은 꾸준히 했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239179-0ee78f00-c447-11ea-9428-b2bb4cea50a2.png\" alt=\"6월 결산\"></p>\n<p>그리고 6월 중순까지 카톡으로 채팅방을 운영했는데, 스터디원의 제안으로 채팅방을 디스코드로 옮겼다.\n디스코드로 옮기면서 디스코드의 <u>Channel API, Bot, github webhooks</u> 등을 이용하여 <a href=\"https://github.com/JunilHwang/discord-study-bot\" target=\"_blank\" rel=\"noopener noreferrer\">Github 알림 봇</a>을 만들었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Github 알림 봇</p>\n<ul>\n<li>Node.js</li>\n<li>Typescript</li>\n<li>NestJS: 초기에 Express를 사용하다가 어느정도 완성된 다음에 NestJS로 마이그레션 했다.</li>\n<li>VueJS: <strong>CMS</strong>를 만드는데 필요함</li>\n<li>Discord API</li>\n<li>Discrod bot</li>\n<li>Github Webhooks</li>\n<li>NHN Toast Cloud</li>\n</ul>\n</div>\n<p>서버는 NHN의 Toast Cloud를 이용중이다. 추후에 AWS로 이전할 예정이다.</p>\n<p>알림 봇을 만드는 것 자체는 간단했으나.. CMS를 만드는 것은 쉽지 않은 것 같다.\n<s>사실 CMS를 만들어야 싶기도 하다.</s></p>\n<p>어쨌든 알림 봇을 마무리 한 후에 진행중이던 토이 프로젝트를 다시 시작할 예정이다. <s>대체 언제??</s></p>\n<hr>\n<h3>6. 코덕</h3>\n<p>1~3월에 일일커밋을 하긴 했으나, 깃허브 활동이 활발하진 않았다.\n그런데 4월에 스터디를 만들고, 5~6월에 Java Clean Code TDD 8기를 수강하면서 깃허브 사용량이 폭발적으로 증가했다.</p>\n<p>덕분에 꾸준히 코덕 상위권에 랭크될 수 있었다.</p>\n<h4>4월</h4>\n<p>\n  <img src=\"https://user-images.githubusercontent.com/18749057/80867616-013bbd80-8cd0-11ea-96e5-2b39fa30171b.png\" width=\"48%\" alt=\"코덕_1\">\n  <img src=\"https://user-images.githubusercontent.com/18749057/80867623-16185100-8cd0-11ea-99ee-4cba4953c78f.png\" width=\"48%\" alt=\"코덕_2\">\n</p>\n<p>4월은 <strong>2위</strong>로 마무리했다.</p>\n<p>이 때 1위와의 격차는 별짓을 다 해도 좁혀지지가 않았다.\n무엇보다 하루 활동량에 대한 점수 제한이 있었기 때문에 꾸준히 활동을 하지 않으면 결국 따라잡을 수 없는 구조다.\n<u>즉, 성실성을 겨루는 서비스라고 할 수 있다.</u></p>\n<p>아쉽지만 코덕에 랭크된 수 많은 사람들 중에 두 번째로 성실하게 공부한 것이라는 증거이기 때문에 일단 만족했다.</p>\n<p>그리고 <strong>칼을 갈았다.</strong></p>\n<h4>5월</h4>\n<p>\n  <img src=\"https://user-images.githubusercontent.com/18749057/83352807-3ac41f00-a389-11ea-8374-d6519e4fec0e.png\" width=\"500\" alt=\"코덕_3\">\n</p>\n<p>5월은 정말 <strong>눈물 겹게 1등을 달성</strong>했다.\n말 그대로 <strong>정말 힘들었다.</strong> <s>내가 무슨 부귀영화를 누리자고..</s></p>\n<p>어쨌든 한 번 1등을 해놓은 후에는 마음이 편해졌다. 그래서 랭킹에 연연하진 않게 되었다.</p>\n<p>\n  <img src=\"https://user-images.githubusercontent.com/18749057/83352781-0f413480-a389-11ea-8258-1a8e5e9549ef.png\" width=\"500\" alt=\"코덕_4\">\n</p>\n<p>내가 1등한 것 보다 더 기쁜 사실은, <strong>DKU-STUDY가 코덕에 등록된 모든 그룹 중 활동량이 압도적인 1위</strong>라는 것이다.</p>\n<h4>6월</h4>\n<p>\n  <img src=\"https://user-images.githubusercontent.com/18749057/87239574-c383af80-c44b-11ea-9606-d348dc297079.png\" width=\"500\" alt=\"코덕_5\">\n</p>\n<p>6월엔 쉬엄쉬엄 해서 6위로 마무리했다. 일단 <strong>top10</strong>에 들었으니 만족!</p>\n<h3>7. Java Clean Code TDD 8기</h3>\n<p>7기에는 수강신청 시간을 잘못 알고 있어서 마감이 됐었다. <u>결과적으로 그 때 수강하지 않은건 코로나 때문에 잘 한 일이라고 생각한다.</u></p>\n<p>8기 수강신청은 거의 1등으로 수강신청을 완료하지 않았나 싶다. <s>대학교 수강신청으로 단련된 매크로급 수강신청 기술을 활용했다.</s></p>\n<p>현재 회사에서 java를 사용하고 있긴 하지만, java의 코어를 잘 모르기 때문에 이번 기회에 제대로 익혀두자 싶어서 수강신청을 했다.\n결과는 <s>죽을 맛 그 자체!</s> 매우 만족스러웠다.</p>\n<p>코드 리뷰의 범위는 <code>객체지향 생활체조</code>의 범위에서 진행된다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">객체지향 생활체조</p>\n<ul>\n<li>한 메서드에 오직 한 단계의 들여쓰기(indent)만 한다.</li>\n<li>else 예약어를 쓰지 않는다.</li>\n<li>모든 원시값과 문자열을 포장한다.</li>\n<li>한 줄에 점을 하나만 찍는다.</li>\n<li>줄여쓰지 않는다(축약 금지).</li>\n<li>모든 엔티티를 작게 유지한다.</li>\n<li>3개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.</li>\n<li>일급 콜렉션을 쓴다.</li>\n<li>Getter/Setter Property를 쓰지 않는다.</li>\n</ul>\n</div>\n<p>위의 규칙들을 지키면서 프로그램을 만드는 것 자체가 굉장히 어렵고 고민이 많이 된다.\n하지만 그만큼 코드 자체는 극한의 아름다움을 보이게 된다.</p>\n<p>덕분에 Stream과 Enum 등을 포함하여 Java에서 사용하기 좋은 API와 설계 기술을 배울 수 있었다.</p>\n<p>각설하고, 내가 과연 이 과정을 무사히 수료할 수 있을까 고민했는데,<br>\n운이 좋게 제일 먼저 수료할 수 있었다. <s>사실 노렸다</s></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 과정을 진행하면서 올린 PR(코드리뷰) 모음</p>\n<ul>\n<li>Racingcar\n<ul>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/716\" target=\"_blank\" rel=\"noopener noreferrer\">step1: String 클래스에 대한 학습</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/761\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 문자열 계산기</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/826\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 자동차 경주</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/870\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 자동차 경주 우승자</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/984\" target=\"_blank\" rel=\"noopener noreferrer\">step5: 자동차 경주 리팩토링</a></li>\n</ul>\n</li>\n<li>Lotto\n<ul>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/495\" target=\"_blank\" rel=\"noopener noreferrer\">step1: 문자열 덧셈 계산</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/509\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 로또 (1)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/527\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 로또 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/532\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 로또 2등 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/541\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 로또 2등 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/550\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 로또 수동</a></li>\n</ul>\n</li>\n<li>Ladder\n<ul>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/389\" target=\"_blank\" rel=\"noopener noreferrer\">step1: Stream, Lambda, Optional</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/396\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 사다리 생성</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/399\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 사다리 게임 실행</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/407\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 리팩토링</a></li>\n</ul>\n</li>\n<li>Ladder\n<ul>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/389\" target=\"_blank\" rel=\"noopener noreferrer\">step1: Stream, Lambda, Optional</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/396\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 사다리 생성</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/399\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 사다리 게임 실행</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/407\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 리팩토링</a></li>\n</ul>\n</li>\n<li>Bowling\n<ul>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/155\" target=\"_blank\" rel=\"noopener noreferrer\">step1: 질문 삭제하기 기능 리팩토링</a></li>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/157\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 볼링 점수판</a></li>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/164\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 볼링 점수판 점수 계산</a></li>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/165\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 볼링 점수판 n명</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>약간의 소감을 이야기 해보자면, <u>시작(Racingcar)과 끝(Bowling)이 무척 어려웠다.</u></p>\n<p>시작할 때는 자바 자체에 익숙하지 않다 보니, 말 그대로 <u>모든 것들이 생소했다.</u>\n일단 사내 프로젝트를 운영하면서 Stream을 어느 정도 사용할 줄 알았기 때문에\n코드를 짧게 작성한다던가 <strong>if나 while, for 없이 작성하는 것</strong>은 어렵지 않았다.</p>\n<p>그런데 <strong>일급 컬렉션</strong>이나 <strong>원시값 포장</strong> 같은 개념은 쉽게 이해되지 않아서 애먹었다.\n이러한 문제점을 보완하기 위해서 <u>실력이 뛰어난 다른 수강생분들이나 코드리뷰를 해주시는 리뷰어분들이 이 과정을 수행할 때 작성했던 코드를 보면서 많이 참고했다.</u></p>\n<blockquote>\n<p>개인적으로 생각하는 나의 장점 중 하나가 주변에 있는 뛰어난 사람들에게 주눅 들기보단 그 사람들의 노하우나 사고방식, 가치관을 잘 받아들이는 점이다.</p>\n</blockquote>\n<p>결과적으로 <u>초반에 애먹은 덕분에</u> Lotto와 Ladder는 쉽게 통과할 수 있었다.</p>\n<p>마지막 미션인 Bowling은 설계 자체가 정말 어려웠다. <u>어떻게 설계하지?</u> 라는 고민을 일주일 내내 했던 것 같다.\n그래서 step2를 진행할 때, 지웠다가 썼다를 반복하다 보니 무려 <u>한 step에 45개의 커밋이 발생했다.</u></p>\n<ul>\n<li>step1을 6월 9일에 완료했다</li>\n<li>step2를 6월 16일에 완료했다</li>\n<li>step3, step4는 각각 18일, 20일에 완료했다.</li>\n</ul>\n<p>정말 <u>step2에서 설계에 대한 고민을 일주일 내내</u> 한 것이다. 덕분에 step3와 step2는거의 바로 끝낼 수 있었다.</p>\n<p><strong>어쨌든 결과적으로 해당 과정을 전체 인원 중 첫 번째로 수료할 수 있었다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239161-d778e280-c446-11ea-808f-2f3e2d8966e4.png\" alt=\"클린코드 수료\"></p>\n<p>내가 실력이 좋아서라기보단, <u>하루도 쉬지 않고 꾸준히 했기 때문에 이런 성과를 낼 수 있었으리라 생각한다.</u></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">꾸준히 공부하는 습관을 지니자</p>\n<p><u>5월에는 코덕 1등을 했고, 6월에는 클린코드 1등을 했다.</u></p>\n<p>항상 한계점의 페이스를 유지하기보단, 한 번 한계점까지 도달한 후에 70% ~ 80% 정도를 유지하는 게 좋다고 생각한다.\n그렇지 않으면 <u>너무 빨리 지치기 때문이다.</u></p>\n<p>나는 줌인터넷에 입사한 다음에 주변 자극을 적극적으로 수용하고 있다.\n그중에 제일 인상 깊었던 것은 우리 팀을 거쳐 간 <a href=\"https://www.youtube.com/watch?v=V9AGvwPmnZU&amp;t=174s\" target=\"_blank\" rel=\"noopener noreferrer\">우아한형제들에서 근무하고 계신 이동욱 님의 인터뷰</a>이다.\n무언가를 거창하게 하기보단 <strong>그냥 매일 꾸준히 하는 것</strong>이다. 확실히 나에게는 이 사고방식과 가치관이 맞아떨어진다.</p>\n<ul>\n<li>근데 이동욱 님은 굉장히 많은 것을 하고 계신다. <s>인간이 아닌 듯</s></li>\n</ul>\n</div>\n<p>전체 과정을 수료한 다음에 미션별로 파편화된 코드를 <a href=\"https://github.com/junilhwang/java-clean-code\" target=\"_blank\" rel=\"noopener noreferrer\">한 저장소</a>에 모아놨다. <s>사실 깃허브 잔디에 반영하고 싶었다.</s></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239173-f5464780-c446-11ea-9383-9ae7cfcc95d0.png\" alt=\"java-clean-code-repository\"></p>\n<p>모아놓고 보니 <u>두 달 동안 약 600개의 commit이 발생했다.</u> 내가 개발 공부를 이렇게 열심히 했던 적이 있었나 싶다. <s>사실 고등학교 3학년 여름방학 때 제일 열심히 했다.</s></p>\n<h2>개발 외</h2>\n<h3>1. 수영</h3>\n<p>1월에 몸 상태가 정상이 아님을 인지하고 2월에 수영을 시작했다.<br>\n하지만 코로나 때문에 망했다. <s>(빌어먹을 코로나)</s></p>\n<p>어쨌든 2월에 2주동안 발차기를 배우다가 코로나의 여파로 재택근무를 했다. <s>덕분에 몸이 개운해지는 느낌 비스무리한 것만 받았다.</s></p>\n<p>5월이 되자 마자 <strong>6개월치를 일시불</strong>로 등록했고, 덕분에 매일 매일 수영을 할 수 있게 되었다! <s>80만원쯤이야!</s></p>\n<p>5월이 다 지날때 쯤 자유형을 제대로 할 수 있게 되었다.\n자유형을 하다가 너무 힘들어서 그냥 누웠는데 이 때 몸에 힘을 빼고 물에 몸을 맡기면 저절로 뜨는 것을 깨달았다.</p>\n<p>6월이 다 지났을 때 배영/자유형은 꽤 잘할 수 있게 되었다. 다만 오래 못한다.. <s>아직까진 저질 체력..</s>\n어쨌든 평영까지 배웠는데, 아직 나는 개구리가 되려면 멀지 않았나 싶다.. 허허</p>\n<p>그런데 6월 말부터 회사에서 Work+ 라는 제도를 만들어서 재택근무를 할 수 있도록 해줬다.\n수영을 하려면 회사 앞으로 와야 하기 때문에.. 지금 굉장히 고민 중이다.</p>\n<p>강습은 월/수/금인데, 월/목은 고정출근을 해야 하고 화/수/금은 선택적 재택근무를 할 수 있다.\n그래서 주 2회 재택을 하고 강습 2회, 자유 수영 1회 정도로 생각 중이다.</p>\n<p>어쨌든 <s>돈을 오랫동안 많이많이 벌기 위해서라도</s> 공부를 열심히 하기 위해서라도 운동을 착실히 해야지!</p>\n<h3>2. 자본에 대하여</h3>\n<p>우리 회사 사람들의 핫한 주제는 언제나 부동산과 주식이다.\n사실 우리 회사 사람들뿐만 아니라 다른 회사 사람들 또한 마찬가지다.</p>\n<p><strong>어느 회사에 다니든 아무리 월급을 많이 받아도 월급쟁이다.</strong></p>\n<p>그리고 <u>월급쟁이는 기적이 일어나지 않는 이상 일정 수준 이상의 부를 축적하기는 힘들다.</u></p>\n<p>그래서 큰돈을 모으기 위해선 사업을 하거나 주식을 하거나 부동산을 하거나 셋 중 하나인데,\n부동산을 하기 위해선 또 큰돈이 필요하고,\n다시 큰돈을 모으기 위해선 주식이나 사업을 해야한다.</p>\n<p>그런데 주식이나 사업은 부동산보다 위험부담이 훨씬 크다. <s>특히 주식/비트코인을 통해서 자본을 잃은 사람이 주변에 너무 많다</s></p>\n<p>이렇게 해도, 저렇게 해도 <u>평탄한 인생을 살아가기는 참 힘들구나 싶다.</u></p>\n<p>어쨌든 나는 지금 당장 욕심을 부리기보단, <strong>내적 역량을 축적하는 것이 옳다고 생각한다.</strong></p>\n<p>앞서 언급했지만, <strong>최소 3년은 공부에 매진하자.</strong></p>\n<h3>3. 오버워치</h3>\n<p>자바 클린코드 과정을 모두 수료한 직후에 갑자기 번아웃이 왔다.\n번아웃이라기보단, <u>한동안 일상에서 큰 비중을 차지하고 있던 일이 사라지니까 그 시간을 어떻게 메꿔야 좋을지 몰라서 방황했다.</u></p>\n<p>그래서 수료한 직후에 주말 내내 원없이 오버워치만 했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87240018-8b32a000-c450-11ea-91ea-1fcd41ecbd76.jpeg\" alt=\"오버워치\"></p>\n<p>약 2일만에 마스터를 찍었다. <s>오버워치만 맨날 했으면 좋겠다!!</s></p>\n<p>오버워치.. 참 잘 만든 게임인데 유저가 다 망쳐가고 있어서 아쉽다. 빨리 오버워치2가 나왔으면 하는 바람!</p>\n<h2>Summary</h2>\n<ul>\n<li>Java Clean Code 1등으로 수료.</li>\n<li>코덕 1등 달성.</li>\n<li>단국대 알고리즘 스터디 운영.</li>\n<li>사이드 프로젝트 진행.</li>\n<li>수영 재밌다.</li>\n<li>오버워치 재밌다.</li>\n<li>돈 벌기 힘들다.</li>\n</ul>\n",
      "image": "https://user-images.githubusercontent.com/18749057/89799319-4772a980-db68-11ea-8c89-02751f863561.png",
      "date_published": "2020-07-01T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 6월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/06-June/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/06-June/",
      "summary": "2020년 6월 회고 입니다.",
      "content_html": "\n<p>이번 달은 <a href=\"https://chrome.google.com/webstore/detail/zum-newtab/bghgeookcfdmkoocalbclnhofnenmhlf?hl=ko&amp;authuser=2\" target=\"_blank\" rel=\"noopener noreferrer\">크롬 확장프로그램</a>과 싸웠고,\n<strong>NextStep</strong>의 <a href=\"https://edu.nextstep.camp/c/8fWRxNWU\" target=\"_blank\" rel=\"noopener noreferrer\">클린코드를 위한 TDD, 리팩토링 with Java</a> 과정을 무사히 수료했다.</p>\n<h2>공적</h2>\n<h3>1. 크롬 확장프로그램</h3>\n<p>6월 업무는 말 그대로 <strong>확장프로그램과의 전쟁</strong>이었다. 개발이 어려운 게 아니라 <u>검수를 통과하는 게</u> 무척 어려웠다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/86334105-bb778300-bc87-11ea-804c-1abf82170b6b.png\" alt=\"확장프로그램 검수 정보 1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/86334283-fd082e00-bc87-11ea-9732-5f348891ec76.png\" alt=\"확장프로그램 검수 정보 2\"></p>\n<p><u>수 십 번의 검수 요청</u> 끝에 확장프로그램을 게시할 수 있었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/86334687-83bd0b00-bc88-11ea-94c6-33f6971a01c7.png\" alt=\"확장프로그램\"></p>\n<p>게시된 확장프로그램은 <a href=\"https://chrome.google.com/webstore/detail/zum-newtab/bghgeookcfdmkoocalbclnhofnenmhlf?hl=ko&amp;authuser=2\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>서 확인할 수 있다. 아직 최종 완성은 아니고, 사내 테스트를 거쳐 조금 더 퀄리티를 높일 예정이다.</p>\n<p>확장프로그램 검수 과정은 다음에 따로 정리해야겠다. 이곳에 담기엔.. 분량이 너무 많다.. ㅠㅠ</p>\n<h3>2. 의사 결정 과정</h3>\n<p>이번에는 CMS처럼 사내에서만 사용하는 서비스를 만드는 것이 아니라 <strong>아예 신규 서비스를 만들었다.</strong><br>\n신규 서비스를 만들 때 <strong>주니어 개발자 스스로 결정할 수 있는 것</strong>들은 사실 거의 없다.</p>\n<p>주니어 개발자가 주로 하게 되는 일은 아마도 코드 작성일 것이다.<br>\n<u>그럼 코드를 내 맘대로 작성해도 될까?</u> 결론부터 말하자면 안 된다.<br>\n회사에서 작성하는 코드는 나의 것이 아니다.</p>\n<p>회사에서 작성한 나의 코드는 <u>회사의 것이고 팀의 것이다.</u> 그러므로 우리는 코드리뷰를 진행한다.</p>\n<p>우리 회사에서 코드리뷰를 하는 목적은 해당 프로젝트를 <u>내가 아닌 다른 사람이 백업 가능할 수 있도록 하는 것이 첫 번째 목적이다.</u></p>\n<p>코드리뷰를 통하여 코드 스타일을 통일할 수 있고, 프로젝트의 구조를 파악할 수 있기 때문이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">줌인터넷 포털개발팀</p>\n<p>웃픈 이야기지만, 우리 팀은 이직률이 높은 편이다.\n우리들끼리의 이야기로 줌인터넷은 어떻게 보면 대학원(?) 과정이라고 한다.\n더 좋은 회사로 가기 위한 발판이랄까?</p>\n<p>그래서 팀장님이 많이 고통받고 계신다...</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239420-fc228980-c449-11ea-9441-e80ae62393b6.png\" alt=\"팀장님 하소연 1\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239366-4ce5b280-c449-11ea-9421-79231c4310e7.png\" alt=\"팀장님 하소연 2\"></p>\n<p><s>이젠 그냥 체념하신 것 같은 느낌..?</s></p>\n<p>그렇기 때문에 누군가 이직을 했을 때 <u>남겨진 사람이 떠난 사람의 빈자리를 충분히 메꿀 수 있도록</u> 코드를 작성해야 한다.\n그래야 팀과 서비스가 유지 된다.</p>\n</div>\n<p>결국 내가 작성한 코드조차 나의 것이 될 수 없다.\n그래서 주관적인 시선이 아니라 <strong>객관적인 시선</strong>으로 코드를 작성하는 연습이 필요하다.</p>\n<p>사실.. 많이 어렵다. 아무리 쉽게 코드를 작성한다고 하더라도 한계가 있기 때문이다.\n그래서 주석을 최대한 많이 활용하는 중이다. <s>너무 귀찮아!!</s></p>\n<p>특히, intellij와 <a href=\"https://jsdoc.app/\" target=\"_blank\" rel=\"noopener noreferrer\">jsdoc</a>의 호환성이 좋아서 적극 응용 중이다.</p>\n<p>어쨌든 주니어 개발자가 결정할 수 있는 것들은 지극히 한정적이다.\n무엇 하나 맘대로 할 수 있는 것이 없다\n<u>그렇기 때문에 같이 일하는 사람들의 생각을 항상 존중하고 또 따라가려고 애쓰는 중이다.</u></p>\n<h3>3. Quality assurance</h3>\n<p>확장프로그램을 만드는 과정에서 QA를 진행했는데, 생각보다 나쁘지 않았다.\n그리고 <strong>이 정도는 해야 괜찮은 서비스가 나오는 것</strong>을 느낄 수 있는 경험이었다.</p>\n<p>먼저 개발자로서 할 수 있는 테스트를 한다.</p>\n<ul>\n<li>코드상의 오류 확인</li>\n<li>타입 검증</li>\n<li>콘솔에 나오는 오류/경고 문구 해결</li>\n<li>성능 테스트</li>\n<li>메모리 누수 확인</li>\n<li>캐싱/스케쥴링 확인</li>\n</ul>\n<p>이렇듯 <u>개발자가 아니면 할 수 없는 것들</u> 위주로 먼저 검증을 진행한다.\n그다음 제품이 기획서의 명세대로 만들어졌는지 일차적인 검수 및 수정 과정을 거친다.</p>\n<p>그리고 기획자분들이 한 번 더 꼼꼼하게 QA를 진행한다. 마지막으로 큐레이션팀이 정말 섬세하게 QA를 진행한다. 이 과정에서 약간 자괴감이 든다.</p>\n<p><u>왜 나는 이렇게까지 꼼꼼하게 검수를 하지 못했을까? 왜 이제서야 이러한 버그를 발견한 걸까? 하는 자괴감 말이다.</u></p>\n<p>조금 더 내가 만드는 서비스에 애정을 가지고 테스트를 진행해야겠다.</p>\n<h2>사적</h2>\n<h3>1. Java Clean Code</h3>\n<p>NextStep의 <a href=\"https://edu.nextstep.camp/c/8fWRxNWU\" target=\"_blank\" rel=\"noopener noreferrer\">클린코드를 위한 TDD, 리팩토링 with Java</a> 를 6월 중순까지 마무리했다.\n내가 무사히 수료할 수 있을까 고민했는데, 운이 좋게 제일 먼저 수료할 수 있었다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 과정을 진행하면서 올린 PR(코드리뷰) 모음</p>\n<ul>\n<li>Racingcar\n<ul>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/716\" target=\"_blank\" rel=\"noopener noreferrer\">step1: String 클래스에 대한 학습</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/761\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 문자열 계산기</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/826\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 자동차 경주</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/870\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 자동차 경주 우승자</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/984\" target=\"_blank\" rel=\"noopener noreferrer\">step5: 자동차 경주 리팩토링</a></li>\n</ul>\n</li>\n<li>Lotto\n<ul>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/495\" target=\"_blank\" rel=\"noopener noreferrer\">step1: 문자열 덧셈 계산</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/509\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 로또 (1)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/527\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 로또 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/532\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 로또 2등 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/541\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 로또 2등 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/550\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 로또 수동</a></li>\n</ul>\n</li>\n<li>Ladder\n<ul>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/389\" target=\"_blank\" rel=\"noopener noreferrer\">step1: Stream, Lambda, Optional</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/396\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 사다리 생성</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/399\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 사다리 게임 실행</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/407\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 리팩토링</a></li>\n</ul>\n</li>\n<li>Ladder\n<ul>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/389\" target=\"_blank\" rel=\"noopener noreferrer\">step1: Stream, Lambda, Optional</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/396\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 사다리 생성</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/399\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 사다리 게임 실행</a></li>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/407\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 리팩토링</a></li>\n</ul>\n</li>\n<li>Bowling\n<ul>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/155\" target=\"_blank\" rel=\"noopener noreferrer\">step1: 질문 삭제하기 기능 리팩토링</a></li>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/157\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 볼링 점수판</a></li>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/164\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 볼링 점수판 점수 계산</a></li>\n<li><a href=\"https://github.com/next-step/java-bowling/pull/165\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 볼링 점수판 n명</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>약간의 소감을 이야기 해보자면, 시작(Racingcar)과 끝(Bowling)이 어려웠다.</p>\n<p>시작할 때는 자바 자체에 익숙하지 않다 보니, 말 그대로 모든 것들이 생소했다.\n그나마 스트림은 어느 정도 사용할 줄 알았기 때문에 코드를 짧게 작성한다던가, <strong>if나 while, for 없이 작성하는 것</strong>은 어렵지 않았다.</p>\n<p>그런데 일급 컬렉션이나 원시값 포장 같은 개념은 쉽게 이해되지 않아서 애먹었다.\n이러한 문제점을 보완하기 위해서 <u>실력이 뛰어난 다른 수강생분들이나 코드리뷰를 해주시는 리뷰어분들이 이 과정을 수행할 때 작성했던 코드를 보면서 많이 참고했다.</u></p>\n<blockquote>\n<p>개인적으로 생각하는 나의 장점 중 하나가 주변에 있는 뛰어난 사람들에게 주눅 들기보단 그 사람들의 노하우나 사고방식, 가치관을 잘 받아들이는 점이다.</p>\n</blockquote>\n<p>결과적으로 초반에 애먹은 덕분에 Lotto와 Ladder는 쉽게 통과할 수 있었다.</p>\n<p>마지막 미션인 Bowling은 설계 자체가 정말 어려웠다. <u>어떻게 설계하지?</u> 라는 고민을 일주일 내내 했던 것 같다.\n그래서 step2를 진행할 때, 지웠다가 썼다를 반복하다 보니 무려 한 step에 45개의 커밋이 발생했다.</p>\n<p>step1을 6월 9일에 완료했고, step2를 6월 16일에 완료했다. 그리고 step3, step4는 각각 18일, 20일에 완료했다.\n정말 step2에서 설계에 대한 고민을 일주일 내내 한 것이다. 덕분에 step3와 step2는거의 바로 끝낼 수 있었다.</p>\n<p><strong>어쨌든 결과적으로 해당 과정을 전체 인원 중 첫 번째로 수료할 수 있었다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239161-d778e280-c446-11ea-808f-2f3e2d8966e4.png\" alt=\"클린코드 수료\"></p>\n<p>내가 실력이 좋아서라기보단, <u>하루도 쉬지 않고 꾸준히 했기 때문에 이런 성과를 낼 수 있었으리라 생각한다.</u></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">꾸준히 공부하는 습관을 지니자</p>\n<p><u>5월에는 코덕 1등을 했고, 6월에는 클린코드 1등을 했다.</u></p>\n<p>항상 한계점의 페이스를 유지하기보단, 한 번 한계점까지 도달한 후에 70% ~ 80% 정도를 유지하는 게 좋다고 생각한다.\n그렇지 않으면 <u>너무 빨리 지치기 때문이다.</u></p>\n<p>나는 줌인터넷에 입사한 다음에 주변 자극을 적극적으로 수용하고 있다.\n그중에 제일 인상 깊었던 것은 우리 팀을 거쳐 간 <a href=\"https://www.youtube.com/watch?v=V9AGvwPmnZU&amp;t=174s\" target=\"_blank\" rel=\"noopener noreferrer\">우아한형제들에서 근무하고 계신 이동욱 님의 인터뷰</a>이다.\n무언가를 거창하게 하기보단 <strong>그냥 매일 꾸준히 하는 것</strong>이다. 확실히 나에게는 이 사고방식과 가치관이 맞아떨어진다.</p>\n<ul>\n<li>근데 이동욱 님은 굉장히 많은 것을 하고 계신다. <s>인간이 아닌 듯</s></li>\n</ul>\n</div>\n<p>전체 과정을 수료한 다음에 미션별로 파편화된 코드를 <a href=\"https://github.com/junilhwang/java-clean-code\" target=\"_blank\" rel=\"noopener noreferrer\">한 저장소</a>에 모아놨다. <s>사실 깃허브 잔디에 반영하고 싶었다.</s></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239173-f5464780-c446-11ea-9383-9ae7cfcc95d0.png\" alt=\"java-clean-code-repository\"></p>\n<p>모아놓고 보니 <u>두 달 동안 약 600개의 commit이 발생했다.</u> 내가 개발 공부를 이렇게 열심히 했던 적이 있었나 싶다. <s>사실 고등학교 3학년 여름방학 때 제일 열심히 했다.</s></p>\n<h3>2. DKU Study</h3>\n<p>4월 말부터 <a href=\"https://github.com/eyabc\" target=\"_blank\" rel=\"noopener noreferrer\">여자친구</a>가 운영하고, 내가 멘토(?)로 활동하고 있는 <a href=\"https://github.com/DKU-STUDY\" target=\"_blank\" rel=\"noopener noreferrer\">단국대학교 알고리즘 스터디</a>에 대한 내용이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TMI(Too much Information)</p>\n<p>본인과 여자친구는 단국대학교 소프트웨어 학과의 CC(캠퍼스 커플)이다.</p>\n<p>나와 여자친구는 학교 다닐 때 학부 내에 학생들에게 도움이 되는 동아리나 스터디 같은 게 거의 없다는 것이 참 아쉬웠다.\n그래서 같이 그런 스터디를 만들어서 운영해보자며 해당 스터디를 시작했다.</p>\n</div>\n<p>6월에는 기말고사가 있기 때문에 활동이 매우 활발하진 않았다. 그래도 하는 사람은 꾸준히 했다.</p>\n<p>어느새 <a href=\"https://github.com/DKU-STUDY/Algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-STUDY/Algorithm</a> 저장소의 커밋이 1000개가 넘었다. <s>(사실 6월이 아니라 7월에 넘겼다.)</s></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239179-0ee78f00-c447-11ea-9428-b2bb4cea50a2.png\" alt=\"알고리즘 스터디\"></p>\n<p>그리고 기존에 카톡으로 운영하던 채팅방을 디스코드로 옮겼다.\n디스코드로 옮기면서 디스코드의 <u>Channel API, Bot, github webhooks</u> 등을 이용하여 <a href=\"https://github.com/JunilHwang/discord-study-bot\" target=\"_blank\" rel=\"noopener noreferrer\">깃허브 알림 봇</a>을 만들었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239216-7e5d7e80-c447-11ea-8af4-ee489355b683.png\" alt=\"디스코드 채팅방\"></p>\n<p>아직 API에 직접 정의한 템플릿과 채널에 대해서만 알림을 보내고 있다. <u>7월에는 CMS를 구축하여 조금 더 유연하게 관리할 수 있도록 생각 중이다.</u></p>\n<p>추가로 7월에는 알고리즘 이외에 다양한 주제의 스터디를 할 예정이다. <s>(물론 운영은 스터디장 님이..)</s></p>\n<p>개인적으로 해보고 싶은 것은, 이번에 수강한 <u>java clean code의 내용을 typescript로 다듬어서 운영해보는 것이다.</u>\n지금 당장 하기는 힘들고, 준비 과정이 <s>조금이 아니라</s> 많이 필요할 것 같다.</p>\n<h3>3. 프로그래머스 챌린지</h3>\n<p>이번 달에는 프로그래머스 챌린지가 없었다.\n그나마 참여할 수 있었던 챌린지는,\n지난달에 신청한 <a href=\"https://programmers.co.kr/competitions/151/2020-kakao-fe-recruitment\" target=\"_blank\" rel=\"noopener noreferrer\">카카오 경력 개발자 영입 프런트엔드 개발 챌린지</a>였다.</p>\n<p>1차는 알고리즘 테스트, 2차는 VanillaJS 테스트였다.</p>\n<p>일단 1차 알고리즘 테스트는 카카오에서 낸 문제 치곤 생각보다 쉬웠다.<br>\n<strong>* 여태까지 응시했던 카카오 코딩 테스트는 모두 극악의 난이도를 자랑했다.</strong></p>\n<p>그래도 통과할 만큼의 솔루션은 아니라고 생각했기 때문에 2차 코딩테스트는 기대하지 않았다.\n그런데, 정말 운이 좋았던 건지 1차 테스트를 통과해서 2차 테스트도 응시할 수 있었다.</p>\n<p>2차 테스트의 문제 또한 프로그래머스에서 여태까지 나왔던 프런트엔드 개발 과제 중에 제일 만족스러웠다. <s>사실 우아한테크코스 문제 빼곤 다 좋았다</s></p>\n<p>고민이 필요한 문제들이 꽤 있어서 좋은 경험이 되었다!</p>\n<h3>4. 코덕</h3>\n<p>5월에 코덕에서 1등을 했기 때문에 6월은 쉬엄쉬엄했다. 그래도 6등으로 마무리 할 수 있었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239582-e4e49b80-c44b-11ea-9808-77965ecca802.png\" alt=\"코덕 6등\"></p>\n<p>그리고 코덕에서 측정하길, 하루에 30회 이상의 커밋을 했다고 한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239574-c383af80-c44b-11ea-9606-d348dc297079.png\" alt=\"평균 커밋\"></p>\n<p>이보다 더 기분 좋은 사실은, 코덕에서 통계를 내는 그룹 중 DKU-STUDY가 거의 압도적인 1등이라는 점!</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87239588-f0d05d80-c44b-11ea-9514-ee12b269bfa0.png\" alt=\"코덕 그룹 1등\"></p>\n<p>2등과 2000점 정도 차이 난다.</p>\n<p>약간의 아쉬운 점은, 커밋은 매일 했으나 푸쉬를 매일 하지 않아서 일일 커밋 스티커를 받지 못했다.. 코덕의 시스템이 수정되길 간절히 바라고 있다.. <s>너무 아쉽다</s></p>\n<h2>개발외</h2>\n<h3>1. 수영</h3>\n<p>이번 달도 열심히 수영하러 다녔다. 이제 배영/자유영은 꽤 잘할 수 있다. <s>다만 오래 못한다.. 아직까진 저질 체력..</s></p>\n<p>그래서 평영을 연습 중인데 아직 나는 개구리가 되려면 멀지 않았나 싶다.. 허허</p>\n<p>그런데 6월 말부터 회사에서 <strong>Work+</strong> 라는 제도를 만들어서 <strong>재택근무</strong>를 할 수 있도록 해줬다.\n그런데 수영을 하려면 회사 앞으로 와야 하기 때문에.. 지금 굉장히 고민 중이다.</p>\n<p>강습은 월/수/금인데, 월/목은 고정출근을 해야 하고 화/수/금은 선택적 재택근무를 할 수 있다.\n그래서 주 2회 재택을 하고 강습 2회, 자유 수영 1회 정도로 생각 중이다.</p>\n<h3>2. 오버워치</h3>\n<p>자바 클린코드 과정을 모두 수료한 직후에 갑자기 번아웃이 왔다.\n번아웃이라기보단, 한동안 일상에서 큰 비중을 차지하고 있던 일이 사라지니까 그 시간을 어떻게 메꿔야 좋을지 몰라서 방황했다.</p>\n<p>그래서 수료한 직후에 주말 내내 원없이 오버워치만 했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/87240018-8b32a000-c450-11ea-91ea-1fcd41ecbd76.jpeg\" alt=\"오버워치\"></p>\n<p>약 2일만에 마스터를 찍었다. <s>오버워치만 맨날 했으면 좋겠다!!</s></p>\n<p>오버워치.. 참 잘 만든 게임인데 유저가 다 망쳐가고 있어서 아쉽다. 빨리 오버워치2가 나왔으면 하는 바람!</p>\n<h2>Summary</h2>\n<ul>\n<li>크롬 확장프로그램 개발</li>\n<li>자바 클린코드 수료</li>\n<li>카카오 코딩테스트 응시</li>\n<li>DKU-STUDY 잘 운영 중</li>\n<li>코덕 6등</li>\n<li>평형을 잘하고 싶다 <s>(개구리가 되고 싶다.)</s></li>\n<li>오버워치 재밌다.</li>\n</ul>\n",
      "image": "https://user-images.githubusercontent.com/18749057/86334105-bb778300-bc87-11ea-804c-1abf82170b6b.png",
      "date_published": "2020-06-30T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 5월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/05-May/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/05-May/",
      "summary": "2020년 5월 회고 입니다.",
      "content_html": "\n<p>이번 달은 성인이 된 이후로 제일 열심히 공부하며 지낸 것 같다.</p>\n<h2>공적</h2>\n<ul>\n<li>5월은 거의 크롬 확장프로그램 개발 위주의 업무를 진행했다.</li>\n<li>API도 만들고 FE도 만들었다.</li>\n<li>그러면서 겪은 일들을 회고한다.</li>\n</ul>\n<h3>1. API 개발</h3>\n<p>다른 회사는 어떤지 모르겠지만.. 우리 회사는 철저하게 망 분리가 된 상태로 서버를 관리하고 있다.\n이것도 <a href=\"https://blog.naver.com/kinxtime/220648265067?proxyReferer=https%3A%2F%2Fwww.google.com%2F\" target=\"_blank\" rel=\"noopener noreferrer\">IDC(Internet Data Center)</a>와\n<a href=\"https://aws.amazon.com/ko/what-is-aws/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS(Amazon Web Service)</a>를 동시에 사용하고 있기 때문에 API를 개발할 때 신경써야 할게 한 둘이 아니다.</p>\n<h4>(1) Local 환경</h4>\n<p>일단 로컬 환경에서 개발할 때는 다음과 같은 프로세스를 따른다.</p>\n<ul>\n<li>필요한 외부 API를 <strong>일일히 수동으로</strong> 찔러서 JSON 파일로 저장한다.\n<ul>\n<li>아예 외부 API가 아니라 사내에서 만든 API의 경우 개발망 -&gt; IDC연결망 -&gt; IDC망 으로 접속해서 찔러야 한다.</li>\n<li>이 때 IDC망에서 인바운드/아웃바운드가 되어 있지 않다면 API를 호출해도 오류만 발생한다.</li>\n<li>그러나 보안 때문에 필요한 API 망만 열어놓기 때문에 시스템 인프라팀에서 바운드 설정해줘야 한다.</li>\n<li>Domain에 대한 IP도 <code>/etc/hosts</code>에서 설정해줘야 API를 호출할 수 있다.</li>\n</ul>\n</li>\n<li>JSON 파일에 대한 Data Class를 만든다.</li>\n<li>Adapter Interface와 MockUpAdapter를 만든다.</li>\n<li>MockUpAdapter는 API를 직접 호출 하지 않고 직접 API를 호출하여 저장한 JSON 파일을 파싱하여 읽어온다.</li>\n<li>Spring의 Profile이 local이나 test일 때는 MockUpAdapter를 통해 API의 Data를 수집한다.</li>\n</ul>\n<p>이렇게 눈물 겨운 과정을 거쳐 만들어진 <code>MockUpAdapter</code>를 이용하여 Service, Facade, Controller, DataClass 등을 개발한다.</p>\n<h4>(2) QA 환경</h4>\n<p>Local에서 충분히 기능이 만들어졌다면 이제 <code>RealAdapter</code>를 만들어야 한다.</p>\n<ul>\n<li>팀 내에서 사용 중인 CoreRestTemplate을 이용하여 API를 호출해야 한다. 이 때 각각의 host에 대한 Bean을 등록한 다음 사용한다.</li>\n<li>간간히 QA에서도 호출이 되지 않는 API들이 존재한다. 이 때는 MockUpAdapter를 사용해야한다.\n<ul>\n<li>그래서 테스트할 때 지옥이다. 실서버 환경에서만 테스트가 가능한 아이러니..</li>\n<li>무엇보다 Profile에 대한 조건을 설정하는게 참 번거롭다.</li>\n</ul>\n</li>\n<li>위와 같은 과정을 거쳐서 RealAdapter 개발이 완료 되면 이제 QA 환경에 올린 다음 테스트한다.</li>\n<li>QA 배포는 젠킨스를 이용한다.</li>\n<li>QA 환경에서의 오류 로그를 확인하기 위해선 일단 개발망에 접근해야 한다.</li>\n</ul>\n<p><u>개발망과 인터넷망이 완벽하게 분리된 상태에서 겪는 번거로움은 다음과 같다.</u></p>\n<ul>\n<li>키보드/모니터/마우스가 개발망 PC와 인터넷망 PC에 쌍으로 연결되어 있어서 단축키를 이용하여 전환할 수 있다.\n<ul>\n<li>전환만 가능할 뿐, 복사/붙여넣기/인터넷 등도 이용할 수 없다.</li>\n</ul>\n</li>\n<li>개발망 PC에는 그래도 간간히 설치할 수 있는 패키지가 존재한다. 하지만 개발망 PC의 용도는 서비스 서버로 접근하기 위함이다.\n<ul>\n<li>서비스 서버에는 패키지를 아예 설치할 수 없도록 망 분리가 되어 있다.</li>\n<li>그래서 cat을 통해서 출력한 파일을 클립보드에 복사한다던지 하는 기능은 이용할 수 없다.</li>\n<li>즉, 일일히 vim으로 확인할 수 밖에 없는 상태이다.</li>\n<li>보통 로그 파일은 기본적으로 만줄 이상이다. 하루만 쌓여도 10만줄은 거뜬하게 넘어간다..</li>\n</ul>\n</li>\n</ul>\n<p>쉽게 말해서 <strong>개발망에 접근하여 VIM으로 몇 만줄씩 되는 로그를 보면서 문제점을 찾아내야 한다.</strong>\n로그를 복사할 수도 없고, 다른 에디터로 열 수도 없다. 오직 터미널에서만 확인할 수 있다는 것이다.\n너무 번거롭지만.. 회사에서 권장하는 정책이 이러하다. 하지만 곧 바뀔 예정이라고 하니.. 일말의 희망을 가지고 있는 상태다.</p>\n<p>어쨌든 QA Server에 배포한 다음에 정상적으로 API가 작동한다면 괜찮겠지만, 문제가 발생했을 때 이를 해결하기 위한 과정은 정말 순탄하지가 않다.</p>\n<h4>(3) 망 분리와 보안 정책으로 인하여 겪는 API 호출 과정</h4>\n<p>어쨌든 이런 환경에서 API를 만들어야 한다. 그래서 API 호출은 다음과 같은 과정이 필요하다.</p>\n<p>브라우저 -&gt; 서비스 서버 -&gt; Internal API -&gt; 외부 API</p>\n<ul>\n<li>브라우저에서 서비스 서버에 Ajax로 API를 호출한다.</li>\n<li>서비스 서버는 Interal API를 호출하여 모든 데이터를 한 번에 내려받는다.</li>\n<li>Internal API라는 이름에 맞게, Internal API Server는 대부분의 API를 호출할 수 있도록 보안 정책이 구성되어 있다.</li>\n<li>Internal API는 정말 수 없이 많은 API를 호출하고, 이를 정제하여 서비스 서버에 내려준다.</li>\n</ul>\n<p>따라서 브라우저에 필요한 데이터를 보기 위해선 사실 3번의 API 호출 과정을 겪는 것이다.</p>\n<p>그렇다면.. 성능상 문제가 있지 않을까?</p>\n<h4>(4) 캐싱 시스템</h4>\n<p>위와 같은 API 호출 과정은 캐싱 정책을 이용하여 간략화된다.</p>\n<ul>\n<li>Internal API Server가 시작되자 마자 모든 서비스를 다 실행하여 필요한 API를 모두 호출한다.\n<ul>\n<li>Controller -&gt; Template Facade -&gt; Module -&gt; Facade -&gt; Service -&gt; Adapter 와 같은 호출 과정을 겪는다.</li>\n</ul>\n</li>\n<li>이 때 Service와 Module을 Caching하고, Template Facade는 캐싱된 Module을, Facade는 캐싱된 Service를 사용한다.</li>\n<li>그리고 필요한 시점에 스케쥴러가 다시 한번 API를 호출하여 캐싱된 데이터를 최신화시켜준다.</li>\n</ul>\n<p>결국 위와 같은 과정으로 Internal API는 항상 캐싱된 데이터만 내보낸다.\n그리고 서비스 서버도 이와 똑같은 과정으로 캐싱을 한다.</p>\n<ul>\n<li>서비스 서버에서도 마찬가지로 Internal API에서 내려보낸 데이터를 캐싱한다. 그리고 스케쥴러가 돌면서 캐싱된 데이터를 최신화 해준다.</li>\n<li>서비스 서버가 브라우저에 데이터를 내려주면, 브라우저가 다시 local cache에 API의 결과물을 저장한다.</li>\n</ul>\n<p>결국 브라우저에서 필요한 데이터는 이러한 캐싱 시스템을 이용하여 서비스 서버만 호출하여도 모든 데이터를 가져올 수 있도록 구성된다.</p>\n<p>정리하자면 다음과 같다.</p>\n<ul>\n<li>브라우저 -&gt; 서비스 서버의 캐시 데이터 호출</li>\n<li>서비스 서버 스케쥴러 -&gt; Internal API의 캐시 데이터 호출 -&gt; 캐시 최신화</li>\n<li>Internal API 스케쥴러 -&gt; 외부 API 호출 -&gt; 캐시 최신화</li>\n</ul>\n<h3>2. 크롬 익스텐션 개발</h3>\n<h4>(1) 크롬 익스텐션 튜토리얼</h4>\n<p><a href=\"https://github.com/JunilHwang/chrome-extension-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">튜토리얼 레포지토리 바로가기</a></p>\n<p></p>\n<p>일단, 개발에 앞서 <s>커밋 횟수도 채울겸</s> 튜토리얼을 진행했다. 개발에 필요한 API는 History, Bookmark, Storage API였다.</p>\n<h5>manifest.json</h5>\n<p>먼저 확장프로그램에 꼭 필요한 파일이 바로 <code>manifest.json</code>이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">manifest.json</p>\n<p><a href=\"https://developer.chrome.com/extensions/manifest\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome API 공식 문서</a>에서 확인해볼 수 있긴 한데.. 설명이 좀 빈약하다.</p>\n<ul>\n<li>manifest.json 파일은 json 포맷 파일로서, 모든 웹 익스텐션이 포함하고 있어야 하는 파일이다.</li>\n<li>manifest.json에 익스텐션의 이름, 버젼과 같은 기본 정보, 익스텐션의 기능 등을 명시해야 한다.</li>\n<li>예를 들어 기본 스크립트, 내용 스크립트, 브라우져 활동 등과 같은 측면을 명시할 수 있다.</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Mozilla/Add-ons/WebExtensions/manifest.json\" target=\"_blank\" rel=\"noopener noreferrer\">MDN Web Extension</a>에서도 확인할 수 있다.</p>\n</div>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 버전 명시.</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"manifest_version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> </span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 확장 프로그램 이름</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JunilChromeExtensionTutorial\"</span><span class=\"token punctuation\">,</span> </span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 확장 프로그램 설명</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chrome Extension Tutorial\"</span><span class=\"token punctuation\">,</span> </span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 확장 프로그램 버전</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span> </span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"browser_action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 화장 프로그램의 아이콘</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"default_icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"icon.png\"</span> </span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token string\">\"activeTab\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 현재 활성중인 탭에 대한 권한</span></span>\n<span class=\"line\">    <span class=\"token string\">\"tabs\"</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 열려 있는 탭에 대한 권한</span></span>\n<span class=\"line\">    <span class=\"token string\">\"storage\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// chrome.storage API 사용. localstorage와 비슷한 기능</span></span>\n<span class=\"line\">    <span class=\"token string\">\"bookmarks\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// chrome.bookmarks API 사용. 즉, 북마크에 접근할 수 있다.</span></span>\n<span class=\"line\">    <span class=\"token string\">\"history\"</span>    <span class=\"token comment\">// chrome.history에 접근할 수 있음. 즉, 방문 기록을 접근할 수 있다. </span></span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 줄여서 CSP라고 한다. 리소스에 대한 보안정책을 설정할 수 있다.</span></span>\n<span class=\"line\">  <span class=\"token comment\">// unsafe-eval이 있어야 vue를 사용할 수 있다. eval 함수를 사용할 수 있도록 정의하는 것이다.</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"content_security_policy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"script-src 'self' 'unsafe-eval'; object-src 'self'\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"chrome_url_overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 새 탭을 열었을 때 보여지는 페이지를 설정할 수 있다.</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"newtab\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.html\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>튜토리얼에선 사용하지 않았지만, chrome의 기본 설정을 덮어씌우는 것도 가능하다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 크롬의 기본적인 설정을 덮어씌울 수 있다.</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"chrome_settings_overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 검색 엔진에 대한 설정을 변경할 수 있다.</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"search_provider\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token comment\">// 인코딩 설정</span></span>\n<span class=\"line\">      <span class=\"token string-property property\">\"encoding\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token comment\">// 검색엔진 키워드</span></span>\n<span class=\"line\">      <span class=\"token string-property property\">\"keyword\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"junil hwang\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">     </span>\n<span class=\"line\">      <span class=\"token comment\">// 검색엔진 이름</span></span>\n<span class=\"line\">      <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"junil hwang blog Search\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token comment\">// 검색 엔진</span></span>\n<span class=\"line\">      <span class=\"token string-property property\">\"search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://junil-hwang.com/blog/?s={searchTerms}\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">      <span class=\"token comment\">// 기본 검색 엔진으로 설정할지의 여부</span></span>\n<span class=\"line\">      <span class=\"token string-property property\">\"is_default\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// 시작페이지를 설정할 수 있따.</span></span>\n<span class=\"line\">    <span class=\"token string-property property\">\"startup_pages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"http://junil-hwang.com\"</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 시작페이지 / 검색엔진 등을 교체할 수도 있지만 지금 당장은 필요하지 않아서 제외했다.</p>\n<h5>Storage API 사용하기</h5>\n<p><a href=\"https://developer.chrome.com/extensions/storage\" target=\"_blank\" rel=\"noopener noreferrer\">Storage API</a>는 다음과 같이 사용할 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Store.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ChromeStore <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Store <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">_setter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token comment\">// key에 해당하는 value를 저장한다.</span></span>\n<span class=\"line\">        chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">_getter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token parameter\">storage</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5>Bookmark API 사용하기</h5>\n<p><a href=\"https://developer.chrome.com/extensions/bookmarks\" target=\"_blank\" rel=\"noopener noreferrer\">bookmarks api 공식문서</a></p>\n<p>북마크는 트리구조로 저장이 되어 있기 때문에, 이를 flat 형태로 만들어야 한다.</p>\n<p></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> bookmarks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTree</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=&gt;</span> chrome<span class=\"token punctuation\">.</span>bookmarks<span class=\"token punctuation\">.</span><span class=\"token function\">getTree</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> tree <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token comment\">// tree 구조를 array로 펴주는 과정</span></span>\n<span class=\"line\">  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> v <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  bookmarks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>bookmarks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">save</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  chrome<span class=\"token punctuation\">.</span>bookmarks<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    bookmarks<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">window<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> load</span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5>자주 방문한 사이트</h5>\n<p>자주 방문한 사이트는 <a href=\"https://developer.chrome.com/extensions/history\" target=\"_blank\" rel=\"noopener noreferrer\">history api</a>를 사용하면 된다.</p>\n<p>그리고 history에서 다시 방문 빈도를 뽑아내기 위해서는 api 스펙에 대해 잘 알아야 되는데, 다행이도 <a href=\"https://chromium.googlesource.com/chromium/src/+/master/chrome/common/extensions/docs/examples/api/history/showHistory/typedUrls.js\" target=\"_blank\" rel=\"noopener noreferrer\">공식 튜토리얼</a>이 있어서 이해하기가 수월했다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 최근 30일 간의 방문 기록 중</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> microsecondsPerWeek <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> microsecondsPerWeek<span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 1000 개를 가져온다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> maxResults <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFrequentlyVisited</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sorted</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  chrome<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">,</span> maxResults<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">items</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> chrome<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">getVisits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      result<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> transition <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transition <span class=\"token operator\">===</span> <span class=\"token string\">'typed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">          visited<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          visited<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> maxResults <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span> url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  visited<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">await</span> <span class=\"token function\">getFrequentlyVisited</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5>개발 환경에서 고려해야 할 것</h5>\n<p>크롬 확장프로그램의 경우, 따로 웹 서버가 필요한게 아니다. 하지만 Chrome API를 사용하기 위해선 크롬 확장프로그램으로 등록되어 있어야 했다.\n그래서 스토리지에 대한 추상화도 필요했고, history나 bookmark대신에 localstorage를 활용해야 했다.</p>\n<p>이에 대한 과정은 아마 6월달에 회사 기술 블로그에 더 자세하게 소개할 수 있을 것 같다. 확장프로그램에 대한 소개는 여기까지!</p>\n<h2>사적</h2>\n<p>이번 달은 정말 치열하게 살았다고 해도 과언이 아니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83351912-f59cee80-a382-11ea-8da5-b515e0831ebd.png\" alt=\"5월 github\"></p>\n<p>무려 5월에만 539개의 커밋을 했다. 하루에 20개 이상의 커밋을 한 것이다.</p>\n<h3>0. 일일 라이프 사이클</h3>\n<ul>\n<li><code>05:30 ~ 05:40</code> 기상 및 출근 준비</li>\n<li><code>05:40 ~ 06:30</code> 수영장으로 출동(?)</li>\n<li><code>06:30 ~ 07:20</code> 수영 강습(월/수/금) 및 자유 수영(화/목)</li>\n<li><code>07:20 ~ 07:40</code> 회사 출근</li>\n<li><code>07:40 ~ 08:00</code> 아침식사</li>\n<li><code>08:00 ~ 12:00</code> 오전 근무</li>\n<li><code>12:00 ~ 13:00</code> 빠르게 점심을 먹은 후 30분간 기절</li>\n<li><code>13:00 ~ 17:00</code> 오후 근무</li>\n<li><code>17:00 ~ 18:00</code> 퇴근</li>\n<li><code>18:00 ~ 19:00</code> 저녁식사</li>\n<li><code>19:00 ~ 20:00</code> 보통 저녁먹고 너무 졸려서 기절</li>\n<li><code>20:00 ~ 25:00</code> Java Clean Code 미션 수행 및 알고리즘 스터디 PR 코드리뷰 및 알고리즘 풀이</li>\n</ul>\n<p>문제는 오전 1시가 되었을 때 바로 잠을 잘 수 있는게 아니라는 점.. 피곤해 죽겠는데 2시 까지 뒤척이다가 기절한다.\n그래서 주중에는 항상 피곤하다. <s>빨리 Java Clean Code가 끝났으면 하는 마음이..</s></p>\n<p>그래도 하루가 참 즐겁다. 허투루 보내는 시간이 없다는 점이 만족스럽다.</p>\n<h3>1. 단국대학교 알고리즘 스터디</h3>\n<p>4월 말에 <a href=\"https://github.com/eyabc\" target=\"_blank\" rel=\"noopener noreferrer\">여자친구</a>가 뜬금없이 알고리즘 스터디를 같이 하자고 했다.\n스터디 구성원은 먼저 에브리타임을 통해서 모집하고, 추가로 알고 지내던 후배들 중 같이 하고 싶은 의향이 있는 사람들을 초대했다.</p>\n<p>그리고, 생각보다 잘 진행되고 있는 중이다.</p>\n<h4>(1) 스터디 결산</h4>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83351894-d69e5c80-a382-11ea-9121-f7882c9c3473.png\" alt=\"스터디 레포지토리\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83351941-1a916180-a383-11ea-8a7a-3e39e6ef4a3a.png\" alt=\"PR\"></p>\n<p>진행한지 1달이 조금 넘은 상태인데 벌써 800개의 커밋과 160개의 PR이 있다.</p>\n<p>5월만 조금 더 상세하게 보자면,</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83352007-75c35400-a383-11ea-8cdf-d94e6f4c8dc0.png\" alt=\"5월 결산\"></p>\n<p>455개의 커밋을 했으며 128개의 PR이 올라왔다.</p>\n<h4>(2) 코드 리뷰</h4>\n<p>스터디를 하면서 코드 리뷰에 재미가 들렸다.\n무엇보다 피드백을 잘 반영해준 스티더원들에게 고맙기도 하고, 또 이들에게 피드백을 해주기 위해서 오히려 내가 더 공부를 많이 해야 했다.</p>\n<p>다만 아쉬운 점은, 리뷰를 거의 나만 진행하고 있다는 점. 다른 사람들끼리도 코드 리뷰를 했으면 좋겠다.</p>\n<h4>(3) 알고리즘 풀이</h4>\n<p>초반에는 나도 문제를 어느 정도 풀이했는데, 자바 클린 코드 수강도 같이 하고 있어서 좀 버겁다.\n매일 매일 미션을 수행하기가 왜이리 힘든지.. 거기다 수영 까지 하고 있어서 참 죽을 맛이다.</p>\n<h4>(4) 코딩테스트</h4>\n<p>여자친구의 취업 준비를 도우면서 나도 코딩 테스트를 같이 보고 있다.</p>\n<p>5월에는 다음과 같은 코딩테스트를 응시했다.</p>\n<ul>\n<li>카카오 프런트엔드 인턴 : 6문제 중 2문제 풀이</li>\n<li>우아한 테크코스 1차 코딩 테스트(알고리즘) : 4문제 중 3문제 풀이</li>\n<li>우아한 테크코스 2차 코딩 테스트(바닐라JS) : 요구사항이 명확하지 않은 부분 빼곤 다 풀이</li>\n<li>프로그래머스 여름방학 인턴 챌린지 : 5문제중 4문제 풀이\n<ul>\n<li>10:00 ~ 12:00 시험 시간인데.. 응시 시간을 뒤늦게 알아서 11시 10분부터 시작했다...</li>\n</ul>\n</li>\n</ul>\n<p>카카오는... 항상 난이도가 최악 수준이다.. ㅠㅠ</p>\n<p>어쨌든 항상 코딩 테스트를 응시하면서 이렇게 긴장감을 유지시킬 필요가 있는 것 같다.</p>\n<h3>2. 자바 클린코드 수강</h3>\n<p>7기에는 수강신청 시간을 잘못 알고 있어서 마감이 됐었다.\n결과적으로 그 때 수강하지 않은건 코로나 때문에 잘 한 일이라고 생각한다.</p>\n<p>이번에는 거의 1등으로 수강신청을 완료하지 않았나 싶다.</p>\n<p>현재 회사에서 java를 사용하고 있긴 하지만, java의 코어를 잘 모르기 때문에 이번 기회에 제대로 익혀두자 싶어서 수강신청을 했다.\n결과는 <s>죽을맛이다</s> 매우 만족스럽다.</p>\n<p>코드 리뷰의 범위는 <code>객체지향 생활체조</code>의 범위에서 진행된다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">객체지향 생활 체조</p>\n<ul>\n<li>한 메서드에 오직 한 단계의 들여쓰기(indent)만 한다.</li>\n<li>else 예약어를 쓰지 않는다.</li>\n<li>모든 원시값과 문자열을 포장한다.</li>\n<li>한 줄에 점을 하나만 찍는다.</li>\n<li>줄여쓰지 않는다(축약 금지).</li>\n<li>모든 엔티티를 작게 유지한다.</li>\n<li>3개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.</li>\n<li>일급 콜렉션을 쓴다.</li>\n<li>게터/세터/프로퍼티를 쓰지 않는다.</li>\n</ul>\n</div>\n<p>위의 규칙들을 지키면서 프로그램을 만드는 것 자체가 굉장히 어렵고 고민이 많이 된다.\n하지만 그만큼 코드 자체는 극한의 아름다움을 보이게 된다.</p>\n<p>덕분에 잘 활용할 수 있게 된게 Stream API와 Enum이다.</p>\n<h4>코드리뷰 모음</h4>\n<p>아직 3주차 밖에 되지 않았다. 수료까지는 5주가 남았지만, 개개인의 미션 진행 속도에 따라 다르다.</p>\n<ul>\n<li>Racingcar\n<ul>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/716\" target=\"_blank\" rel=\"noopener noreferrer\">step1: String 클래스에 대한 학습</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/761\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 문자열 계산기</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/826\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 자동차 경주</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/870\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 자동차 경주 우승자</a></li>\n<li><a href=\"https://github.com/next-step/java-racingcar/pull/984\" target=\"_blank\" rel=\"noopener noreferrer\">step5: 자동차 경주 리팩토링</a></li>\n</ul>\n</li>\n<li>Lotto\n<ul>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/495\" target=\"_blank\" rel=\"noopener noreferrer\">step1: 문자열 덧셈 계산</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/509\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 로또 (1)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/527\" target=\"_blank\" rel=\"noopener noreferrer\">step2: 로또 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/532\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 로또 2등 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/541\" target=\"_blank\" rel=\"noopener noreferrer\">step3: 로또 2등 (2)</a></li>\n<li><a href=\"https://github.com/next-step/java-lotto/pull/550\" target=\"_blank\" rel=\"noopener noreferrer\">step4: 로또 수동</a></li>\n</ul>\n</li>\n<li>ladder\n<ul>\n<li><a href=\"https://github.com/next-step/java-ladder/pull/389\" target=\"_blank\" rel=\"noopener noreferrer\">step1</a></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/JunilHwang/java-clean-code\" target=\"_blank\" rel=\"noopener noreferrer\">개인적으로 관리하고 있는 통합 저장소</a></p>\n<h3>3. 코덕</h3>\n<p>이번 달은 정말 눈물 겹게 1등을 달성했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83352807-3ac41f00-a389-11ea-8374-d6519e4fec0e.png\" alt=\"image\"></p>\n<p>정말 힘들었다.. 그래도 한 번은 1등을 해놔야 좀 마음이 편할 것 같다. 다음달에는 등수에 연연하지 않고 공부에만 연연하기로!</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83352781-0f413480-a389-11ea-8258-1a8e5e9549ef.png\" alt=\"image\"></p>\n<p>알고리즘 스터디에도 같이 해보자 했는데, 생각보다 다들 꾸준히 해줘서 코덕 전체 그룹중에 1등을 할 수 있었다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83352859-8971b900-a389-11ea-97ec-11d9fd5fbcb4.png\" alt=\"image\"></p>\n<p>코덕에서 측정해준 기록을 보면 일일 평균 40회의 커밋을 했다고 한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/83352898-c473ec80-a389-11ea-8016-e24c2a08967e.png\" alt=\"image\"></p>\n<p>특히 최근 2주를 워낙 열심히 해서.. 당연한 결과가 아닌가 싶다.</p>\n<p>이제 코덕에 대한 집착은 접어두자.</p>\n<h3>4. 기능경기대회</h3>\n<p>원래 4월에 열려야되는 지방대회가 코로나의 여파로 6월까지 연기되었다.\n덕분에 바빠 죽겠는데.. 문제에 대한 솔루션을 요청해서 그냥 만들어줬다.</p>\n<p><a href=\"https://junilhwang.github.io/webskills2020/\" target=\"_blank\" rel=\"noopener noreferrer\">솔루션</a></p>\n<h3>5. 수영</h3>\n<p>코로나의 여파로 재택근무를 하는 동안 수영을 하지 못했다. 덕분에 몸이, 특히 목이 너무 아팠다.\n5월이 되자 마자 6개월치를 일시불로 등록했고, 덕분에 매일 매일 수영을 할 수 있게 되었다!</p>\n<ul>\n<li>드디어 자유형을 제대로 할 수 있게 되었다.</li>\n<li>힘들 때 그냥 누우면 저절로 뜨는 것을 깨달았다.</li>\n</ul>\n<p>확실히 수영을 하니까 몸이 항상 개운하다. 다만 아직 체력이 부족하기 때문에 너무 피곤할뿐..\n그런데 5월 마지막주는 어느 정도 적응해서 그런지 덜 피곤했음!</p>\n<h3>6. 아쉬운 점</h3>\n<p>이번 달은 사이드 프로젝트를 거의 진행하지 못했다.\n6월 까지는 꼭 마무리 했으면 좋겠다. 꼭 배포 한 다음에 서비스 해봐야지!</p>\n<h2>Summary</h2>\n<ul>\n<li>철저하게 망이 분리된 상태에서의 API 개발</li>\n<li>크롬 확장프로그램 개발 및 크롬 API 응용 방법</li>\n<li>코덕 1등</li>\n<li>단국대 알고리즘 스터디를 어느정도 잘 유지 중</li>\n<li>자바 클린코드 레이싱카 / 로또 완료. 이제 2개 남았음</li>\n<li>기능대회와의 손절은 언제 가능한 것인가..</li>\n<li>수영 열심히 다니는 중</li>\n<li>사이드 프로젝트를 진행하지 못해서 아쉬움</li>\n</ul>\n",
      "date_published": "2020-05-31T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 4월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/04-April/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/04-April/",
      "summary": "2020년 4월 회고 입니다.",
      "content_html": "\n<p>이번 달은 꽤 열심히 보낸 것 같다.</p>\n<h2>공적</h2>\n<h3>1. Vue Composition API</h3>\n<p>곧 Vue 3.0이 출시될 예정이며 Composition API는 Vue 3.0의 내장 API이다.\n회사에서 Vue를 사용하고 있기 때문에 Composition API에 대한 사전 조사가 필요했다.</p>\n<p>Composition API를 사용하면 코드를 유지보수 하기 좋게 관리할 수 있으며, 재사용성 또한 증가하게 된다.\n다만 아직 VueRouter나 Vuex 같은 서드파티와 연동하는 것에 대한 방법이 없는 상태다.</p>\n<p>나는 Vuex의 Namespace 기능을 적극적으로 이용하고 있는데, Namespace 또한 지원하지 않는다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Composition API와 this</p>\n<p>Composition API에서는 this를 사용할 수 없도록 설계되어 있다.\n그런데 Vuex의 경우 Namespace를 정의할 때 this를 사용한다.\n그래서 Composition과 Vuex의 Namespace를 같이 사용할 경우 에러가 발생한다.</p>\n</div>\n<p>어쨌든 Composition API에 대한 글 중 제일 도움이 많이 되었던 것은 카카오에 다니는 친구가 작성한 <a href=\"https://chodragon9.github.io/blog/composition-api-rfc-migration/\" target=\"_blank\" rel=\"noopener noreferrer\">이 글</a>이다.</p>\n<p>그리고 이 글을 읽으면서 친구의 포스트이므로 그냥 읽으면서 내 생각을 첨가한(?) <a href=\"https://github.com/ChoDragon9/ChoDragon9.github.io/pull/7\" target=\"_blank\" rel=\"noopener noreferrer\">PR</a>을 날려도 되는지 물어봤다.\n어찌보면 굉장히 무례한 부탁일 수 있었는데, 흔쾌하게 수락해진 친구에게 감사하고 미안했다.\n결과적으로 친구도, 나도 만족할 수 있는 경험이 되었으리라 생각한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/80866090-dea5a680-8cc7-11ea-88c2-a3bca2e2dd35.png\" alt=\"Composition API 정리\"></p>\n<p>이게 바로 개발의 매력이고, 코드리뷰의 매력임을 느꼈다.</p>\n<p>약간 삼천포로 빠졌는데, 어쨌든 중요한 점은 이러한 경험을 통해서 Composition API에 대해 이해할 수 있었다는 것이다.\n그런데 우리 팀은 포털서비스를 만들어야 하기 때문에.. IE 호환성을 아예 놓을 수 있는 상황이 아니었다.\n그래서 아직은 도입할 시기가 아니라고 결론을 내렸다. <s>젠장</s></p>\n<p>아쉽지만 사이드 프로젝트에 적용해볼 생각이다.</p>\n<h3>2. 순정 API 개발</h3>\n<p>새로운 프로젝트 시작하게 맡게 되면서 처음부터 API를 만들어야 했다.\n여태 만들어진 API를 유지보수만 하다가 처음부터 순정 API를 만드는 것이다.</p>\n<p>회사에서 관리하고 있는 프로젝트는 대충 다음과 같은 Component를 사용한다.</p>\n<ul>\n<li>Adapter: 다른 API의 데이터를 가져옴</li>\n<li>Repository: DB 연동</li>\n<li>Service: Adapter나 Repository에서 필요한 데이터를 가져옴</li>\n<li>Facade: 각종 Service를 조합하여 필요한 데이터를 정제한다.</li>\n<li>Module: Facade에서 필요한 데이터를 가져온 다음 캐싱처리하여 모듈에 맞는 데이터로 반환</li>\n<li>TemplateFacade: Module을 조합하여 최종 데이터를 생성</li>\n<li>Caching: Service/Module 데이터를 캐싱</li>\n<li>Scheduler: Caching을 주기적으로 실행</li>\n</ul>\n<p>이미 설계 가이드가 있기 때문에 잘 구성된 가이드라인대로만 만들면 큰 문제 없이 작동한다.\n어쨌든 복습도 되고, 처음부터 만들기고 있기 때문에 즐겁게 임하는 중이다.</p>\n<h3>3. DynamoDB</h3>\n<p>앞으로 만들게 될 서비스는 <a href=\"https://aws.amazon.com/ko/dynamodb/\" target=\"_blank\" rel=\"noopener noreferrer\">DynamoDB</a>를 사용할 예정이다.\n물론 사용해도 큰 무리가 없는 서비스에만!</p>\n<p>DynamoDB는 AWS에서 만든 NoSQL인데 앞으로의 서비스는 Node.js를 적극적으로 사용할 예정이기도 하고,\nNoSQL이 Node.js 같은 Non-blocking 방식과 궁합이 맞다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">non-blocking과 nosql</p>\n<p>node와 mysql을 같이 사용할 경우, node의 성능을 최대한 뽑아내긴 힘들다.\nmysql의 경우 blocking 방식으로 작동하고, node의 경우 non-blocking 방식으로 작동하기 때문에 결국 mysql에 지연이 생기면 node도 똑같이 지연이 생기기 때문이다.</p>\n<p>그래서 mysql과 nosql을 같이 사용하는 경우가 많은 것이다. 아니 같이 사용해야 한다.\nmysql을 사용할꺼면 그냥 spring을 쓰자.</p>\n</div>\n<p>DynamoDB의 경우 indexing이 굉장히 빠른데, Index를 생성할 때 하드카피를 하기 때문이다.\n다만, 모든 질의가 전부 비용이기 때문에 설계를 처음부터 정교하게 해야한다.\nRDB의 경우 Entity와 Relation이 중요하지만(당연하게도...) DynamoDB의 경우 Query가 중요하다.\n그래서 일단 RDB로 Entity를 설계하고, Relation을 설계한 다음, 이에 따른 Query를 만들어야한다.\n그 후에 Query를 보고 필요한 Index를 설계한 다음에 DynamoDB의 Table을 설계한다.</p>\n<p>어찌보면 당여한 과정이지만, 설계가 조금이라도 빗나가면 그 여파가 꽤 큰편이다..\n아직은 공부중이기 때문에 조금 더 정리가 되면 TIL에 올릴 생각이다.</p>\n<h3>4. 재택근무 종료</h3>\n<p>사회적 거리두기가 해제됨에 따라 재택근무도 종료되었다. 다만 출근 하자마자 다시 사회적거리두기 연장이 되었다는점 (<s>이런 그랜드캐니언 같은 경우가!</s>)\n어쨌든 팀원들을 오랜만에 만나니 반갑기도 하고, 일하는 맛이 났다.</p>\n<p>그런데 업무에 대한 질은 회사나 집이나 똑같은 것 같다. 주말 출근할 일이 있으면 그냥 집에서 했으면.. 하는 바람이 있다.</p>\n<h3>5. 총선</h3>\n<p>이번 달에는 총선이 있었다. 우리 회사는 포털서비스를 제공하기 때문에 이러한 국가적인 이벤트에 민감하다.\n내가 담당하는 서비스 또한 그랬기 때문에 여러모로 신경을 많이 써야 했다.\n결과적으론 아무일도 일어나지 않았다. <s>무슨 일이 터져 봐야 경험이 되긴 할텐데..</s></p>\n<p>어쨌든 다행이다!</p>\n<h2>사적</h2>\n<h3>1. Server Side Rendering</h3>\n<p>진짜 SSR 때문에 한 동안 고생을 너무 많이 했다.\nVue에서 제공하는 가이드라인이 너무 빈약하고,\nAPI 문서도 잘못 되었거나 반영되지 않은 것들이 많았다.</p>\n<h4>SSR과 CSR을 같이 하기 위한 가이드라인이 없다.</h4>\n<p>일단 첫 번째로 화나는 점은, SSR에 대한 가이드라인은 있는데 CSR을 같이 사용하는 방법에 대한 가이드라인은 없다.\n어쨌든 SSR에 CSR을 연동하기 위해선 다음과 같은 과정이 필요하다.</p>\n<ol>\n<li>CSR의 Template에 SSR의 Template을 합쳐야 한다.</li>\n<li>CSR 코드를 번들링(빌드) 한다. 이 때 Template도 Bundling 코드에 포함된다.</li>\n<li>CSR에서 Build된 Template를 SSR에서 사용한다.</li>\n</ol>\n<p>이에 대한 안내는 정말 1도 없다는 점... 이와 관련 내용도 5월달에 정리해서 올릴 예정이다.</p>\n<h4>window와 document를 사용하는 코드들</h4>\n<p>SSR은 기본적으로 CSR의 코드를 Server에서 실행한 다음 Client로 전달하는 것이다.\n이 때 발생하는 문제가 바로 window와 document는 Server Side에서 사용할 수 없다는 것이다.\n그래서 직접 window와 document를 만들어주거나, 혹은 Render와 관련된 코드에는 window와 document를 사용하지 않는 것이다.\n그런데 이게 말이 쉽지 직접 해보면 욕나온다.</p>\n<p>어떤 방법이 제일 좋을까 고민하다가 찾아난 해결책이 <a href=\"https://github.com/jsdom/jsdom\" target=\"_blank\" rel=\"noopener noreferrer\">JSDOM</a>을 사용하는 것이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">JSDOM</p>\n<p>JSDOM은 말 그대로 가상의 window와 document를 만들어주는 것이다. 그냥 존재 자체만으로도 그 가치가 있다.</p>\n</div>\n<p>SSR을 실행할 때 JSDOM을 만들어주고, SSR 실행이 끝나면 JSDOM을 제거하는 것이다.\n이렇게 또 한 문제를 해결할 수 있었다. (<s>Funcking SSR!</s>)</p>\n<h4>제대로된 Tutorial을 찾을 수 없다.</h4>\n<p>SSR의 가장 큰 문제점 중 하나가 바로 제대로된 튜토리얼이 없다는 것이다.\ngithub를 찾아봐도, 구글링을 해봐도, 이것만 보면 이해할 수 있다 싶은 튜토리얼은 존재하지 않았다.\n혹은, 누군가 올렸는데 검색 순위에서 밀려났거나.</p>\n<h3>2. 오픈소스 기여 시도</h3>\n<p>Vue SSR을 작업하면서 약간의 문제가 있는 것을 발견하고 <a href=\"https://github.com/vuejs/vue/pull/11327\" target=\"_blank\" rel=\"noopener noreferrer\">PR</a>을 올렸으나, 받아들여지진 않은 것 같다.\n일단 e2e test를 통과하지 못했는데.. 에초에 건드린 코드가 e2e Test와 관련이 없었기 때문에 그냥 그러려니 하고 방치중이다.</p>\n<p>이 때를 계기로 PR을 적극적으로 사용중이다.</p>\n<h3>3. 알고리즘 스터디</h3>\n<p>여자친구가 학교 후배들을 대상으로 <a href=\"https://github.com/DKU-STUDY\" target=\"_blank\" rel=\"noopener noreferrer\">알고리즘 스터디</a>를 만들고 진행하고 있다.\n그리고 나는 멘토(?)로 참여중이다.</p>\n<p>그러면서 깃허브 활동량이 눈에 띄게 늘었다.\nPR 사용량도 늘어나고 있고, 무엇보다 구성원이 눈에 띄게 성장하고 있는 모습을 보이고 있기 때문에 큰 보람을 느끼는 중이다.</p>\n<p>스터디를 하면서 느낀점은, 일단 다른 사람들의 생각을 직접적이든 간접적이든 어떤 형태로든 알 수 있다는 것 자체가 큰 도움이 된다는 것이다.\n사고방식이나 문제풀이 과정 등 정말 기상천외(?)한 방법으로 문제를 해결한다.</p>\n<p>그리고 알려주는 것들을 스폰지처럼 잘 흡수하는 사람이 있기 때문에 가르침에 대한 보람과 즐거움도 느낄 수 있다.</p>\n<h3>4. 스파르타 코딩클럽 멘토 신청</h3>\n<p>페이스북/코덕 등에서 광고를 보다가 우연히 <a href=\"https://spartacodingclub.kr/\" target=\"_blank\" rel=\"noopener noreferrer\">스파르타 코딩클럽</a>을 알게 되었다.\n그리고 멘토를 수시로 구하는 중이었기 때문에 바로 신청했다.\n몇 년동안 고등학교에서 강의를 하다가 요즘에 강의를 하지 않고 있으니까 허전함이 느껴진다. <s>무엇보다 부수입이 필요하다.</s></p>\n<p>그래서 부디 꼭.. 합격하기를 바라는 중이다.</p>\n<h3>5. 일일커밋과 코덕</h3>\n<p>이번 달은 역대급으로 커밋을 많이 했다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/80867623-16185100-8cd0-11ea-99ee-4cba4953c78f.png\" alt=\"일일커밋\"></p>\n<p>그냥 정신 차려보니까 그렇게 되어있었다. 그래서 코덕 순위도 2위까지 올렸는데... 1위와의 격차는 별짓을 다 해도 좁혀지지가 않았다.\n무엇보다 하루 활동량에 대한 점수 제한이 있었기 때문에 꾸준히 활동을 하지 않으면 결국 따라잡을 수 없는 구조다.\n즉, 성실성을 겨루는 서비스라고 할 수 있다. 아쉽지만 이렇게 많은 사람들 중에 두 번째로 성실하게 공부한 것이라는 증거기 때문에 일단 만족하는 걸로.</p>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/80867616-013bbd80-8cd0-11ea-96e5-2b39fa30171b.png\" alt=\"코덕\"></p>\n<p>언젠간 1등 한 번 해보자!</p>\n<p>스터디를 같이 하는 후배들에게도 안내해줬기 때문에 같이 top10 안에 들어가면 기분 째질 것 같다.</p>\n<h2>Summary</h2>\n<ul>\n<li>Composition API 조사</li>\n<li>오픈소스 기여 시도</li>\n<li>코덕 2등</li>\n<li>알고리즘 스터디</li>\n</ul>\n",
      "image": "https://user-images.githubusercontent.com/18749057/80866090-dea5a680-8cc7-11ea-88c2-a3bca2e2dd35.png",
      "date_published": "2020-04-30T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 1분기 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/01-First-Quarter/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/01-First-Quarter/",
      "summary": "2020년 1분기 회고 입니다.",
      "content_html": "\n<p>벌써 2020년의 1/4이 지나갔다.\n한 분기 동안 어떤 일들을 목표로 했고, 얼마만큼 완수했나 자신에게 피드백을 해보자.</p>\n<h2>개별 역량</h2>\n<h3>1. 일일커밋</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/80858428-2ca0b700-8c94-11ea-8478-a0b8c665243d.png\" alt=\"일일커밋\"></p>\n<p>올해의 첫 번째 목표이자 제일 큰 목표는 바로 <strong>일일커밋</strong>이다.\n이전에는 일일커밋이 부질없다고 생각했는데, 그 생각을 고쳐먹었다.\n<u>무언가를 거창하게 하기보단, 작더라도 꾸준히 하는 것이 중요하다.</u></p>\n<p>이런 생각은 <a href=\"https://www.youtube.com/watch?v=V9AGvwPmnZU\" target=\"_blank\" rel=\"noopener noreferrer\">지방대 개발 비전공자가 배달의민족 리드 개발자가 되기까지</a>에 언급된 <code>하루키 법칙</code>에서 비롯되었다.</p>\n<p>나는 <strong>관성</strong>의 영향을 크게 받는 사람이다.\n그래서 일일커밋이라는 관성에 탑승하기로 했다.\n<s>강제로 꾸준히 공부하다 보면 뭐라도 되어있겠지 하며..</s></p>\n<p>너무 피곤해서 못할뻔한 적도 있었지만, 머릿속으로 계속 <u>'그래도 오늘 커밋을 해야 하는데...'</u> 하며 몸을 일으키고 컴퓨터를 고 공부를 했다.\n이렇게까지 해야 하는 건가 싶을 때도 있었지만 어쨌든 결과적으론 나쁘지 않았다.</p>\n<p>일일커밋의 양분으로</p>\n<ul>\n<li><a href=\"https://junilhwang.github.io/TIL/\" target=\"_blank\" rel=\"noopener noreferrer\">Today I Learned</a>,</li>\n<li>학과 수업 자료: <a href=\"https://github.com/JunilHwang/DKU-Software-Engineering-Logging\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-Software-Engineering-Logging</a>,</li>\n<li>사이트 프로젝트: <a href=\"https://github.com/JunilHwang/DKU-Software-Engineering-Logging-service\" target=\"_blank\" rel=\"noopener noreferrer\">DKU-Software-Engineering-Logging-service</a></li>\n</ul>\n<p>등을 이용했다.</p>\n<p>학과 자료는 옛날부터 생각했던 거라서 그냥 시간 있을 때 조금씩 정리했고, TIL도 팀원들과 유명한 개발자들이 하고 있었기 때문에 나도 하고 싶다는 생각으로 시작했다.\n그리고 사이드 프로젝트의 경우 학교에 다닐 때부터 해야지 해야지 하다가 결국 못했는데,\n어떻게든 끝맺음을 짓고 싶어서 시작했다.</p>\n<p>확실히 3개월 동안 매우 많은 공부를 했다.\n적어도 내가 여태까지 살아왔던 다른 시간들과 비교하면 그렇다.\n이 밀도를 3년 정도 유지하는 것이 나의 최대 목표다.\n그리고 이 목표를 얼마나 착실하게 이루어가느냐에 따라서 앞으로의 인생이 달라지겠지?</p>\n<p>성공까진 아니더라도 나 자신에게 떳떳하게 살기 위한 한 걸음이리라.</p>\n<h3>2. Today I Learned</h3>\n<p>TIL은 Vuepress를 이용하여 만들었다.\nVuepress의 디자인이 깔끔하기도 했고, 무엇보다 다른 정적사이트 생성기(Static Site Generator)보다 구축하기가 쉬웠다.\n그리고 Vuepress에서 자체적으로 만든 마크다운 플러그인이 무척 마음에 들었다(ex: Custom Container, Highlight, ...)</p>\n<p>기록하고 싶은 것들이 참 많은데, 내가 글을 작성할 때 공을 너무 많이 들여서 한 가지 주제로 무언가를 쓸 때 시간을 너무 많이 소모한다.\n그렇다고 대충 쓰기는 또 싫다. 그러다 보니 자연스럽게 멀리하게 된다.</p>\n<p>일단 사이드 프로젝트를 완료한 다음에 다시 꾸준히 쓰든가 해야지</p>\n<h3>3. Side Project</h3>\n<p>Github와 관련된 주제로 사이드 프로젝트를 진행하고 있다.\n깃허브에 올린 마크다운 파일을 내가 만든 서비스에서 읽어올 수 있고, 훅을 등록하면 저절로 포스트가 업데이트되는 그런 서비스다.</p>\n<p>일단 위에 언급한 기능들은 일찍이 다 만들었는데, 실제 서비스를 하기에는 너무 디자인도 구리고 퀄리티가 낮았다.\n그래서 이것저것 서브 기능을 넣어야 하는데 그것마저 쉽지가 않다.\n혼자서 사이드 프로젝트를 하는 게 이럴 때 버겁구나 느끼는 중이다.</p>\n<p>그래서 리팩토링이나 사용하는 기술 스택을 최대한 많이 공부하는 식으로 진행 중이다.\n벌써 리팩토링만 몇 번 한 것인지...</p>\n<p>사이드 프로젝트를 하면서 제일 큰 성과는 Open API를 사용하는 방법을 완전히 터득한 것이다.\n이전에는 API를 연동할 때 문서를 봐도 모르겠고,\n다른 사람들이 작성한 글들을 봐도 감이 오질 않았는데 정말 어떤 API를 사용하더라도 큰 문제가 없을 정도로 이해한 상태다.</p>\n<p>그리고 이전에 너무 어려워서 사용하기를 포기했던 NestJS에 대해 진짜 제대로 이해했다. 이건 객체지향 공부의 영향이 컸다.\n국내 자료를 아무리 찾아봐도 NestJS에 대한 내용은 거의 볼 수 없었다. 대부분 해외에서 사용하고 있는데, 영어에 너무 취약하다 보니.. 이해가 너무 어려웠다.</p>\n<p>하지만 Spring을 많이 사용해봤고, Spring에 사용된 기본적은 디자인패턴이나 철학을 이해하고 있다면 NestJS를 이해하는 데 큰 무리가 없는 것 같다.\n그래서 사이드 프로젝트의 제일 큰 수확은 사실 NestJS의 사용 숙지가 아닐까 싶다.</p>\n<h3>4. 객체지향 개발방법론</h3>\n<p><a href=\"https://junilhwang.github.io/TIL/CodeSpitz/Object-Oriented-Javascript/01-Intro/\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 86기</a>와\n인프런에서 백기선 님이 강의하신 <a href=\"https://www.inflearn.com/course/spring#curriculum\" target=\"_blank\" rel=\"noopener noreferrer\">스프링 프레임워크 입문</a>,\n그리고 <a href=\"https://expert0226.tistory.com/category/%EA%B0%95%EC%A2%8C/Spring%203.0\" target=\"_blank\" rel=\"noopener noreferrer\">여름나라 겨울이야기</a> 블로그의 주인장님이 집필한\n<a href=\"https://wikibook.co.kr/java-oop-for-spring/\" target=\"_blank\" rel=\"noopener noreferrer\">스프링 입문을 위한 자바 객체 지향의 원리와 이해</a> 라는 책을 읽고 객체지향에 대해 어느 정도 깨우칠 수 있었다.</p>\n<p>여태까지 내가 작성했던 코드는 말 그대로 쓰레기였다는 것을 알 수 있게 해준 강의들과 책이었다.</p>\n<p>그리고 이러한 개념들을 숙지하지 않은 상태에서 프레임워크를 공부한다는 것은 어불성설이라는 생각이 들었다.\n요즘 누군가가 나에게 어떤 프레임워크를 공부하면 좋겠냐는 말에 이처럼 대답한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">XXX라는 프레임워크를 공부하고 싶습니다. 무엇부터 해야 좋을까요?</p>\n<ol>\n<li>객체지향 개발 방법론을 익혀라.</li>\n<li>디자인패턴을 익혀라.</li>\n<li>MVVM을 익혀라.</li>\n<li>IoC나 DI에 대해 이해하라.</li>\n<li>그리고 프레임워크 문서를 보아라.</li>\n</ol>\n</div>\n<p>IoC(제어역전)는 객체지향의 궁극적인 목적이며 보통 프레임워크 수준에서 IoC를 담당한다.\n따라서 IoC를 이해하지 못한다면 프레임워크를 사용하고 있다고 해도, 제대로 사용하는 경우는 드물다.</p>\n<p>이러한 것들을 이해하고 있는 상태라면 어떤 프레임워크를 사용하여도 기본 이상은 할 수 있다.</p>\n<p>객체지향 개발론을 공부하면서 아쉬웠던 점은, 왜 학부 과정에서 이러한 것들을 설명해주는 교수님이 없었을까 하는 점이다.\n이렇게 중요한 개념을 왜 인제야 알았을까? 참 의문이다.</p>\n<h3>5. 알고리즘</h3>\n<p>꼴 보기도 싫던 알고리즘을, 여자친구의 취업 준비를 도우면서 어쩌다 보니 같이 하게 되었다.\n오랜만에 알고리즘을 공부하니까 재미있었기 때문에 주말마다 코딩테스트를 같이 준비하고 있다.</p>\n<p>그러면서 카카오 인턴 코딩테스트, 프로그래머스 프런트엔드 개발자 코딩테스트, 백엔드 개발자 코딩테스트, 이스트소프트 코딩 테스트 등을 풀어봤는데..\n아직 내 수준은 고만고만한 것 같다.</p>\n<p>프로그래머스가 한글로 되어 있고, UX/UI가 좋긴 한데 테스트케이스에 대한 설명이 너무 빈약하다. 피드백이 너무 없어서 왜 틀렸는지 모른다고 해야 하나?</p>\n<p>Codility의 경우 피드백이 확실해서 자신의 문제점을 고쳐가는 데 큰 도움이 된다.</p>\n<h2>개발 외</h2>\n<h3>수영</h3>\n<p>수영을 시작했다. 하지만 코로나 때문에 망했다. <s>(빌어먹을 코로나)</s></p>\n<p>확실히 수영 덕분에 몸이 개운했는데.. 코로나의 여파로 수영을 못 하고 있으니까 몸이 다시 뻐근해지는 것을 몸소 체험 중이다.</p>\n<p><s>돈을 오랫동안 많이많이 벌기 위해서라도</s> 공부를 열심히 하기 위해서라도 운동을 착실히 해야지!</p>\n<h3>자본에 대하여</h3>\n<p>우리 회사 사람들의 핫한 주제는 언제나 부동산과 주식이다. 사실 우리 회사 사람들뿐만 아니라 다른 회사 사람들 또한 마찬가지니라.\n어느 회사에 다니건 아무리 월급을 많이 받아도 월급쟁이다. 그리고 월급쟁이는 기적이 일어나지 않는 이상 일정 수준 이상의 부를 축적하기는 힘들다.\n그래서 큰돈을 모으기 위해선 사업을 하거나 주식을 하거나 부동산을 하거나 셋 중 하나인데, 부동산을 하기 위해선 또 큰돈이 필요하고,\n다시 큰돈을 모으기 위해선 주식이나 사업을 해야한다.</p>\n<p>그런데 주식이나 사업은 부동산보다 위험부담이 훨씬 크다. <s>특히 주식/비트코인을 통해서 자본을 잃은 사람이 주변에 너무 많다</s></p>\n<p>이렇게 해도, 저렇게 해도 평탄한 인생을 살아가기는 참 힘들구나 싶다.\n어쨌든 나는 지금 당장 욕심을 부리기보단, 내적 역량을 축적하는 것이 옳다고 생각한다.</p>\n<p>앞서 언급했지만, 최소 3년은 공부에 매진하자.</p>\n",
      "image": "https://user-images.githubusercontent.com/18749057/80858428-2ca0b700-8c94-11ea-8478-a0b8c665243d.png",
      "date_published": "2020-04-01T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 3월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/03-March/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/03-March/",
      "summary": "2020년 3월 회고 입니다.",
      "content_html": "\n<p>나는 3월 한 달을 어떻게 지냈나? 에 대한 고찰이다.</p>\n<h2>공적</h2>\n<h3>1. 재택근무</h3>\n<p>3월은 한 달 내내 재택근무를 시행하였다. <s>빌어먹을 코로나</s></p>\n<p>밖에 나가지 않고 집에서 일하니까 출퇴근 시간이 단축되어 좋긴 했지만, 온종일 앉아만 있으니까 엉덩이가 너무 아팠다.\n그래서 산책도 하고, 등산도 했지만.. 역시 수영이 몸을 개운하게 만들어 주는데 제일 탁월할 것 같다.</p>\n<h3>2. CMS 개발</h3>\n<ul>\n<li>\n<p>vue로 만든 CMS UI를 API와 연동하는 작업을 수행했다.<br>\n회사에서 사용하는 코어 모듈이 있는데, 이것 때문에 여러 가지 문제가 발생해서 애 좀 먹었다.</p>\n</li>\n<li>\n<p>http 응답에 대한 고민을 많이 했다. 기존에는 REST API에서 다음과 같은 식으로 Response를 보냈다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// 성공 시</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"success\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* data 형식 */</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token comment\">// 실패 시</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"success\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그런데 <a href=\"https://evan-moon.github.io/2020/03/15/about-http-status-code/\" target=\"_blank\" rel=\"noopener noreferrer\">서버의 상태를 알려주는 HTTP 상태 코드</a> 라는 포스트를 보고 현재 내가 API 설계를 잘못하고 있다는 생각이 들었다.\n그래서 이에 대해 한참 고민하고, front에서 api의 응답 처리 방식을 완전히 뜯어고쳤다.\n다만 아직 고민 중인 부분은 <strong>URI의 형태는 정확하지만, 응답으로 보내줄 값 자체가 없다면 어떡해야 할까?</strong></p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\">GET /post/10 <span class=\"token comment\"># 10번 post가 없을 경우엔?</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이때 404, 503, 502, 204 중 어떤 것을 보내야 할지 명확하지가 않았다.\n조금 더 구글링해보다 <a href=\"https://luckyyowu.tistory.com/377\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP 404 Status Code 에 대한 고찰</a> 이라는 포스트를 보고, 어느 정도 생각이 정리되었다.</p>\n<ul>\n<li>존재하지 않는 uri: 404 Not Found</li>\n<li>특정 리소스가 있어야 하는데 없음 (로직, 내부 오류): 500 Internal Server Error</li>\n<li>특정 리소스가 있을 수도 있고, 없을 수도 있음: 204 No Content</li>\n<li>클라이언트가 말도 안 되는 파라미터로 리소스를 요청함: 400 Bad Request</li>\n</ul>\n</li>\n</ul>\n<h3>기타</h3>\n<p>CMS 말고도 이것저것 업무가 어느 정도 있었지만.. 보안 때문에 언급할만한 것들이 없다.</p>\n<h2>사적</h2>\n<h3>1. DKU Logging Service</h3>\n<p>3월은 <a href=\"https://github.com/JunilHwang/DKU-Software-Engineering-Logging-Service\" target=\"_blank\" rel=\"noopener noreferrer\">사이드 프로젝트</a> 개발로 대부분의 시간을 보냈다고 해도 무방하다.</p>\n<h4>Server: NestJS</h4>\n<p>작년에 <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">NestJS</a> 사용을 시도하다가 너무 어려워서 포기했는데, 스프링도 제대로 사용해보고 객체지향에 대한 개념도 숙지하고, 디자인패턴도 익혔더니 이제 사용에 큰 무리가 없다.\n다만 굳이 NestJS를 써야만 하는 이유를 찾기가 힘든 상황이다.\n사용 방법이나 디자인된 형태는 Spring과 거의 유사한데 그럴 거면 그냥 Spring을 쓰는 게 낫지 않나 하는 생각이 자꾸 든다.</p>\n<p>그래도 이점을 찾아보자면</p>\n<ul>\n<li>Front와 Back에서 Typescript를 사용할 경우 공통으로 사용하는 Type에 대해 공유할 때 편리하다.</li>\n<li>Node.js 기반이기 때문에 개발 속도가 확실히 빠르다.</li>\n</ul>\n<p>정도?</p>\n<p>사실 이 정도면 그냥 사용해보고 싶어서 사용하는 상황이라고 봐도 무방한 것 같다.</p>\n<h4>Client: VueJS</h4>\n<p>React와 Vue 중에 어떤 것을 사용할까 고민하다가 회사에서 Vue를 사용하고 있기 때문에 더 깊은 공부를 위하여 Vue를 택했다.\n그런데 Vue를 그렇게 깊게 사용하고 있다는 생각이 들진 않는다. 일단은 UI를 잘 만드는 정도?</p>\n<h4>Github API v3</h4>\n<p>사이드 프로젝트가 Github에 있는 데이터를 활용하다 보니 GitHub API를 깊게 숙지해야만 했다.\n덕분에 OpenAPI에 대한 이해도가 급격하게 좋아졌다. 대학교를 다닐 때 API를 연동하려고 참 애를 많이 썼는데.. 부질없는 짓이었구나 느끼고 있다.\nGithub는 참 활용 방안이 무궁무진한 서비스라고 느끼는 중이다.</p>\n<h3>2. 알고리즘</h3>\n<p>나와 같이 개발자의 길을 걷고 있는 여자친구가 최근에 퇴사했다. 그리고 이직 준비를 도우면서 얼떨결에 나도 같이 알고리즘을 풀이하게 되었다.\n오랜만에 알고리즘을 풀어보니 꽤 재미있게 느껴졌다. 그래서 못해도 1주일에 1번 정도는 알고리즘 문제를 풀어야지 생각 중이다.</p>\n<h3>3. 독서 실패</h3>\n<p>사이드 프로젝트에만 집중하다 보니 독서는 아예 포기했다. <s>사실 귀찮았다</s></p>\n<h3>4. TIL 실패</h3>\n<p>3월에는 아예 TIL에 손대지 않았다. 역시 나는 게을러!</p>\n<h3>5. 코덕 Top 10</h3>\n<p><img src=\"https://user-images.githubusercontent.com/18749057/80858554-d54f1680-8c94-11ea-9227-39d1c34e6196.png\" alt=\"코덕 Top 10\"></p>\n<p>1월과 2월은 주로 TIL 위주의 커밋을 했었는데, 3월은 사이드 프로젝트의 여파로 커밋 횟수가 증가했다. 이 때문인지 코덕에서의 랭킹이 급 상승했다.</p>\n<p>다음달에는 1등을 한 번 노려보는걸로!</p>\n<h2>Summary</h2>\n<ul>\n<li>Http Status에 대해 깊은 이해를 시도 중</li>\n<li>사이드 프로젝트 진행 중</li>\n<li>3월 독서, TIL 등 수행하지 않음</li>\n<li>재택근무</li>\n</ul>\n",
      "image": "https://user-images.githubusercontent.com/18749057/80858554-d54f1680-8c94-11ea-9227-39d1c34e6196.png",
      "date_published": "2020-03-31T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 2월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/02-February/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/02-February/",
      "summary": "2020년 2월 회고 입니다.",
      "content_html": "\n<p>나는 2월 한 달을 어떻게 지냈나? 에 대한 고찰이다.</p>\n<h2>공적</h2>\n<p>사내에서 진행했던 내용을 간략하게(?) 되새겨본다.</p>\n<h3>1. 업무에 적응하는 과정</h3>\n<h4>1-1. 개발망(부들부들)</h4>\n<p>1월 말에 처음으로 배포를 했었는데 배포 과정 보단 개발망 때문에 굉장히 스트레스를 받았다.\n인터넷망과 개발망이 분리되어 있어서 배포 이후에 디버깅을 하거나 API의 정상 작동 확인 과정이 꽤 번거로웠다.\n개발망에 접근해서 curl로 직접 api을 호출 해야 하는데, 이 때 json이 한 줄로 나오기 때문에 보기가 굉장히 힘들었다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># 대략 다음과 같은 형태이다.</span></span>\n<span class=\"line\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Accept: application/vnd.github.v3+json\"</span> <span class=\"token string\">\"https://api.github.com/\"</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그러면 이렇게 한 줄로 출력이 된다(사실 위와 같이 github api를 요청하면 포맷팅이 된 형태로 반환한다.)</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"current_user_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"current_user_authorizations_html_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/settings/connections/applications{/client_id}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"authorizations_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/authorizations\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"code_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/code?q={query}{&amp;page,per_page,sort,order}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"commit_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/commits?q={query}{&amp;page,per_page,sort,order}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"emails_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/emails\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"emojis_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/emojis\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"events_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/events\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"feeds_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/feeds\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"followers_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/followers\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"following_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/following{/target}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"gists_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/gists{/gist_id}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"hub_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/hub\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"issue_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/issues?q={query}{&amp;page,per_page,sort,order}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"issues_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/issues\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"keys_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/keys\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"label_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/labels?q={query}&amp;repository_id={repository_id}{&amp;page,per_page}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"notifications_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/notifications\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"organization_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/orgs/{org}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"organization_repositories_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"organization_teams_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/orgs/{org}/teams\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"public_gists_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/gists/public\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"rate_limit_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/rate_limit\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"repository_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/repos/{owner}/{repo}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"repository_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/repositories?q={query}{&amp;page,per_page,sort,order}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"current_user_repositories_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/repos{?type,page,per_page,sort}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"starred_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/starred{/owner}{/repo}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"starred_gists_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/gists/starred\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"user_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/users/{user}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"user_organizations_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/orgs\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"user_repositories_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"user_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/users?q={query}{&amp;page,per_page,sort,order}\"</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>그래서 사수가 알려준 python script를 이용하여 어느 정도 응답 형태를 이쁘게 만들었다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Accept: application/vnd.github.v3+json\"</span> <span class=\"token string\">\"https://api.github.com/\"</span> <span class=\"token operator\">|</span> python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"</span>\n<span class=\"line\">import fileinput, json</span>\n<span class=\"line\">print(</span>\n<span class=\"line\">    json.dumps(</span>\n<span class=\"line\">        json.loads(''.join(fileinput.input())),</span>\n<span class=\"line\">        sort_keys=True,</span>\n<span class=\"line\">        ensure_ascii=False,</span>\n<span class=\"line\">        indent=4</span>\n<span class=\"line\">    )</span>\n<span class=\"line\">)\"</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그러면 이렇게 포맷팅이 된 결과를 출력해준다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"current_user_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"current_user_authorizations_html_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/settings/connections/applications{/client_id}\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"authorizations_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/authorizations\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"code_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/code?q={query}{&amp;page,per_page,sort,order}\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"commit_search_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/search/commits?q={query}{&amp;page,per_page,sort,order}\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"emails_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/user/emails\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"emojis_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/emojis\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token string-property property\">\"events_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/events\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 너무 길어서 생략</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이건 또 python으로 출력한 것이기 때문에 grep을 사용할 수 없다.\n그래서 몇 백줄이 되는 결과값에서 필요한 부분만 확인할 때 여전히 불편했으며, 확인해야 하는 API 요청이 한 개가 아니기 때문에 말 그대로 불편함 그 자체였다.</p>\n<blockquote>\n<p>그러나 개발자라면 불편함을 해결할 수 있어야 한다! <s>이름하여 창조적 귀찮음</s></p>\n</blockquote>\n<p>나는 위의 python script와 shell script을 결합하여 모든 요청을 한 번에 수행 후 파일로 저장하는 스크립트를 만들었다.</p>\n<h4>/bin/ApiAllTestScript</h4>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token shebang important\">#! /bin/sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span></span>\n<span class=\"line\"><span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token variable\">$2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 예시를 위하여 github로 대체</span></span>\n<span class=\"line\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Accept: application/vnd.github.v<span class=\"token variable\">${version}</span>+json\"</span> <span class=\"token punctuation\">\\</span></span>\n<span class=\"line\"><span class=\"token string\">\"http://api.github.com/<span class=\"token variable\">${path}</span>\"</span> <span class=\"token operator\">|</span> python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"</span>\n<span class=\"line\">import fileinput, json</span>\n<span class=\"line\">str = json.dumps(json.loads(''.join(fileinput.input())), sort_keys=True, ensure_ascii=False, indent=4)</span>\n<span class=\"line\">f = open('~/output_<span class=\"token variable\">${version}</span>', 'w')</span>\n<span class=\"line\">f.write(str.encode('utf-8'))</span>\n<span class=\"line\">f.close()\"</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>/bin/ApiAllTestScript</h4>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token shebang important\">#! /bin/sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"path1,path2,path3,path4,path5,path6,path7,path8\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">mkdir</span> ~/output_<span class=\"token variable\">$1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&gt;</span> ~/output_<span class=\"token variable\">$1</span>/moduleCheck</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">value</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">echo</span> $<span class=\"token punctuation\">{</span>str<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token string\">','</span> <span class=\"token string\">'\\n'</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">do</span></span>\n<span class=\"line\">  <span class=\"token function\">sh</span> ApiAllTestScript <span class=\"token variable\">$1</span> <span class=\"token variable\">$value</span></span>\n<span class=\"line\">  <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token entity\" title=\"\\n\">\\n</span>[<span class=\"token variable\">${value}</span>]<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token operator\">&gt;&gt;</span> ~/output_<span class=\"token variable\">$1</span>/moduleCheck</span>\n<span class=\"line\">  <span class=\"token function\">grep</span> <span class=\"token string\">'            \"type\"'</span> ~/output_<span class=\"token variable\">$1</span>/<span class=\"token variable\">${value}</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token string\">'                    '</span> <span class=\"token operator\">&gt;&gt;</span> ~/output_<span class=\"token variable\">$1</span>/moduleCheck</span>\n<span class=\"line\"><span class=\"token keyword\">done</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>실행은 다음과 같이 하면 된다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">sh</span> ApiAllTestScript <span class=\"token number\">3</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>그러면 Shell Script 에 정의된 모든 path에 대해 api 요청 후 결과를 저장하게 된다.</p>\n<p>그래도 여전히.. 개발망에서 로그를 확인할 때는 여간 불편한게 아니였다.\n무엇보다 개발망에서 패키지를 설치하면 패키지 의존성이 전부 깨져있어서 원격데스크톱, vim, ssh 등의 편리한 도구들을 사용할 수 없었다.</p>\n<p>패키지가 깨지는 문제 때문에 대략 5번 정도의 포맷 및 재설치를 하였으나 여전히 해결 되진 않고 있다.\n우여곡절 끝에 우분투에 내장 되어 있는 데스크톱 공유 기능을 이용하여 <a href=\"https://extrememanual.net/12210\" target=\"_blank\" rel=\"noopener noreferrer\">VNC 화면 공유</a> 를 통해 원격 제어가 가능하게 되었으나, 이건 너무 느렸다.</p>\n<p>내가 원하는건 아이패드로 ssh 접근을 하여 개발망을 사용하고, 블루투스 키보드를 통해서 간단하게 개발망/인터넷망을 오가며 개발하는 것이었는데.. 너무 큰 꿈인 것 같다.</p>\n<p>어쨌든 몇 번의 삽질을 통해서 배포 과정에 대해서는 금방 이해할 수 있었고.. 배포가 두렵지 않게 되었다. 다만 <strong>배포 이후의 에러/버그</strong>가 두려울뿐..</p>\n<h4>1-2. 업무 프로세스 적응</h4>\n<p>개발 프로세스 뿐만 아니라 업무 프로세스도 중요하다. 나의 직무와 관련된 업무 프로세스는 대충 이런 형식이다.</p>\n<p>기획 -&gt; 디자인 -&gt; 퍼블리싱 -&gt; 개발 -&gt; QA -&gt; 배포</p>\n<p>그런데 기획 시작부터 개발 시작까지 걸리는 시간이 꽤 길다.\n그래서 충분히 기술적인 조사가 가능하고 업무에 적용하기 위해 여러가지 테스트를 진행해볼 수 있는 여유가 있다.\n이런 점이 정말 마음에 든다.\n무엇보다 주변에 개발자로 취직했지만, 개발에 관련된 업무가 아닌 일을 하는 사람도 많이 봤기 때문에 개발에 집중할 수 있는 환경임에 감사하고 있다.</p>\n<h3>2. 신규 프로젝트와 코드리뷰</h3>\n<p>드디어 인수인계 받은 프로젝트가 아닌, 처음부터 시작하는 프로젝트를 진행 하게 되었다.\n이전에 진행 되었던 프로젝트를 참고하여 개발 환경을 구성하고 사수의 도움을 받아 프로젝트를 진행했다.</p>\n<p>코어에 관련된 코드들에 기능이 조금 부족하여 임의로 추가하기도 하고, 업무가 겹치는 사람들과 논의도 하면서 꽤 재밌게 진행했다.\n일단 나는 Vue를 이용하여 CMS UI를 만들었는데 생각보다 빨리 끝나서 일단 코드리뷰를 진행했다.</p>\n<p>우리 회사의경우, 프런트/백엔드가 나뉜다기 보단 각자 맡은 서비스를 풀스택으로 진행하다 누가 봐도 이해할 수 있는 코드를 작성해야만 했다.\n특히 js의 경우 너무 급격하게 변하기도 하고, java와 다르게 IDE의 지원이 있어도 설정을 제대로 하지 않으면 코드 추적히 힘들다.\n팀원들은 대부분 java에 익숙하기 때문에 여러 상황을 고려하지 않고 짜여진 JS 코드를 접하게 될 경우 멘붕이 올 수도 있는 환경이었다.\n그래서 문법은 최대한 간결하게, 그리고 java와 이질감이 없도록 구성하는게 중요했다.</p>\n<p>나는 최근에 알고리즘 때문인지 쓸데없이 코드를 줄이거나 유별난 문법을 많이 사용했는데 그런 것들을 거의다 고쳐야했다.\n어쨌든 이렇게 다른 사람들과 내가 작성한 코드에 대해 토의할 수 있어서 재밌었고 뜻 깊은 경험이었다.</p>\n<h3>4. 재택근무</h3>\n<p>무탈없이 끝나겠구나 싶었더 코로나19가 하루 아침에 확진자가 증가하면서 재택근무를 시작하게 되었다.\n덕분에 VPN이나 원격접속 설정을 제대로 해놓지 않으면 근무를 할 수 없는 상황이었는데..\n재택근무 첫 날 부터 회사 컴퓨터에 접속이 되지 않아 결국 출근을 하여 이것 저것 설정하고 왔다.</p>\n<p>그리고 개발망과 인터넷망이 분리 되어있었기 때문에 배포가 있는 날에는 여러모로 불편함을 느꼈다.</p>\n<h2>사적</h2>\n<h3>얼떨결에 집사</h3>\n<p>몇 개월동안 밥을 주고 있던 길냥이들을 하룻밤 집에서 재웠더니 맨날 맨날 집앞으로 찾아온다.\n퇴근하고 오면 문앞에 옹기종기 모여 앉아 있다 보니까 집도 구해주고, 화장실도 만들어주고, 밥도 주고, 그렇게 집사 아닌 집사가 되어버렸다.\n문제는 고양이 5마리가 똥을 <s>오지게 우라지게 겁나게</s> 많이 싼다.</p>\n<p>원래 집에 도착하면 바로 밥먹고 코딩을 했는데 이제 집에 오면 밥먹기전에 고양이들 응가부터 치우고 있다.\n거기다가 냥이들이 잠깐만 문을 열어놔도 자꾸 집에 들어와서 냥이들이 나가면 지저분해진 집을 반 강제적으로 청소하고 있다.</p>\n<p>그래도 귀여운 냥이들을 보고 있으면 하루의 스트레스가 풀리는 느낌! <s>(그리고 똥과 청소로 스트레스 적립)</s></p>\n<h3>수영 시작</h3>\n<p>우리 팀원들은 대부분 운동을 한다. 헬스를 하는 사람도 있고, 테니스나 배드민턴을 하는 사람도 있고,\n집에서 그냥 닌텐도로 운동하는 사람도 있다.\n그래서 운동 얘기를 많이 하는데 <a href=\"https://ryan-han.com/post/memoirs/memoirs2019/\" target=\"_blank\" rel=\"noopener noreferrer\">체대 출신 개발자</a> 분께서\n수영이 하루종일 앉아있는 개발자들에게 참 좋은 운동이라고 알려주셨다.</p>\n<p>요즘 목도 아프고 어깨도 아프고 해서 수영을 시작하기로 마음먹고 회사 앞에 있는 <a href=\"http://www.phspo.com/cmm/main/mainPage.do\" target=\"_blank\" rel=\"noopener noreferrer\">평화 스포 웰빙</a> 에 수영 강습을 등록했다.</p>\n<ul>\n<li>\n<ol>\n<li>[1개월][월/수/금 1시간 강습][12만원]</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>[6개월][월/수/금 1시간 강습 + 화/목 1시간 자유수영 + 찜질방][80만원]</li>\n</ol>\n</li>\n</ul>\n<p>둘 중에 고민하다가 일단 한 달만 했는데, 결과적으로 코로나 덕분에 합리적인 선택이 되었다.</p>\n<p>확실히 수영을 하니까 몸도 펴지고 아픈 곳도 없고 몸이 개운했는데.. 재택근무때문에 맛보기만 한 것 같다.\n그리고 오전 6시 30분 ~ 7시 20분 강습이라서 월/수/금에는 최소 오전 5시 30분에 집에서 출발해야 했다.\n일찍 일어나서 운동을, 다름아닌 수영을 하고 출근하니까 오전에 너무 피곤해서 힘들었다.\n재택근무가 끝나면 다시 꾸준히 참여해서 체력도 키우고 건강좀 유지하자!</p>\n<h3>사이드 프로젝트 시작</h3>\n<p>일일커밋의 좋은 양분은 역시 사이드 프로젝트가 아닐까 싶다.\nTIL의 경우 손이 많이 가기도 하고, 원체 정리하는걸 그렇게 좋아하는 성격이 아니다 보니 꾸준히 하기가 힘들었다.\n그래서 사이드 프로젝트를 시작했다.</p>\n<p><a href=\"https://github.com/JunilHwang/DKU-Software-Engineering-Logging-Service\" target=\"_blank\" rel=\"noopener noreferrer\">단국대학교 소프트웨어학과 학생들(혹은 개발자)을 위한 서비스</a></p>\n<p>내가 졸업한 단국대 소프트웨어학과의 경우, 학생들간의 교류가 너무 없는 상태이다.\n학교에서는 정부의 지원을 받아 소프트웨어 특성화를 추진하고 있고, 학생은 많아지고 있다.\n그것 까진 좋은데, 문제는 선후배간의 교류도 없고, 동아리도 없고, 수업도 부족하고, 교수님도 별로 안계신다.</p>\n<p>결국 정보가 필요한 사람은 많은데 정보를 제공해줄 사람은 없기 때문에 악순환이 계속 발생한다.\n왜 공부하는지도 모르는 상태에서 공부를 하는 사람이 태반인 것이다.</p>\n<p>이런 점을 해소하고자 만드는 서비스인데, 일단 Github가 필요하다.\nGithub에 markdown 파일을 올리고, 그걸 이 서비스에 포스트로 등록하는 것이다.\n링크로 등록할 수도 있고, 혹은 API를 이용하여 등록할 수도 있다.</p>\n<p>한 번 등록하면 github hook을 이용하여 커밋이 발생했을 때 해당 포스트를 자동으로 업데이트 하는 형식으로 만들 생각이다.\n항상 GitHub에 무언가를 기록할 때 다른 서비스에도 노출 시키고 싶었는데 어떻게 할까 고민하다가 이런식으로 만들면 좋겠다고 생각했다.</p>\n<p>그리고 Github 활동의 활성화를 위해 랭킹 시스템이나 서로 진행하고 있는 프로젝트를 공유한다던가 하는 기능을 추가해보는 것도 좋을 것 같다.</p>\n<p>여튼 핵심은 GitHub다. GitHub의 중요성은 아무리 강조해도 부족하지 않은 것 같다.</p>\n<h3>독서 - 스프링 입문을 위한 자바 객체지향의 이해</h3>\n<p>스프링에 대해 공부할 때 <a href=\"https://expert0226.tistory.com/\" target=\"_blank\" rel=\"noopener noreferrer\">여름나라 겨울이야기</a> 라는 블로그의 글을 재밌게 읽었었다.\n그리고 최근에 다시 읽었는데, 이 블로그 주인장님이 블로그에 쓴 내용을 바탕으로 책을 쓰셨다.\n그래서 주저 없이 구매했고, 하루만에 다 읽었다.</p>\n<p>객체지향을 이보다 더 쉽게 설명할 수 있을까? 싶을 정도로 간결하게 그리고 정확하게 기술하였다.</p>\n<p>이 책의 내용을 잘 정리하고 싶은데.. 요즘 TIL에 손이 가지 않고 있어서 문제다.</p>\n<h3>코덕</h3>\n<p><a href=\"https://co-duck.com/\" target=\"_blank\" rel=\"noopener noreferrer\">코덕</a> 이라는 사이트가 있는 것을 알고 바로 회원가입을 했다.</p>\n<p>2월은 11등으로 마무리할 듯 싶다. 다음 달에는 top10 안에 들어가는 것이 목표! 가능하다면 1등을 노려보자.</p>\n<p>이렇게 소소한 자극이 있어야 공부할 때 즐거움을 느끼는 것 같다.</p>\n<h3>함수형 프로그래밍</h3>\n<p>인프런에서 유인동님의 함수형 프로그래밍 강의를 들었다.\n딱히 따라하진 않고 그냥 쭉 봤는데 생각보다 너무 재밌었다.\n아직 객체지향의 개념이나 디자인 패턴도 익숙하지 않기 때문에 일단 객체지향부터 잘 숙지 한 다음\n함수형 프로그래밍도 곱씹어 먹어야겠다.</p>\n<h3>The Java</h3>\n<p>인프런에서 백기선님의 The Java 수업을 들었는데, 꽤 재미있게 들었다.\n이것도 모르고 Java를 사용한게 참 바보 같기도 하고.. 뭔가 자괴감도 들고 그랬다.</p>\n<h3>아쉬운 점</h3>\n<p>사이드 프로젝트를 시작하면서 TIL에 쓰는 내용이 급격하게 감소했다.\n일단 사이트 프로젝트를 잘 마무리 한 다음 TIL에 투자하는 방식으로 해야겠다.</p>\n<h2>Summary</h2>\n<ul>\n<li>사이드 프로젝트 진행 중</li>\n<li>2월 독서 완료</li>\n<li>업무 프로세스 숙지 완료</li>\n<li>재택근무</li>\n</ul>\n",
      "date_published": "2020-02-29T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "MVVM System 개선하기 (3)",
      "url": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/05-Extension/",
      "id": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/05-Extension/",
      "summary": "MVVM System을 최종적으로 어떻게 개선하였는지 설명합니다.",
      "content_html": "\n<p>객체지향 자바스크립트 마지막 포스팅입니다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 포스트는 아래의 내용들을 토대로 정리한 것입니다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=5UUISCK6CL4\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 86기 5회차 동영상</a></p>\n</div>\n<h2>ViewModelListener 개선</h2>\n<p><a href=\"../03-Strategy-Observer\">MVVM System 개선하기 (1)</a>에서 만든 Binder의 viewmodelUpdated는 문제가 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span>략</span>\n<span class=\"line\">  <span class=\"token comment\">// .. 생략</span></span>\n<span class=\"line\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> vmName<span class=\"token punctuation\">,</span> el <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      items<span class=\"token punctuation\">[</span>vmName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>rootViewModel<span class=\"token punctuation\">[</span>vmName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>items<span class=\"token punctuation\">[</span>subKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>subKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#processors<span class=\"token punctuation\">[</span>category<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>processor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line\">      processor<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 코드에서 <code>rootViewModel</code>은 <u>client 코드에서 생성한 전역변수(전역객체)</u> 이다.\n그런데 이 전역변수를 지금 viewmodelUpdate에서 사용하고 있는 것이다.\n이 부분을 개선해야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> ViewModelListener <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 생략 */</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'override!'</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> vmName<span class=\"token punctuation\">,</span> el <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      items<span class=\"token punctuation\">[</span>vmName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewdmoel<span class=\"token punctuation\">[</span>vmName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>items<span class=\"token punctuation\">[</span>subKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>subKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#processors<span class=\"token punctuation\">[</span>category<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>processor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line\">      processor<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>viewmodelUpdated에서 <u>viewmodel을 인자로 받아오도록</u> 해야 한다.\n그런데 viewmodelUpdated는 Binder에만 있는게 아니라 ViewModel에도 존재한다.\n<u>그리고 ViewModel에서 notify로 Binder에게 최신 정보를 보내게 된다.</u> 이 코드 또한 수정해야 한다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEpyb9JIx9pCyhLWZBJ2ttpKz9pU7Aooz9LSWlIor2Y2bOAPG1sRaWTcX1Ic99QWeNGbBNJi4fCoy5gC5AGKiBg3qphL9B2yaSk2o68L0Pe0aWuu0gWb910fbvwLmEG1RGaG00\" alt=\"uml diagram\">\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">/* 생략 */</span></span>\n<span class=\"line\">  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">viewmodelUpdated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token comment\">// ViewModel에서 실행한 viewmodelUpdated는 viewmodel 인자를 사용하지 않는다.</span></span>\n<span class=\"line\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2020-02-28T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "MVVM System 개선하기 (2)",
      "url": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/",
      "id": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/",
      "summary": "ISP 원칙, Visitor Pattern 등을 적용하여 MVVM System을 더욱 개선합니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 포스트는 아래의 내용들을 토대로 정리한 것입니다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=r4vOF7WpxgM&amp;t=868s\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 86기 4회차 동영상</a></p>\n</div>\n<p>객체지향 프로그램이란 처음에 이루고하자는 목표에서부터 <u>덩어리진 것을 차근차근 분리하고 깎아내는 과정</u> 이다.\n그래서 객체지향 개발은 애자일(Agile) 소프트웨어 개발과 궁합이 좋다.</p>\n<p>객체지향에서 코드를 깎아내는 기준은 <u>역할과 책임</u> 이다.\n역할과 책임은 비슷하지만 동전의 양면과 같다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">역할과 책임</p>\n<ul>\n<li>책임을 진다는 것은 책임에 적합한 권한도 갖고 있다는 것이다.</li>\n<li>권한이 있다는 것은 권한에 적합한 책임도 갖고 있다는 것이다.</li>\n<li>책임이 없는데 권한이 없거나 권한이 없는데 책임이 있다면 문제가 생긴다.</li>\n</ul>\n</div>\n<p>인간의 머리는 복잡성의 한계가 있다.\n그래서 객체지향을 통하여 좋은 코드를 만드는 방법은 코드를 잘 쪼개서 인간이 인식할 수 있는 복잡성 만큼 수용하는 것이다.\n그런데 쪼개는 것이 어렵기 때문에 일관성 있게 쪼개는 방법이 중요하다.\n그래서 <u>역할과 책임에 맡게 코드를 쪼개는 연습을 해야 한다.</u></p>\n<p>이번에는 역할과 책임에 따라 코드를 쪼개고 깎아내는 과정을 살펴볼 것이다.</p>\n<h2>인터페이스 분리 원칙 (ISP)</h2>\n<p>먼저 ViewModel에 <u>인터페이스 분리 원칙(ISP, Interface Segregation Principle)</u> 을 적용해야 한다.</p>\n<h3>역할과 책임에 따른 분석</h3>\n<p>여태까지 만든 ViewModel은 매우 heavy 한 상태다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/NOyx3i8m44HxdsAL2aeuGGu09VJ6Euai-QVr9YX2t1rJ6AHqe_T66irOrOekCHY1Kvlc0BfxFA-P4UXbY9mLfY5bzTDsQ6trxZYGhPHEUrkMH_ZPSxUM-UAh8a4w4iIyOa_NjXk_kxV2Li6Tpz0U6TM9BvhbJoQVODvcHEBsumC0\" alt=\"uml diagram\">\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">static</span> #subjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">static</span> #inited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">static</span> <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">          vm<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">          vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">descriptor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      v <span class=\"token operator\">=</span> newV</span>\n<span class=\"line\">      vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModelValue</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">define</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      obj<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  subKey <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span>\n<span class=\"line\">  styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  #isUpdated <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span> #listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'styles,attributes,properties'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> v <span class=\"token operator\">!=</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invalid object k: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, v:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">          v<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></span>\n<span class=\"line\">          v<span class=\"token punctuation\">.</span>subKey <span class=\"token operator\">=</span> k</span>\n<span class=\"line\">          v<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">addListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">removeListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">viewmodelUpdated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그런데 과연 이 코드가 정말로 ViewModel에게 전부 필요한 것일까?</p>\n<p>ViewModel의 원래 역할은 물리적인 View(DOM, Android, IOS, ..)를 대신하여 <u>순수한 메모리 객체로서의 View(가상의 View)</u> 를 만들어내는 것이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">static</span> #subjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line\"><span class=\"token keyword\">static</span> #inited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span>\n<span class=\"line\"><span class=\"token keyword\">static</span> <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        vm<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">#isUpdated <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span> #listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span> <span class=\"token comment\">// 메소드가 의존하고 있는 field</span></span>\n<span class=\"line\"><span class=\"token function\">addListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">removeListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">viewmodelUpdated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위의 Method와 Field는 ViewModel의 역할에 적합하지 않다.\n이것은 <u>Observer Pattern에서 Subject의 역할</u> 에 해당하는 부분이다.\n그래서 이 Method와 이것에 의존하고 있는 field를 <strong>역할에 따라 분리</strong>시켜야 한다.</p>\n<h3>ISP 적용하기</h3>\n<p>기존의 ViewModel을 다음과 같은 형태로 변경할 것이다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/RPB1Ri8m38RlVGeBBkp00Pw01s2dQRiW3YPs8LFgLgaBGeXt9qrXILUa7fBlintvLpUjejUkSeLdeoX7n_1Z-V9P4pku5G1l-5Tt-0qqQW23dc0cjThokcYwWxFcOmROWgocFZodVtwTF19jRQiix1FqNDLddl9G3FCIoqICO_J_s0NLd62EEUjaHE_lztkzc2zu3hBgvNT3g4pFxkYEhAyZSMkyRRJsYPHMEDp25mfXkToTB17BFgdXC5RP75b1CZ4rMMTad5rsosecKVOpHoE6rgmbPjfl4RDDF2OO-91auiziYtknOQ7mIpq0\" alt=\"uml diagram\">\n<p>보다시피 <code>add</code>와 <code>clear</code>가 추가되었다. add와 clear를 통해서 부모(ViewModel)에게 역할을 위임하도록 만들 것이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// Javascript는 다중 상속이 불가능하기 때문에</span></span>\n<span class=\"line\"><span class=\"token comment\">// ViewModelSubject가 ViewModelListener를 상속받아야 한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> ViewModelSubject <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  #info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line\">  #listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// add와 clear를 통해 부모에게 역할을 위임한다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelValue<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#info<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">clear</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#info<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">addListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    ViewModelSubject<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">removeListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> ViewModelSubject<span class=\"token punctuation\">.</span><span class=\"token function\">unwatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">viewmodelUpdated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>아직 코드상에 작성하진 않았지만 <em>addListener</em>에는 <code>ViewModelSubject.watch</code>가 생겼고,\n<em>removeListener</em>에는 <code>ViewModelSubject.unwatch</code>가 생겼다.</p>\n<p>기존에는 <code>notify</code>를 통해서 데이터를 노출 시켰는데 <u>논리적으로 생각했을 때 외부에서 명시적으로 알아야 하는 것은 <code>watch</code>와 <code>unwatch</code></u> 이다.\n그래서 watch와 unwatch를 노출시키고, notify는 감추도록 만들어야 한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>notify mechanism은 감추고, watch와 unwatch를 인터페이스로 공개한다.</p>\n</div>\n<p>이제 <code>notify</code>를 살펴봐야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">static</span> <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span>\n<span class=\"line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        vm<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>notify method 내부에 <code>this.#subject.add</code>가 있다.\n그 의미는 notify가 두 가지의 역할을 수행하고 있다는 것이고, 이런 코드를 유지하게 될 경우 문제가 생길 수 있다.\n각각의 메소드는 가능한한 한 가지의 역할만 수행하게 하여 <u>단일책임원칙(SCP, Single Responsibility Principle)이 지켜지도록</u> 해야한다</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line highlighted\">  <span class=\"token keyword\">static</span> #subjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> #inited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>#info<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">          v<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">          v<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited<span class=\"token punctuation\">)</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">watch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">unwatch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위에도 언급 했듯이 notify mechanism은 감추고 watch와 unwatch를 통해 interface로 제공해야 한다.\n그리고 notify는 하나의 역할만 수행하도록 하여 책임을 분산시킨다.</p>\n<h2>섬세한 권한 조정</h2>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">권한 조정이 필요한 이유</p>\n<p>java의 기본 권한은 private 이고, javascript의 기본 권한은 public이다.</p>\n<p>그래서 javascript는 개발자가 하나하나 권한을 조정하지 않으면 기본적으로 public이 되서 엉망이 된다.\ngetter, setter 등이 public 으로 노출되면 코드 조작이 매우 쉬워지고 문제가 생길 수 있다.</p>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">transaction</p>\n<p>transaction이 발견 되면 무조건 function으로 표현해야 한다. transaction이 코드에 섞여있을 경우 문제가 발생할 확률이 높다(응용 하기가 쉽지 않다).</p>\n</div>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line highlighted\"><span class=\"token keyword\">const</span> ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelSubject <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> attributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  #subKey <span class=\"token operator\">=</span> <span class=\"token string\">''</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">get</span> <span class=\"token function\">subKey</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subKey <span class=\"token punctuation\">}</span> <span class=\"token comment\">// read only</span></span>\n<span class=\"line\">  #parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">get</span> <span class=\"token function\">parent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#parent <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// code에서  꼭 필요한 것 : transaction.</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">setParent</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> subKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token comment\">// 함수를 통해서 transaction을 표현한다(한 번에 일어나는 일들)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#parent <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subKey <span class=\"token operator\">=</span> subKey</span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">descriptor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      v <span class=\"token operator\">=</span> newV</span>\n<span class=\"line\">      vm<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModelValue</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">define</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      obj<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'styles,attributes,properties'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> v <span class=\"token operator\">!=</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">invalid object k: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, v:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> </span>\n<span class=\"line\">          <span class=\"token comment\">// transaction을 method로 분리했다.</span></span>\n<span class=\"line highlighted\">          v<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>ViewModel에서 개선된 내용은 다음과 같다.</p>\n<ul>\n<li><u>권한 조정</u> : subKey, parent에 대한 getter와 setter를 만들었다.</li>\n<li><u>역할/책임에 따른 인터페이스 분할(ISP)</u>  : ViewModel은 ViewModelSubject를 상속하도록 변경했다.</li>\n<li><u>tranaction 도출</u> : parent에 대한 transaction 단위를 분리했다.</li>\n</ul>\n<h2>Visitor Pattern</h2>\n<p><code>Visitor Pattern</code>은 객체의 구조와 기능을 분리시키는 패턴이다. 이것을 이용하여 DOM에 관련된 기능을 MVVM과 분리시키는 작업을 할 것이다.</p>\n<p>먼저 Scanner를 살펴보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">scan</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> HTMLElement<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> binder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Binder</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkTiem</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> target</span>\n<span class=\"line\">    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkItem</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> binder<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">checkItem</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">binder<span class=\"token punctuation\">,</span> el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-viewmodel'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> binder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BinderItem</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Scanner의 핵심은 <u>ViewModel을 읽어들여서 Binder에 전달</u> 하는 것이다. 그리고 checkItem이 그러한 역할을 담당하고 있다.</p>\n<p>여기서 문제되는 부분은 <code>scan method</code> 이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">  <span class=\"token function\">scan</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> HTMLElement<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> binder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Binder</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkTiem</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> target</span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkItem</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> binder<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>DOM을 읽어 들이는 부분은 scanner의 역할이 아니고 Binder의 역할도 아니다.\n그래서 Vistor를 만든 후 Vistor에게 DOM Parsing에 대한 부분을 위임해야 한다.\n이럴 경우 Binder, Scanner, ViewModel 등은 DOM과 분리되고 결과적으로 현재 작성 중인 MVVM System은 <u>플랫폼(웹, 안드로이드, IOS, ...)에 대한 종속이 느슨해지게 될 것이다.</u></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// Visitor : 제어를 Visitor에게 위임한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> Visitor <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// target의 경우 HTML인지 Canvas인지 알 수 없다. 그래서 추상화 시켜야 한다.</span></span>\n<span class=\"line\">  <span class=\"token function\">visit</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">throw</span> <span class=\"token string\">'override'</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> DomVisitor <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Visitor <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 자식에서 구체적인 형을 알게 되는 것 : Generic</span></span>\n<span class=\"line\">  <span class=\"token comment\">// 언어가 어떤 기능을 지원 하느냐보단 그 개념을 어떻게 적용하느냐가 중요하다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">visit</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> target <span class=\"token punctuation\">,</span> _0 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _1 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 제어의 코드가 Visitor에게 몰리기 때문에 제어 역전이 발생한다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>firstElementChild</span>\n<span class=\"line\">    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token comment\">// loop 안에서 상호작용을 해야 한다.</span></span>\n<span class=\"line highlighted\">      <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// template method의 hook가 비슷한 역할</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Visitor를 작성했으니, Scanner의 코드를 다시 작성해야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #visitor</span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">visitor<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">,</span> DomVisitor<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#visitor <span class=\"token operator\">=</span> visitor</span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">scan</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> type9target<span class=\"token punctuation\">,</span> HTMLElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> binder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Binder</span></span>\n<span class=\"line\">    <span class=\"token comment\">// Scanner는 ViewModel을 읽어들이기만 하면 된다.</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-viewmodel'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 코드의 변화 요인은 이 부분 밖에 없다</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> binder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BinderItem</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token comment\">// DomScan은 Visitor에게 위임한다</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> binder</span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"custom-container tip\"><p class=\"custom-container-title\">설계라는 것</p>\n<p>설계는 객체의 재배치가 아닌 코드의 재배치이다. 객체에 작성된 코드가 정말로 이 객체의 것인지 판단할 수 있는 능력이 중요하다.</p>\n</div>\n<h2>추상 계층 일치시키기</h2>\n<p>의존성은 계층 관계를 보고 설정해야 한다.</p>\n<ul>\n<li>객체 간의 계약 = 의존성</li>\n<li>어떤 객체를 알고 있다 = 어떤 객체의 <em>스펙</em>을 알고 있다.</li>\n<li><u>니가(Scanner) 망한다 = 나도(Binder) 망한다</u></li>\n</ul>\n<p>현재 Scanner와 Binder의 경우 <u>추상 계층이 일치 하지 않는 상태다.</u></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #visitor</span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">visitor<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">,</span> DomVisitor<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#visitor <span class=\"token operator\">=</span> visitor <span class=\"token comment\">// 자식 계층(DomVisitor)을 사용하고 있다.</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">scan</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> type9target<span class=\"token punctuation\">,</span> HTMLElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> binder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Binder</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-viewmodel'</span><span class=\"token punctuation\">)</span> </span>\n<span class=\"line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> binder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BinderItem</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 부모 계층(Visitor)을 사용하고 있다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> binder</span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Visitor는 계층이 두 개(Visitor, DomVisitor)고, Scanner는 계층이 한 개이기 때문이다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILK8JaxCoqijGX9noSyDoopEBCb75eI9G9KhwDh1XQ2qWeskBf9U1Iw7rBmKe5q0\" alt=\"uml diagram\">\n<p>그래서 추상 계층은 서로 일치를 시켜줘야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #visitor</span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">visitor<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">,</span> Visitor<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#visitor <span class=\"token operator\">=</span> visitor</span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">visit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">scan</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">override</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line highlighted\"><span class=\"token keyword\">const</span> DomScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Scanner <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">visitor<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">,</span> DomVisitor<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>visitor<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 자식은 부모를 대체할 수 있다. LSP</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">scan</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> HTMLElement<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> binder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Binder</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-viewmodel'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span> binder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BinderItem</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">return</span> binder</span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILLmoSyDJaxCoqijGXB4504g2yiipYp9HnQ4YK2LA-ZQmOMWj8ADhYwINWMuKgWup2A7rBmKeBi0\" alt=\"uml diagram\">\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">도메인 패턴</p>\n<p><u>변하지 않는 부분과 변하는 부분을 나눠야 한다.</u></p>\n<p>추상 클래스(Scanner, Visitor)는 Native를 모르는 상태로 유지하고,\nNative는 구현 클래스(DomScanner, DomVisitor)에게 위임한다.</p>\n<p><em>Reference <a href=\"https://wikibook.co.kr/peaa/\" target=\"_blank\" rel=\"noopener noreferrer\">엔터프라이즈 애플리케이션 아키텍처 패턴</a></em></p>\n</div>\n<ul>\n<li>추상 레이어를 나누면 좋은점\n<ul>\n<li>새로운 변화가 생기거나 새로운 요구사항이 생겼을 때 수정이 아니라 추가로 해결한다.</li>\n<li>코드를 고치지 않고, 코드를 추가한다.</li>\n<li>수정하지 않고 확장한다.</li>\n</ul>\n</li>\n<li>단일책임원칙(OCP, Open Close Principle)을 지키기 위해서는 추상화가 필수다.</li>\n</ul>\n<p><strong>SOLID 원칙은 사실 설계를 잘 했을 때 얻어지는 결과물이라고 할 수 있다.</strong></p>\n<h2>전체 코드</h2>\n<p>&lt;&lt;&lt; @/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/example.html</p>\n<p><a href=\"https://github.com/JunilHwang/TIL/blob/master/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/example.html\" target=\"_blank\" rel=\"noopener noreferrer\">github에서 보기</a></p>\n<h2>설계 종합</h2>\n<h3>ViewModel</h3>\n<p>ViewModelValue의 경우 의존하는 객체가 많기 때문에 수정에 대한 위험성이 굉장히 크다</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fH2CjCBVVDJqb5vmQN9cMb9fUWYVfa5fUavgKMeGc79UQKfd9nOIXJiD7LnJGING1L5JPZTEtGxS8m0qE9We825ve8gZqEgNafm6000000\" alt=\"uml diagram\">\n<ul>\n<li>단방향 의존성 지향\n<ul>\n<li>현재 상태의 장점은 <u>단 방향 의존성만 있다는 것</u> 이다.</li>\n<li>객체를 설계 할 때 순환 의존성이 생기지 않도록 항상 주의 해야 한다.</li>\n</ul>\n</li>\n<li>도메인 분리\n<ul>\n<li>ViewModel은 <u>DOM에 의존적이지 않다.</u></li>\n<li>다른 의미로 <u>플랫폼에 종속적이지 않다.</u></li>\n</ul>\n</li>\n<li>ViewModelValue에게 모여든다\n<ul>\n<li>화살표가 모인다는 것은, 무거운 객체라는 의미다</li>\n<li>무거운 객체는 수정의 여파가 매우 크다.</li>\n<li>즉, 쉽게 수정 하면 안 되는 객체다.</li>\n</ul>\n</li>\n</ul>\n<h3>Scanner</h3>\n<p>Scanner에는 Visitor를 사용 하여 DOM과 관련된 기능을 분리했다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fH24vEpCjBBO9mNF9pKVXXcSMP9Va8IHYV2wfAmKPN5raJJ5ZN3guLIiDKmeGTKlDIW6u00000\" alt=\"uml diagram\">\n<ul>\n<li>간접적인 의존\n<ul>\n<li>DomScanner와 DomVisitor는 _간접적으로 의존_하고 있다.</li>\n<li>어쨌든 DomScanner는 DomVisitor를 알고 있어야 한다.</li>\n</ul>\n</li>\n<li>추상 계층 일치시키기\n<ul>\n<li>Scanner와 Visitor의 추상 계층을 동일하게 만들어야 한다.</li>\n<li>추상 계층이 일치하지 않을 경우, Method의 <strong>변화율</strong>이 달라지게 된다.</li>\n<li>Method의 변화율이 달라질 경우, 수정이 더욱 빈번하게 발생한다.</li>\n<li>추상 계층을 일치시키면 수정 대신 <u>기능 추가로 대체</u> 할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3>Binder</h3>\n<p>Binder는 상당히 위험한 객체이다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/VP9D3i8W48Ntd88BS0DZ6dLZeec9IVS8iy2qaC0qNj-6d_9NNPNtCNqCRnWSSelBF171hQGdfINOi7uAhdKI5pDNUbHEeScRbHuLVEv6mjJ8v_9wWy26tfH3A8mZ7lcqGDdL5M4E-c6D0EVISMUZXGMEa3dftEc1iRwJ5jHLUpRisBROUVmfyR8-X18Ia_My23fXxnVYZTzKcJ092QrucrhEZBBL81Ryo2MElMipRSI_MNcp4kRWjvNttPdC05gkp-qB\" alt=\"uml diagram\">\n<ul>\n<li>Binder는 뻗어나간다.</li>\n<li>화살표가 뻗어 나가는 것은, 위험한 객체라는 의미다.</li>\n<li>Binder를 알고 있는 객체를 건드릴 경우 깨질 수 있다.</li>\n<li>제일 민감하고 예민한 객체가 된다.</li>\n</ul>\n<h3>플랫폼 독립적 구조</h3>\n<p>여태까지 작성한 MVVM System은 플랫폼에 독립적이다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/VP9D2i8m48NtEKN0TMuWKjIDe208tSTa2f4sWMIArxTj_jf4tMM-lioyladZa5iSXvu8RYKzAYt1-lD3SArZSJP3gEckuzp3LZc59Yj2lL70-sOaz7I6NG4Vu_C50WjwLGuX3KwuvVq8QvSNXC7NTsi4E1UTd8mM5ZX2ujuHgKRGFMErdH9iLT_Qi4Ffi-hnHxAKso6Ka1Ztp7Fw2I_zVFmnzg2CcFYO9fnMcOEZR6eG13zo2M-XiXa_XDji_MThcBUIzp3thTT36j1oUeCV\" alt=\"uml diagram\">\n<p><u>DomScanner, DomVisitor, ConcreateProcessor 이렇게 세 개만 DOM에 대한 의존성이 있다.</u>\n나머지는 <code>ViewModel</code>을 만드는 것들이다. <strong>즉, MVVM의 핵심은 ViewModel을 만드는 것이다.</strong>\n그래서 DomScanner, DomVisitor, ConcreateProcessor 등만 교체하면 Android, IOS 에도 사용할 수 있다.</p>\n<p><strong>이것이 가상화(추상화) 되어 있는 렌더링 시스템이다.</strong></p>\n<p>설계를 할 때 특정한 Domain과 관련된 부분은 격리를 하는 것을 항상 지향해야 한다.</p>\n<h2>약간의 단점</h2>\n<ul>\n<li>MVVM의 핵심은 Observer Pattern이다.</li>\n<li>Observer Pattern은 구현과 설계도 어렵고 성능 자체에 대한 비용도 있다.</li>\n</ul>\n<p>그래서 현실적인 대안으로 MVVM을 사용할 때 Observing을 하는 것 보다 Binder를 수동으로 calling 하는 경우가 생각보다 많다.</p>\n",
      "date_published": "2020-02-22T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "03 자바와 객체지향 | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/03-Java-As-OOP/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/03-Java-As-OOP/",
      "summary": "클래스, 객체, 추상화, 상속, 캡슐화, 다형성 등 객체지향의 기본적인 개념에 대해 이해하여봅시다.",
      "content_html": "\n<p>작성 예정입니다.</p>\n",
      "date_published": "2020-02-20T13:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "02 프로그래밍 언어로서의 자바 | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/02-Java-As-PL/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/02-Java-As-PL/",
      "summary": "프로그래밍 언어로서의 Java가 가지고 있는 여러 가지 특성들을 알아보고 이해하여봅시다.",
      "content_html": "\n<p>자바는 근본적으로 프로그래밍 언어다.\n자바가 어떻게 작동하는지,\n변수가 메모리에 어떻게 저장되고 사용되는지,\n메서드가 어떻게 호출되고 메모리에 어떤 변화를 일으키는지 살펴볼 필요가 있다.</p>\n<p>그리고 앞서 언급한 메모리는 JVM에 존재하는 <u>가상의 메모리 구조</u> 이다.</p>\n<h2>Java Virtual Machine</h2>\n<p>일단 java source file 을 실행하기 위해서는 <code>JVM(Java Virtual Machine)</code> 이라는 것이 필요하다.</p>\n<p>|Real World|Java Virtual World|대응|\n|:</p>\n",
      "date_published": "2020-02-19T13:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "01 사람을 사랑한 기술 | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/01-Loved-Human/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/01-Loved-Human/",
      "summary": "객체지향이라는 개념이 나오기 까지의 이유와 간략한 역사를 소개합니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">신 기술은 이전 기술의 어깨를 딛고</p>\n<p>이미 있던 것이 후에 다시 있겠고, 이미 한 일을 후에 다시 할지라.<br>\n해 아래는 새 것이 없나니, 무엇을 가리켜 이르기를 보라.</p>\n<p>이것이 새 것이라 할 것이 있으랴, 우리 오래 전 세대에도 이미 있었느니라.</p>\n</div>\n<p><u>컴퓨터는 멍청하게도(?) 0과 1만 이해할 수 있다.</u>\n그런 컴퓨터를 이용하여 우리는 어떻게 프로그래밍을 할 수 있었을까?\n그리고 왜 그토록 많은 언어가 생겼으며 객체지향, 함수지향 같은 개념들이 생긴걸까?</p>\n<p>이러한 의문들을 <strong>프로그래밍 언어가 발전해온 과정</strong>을 통하여 이해하여 보자.</p>\n<h2>기계어에서 객체지향까지</h2>\n<p>일단 0과 1이 어떻게 객체지향까지 도달하였는지 알아보자.</p>\n<h3>기계어</h3>\n<p>기계어는 0과 1로 이루어진 굉장히 <strong>비 인간적인 언어</strong>다.\n사실 컴퓨터는 우리가 생각하는 것 만큼 똑똑하지 않다.\n다만 사람보다 <strong>대단히 성실하며 대단히 정확</strong>하다.</p>\n<p>사람은 숫자라는 개념도 알고, 문자라는 개념도 알고 있다.\n정수와 소수를 구분할 수 있으며 머릿속을 쭉 스캔하지 않아도 자신이 모르는 것에 대해서는 모른다고 말할 수 있는 직관이 있다.</p>\n<p>더하기 빼기는 물론 곱하기 나누기는 대부분의 사람이 기본적으로 할 수 있다.\n조금 더 배운 사람들은 함수나 방정식, 미분, 적분, 기하와 벡터 같은 어려운 개념도 안다.</p>\n<p>그러나 <u>컴퓨터는 오직 0과 1 두 가지의 숫자만 이해할 수 있으며</u> 할 수 있는 연산 또한 많지 않다.\n다만 컴퓨터는 앞서 말했지만, 대단히 성실하며 대단히 정확하다.</p>\n<p>지금 필자의 컴퓨터의 CPU는 3.4 GHz 라는 연산을 할 수 있다.\n쉽게 말해서 <u>1초 동안 3,400,000,000(3.4 * 10^9) 번의 연산을 할 수 있다</u> 는 이야기다.\n뿐만 아니라 <u>그렇게 많은 연산을 틀리지 않고 정확하게</u> 할 수 있다.\n인간은 이런 일이 불가능하다.</p>\n<p>성실하고 정확하지 못했던 인간은, 대단히 성실하고 정확한 컴퓨터에게 0과 1로 만들어진 명령어를 전달하여 이를 수행하도록 하였다.\n하지만 0과 1로만 이루어진 연산은 인간이 이해하기 어려웠고 정말 머리 좋은 사람이 아닌 이상 컴퓨터를 다루긴 어려웠다.</p>\n<p>하지만 사람들은 컴퓨터를 더욱 잘 다루고 싶어했고,\n서로 머리를 맞대고 생각하다가 어셈블리어가 탄생했다.</p>\n<h3>어셈블리어</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">어셈블리어의 탄생</p>\n<p>기계어의 명령들을 일상 용어로 표현하고 기계어가 알 수 있는 기계어로 번역하게 하면 어떨까?</p>\n</div>\n<p>위와 같은 생각에서 출발한 것이 바로 <code>어셈블리어</code>이며,\n<strong>기계어 명령과 일상 용어를 1:1로 매칭하는 코드표</strong>가 만들어졌다.</p>\n<p>그리고 그 코드표를 어셈블리어라고 불렀으며,\n<strong>어셈블리어를 기계어로 번역해주는 소프트웨어</strong>를 <code>어셈블러</code>라고 했다.</p>\n<p>하지만 그 당시에 <code>애드삭</code> <code>유니박</code> 같은 여러 종류의 컴퓨터가 있었고\n(지금으로 따지면 Mac과 Window 같은),\n<u>어셈블러와 기계어 또한 컴퓨터의 종류 마다 존재했어야 했다.</u></p>\n<img src=\"https://www.plantuml.com/plantuml/svg/VP91Yi8m68NtEKLmML1eidCXtcEOHMAB2Xf1urv4eOFBqGeYs8K8WaBHOV1CJRo3ITggwPJPFTx_lhpy8SqH9qC-xlV0q6znmjez7rOSHwuYyRsLqxFZG1dDvEO8PVWZvu6uBSNXf7G5aX4axZlsX78akSN9TVOCez9mEiE5_cqa5e68L__tKxi_XyhxAIeDfpCCs80hMrm2kJwBto299sR2k9kDv69_3x-i4GA0kB1Q_UXqFSzdd_f215a60WHR1awPXdeFM8T_tkorvkvapb91h8Ec7L23KeCMrxLGQb3wXkhQMiqifCujA7FDJ2bVIxLBhhI72Wg3fiyyzNCU\" alt=\"uml diagram\">\n<h3>C 언어</h3>\n<p>C 언어에는 <code>컴파일러</code>가 존재했으며,\nC 언어로 작성된 소스코드를 컴파일러가 알아서 각각의 컴퓨터 환경에 맞는 목적 파일을 만들어줬다.</p>\n<p>즉, 어셈블리어처럼 각각의 컴퓨터 환경에 맞는 소스코드를 작성할 필요가 없어진 것이다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILLGSbPuqzRpfck9mjkUdZTpzoWf91Oh92ChUBrywPjPAnNUxDu2KV5w_XgmeaH3BAfUhrhvPa4Zibc9HiZAtipfUDtVycRM1gn6bXlYL8jfSBaH5rUYeOAkRdH6PafAQbuiI7kY4Og04LW5d0zqIpao7sH4ieAk7SWlO1faWY5Om4Z12kW2c0ELmFg0ykZ23gbvAS001G00\" alt=\"uml diagram\">\n<p>|-|기계어|어셈블리어|C언어|\n|:</p>\n",
      "date_published": "2020-02-18T13:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "00 책 소개 | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/00-Intro/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/00-Intro/",
      "summary": "김종민님이 저술한 \"스프링 입문을 위한 (자바) 객체지향의 원리와 이해\"에 대한 소개입니다.",
      "content_html": "\n<p>본 포스트는 <a href=\"https://wikibook.co.kr/java-oop-for-spring/\" target=\"_blank\" rel=\"noopener noreferrer\">스프링 입문을 위한 자바 객체지향의 원리와 이해</a>라는 책에 대한 소개입니다.</p>\n<h2>책을 구매하게 된 계기</h2>\n<p>최근에 Spring과 OOP 공부를 하면서 2년전에 참고했던 <a href=\"https://expert0226.tistory.com/category/%EA%B0%95%EC%A2%8C/Spring%203.0\" target=\"_blank\" rel=\"noopener noreferrer\">여름나라 겨울이야기</a> 라는 블로그의 글이 생각나서 다시 정독했다.</p>\n<p>그 당시에는 두루뭉실하게 와닿았던 개념들이었는데, 이제 읽어보니 굉장히 이해하기 쉽게 작성된 포스트였다.\n그리고 그 블로그의 저자가 출간한 책이 있다는 것을 알았고, 바로 구매했다.\n책의 내용과 구성은 기대를 저버리지 않았다.\nOOP의 개념을 더욱 확고하게 정립할 수 있었고 Spring을 사용하는 목적과 Spring이 지향하는 방향에 대해 이해할 수 있었다.</p>\n<h2>저자 소개</h2>\n<p>저자에 대한 정보는 아래의 페이지들에서 자세하게 알 수 있다.</p>\n<ul>\n<li><a href=\"https://expert0226.tistory.com/\" target=\"_blank\" rel=\"noopener noreferrer\">블로그 - \"여름나라 겨울이야기\"</a></li>\n<li><a href=\"https://github.com/expert0226\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></li>\n<li><a href=\"https://kr.linkedin.com/in/%EC%A2%85%EB%AF%BC-%EA%B9%80-911410100\" target=\"_blank\" rel=\"noopener noreferrer\">링크드인</a></li>\n<li><a href=\"https://www.facebook.com/NoviceRambo\" target=\"_blank\" rel=\"noopener noreferrer\">페이스북</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCvQOwKeXLw2jwecuL3bcw0w/videos\" target=\"_blank\" rel=\"noopener noreferrer\">유튜브 - \"초보람보\"</a></li>\n</ul>\n<h2>책을 읽으면서 인상 깊었던 점</h2>\n<h3>이해하기 쉽도록 전달</h3>\n<p>기존에 알려진 지식을 그대로 전달하는 것이 아닌 저자 나름대로의 해석을 통해 독자가 이해하기 쉽도록 전달하는 게 좋았다.\n예를 들면 다음과 같다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Define of Spring Framework</p>\n<p>Spring Framework를 설명하는 공식적인 정의는 <u>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 어플리케이션 프레임워크</u> 이다.</p>\n<p>그런데 저자는 다음과 같이 정의한다.</p>\n<p><u>\"객체지향 프로그래밍을 위한 프레임워크\"</u> <u>\"OOP Framework\"</u></p>\n</div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Define of DIP(의존 역전 원칙)</p>\n<p>로버트 C.마틴이 말하는 DIP(Dependency Inversion Principle)는 다음과 같다.</p>\n<ul>\n<li>\"고차원 모듈은 저차원 모듈에 의존하면 안 된다. 이 두 모듈 모두 다른 추상화 된 것에 의존해야 한다.\"</li>\n<li>\"추상화된 것은 구체적인 것에 의존하면 안 된다. 구체적인 것이 추상화 된 것에 의존해야 한다.\"</li>\n<li>\"자주 변경되는 구체(Concrete) 클래스에 의존하지 마라.\"</li>\n</ul>\n<p>그리고 저자가 이를 직관적으로 해석한 내용은 다음과 같다.</p>\n<ul>\n<li>\"자신보다 변하기 쉬운 것에 의존하지 마라.\"</li>\n</ul>\n</div>\n<h3>잘못된 개념 바로잡기</h3>\n<p>그리고 잘못된 개념을 바로 잡는 것들도 인상적이었다.</p>\n<p>객체지향에서는 <code>상속(inherit)</code>이라는 단어를 많이 사용한다. 그런데 사실 이 단어는 잘못 된 것이고 <code>확장(extend)</code>가 맞다.</p>\n<p>또한 클래스 상속 <u>코드를 작성할 때도 inherit이 아니라 extend를 사용한다.</u></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"java\" data-title=\"java\"><pre><code><span class=\"line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>상속은 일종 <code>가계도</code>라고 생각하면 된다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fHK7exTS6RgIslDxMyMTwWf91Oh908bK0LJK8IdRm4B9GC5NezPGUOdyB5bQYWgsi7L9i4ffEXT0fNie9kT4PcIafgNYoGvv2Qbm9q0000\" alt=\"uml diagram\">\n<p>그리고 여기서 만들어지는 코드는 이렇다.</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"java\" data-title=\"java\"><pre><code><span class=\"line\">할아버지 father <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 아버지<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>위의 코드가 어색하다면 객체지향을 잘 이해하고 있는 것이다.</p>\n<p>객체지향은 <code>다형성(Polymorphism)</code>이 지켜져야 하고, 다형성에는 <code>대체가능성</code> 이라는 개념이 있다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">대체가능성</p>\n<p>확장(extends)된 객체는 원본으로 대체 가능하다.</p>\n</div>\n<p>일단 <u>\"아버지는 할아버지인가?\"</u> 에 대해서도 \"그렇다\" 라고 할 수 없으며,<br>\n더불어 \"<u>아버지가 할아버지를 대체할 수 있는가?</u>\" 에 대해 \"그렇다\" 라고 답할 수도 없다.</p>\n<p>그렇기 때문에 <em>\"상속\" 이라는 단어와 개념은 잘못 된 것</em>이다.</p>\n<p>그럼 다음의 경우에는 어떨까?</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fHK7hTF_FrcZrA2ed52ebGeRVzQzxCMV1wwGomQ19KzCti2MywrhwPkmKicWnJsxVsrVOMi50ALEZLvWMlvq7qfd9n9Ihewje13Ka2qybGEWLAft8bA-X6PsIcfAJcnG95Kv1ugLmEgNafG9S20000\" alt=\"uml diagram\">\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"java\" data-title=\"java\"><pre><code><span class=\"line\">동물 뽀로로 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 펭귄<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>뽀로로는 펭귄이면서 동물이다. 그러므로 대체가능성이 성립한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Define of Class(클래스)</p>\n<p>클래스는 사전적인 의미로 <code>집합</code> <code>종류</code> <code>속하다</code> <code>분류하다</code> 등이 있다.\n그렇기 때문에 <u>\"클래스를 상속하다\"는 것은 잘못된 표현이다.</u></p>\n<ul>\n<li><s>클래스를 상속하다</s></li>\n<li><strong>클래스를 확장하다</strong></li>\n</ul>\n</div>\n<p>이렇듯 저자는 객체지향에서 통용되고 있는 잘못된 지식을 이해하기 쉽게 바로 잡도록 도와준다.</p>\n<h3>인간지향적인 객체지향</h3>\n<p>흔히들 객체지향은 인간 세상을 코드에 반영한 것이라고 한다.</p>\n<p>그리고 저자는 이를 예제에 적절하게 반영하여 어째서 객체지향이 인간 중심적인지를 보여준다.</p>\n<h2>결론</h2>\n<p>이 책은 자바와 스프링을 전문적으로 다루는 책이 아니다.\n말 그대로 나처럼 객체 지향의 개념을 이해하고자 하는 사람들에게 필요한 책이다.\n저자는 다음 조건에 충족하는 사람들이 이 책을 접했을 때 좋다고 말한다.</p>\n<ul>\n<li>객체 지향의 특성과 설계 원리를 이해하고자 하는 개발자</li>\n<li>스프링 프레임워크에 입문하는 데 기초 지식이 부족하다고 느끼는 개발자</li>\n</ul>\n<p>그리고 나 또한 그렇게 생각한다.\n<u>여태 까지 내가 읽어본 책 중에서 제일 명료하고 이해하기 쉬운 책이다.</u></p>\n",
      "date_published": "2020-02-17T13:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "MVVM System 개선하기 (1)",
      "url": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/03-Strategy-Observer/",
      "id": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/03-Strategy-Observer/",
      "summary": "다양한 Design Pattern을 이용하여 MVVM System을 개선하는 방법에 대해 소개합니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 포스트는 아래의 내용들을 토대로 정리한 것입니다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=D450fPGffTg\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 86기 3회차 동영상</a></p>\n</div>\n<p>Strategy, Observer, Composite 등의 Design Pattern 을 이용하여 <a href=\"CodeSpitz/Object-Oriented-Javascript/02-MVVM\">앞서 작성한 MVVM System</a>을 개선하는 방법에 대해 기술합니다.</p>\n<h2>Strategy Pattern</h2>\n<p><code>Strategy(전략)</code>이란 쉽게 말해서 프로그램의 핵심적인 부분을 의미한다.</p>\n<h3>Defined</h3>\n<ul>\n<li>목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등</li>\n<li>Stategy Pattern: <strong>전략을 쉽게 바꿀 수 있도록</strong> 해주는 디자인 패턴</li>\n<li><strong>같은 문제를 해결하는 여러 알고리즘</strong>이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함</li>\n</ul>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShCAqajIajCJbK8BYbAB4bDh-HopWUALPGeQEd2nHIi5A2YRwPFUDCo1oxnUkaUXJTDQzxCMlbswfpNtKlqkE1QR6fqTHMKNcrTytP6ovjDMmoLu9eySmjoKdDJGJOR6EBKO8HTWn6NGsfU2j3f0000\" alt=\"uml diagram\">\n<h3>Strategy 분석 및 추출</h3>\n<p>앞서 작성한 MVVM System의 <code>Binder</code>를 분해해보면 다음과 같다.</p>\n<ul>\n<li>\n<p>먼저 Binder에 대한 <code>Structure(자료구조)</code> 부분이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  #items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> BinderItem<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>viewmodel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>el</span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">v</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> viewmodel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><code>자료구조</code>를 <code>Control(제어)</code>하는 부분이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> BinderItem<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>viewmodel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>el</span>\n<span class=\"line highlighted\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">v</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> viewmodel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>마지막으로 Binder의 핵심인 <code>Strategy(전략,알고리즘)</code>에 해당하는 부분이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> BinderItem<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>viewmodel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>el</span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v</span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v</span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v</span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> el<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">v</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> viewmodel<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p><code>Strategy</code>는 <code>Structure</code>를 가지고 있어야 작동하는데 이 때 <code>Composite Pattern</code>을 이용하여 해결한다.\nStrategy Pattern을 사용한다는 것은 <strong>알고리즘이 사용된 Code를 object(객체)로 바꾸는 것</strong>이라고 할 수 있다.\n그리고 이 때 <strong>Binder는 Strategy에 대한 Dependency</strong>가 생기게 된다.</p>\n<h3>Dependency Injection</h3>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Dependency가 발생하는 이유와 Dependency Injection</p>\n<p>객체지향에서는 자신이 가지고 있는 문제를 외부에 있는 객체의 도움(Strategy)을 통해 해결하기 때문에 자연스럽게 Dependency가 생기게 된다.\n반대로 외부 객체의 도움이 없다면 스스로 문제를 해결해야 한다는 것인데, 그 의미는 코드의 수정이 빈번하게 일어난다는 것이다.</p>\n<p>의존성이 생겼을 때 내부에 <code>Sub Type</code>을 만드는 경우가 있고, 외부에서 <code>Type을 공급(Injection)</code> 받는 경우가 있다.\nSub Type 사용시 계속에서 code를 수정 하게 되기 때문에 code에서 object로 변경한 의미가 없어지게 된다.\n따라서 type은 외부에서 주입 받아야 한다. 이것을 <code>DI(Dependency Injection)</code> 라고 한다.\n그래서 Strategy를 도출하는 순간 자동으로 <code>Dependency Injection</code>이 생기게 된다.\n<strong>반대로 Dependency는 있는데 DI가 생기지 않았다면 그것은 잘못된 것이다.</strong></p>\n</div>\n<p>이제 Binder의 Strategy가 무엇인지 알았으니 이것을 <strong>추출하여 위임</strong> 해야 한다.\n<strong>이러한 행위를 <code>Composition</code>이라고 한다.</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// Binder의 Strategy가 될 Class</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> Processor <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  category<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">category</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>category <span class=\"token operator\">=</span> category</span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// template method</span></span>\n<span class=\"line\">  <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> _0 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">                         _1 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">                         _2 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_process</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// hook method</span></span>\n<span class=\"line\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'override'</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>코드를 보면 <strong>process method의 책임을 _process method에게 위임</strong>한다.\n이 때 processor class를 상속 받아서 _process를 구현 하게 되는 데,\n<em>구현되는 method(_process)</em> 를 <code>Hook Method</code>라고 한고,\n<em>Hook method(_proces)에게 책임을 위임하게 되는 method(process)</em> 를 <code>Template Method</code> 라고 한다.</p>\n<p>이것을 Template Method Pattern 이라고 한다. 자세한 내용은 <a href=\"https://gmlwjd9405.github.io/2018/07/13/template-method-pattern.html\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>를 참고하면 된다.</p>\n<hr>\n<ul>\n<li>\n<p><code>process</code></p>\n<ul>\n<li>Template method</li>\n<li>Hook Method에게 책임을 위임한다.</li>\n</ul>\n</li>\n<li>\n<p><code>_process</code></p>\n<ul>\n<li>Hook method</li>\n<li>template method에서 호출되는 method</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><code>Processor</code>를 작성했으면, <code>Binder</code>를 수정해야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line highlighted\">  #processors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// category당 한 개의 processor를 사용하게 하기 위함</span></span>\n<span class=\"line highlighted\">                    <span class=\"token comment\">// 자료구조를 선택할 때 심각하게 생각해야 한다.</span></span>\n<span class=\"line\">                    </span>\n<span class=\"line\">  <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> BinderItem<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#item<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line highlighted\">  <span class=\"token comment\">// Strategy를 주입 받는다.</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">addProcessor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> Processor<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#processors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token comment\">// Render에서 주입 받은 Strategy를 사용한다.</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> processores <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#processors<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#item<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>viewmodel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>el</span>\n<span class=\"line highlighted\">      processores<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>pk<span class=\"token punctuation\">,</span> processor<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">[</span>pk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">          processor<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"custom-container tip\"><p class=\"custom-container-title\">알고리즘의 일반화(Generic Algorithm)</p>\n<ul>\n<li>structure를 남기고 Strategy을 type으로 내보낸다.</li>\n<li>Binder는 processor의 protocal을 알고 있다 = 의존성이 생긴 것</li>\n<li>이러한 과정을 <strong>알고리즘의 일반화(Generic Algorithm)라고 함</strong> → 제일 어려운 부분</li>\n<li>안정된 Generic Algorithm은 protocal이 적다 → 만들기가 어렵다.</li>\n</ul>\n</div>\n<p>그리고 Strategy를 주입하는 Client Code는 다음과 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Processor</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">'styles'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Processor</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">'attributes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Processor</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">'properties'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Processor</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">v</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fHSChCIqajWh03YlAJKukByuku8A8AkdPs2445AmMNr89Ke4HUSgM2PrvMQd99PduUbmDG26WS0000\" alt=\"uml diagram\">\n<ul>\n<li>Binder가 Processor를 주입 받는다</li>\n<li>의존성은 단 방향으로만 되어있어야 한다.</li>\n<li><s>Binder가 Processor를 짝사랑한다.</s></li>\n</ul>\n<h3>정리</h3>\n<ul>\n<li>구조적인 부분과 strategy 부분을 나눈다.</li>\n<li>strategy의 공통점을 찾는다.</li>\n<li>strategy와 어떻게 상태와 관계를 맺는지 찾는다.</li>\n<li>앞에서 도출된 형(type,class,interface)을 가지고 알고리즘을 고치는 것</li>\n</ul>\n<h2>Observer Pattern</h2>\n<p>기존에는 Observer 대신에 Call을 사용했다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILK8oqmjH-8wPUQbf1OX2VZcfwJcS2Mcf-QLWDL2-5mWfe9kT4PcIafgNYnK5LZGnaPN5sOCX089sTaXT2jOAMXf9IVcv6XfSK44m7eGfaC4TL4qSJcavgK0dGu0\" alt=\"uml diagram\">\n<p>이제 Call을 이용하는 방식에서 Observer Pattern을 이용하는 방식으로 바꿔야 한다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILK8oqmjH-8wPUQbf1OX2VZcfwJcS2Mcf-QLWDL2-5mWfe9kT4PcIafgNYnK5LZGnaPN5sOCX5BGjRD3w5MmKl1FAaujAak5IGDre4ZxvPTafbLoGRXWun0MGmHrKKpaSaZDIm7w2W00\" alt=\"uml diagram\">\n<p>Observer Pattern에서 중요한 점은 <strong>감시 당하는 쪽(Subject)이 변화가 생기면 Observer(Listener)에게 변화의 내용을 알려줘야 한다(Notify).</strong></p>\n<p>Javascript는 변화의 감지를 위해 사용하는 다음과 같은 API가 있다.</p>\n<ul>\n<li><code>Proxy</code> : Babel로 Converting이 되지 않는다 = 실무에서 사용할 때 제약이 있다.</li>\n<li><code>defineProperty</code> : ES5 까지 지원한다 =  실무 상에서 사용할 수 있다.</li>\n</ul>\n<p>이러한 이유로 defineProperty를 이용하여 만들어볼 것이다.</p>\n<h3>Listener</h3>\n<p>일단 변화의 감지에 대한 내용을 수신하는 객체가 필요하다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> ViewModelListener <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">viewmodelUpdated</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">throw</span> <span class=\"token string\">'override'</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Listener는 Binder와 ViewModel이 상속 받아 사용할 것이다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListner <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// .. 생략</span></span>\n<span class=\"line\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListner <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// .. 생략</span></span>\n<span class=\"line\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>ViewModel에도 Listener가 필요한 이유는, <u>자식의 변화를 부모가 알아야 하기 때문이다.</u></p>\n<h3>ViewModel</h3>\n<p>ViewModel에서 notify는</p>\n<p><code>Object.defineProperty</code>는 객체에 직접 새로운 속성을 정의하거나 이미 존재하는 속성을 수정한 후 그 객체를 반환한다.</p>\n<p><code>Parameter</code>는 다음과 같다.</p>\n<ul>\n<li><code>obj</code> 속성을 정의할 객체</li>\n<li><code>prop</code> 새로 정의하거나 수정하려는 속성의 이름</li>\n<li><code>descriptor</code> 새로 정의하거나 수정하려는 속성을 기술하는 객체\n<ul>\n<li><code>enumerable</code> iterator에 노출 가능 여부(true|false)</li>\n<li><code>get</code> prop에 대한 getter</li>\n<li><code>set</code> prop에 대한 setter</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">descriptor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token parameter\">newV</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token comment\">// 값을 대체 후, isUpdated에 등록하고, listener에게 변경된 내역이 전달된다.</span></span>\n<span class=\"line highlighted\">      v <span class=\"token operator\">=</span> newV</span>\n<span class=\"line highlighted\">      vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModelValue</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">defineProperties</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span></span>\n<span class=\"line\">      obj<span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> attributes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> properties<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> events<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  #isUpadated <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span> #listenters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>checker<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'styles,attributes,properties'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">addListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listenters<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">removeListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listenters<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listenters<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">viewmodelUpdated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpadated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 코드의 핵심은 <strong>descriptor에 정의한 setter를 통해서 값을 대체 한 다음 isUpdated에 변경된 내역을 추가하는 것이다.</strong></p>\n<h3>Composite</h3>\n<p>Composite Pattern은 <strong>위임을 반복</strong>하여 취합한다 = <strong>동적위임</strong></p>\n<p>이것을 ViewModel에 적용해야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">static</span> #subjects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span></span>\n<span class=\"line highlighted\">  <span class=\"token keyword\">static</span> #inited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> descriptor <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 생략 */</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> defineProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 생략 */</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">static</span> <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 변화를 감지하고 Observer(Binder)에게 알린다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#inited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#subjects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 만들어진 ViewModel에 대해 반복문을 돌린다.</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 변경된 내역이 있을 경우</span></span>\n<span class=\"line highlighted\">          vm<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Listener에게 알리고</span></span>\n<span class=\"line highlighted\">          vm<span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 변경된 내역을 삭제한다.</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  #isUpadated <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span> #listenters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> attributes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> properties<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> events<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line highlighted\">  subKey <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  </span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>checker<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'styles,attributes,properties'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">descriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">          v<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 역 참조할 수 있어야 한다. </span></span>\n<span class=\"line highlighted\">          v<span class=\"token punctuation\">.</span>subKey <span class=\"token operator\">=</span> k</span>\n<span class=\"line highlighted\">          v<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 자식이 변화했을 때 변화를 알아차린다.</span></span>\n<span class=\"line highlighted\">                              <span class=\"token comment\">// ViewModel 은 Subject이자 Listener 인 경우가 빈번하다.</span></span>\n<span class=\"line highlighted\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ViewModel이 생성되는 시점에 변화의 감지를 시작한다.</span></span>\n<span class=\"line highlighted\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// key가 추가/수정/삭제 되지 않도록 한다.</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">addListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listenters<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">removeListener</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> ViewModelListener<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listenters<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#listenters<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">viewmodelUpdated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpadated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#isUpdated<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// subKey가 생겼기 때문에 ViewModelValue 또한 변경해야한다. </span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> ViewModelValue <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  subKey<span class=\"token punctuation\">;</span> category<span class=\"token punctuation\">;</span> k<span class=\"token punctuation\">;</span> v<span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 코드의 핵심 적인 내용은 <u>최상위의 ViewModel에서 모든 ViewModel의 변경내역을 취합하여 Binder에게 알리는 것</u> 이다.</p>\n<h3>Observer</h3>\n<p>이제 Observer 역할을 하는 Binder의 입장을 살펴봐야 한다.\nBinder는  ViewModel이 보내는 <strong>notify를 감지</strong>하여 <em>ViewModel의 값을 View에 Rendering</em> 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Binder <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> ViewModelListener <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  #items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span> #processors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> BinderItem<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">addProcessor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> Processor<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*생략*/</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*생략*/</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">watch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    viewmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">unwatch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    viewmodel<span class=\"token punctuation\">.</span><span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">  <span class=\"token function\">viewmodelUpdated</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">updated</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line highlighted\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> vmName<span class=\"token punctuation\">,</span> el <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      items<span class=\"token punctuation\">[</span>vmName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>rootViewModel<span class=\"token punctuation\">[</span>vmName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">]</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    updated<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> subKey<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>items<span class=\"token punctuation\">[</span>subKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>subKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#processors<span class=\"token punctuation\">[</span>category<span class=\"token punctuation\">]</span></span>\n<span class=\"line highlighted\">      <span class=\"token comment\">// injection 이 안 되어 있을 경우  return</span></span>\n<span class=\"line highlighted\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>processor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></span>\n<span class=\"line highlighted\">      processor<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><img src=\"https://www.plantuml.com/plantuml/svg/VP7D2i8m48JlUOezQg47Vqv5fEXP1K4znsQr2scsj6l5jpVHAhQYjp3pxMGsIMlHbLmAgpAs5ZCXTZKiSx9cJtXTiK4BN1ciOAHAZr96fNO2MsRf4-CEiI0NnASrwLXXi3McgfiqY-FNP0AROurLWuE3bYmVAiU2m8stUWKJk9H62vf_o9g5JZVLq-DutjibWQMs5gAeyL8HfDqpF8e-uhzck2Yv9i4_JDkWAuS2xuL_tzmYWNwyNW9R30gviqhzoN_X7G00\" alt=\"uml diagram\">\n<ul>\n<li>Binder가 RootViewModel을 Observe 한다.</li>\n<li>ChildViewModel이 Upated되면 Update된 내용을 취합하여 RootViewModel에게 보낸다.</li>\n<li>RootViewModel은 취합된 내용을 Binder에게 알린다.</li>\n</ul>\n<p>이 설계에서 핵심이 되는 내용은, <u>Binder는 RootViewModel만 Observe 하고 있다는 것이다.</u></p>\n<h2>Client</h2>\n<p>위에서 작성한 코드를 직접 사용해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// HTML에 정의된 viewmodel을 scan한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> binder <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Binder에 Strategy를 주입한다.</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Processor <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'styles'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Processor <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'attributes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Processor <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'properties'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Processor <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">_process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">on</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>k<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">v</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// ViewModel을 만든다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRandom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> rootViewModel <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">isStop</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token function\">changeContents</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// ViewModel이 변경되면, 이를 취합하여 RootViewModel에게 보낸다.</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rgb(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">wrapper</span><span class=\"token operator\">:</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">styles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token string\">'50%'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#ffa'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cursor</span><span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">events</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> vm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        vm<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>isStop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// rootViewModel.isStop = true 로 해도 된다. </span></span>\n<span class=\"line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">innerHTML</span><span class=\"token operator\">:</span> <span class=\"token string\">'Title'</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">contents</span><span class=\"token operator\">:</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">innerHTML</span><span class=\"token operator\">:</span> <span class=\"token string\">'Contents'</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Binder는 RootViewModel만 Observing 한다.</span></span>\n<span class=\"line\">binder<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>rootViewModel<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 테스트를 위하여 viewmodel의 내용을 실시간으로 변경하도록 한다.</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  viewmodel<span class=\"token punctuation\">.</span><span class=\"token function\">chagneContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>viewmodel<span class=\"token punctuation\">.</span>isStop<span class=\"token punctuation\">)</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>전체 코드</h3>\n<p>&lt;&lt;&lt; @/CodeSpitz/Object-Oriented-Javascript/03-Strategy-Observer/example.html</p>\n<p><a href=\"https://github.com/JunilHwang/TIL/blob/master/CodeSpitz/Object-Oriented-Javascript/03-Strategy-Observer/example.html\" target=\"_blank\" rel=\"noopener noreferrer\">github에서 보기</a></p>\n<h2>Summary</h2>\n<ul>\n<li>\n<p>Strategy Pattern</p>\n<ul>\n<li>Binder의 Strategy를 찾아낸 후 추출한다.</li>\n<li>Binder에 사용되는 각각의 Strategy를 만들어서 주입한다. (Dependency Injection)</li>\n<li>이 때 Strategy는 TypeCheck를 하고, 구현은 ChildStrategy에게 맡긴다 (Template Method Pattern)</li>\n</ul>\n</li>\n<li>\n<p>Observer Pattern</p>\n<ul>\n<li>ViewModel의 변경 내역을 알리는 ViewModelListener Interface를 만들고, ViewModel과 Binder가 이를 상속하여 구현하도록 한다.</li>\n<li>ChildViewModel에 변경이 일어나면 이를 취합하여 RootViewModel에게 알린다 (Composite Pattern)</li>\n<li>RootViewModel은 취합한 내용을 Binder에게 알린다 (Notify)</li>\n<li>Binder는 RootViewModel만 Observing 한다.</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2020-02-15T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "MVVM System 만들기",
      "url": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/02-MVVM/",
      "id": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/02-MVVM/",
      "summary": "객체지향을 통해서 MVVM System을 만드는 과정입니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 포스트는 아래의 내용들을 토대로 정리한 것입니다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=RT38Za1pkdI\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 86기 2회차 동영상</a></p>\n</div>\n<h2>MVC와 MVP의 문제점</h2>\n<p>MVVM에 대해 구체적으로 살펴보기 이전에 이것이 어떤 문제들의 해결 방안으로 등장 하였는지 살펴봐야 한다. 그 다음 MVVM이 <strong>객체지향의 원칙을 통해 앞서 언급한 문제들을 어떤 방식으로 해결하였는지</strong> 이해해야 한다.</p>\n<h3>MVC Pattern</h3>\n<p>MVC는 <code>Model - View - Controller</code> 등을 사용하며, 주로 Server-side에서 사용 된다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">MVC를 사용하는 Server-side Framework</p>\n<ul>\n<li>Spring Framework</li>\n<li>Python Django</li>\n<li>PHP Laravel</li>\n<li>.NET Framework</li>\n<li>Ruby On Rails</li>\n</ul>\n</div>\n<p>Servier-side에서 사용하는 MVC Pattern의 구조는 다음과 같다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILK8oqmjH-BwvgUa8aixv-UL5ENdvAGMSN61b2heHcTafgIaviL2b2fOAIWfm84I5qJGnaPN5qch0aGhM5Gf9R4aKGdPN8VKl1IWcm00\" alt=\"uml diagram\">\n<p>이렇게 View와 Model은 직접적으로 의존하지 않고 Controller를 통해서 메세지를 주고 받는다. 왜냐하면 <u>Server-side에 넘기는 User의 interaction은 Http Request 하나 밖에 없기 때문이다.</u></p>\n<p>그런데 Client-side에서 MVC Pattern이 사용될 땐 이야기가 다르다.\n브라우저를 예로 들면 <u>User는 마우스, 터치, 키보드를 통해 Browser에게 interaction을 보낼 수 있다.</u></p>\n<p>뿐만 아니라 <code>window resize</code> <code>window scroll</code> 같이 user가 의도하지 않아도 browser에서 일어나는 interaction 또한 처리 할 수 있어야 한다.</p>\n<p>즉, Client-side는 Interaction이 다양하고, 이에 따른 대응이 필수적이다. 그래서 Client-Side에서 사용되는 MVC는 다음과 같은 구조를 띈다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILK8oqmjH-BwvgUa8aixv-UL5ENdvAGMSN61b2hesjb152bOAIWfm84I5qJGnaPN5qcJ0aGJM5Gf9R4aKGdPH8VKl1IWQm00\" alt=\"uml diagram\">\n<ul>\n<li>Controller는 Model과 View를 알고 있다.</li>\n<li>View는 User의 Interaction(Event)를 알고 있다.</li>\n<li>View는 어떤 Model을 갱신해야 되는지 알고 있어야 한다.</li>\n</ul>\n<p>이럴 경우의 문제는 다음과 같다.</p>\n<ul>\n<li>Model은 비지니스로직과 관련있다.</li>\n<li>View는 UI와 관련있다.</li>\n<li>즉, Model과 View는 변화의 이유가 다르다.</li>\n<li>그런데 서로 간의 의존성이 있다</li>\n</ul>\n<p>요약하자면 변화의 이유가 다른데 서로간의 의존성이 있기 때문에 문제가 발생한다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Backbone.js</p>\n<p>MVC를 사용하는 Client-Side Framework 중 대표적으로 backbone.js가 있다. 이제 MVVM을 사용하는 React, View, Angular 등에게 밀려 사용되지 않는다.</p>\n</div>\n<p>Client, Server에 대한 분류를 접어두고, 실제로 많은 사람들이 사용하는 MVC는 다음과 같은 <code>제왕적 MVC Model</code>이다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILK8oqmjH-BwvgUa8aixv-UL5ENdvAGMSN61b2hewaPdPAQafER55cMcPvJewaAqA5WfA2d0WH8NH93B8JKl1MWV0000\" alt=\"uml diagram\">\n",
      "date_published": "2020-02-08T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "객체지향의 기본 이론",
      "url": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/01-Intro/",
      "id": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/Object-Oriented-Javascript/01-Intro/",
      "summary": "객체지향의 원칙과 객체지향을 사용하는 궁극적인 목표에 대해 기술합니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 포스트는 아래의 내용들을 토대로 정리한 것입니다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=E9NZ0YEZrYU&amp;t=3914s\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 86기 1회차 동영상</a></p>\n</div>\n<p>객체지향을 사용하는 목적과 원칙들에 대해 살펴보자.</p>\n<h2>Value vs Identifier</h2>\n<ul>\n<li>Value Context\n<ul>\n<li>함수지향</li>\n<li>메모리와 상관없이 값 자체를 본다.</li>\n</ul>\n</li>\n<li>Identifier Context\n<ul>\n<li>객체지향</li>\n<li>값이 아닌 메모리 주소를 본다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Identifier Context</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Value Context</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>객체지향은 항상 Identifier를 인자로 받아야 한다. 즉, 숫자를 받으면 안 된다.</p>\n<p>객체지향에서 값을 받는 것은 오직 <code>생성자</code> 밖에 없다.</p>\n<h3>Value의 특징</h3>\n<ul>\n<li>끝 없는 복사본</li>\n<li>상태 변화에 안전(강제적으로)\n<ul>\n<li>상태가 변할 수 없다</li>\n<li><code>3 + 1 = 4</code> : 3과 1은 그대로 있고 4가 만들어진다.</li>\n</ul>\n</li>\n<li>연산을 기반으로 로직을 전개한다.\n<ul>\n<li>복잡한 도메인을 포현하는 연산은 굉장히 어렵다</li>\n<li>영화표를 계산하는 방법 : 조조 + 할인카드 + 청소년 + 통신사 할인 = ?</li>\n<li>연산을 구현할 수 있다는 자신감이 있어야 한다.</li>\n</ul>\n</li>\n</ul>\n<h3>Identifier의 특징</h3>\n<ul>\n<li>하나의 원본</li>\n<li>상태 변화를 내부에서 책임짐\n<ul>\n<li>평소엔 정상인데 술을 먹더니 꽐라가 된다(?)</li>\n<li>정상이든 꽐라든 해야할 일은 할 수 있도록 만들어야 한다.</li>\n</ul>\n</li>\n<li>메세지를 기반으로 로직을 전개 → 로직을 위임할 수 있다</li>\n</ul>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p>객체지향은 값을 사용하면 안 된다.</p>\n</div>\n<h2>Polymorphism</h2>\n<p>Polymorphism(다형성) = 대체가능성 + 내적일관성</p>\n<ul>\n<li>확장된 객체는 원본으로 대체 가능하다</li>\n<li>생성 시점의 타입이 내부에 일관성 있게 참조된다.</li>\n</ul>\n<p>위에 대한 예는 다음과 같다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> Worker <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'working'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// Overriding</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> HardWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Worker <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HardWorking'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HardWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이 코드에 대한 객체지향의 개념은 다음과 같다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">대체가능성(substitution)</p>\n<p>확장된 class는 대상 class를 대체할 수 있다(자식은 부모를 대체할 수 있다)</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>worker <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true. 대체가능성</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div></div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">내적일관성(internal identity)</p>\n<p>어떠한 경우에도 태어났을 때의 원본 클래스를 유지한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">worker<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// HardWorker의 print. 내적일관성</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div></div>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Polymorphism of Prototype</p>\n<p>javascript는 <code>prototype</code>을 이용해서 대체가능성과 내적일관성을 유지한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">HardWorker</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HardWorker</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">HardWorker</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></div>\n<p>각 언어마다 굉장히 다른 시스템을 사용하지만, 객체지향이라고 불리기 위해선 어떤 형태로든 <strong>대체가능성</strong>과 <strong>내적가능성</strong>을 유지할 수 있어야한다.</p>\n<p><strong>즉, 객체지향언어는 Polymorphism을 언어차원에서 지원한다.</strong></p>\n<h2>Object Essentials</h2>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Object Essentials</p>\n<ul>\n<li>객체의 본질</li>\n<li>Java 혹은 Javascript는 객체지향언어의 조건을 만족하고 있다.</li>\n<li>하지만, 객체지향언어를 사용한다고 해서 객체지향 프로그래밍을 하는 것은 아니다.</li>\n<li>객체가 정상작동하고 객체지향답게 움직여야 하는 본질적인 조건이 필요하다.</li>\n</ul>\n</div>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> EssentialObject <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// hide state: 내부의 상태를 감춘다 = 데이터 은닉</span></span>\n<span class=\"line\">  #name <span class=\"token operator\">=</span> <span class=\"token string\">''</span></span>\n<span class=\"line\">  #screen <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#name <span class=\"token operator\">=</span> name <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token function\">camouflage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#screen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">  <span class=\"token comment\">// 캡슐화(encapsulation). 안에서 무슨 일이 일어나는지 노출하면 안 된다.</span></span>\n<span class=\"line\">  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#screen <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#name <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>데이터 은닉(hide state)</h3>\n<p><code>Maintenance of state</code></p>\n<ul>\n<li><strong>내부의 상태를 감춘다</strong>(=identifier context를 사용한다.)</li>\n<li>자신의 상태에 대한 관리의 책임이 있어야 한다(내 지갑은 내가 관리한다)</li>\n<li>객체의 속성을 밖으로 보여주는 것은 value context를 사용하는 것이다. value context은 객체지향에서 버그를 만들고 결국 value context를 사용하는 객체지향은 언젠간 무너지게 된다.</li>\n</ul>\n<h3>캡슐화(encapsulation)</h3>\n<p><code>Encapsulation of functionality</code></p>\n<ul>\n<li><strong>내부에서 무슨 일이 일어나는지 노출하면 안 된다</strong>(객체의 메소드에서 일어나는 일은 외부에서 알면 안 된다)</li>\n<li>즉, 외부에서 내부의 일을 모르게 한다.</li>\n<li>ATM은 내부적으로 굉장히 복잡하게 작동하지만, 사용자는 그러한 일들에 대해 알 필요도 없고 알아서도 안 된다.</li>\n<li>예를 들어 <code>setAge</code> 라는 method는 캡슐화에 위배될 수 있다. <code>setChild</code> <code>setAdult</code> 같은 method로 캡슐화할 수 있다.</li>\n<li>캡슐화를 하기 위해선 <strong>method의 역할 그리고 책임</strong>에 대해 한 단계 더 생각해야 한다.</li>\n</ul>\n<h3>Isloation of change</h3>\n<p>소프트웨어는 무조건 변한다. 우리는 프로그램의 변화를 막을 수 없으며 개발도중에 스펙이 바뀌는 것은 PM의 잘못이 아니라 매우 당연한 일이다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">객체지향의 목표</p>\n<p>객체지향의 목표는 <code>격리의 벽</code>을 세워 변화의 여파가 다른 코드로 전이되지 않도록 하는 것이다. 그리고 <u>변화의 여파를 막고 격리의 벽을 세울 수 있는 유일한 수단이 바로 앞서 설명한 캡슐화와 데이터 은닉이다.</u></p>\n</div>\n<p>즉, 데이터은닉과 캡슐화가 무너지면 서서히 오염되고 결국 객체지향은 무너지게 된다.</p>\n<h2>SOLID 원칙</h2>\n<ul>\n<li>로버트 마틴이 2000년대 초반에 명명한 <strong>객체 지향 프로그래밍 및 설계의 다섯 가지 기본 원칙</strong>이다.</li>\n<li>프로그래머가 시간이 지나도 유지 보수와 확장이 쉬운 시스템을 만들고자 할 때 이 원칙들을 함께 적용할 수 있다.</li>\n<li>SOLID 원칙들은 소프트웨어 작업에서 프로그래머가 소스 코드가 읽기 쉽고 확장하기 쉽게 될 때까지 소프트웨어 소스 코드를 리팩터링하여 코드 냄새를 제거하기 위해 적용할 수 있는 지침이다.</li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%95%A0%EC%9E%90%EC%9D%BC_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EA%B0%9C%EB%B0%9C\" target=\"_blank\" rel=\"noopener noreferrer\">애자일 소프트웨어 개발</a>과 <a href=\"https://en.wikipedia.org/wiki/Adaptive_software_development\" target=\"_blank\" rel=\"noopener noreferrer\">적응적 소프트웨어 개발</a>의 전반적 전략의 일부다.</li>\n</ul>\n<h3><u>S</u> RP (Single Responsibility, 단일책임) 원칙</h3>\n<p>수정을 하는 <u>원인은 오직 하나</u> 밖에 없어야 한다. 항상 일관성 있게 작동하며, 코드를 수정해야 이유는 오직 하나의 이유만 있어야 한다(하나의 경우).</p>\n<p>SRP를 지키지 못하면 <strong>산탄총 수술(Shotgun surgery)</strong> 가 일어난다.</p>\n<h3><u>O</u> CP (Open Closed, 개방폐쇄) 원칙</h3>\n<ul>\n<li><strong>Open</strong> : Extends, Implements 할 수 있게 만들어야 한다.</li>\n<li><strong>Close</strong> : 새로운 문제를 만들거나 해결할 때 기존의 class를 건드리는 게 아니라 extends나 implements로 구현해야 한다.</li>\n</ul>\n<p>즉, 문제들에 대한 공통점을 인식해서 추상화에 성공해야 가능하다.</p>\n<h3><u>L</u> SP (Liskov Substitusion, 업캐스팅 안전) 원칙</h3>\n<p>추상층의 정의가 너무 구체적이면 구상승의 구현에서 모순이 발생한다. 다음 예를 통해 이해해보자.</p>\n<ul>\n<li>\n<p>추상층</p>\n<ul>\n<li>숨을 쉰다</li>\n<li><u>다리로 이동한다</u></li>\n</ul>\n</li>\n<li>\n<p>구상층(구현)</p>\n<ul>\n<li>사람 ok</li>\n<li>타조 ok</li>\n<li><strong>아메바 no</strong></li>\n<li><strong>독수리 no</strong></li>\n<li><strong>고래 no</strong></li>\n</ul>\n</li>\n</ul>\n<p>위에서 <code>다리로 이동한다</code> 라는 method 때문에 구현의 문제가 발생한다. 그래서 이것을 다음과 같이 고쳐야 한다.</p>\n<ul>\n<li><strong>[추상층]</strong> 생물\n<ul>\n<li><strong>숨을 쉰다</strong></li>\n</ul>\n</li>\n</ul>\n<p>그런데 분명히 다리로 이동하는 생물도 있다. 그래서 다음과 같이 <code>인터페이스</code> 라는 것을 만들어야 한다.</p>\n<ul>\n<li><strong>[인터페이스]</strong> 다리로 이동하는 생물 <strong>extends</strong> <u>생물</u>\n<ul>\n<li>다리로 이동한다.</li>\n</ul>\n</li>\n</ul>\n<p>이렇게 정의된 추상층과 인터페이스를 가지고 다음과 같은 생물은 만들어낼 수 있다.</p>\n<ul>\n<li>사람 <strong>extends</strong> <u>생물</u></li>\n<li>타조 <strong>extends</strong> <u>생물</u></li>\n<li>아메바 <strong>implements</strong> <u>다리로 이동하는 생물</u></li>\n<li>독수리 <strong>implements</strong> <u>다리로 이동하는 생물</u></li>\n<li>고래 <strong>implements</strong> <u>다리로 이동하는 생물</u></li>\n</ul>\n<p>이러한 상태를 <code>업캐스팅이 안전</code>하다고 볼 수 있다.</p>\n<h3><u>I</u> SP(Interface Segregation, 인터페이스 분리)</h3>\n<p>앞에서 본 것 처럼 LSP를 해결하기 위해 ISP도 같이 사용한다고 볼 수 있다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLdWxS-MR9GrlvkvHgEPIKCZCAr78pSzBhUHoICrB0Qe20000\" alt=\"uml diagram\">\n",
      "date_published": "2020-02-01T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "None Blocking Javascript 소개",
      "url": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/None-Blocking-Javascript/Intro/",
      "id": "https://junilhwang.github.io/TIL/TIL/CodeSpitz/None-Blocking-Javascript/Intro/",
      "summary": "거침없는(None Blocking) 자바스크립트의 특징들에 대해 소개합니다.",
      "content_html": "\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">해당 포스트는 아래의 내용을 토대로 정리한 것입니다.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0NsJsBdYVHI&amp;list=PLBNdLLaRx_rImvbuZnfO-Ecv9OpuCNoCl\" target=\"_blank\" rel=\"noopener noreferrer\">코드스피츠 85기 - 거침없는 자바스크립트 1회차</a></li>\n</ul>\n</div>\n<p>Javascript 라는 언어의 특징에 대해 다루는 내용입니다.</p>\n<h2>Javascript Pipeline</h2>\n<p>Javascript로 만든 프로그램이 서비스되는 과정은 다음과 같다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfEB4fHICvFIOMmGeeIyueBCdDIYo3yWCJaxCJqpBnq2DVP4qAxf1Rav5ToSO4qAkX6PsIcfAJcnIBhHZ2Hv16cmLb8ia33dJsH-51B75BpKe0k1G00\" alt=\"uml diagram\">\n<p>단점 : 코드를 서비스 단계에서 디버깅 하기는 굉장히 힘들다.</p>\n<p>장점 : 코드의 호환성은 Transpiler와 Packaging이 책임진다.</p>\n<ul>\n<li>Code\n<ul>\n<li>ECMAScript</li>\n<li>TypeScript</li>\n<li>Kotlin</li>\n<li>Dart</li>\n</ul>\n</li>\n<li>Transpiler\n<ul>\n<li>Step1\n<ul>\n<li>tsc</li>\n<li>kotlinc</li>\n</ul>\n</li>\n<li>Step2\n<ul>\n<li><u>babel</u></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Packaging\n<ul>\n<li>webpack</li>\n</ul>\n</li>\n<li>CI</li>\n<li>Deploy</li>\n</ul>\n<p>수업에서는 Code(ECMAScript2020)에 집중한다.</p>\n<h2>ECMAScript Standard</h2>\n<p>매년 상반기 새로운 버전츨 출시함(버전과 연도가 1차이. ES6 = ES2015)</p>\n<p>현재 ES11(ES2020)이 최종 조정 중</p>\n<p>ES6 이후 급격한 언어의 변화를 지양하고 점진적인 버전업을 진행</p>\n<p>새롭게 반영될 내용은 Stage0~3까지 단계별 승격을 통해 정식 반영시 Stage4가 됨</p>\n<p>현재 제안 중인 내용의 상태 확인 : <a href=\"https://github.com/tc39/proposals\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tc39/proposals</a></p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">실제로는?</p>\n<p>tc39 위원회에서 회의를 통해 결정되며 위원회는 다양한 업계와 관계자로 구성됨</p>\n<p>실제 각 제안의 담당자(챔피온)가 구글 관련 개발자인 경우가 많음</p>\n<p><u>Stage4 기준 보다 구글이 원하는 순서대로 크롬에 빨리 반영되는 경우가 많음</u></p>\n<p>크롬의 업데이트 확인 : https://developers.google.com/web/updates/capabilities</p>\n</div>\n<h3>ES6</h3>\n<ul>\n<li>Class</li>\n<li>Iterator, Generator, For of</li>\n<li>Class Library\n<ul>\n<li>Symbol, Promise, Map, Set, WeakMap, WeakSet, Proxy, Reflect</li>\n</ul>\n</li>\n<li>Object Literal</li>\n<li>Arrow (순수한 함수 지향. 가벼운 객체를 만들 수 있다)</li>\n<li>const, let</li>\n<li>destructuring, rest, spread</li>\n<li>Template String</li>\n</ul>\n<h3>ES7</h3>\n<ul>\n<li>중첩된 Rest Destructure</li>\n<li><code>const [a, ...[b, ...c]] = [1, 2, 3, 4]</code> =&gt; <code>a=1</code> <code>b=2</code> <code>c=[3,4]</code></li>\n</ul>\n<h3>ES8</h3>\n<ul>\n<li>async/await</li>\n<li>shared memory ( thread 간에 메모리 공유 )</li>\n<li>atomics ( mutex lock )</li>\n</ul>\n<h3>ES9</h3>\n<ul>\n<li>Object Destructure</li>\n<li>asynchronous iterators</li>\n</ul>\n<h3>ES10</h3>\n<ul>\n<li>optional catch</li>\n</ul>\n<h3>ES11(Stage11)</h3>\n<ul>\n<li><em>Bigint</em></li>\n<li><em>globalThis</em></li>\n<li><em>top level await</em></li>\n<li><em>class field</em></li>\n<li><em>private field</em>/method</li>\n<li>optional chaining <code>?.</code></li>\n<li>nullish coalescing <code>??</code></li>\n<li>WeakReference</li>\n</ul>\n<p><em>이미 크롬이 지원함</em></p>\n<h2>Program &amp; Timing</h2>\n<ul>\n<li>\n<p>Language code</p>\n<ul>\n<li>Lint, IDE</li>\n<li>ES2020, Tyescript ...</li>\n</ul>\n</li>\n<li>\n<p>Machine language (Browser, JVM 등의 Runtime)</p>\n<ul>\n<li>Compiler, Transpiler</li>\n</ul>\n</li>\n<li>\n<p>File</p>\n<ul>\n<li>Deploy</li>\n</ul>\n</li>\n<li>\n<p>Load</p>\n<ul>\n<li>Browser load</li>\n<li>Browser parsing</li>\n</ul>\n</li>\n<li>\n<p>Run</p>\n<ul>\n<li>Browser parsing</li>\n<li>Runtime</li>\n</ul>\n</li>\n<li>\n<p>Terminate</p>\n<ul>\n<li>Browser close</li>\n</ul>\n</li>\n</ul>\n<p>개발의 목표</p>\n<ul>\n<li>만들어진 코드를 건드리지 않고 더 많은 기능이나 수정을 하는가.</li>\n<li>코드가 변화하는 이유를 한 가지고 규정하는 것</li>\n<li>변화에 대응하는 여파를 최소화 시키는 것</li>\n</ul>\n<p>자바스크립트는 Compile Time과 Run Time의 구분이 존재하지 않는다.</p>\n",
      "date_published": "2020-01-31T13:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2020년 1월 회고",
      "url": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/01-January/",
      "id": "https://junilhwang.github.io/TIL/TIL/Review/2020-year/01-January/",
      "summary": "2020년 1월 회고 입니다.",
      "content_html": "\n<p>나는 1월 한 달을 어떻게 지냈나? 에 대한 고찰이다.</p>\n<h2>공적</h2>\n<p>회사에서 일어났던 일들을 되새기며 기록하고자 한다.</p>\n<h3>1. 회사에서 진행 중이던 파일럿 프로젝트를 마무리했다.</h3>\n<p>팀 발표 후 코드를 개선했다. 인지하고 있던 범위 내에서 문제가 있었기 때문에 개선할 때 큰 어려움은 없었다.</p>\n<ul>\n<li>에러 핸들링</li>\n<li>response에 대한 service 혹은 entity 만들기</li>\n<li>request body에 대한 VO 정의</li>\n</ul>\n<p>여태까지는 항상 빠르게 만드는 것에만 집중했었다.\n그런데 파일럿 프로젝트를 진행하면서 정교한 서비스에 대한 고민을 계속할 수 있었고, 나에게 부족한 부분을 찾을 수 있었다.</p>\n<p>학부 시절에 연구실에서 스프링을 사용할 때 '도대체 이렇게 느리고 답답하고 어려운 프레임워크를 왜 사용하는 걸까?'라는 생각을 많이 했었다.\n이제는 Spring Framework의 사용 목적과 그 효율성에 대해서 조금이나마 느낄 수 있었다.</p>\n<h3>2. Markdown으로 UML을 그릴 수 있게 되었다.</h3>\n<p>학부 시절에 프로젝트를 진행할 때 문서를 산출하면서 UML Diagram을 만드는 게 제일 어렵고 귀찮았다.\n그런데 신입 사원 교육 때 Markdown에서 UML 그릴 수 있는 <a href=\"/Vuepress/Plantuml/\" target=\"_blank\" rel=\"noopener noreferrer\">PlantUML</a> 이라는 것에 대해 알게 되었고 파일럿 프로젝트에 대한 문서를 만들면서 PlantUML 을 이용했다.</p>\n<p>원하는 위치에 오브젝트를 배치하는 게 조금(많이) 힘들었지만, 그래도 사용할 가치가 충분히 있는 도구라고 생각한다.\n무엇보다 문서를 작성할 때 다른 창을 왔다 갔다 하지 않고, 마우스를 사용하지 않고, 오직 Markdown만 사용할 수 있는 것 자체가 매력적인 부분이다.</p>\n<p><u><a href=\"https://junilhwang.github.io/zum_pilot/Architecture/\" target=\"_blank\" rel=\"noopener noreferrer\">PlantUML을 이용하여 만든 파일럿 프로젝트 문서</a></u></p>\n<h3>3. 최종 발표</h3>\n<p>최종 발표는 대표님 앞에서 했는데, 확실히 대표님은 생각하는 깊이가 일반적인 수준 이상임을 느낄 수 있었다.\nWebpack의 Code Split을 이용하여 로딩을 단축하는 기법을 사용하였는데, 그게 항상 옳은 것인가에 대한 질문이었다.\n코드를 분할하면 초기 로딩은 빠를 수 있지만, 반대로 로딩 후에 추가 로딩 시간이 필요하다.\n만약에 코드 스플릿을 하지 않았을 때 얻는 이점이 많다면, 굳이 사용할 필요가 없지 않나? 라는 그런 질문.</p>\n<p>일단 나는 작업할 때 '이건 무조건 하는 게 좋겠구나'에서 생각을 멈췄다.\n이렇게 고민을 멈추는 것은 엔터프라이즈급의 서비스를 만들 때 옳지 않다.\n항상 질 좋은, 최적화된 서비스를 제공하기 위해서 고민을 멈춰선 안 된다.</p>\n<p>이러한 생각을 대표님의 질문들을 통해 알 수 있었다. 나는 생각이 조금 더 깊어질 필요가 있다.</p>\n<h3>4. 인수인계</h3>\n<p>파일럿 프로젝트 마무리 후 사수에게 업무와 프로젝트를 조금씩 인수인계 받았다.\n회사에서 산출된 프로젝트의 코드들은 생각 이상으로 복잡하면서 효율적이고 아름다웠다(?).</p>\n<p>무엇보다 내가 인계받은 프로젝트는 문서 정리도 잘 되어 있어서 이해하는 데 많은 시간이 소요되진 않았다.\n좋은 사수와 팀장님, 그리고 팀원을 만난 것 같아서 참 다행이고 감사하다.</p>\n<h3>5. 회사 기술 블로그에 파일럿 프로젝트 올리기</h3>\n<p>어찌어찌 발표도 잘 마무리 했고, 발표한 내용을 조금 더 다듬어서 기술 블로그에 글을 올렸다.</p>\n<ul>\n<li><a href=\"https://zuminternet.github.io/ZUM-Pilot-provide-video/\" target=\"_blank\" rel=\"noopener noreferrer\">주제별 영상 제공 웹 서비스</a></li>\n</ul>\n<p>입사 후 나의 첫 결과물이었고, 그래서 많은 애정을 담아 작성했다. 뿌듯하기도 하고, 더 잘 그리고 열심히 하지 못한 것이 아쉽다.\n이 경험을 추진력으로 그리고 발판으로 삼아 한 걸음씩 나아가야지.</p>\n<h2>사적</h2>\n<p>2019년은 나에게 굉장히 권태로운 해였다. 그래서 2020년은 최대한 열심히 살아보기로 다짐했다.</p>\n<h3>1. 일일 커밋</h3>\n<p>열심히 살기 위한 첫 번째 목표가 일일커밋이다. 1월은 성공적으로 마무리되었다. 사실 매우 귀찮은 순간이 없지 않아 있었다.\n삶에 관성으로 인하여 공부하고 싶은 날들보단 놀고 싶은 날들이 많았다. 그래서 약간의 편법(<s>학부 수업 자료를 매일 매일 나눠서 올린다거나..</s>)을 많이 사용한 것 같다.\n어쨌든 하지 않는 것보단, 어떻게든 하는 것에 의미를 두기로 했다.</p>\n<p>공부에 대한 관성이 생길 수 있게, 그리고 유지할 수 있게 자극이 되는 영상을 보거나, 회고 같은 것들을 읽었다.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=V9AGvwPmnZU&amp;t=165s\" target=\"_blank\" rel=\"noopener noreferrer\">지방대 개발 비전공자가 배달의민족 리드 개발자가 되기까지</a></li>\n<li><a href=\"https://ryan-han.com/post/memoirs/memoirs2019/\" target=\"_blank\" rel=\"noopener noreferrer\">체대 출신 개발자의 2019년 회고</a></li>\n<li><a href=\"https://github.com/ChoDragon9/posts/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">나의 소중하고 또 존경하는 친구의 기록들 - ChoDragon9/Posts</a></li>\n<li><a href=\"https://velog.io/@velopert/2019.log\" target=\"_blank\" rel=\"noopener noreferrer\">김민준(Velopert)님의 2019년 회고</a></li>\n</ul>\n<p>참 치열하게, 그리고 열심히 살아가는 사람들의 글을 읽다 보면 괜히 마음이 뭉클하고\n존경심, 경외심, 그리고 그들처럼 살아가고 싶다고 생각하곤 한다.</p>\n<h3>2. Today I Learn</h3>\n<p>일일 커밋의 좋은 양분 중 하나가 <code>Today I Learn</code>이었다.\n공부한 것들을 기록하는 단순한 행위지만 그 효과는 상당히 좋다고 생각한다.\n다만, 개인적으로 관리하고 있던 블로그 때문에 약간의 갈등이 있었다.\n블로그는 생각보다 View가 많은 편이다.\n검색 우선순위가 높은 게시물이 몇 개 있다 보니까 하루 평균 500~600명 정도의 Page View가 발생하고 있었다.\n그래서 블로그를 계속 유지하는 게 좋을까, 유지하지 않는 게 좋을까 고민을 많이 했다.</p>\n<p>워드프레스에 공들여 작성한 일부 게시물을 TIL로 옮길까도 생각했고,\nTIL에 올린 걸 워드프레스에서 자동으로 읽어오도록 할까도 고민해 봤는데 단순하게 TIL을 더 잘 가꾸는 방향을 선택했다.</p>\n<p>그리고 TIL은 Vuepress를 이용하여 만들었는데, 생각 이상으로 손이 많이 가는 것 같다.\n하지만 디자인도 깔끔하고 한 번만 잘 구축하면 관리도 쉽기 때문에 잘한 선택이지 싶다.</p>\n<h3>3. 코드 스피츠 86기, 그리고 객체지향</h3>\n<p>미루고 미루었던 코드 스피츠를 유튜브로 보면서 정리했다.</p>\n<ul>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/01-Intro/\" target=\"_blank\" rel=\"noopener noreferrer\">1회차</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/02-MVVM/\" target=\"_blank\" rel=\"noopener noreferrer\">2회차</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/03-Strategy-Observer/\" target=\"_blank\" rel=\"noopener noreferrer\">3회차</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/04-ISP-Visitor/\" target=\"_blank\" rel=\"noopener noreferrer\">4회차</a></li>\n<li><a href=\"http://localhost:8080/TIL/CodeSpitz/Object-Oriented-Javascript/05-Extension/\" target=\"_blank\" rel=\"noopener noreferrer\">5회차</a></li>\n</ul>\n<p>Vue, React 같은 Front-end Framework에서 사용 하는 MVVM System을 직접 만들어 보는 내용이었다.\n내용은 생각 이상으로 알차고 재미있었다.\n무엇보다 여태까지 멋모르고 사용했던 프레임워크의 기본 원리를 알 수 있었기 때문에\nVue, React 뿐만 아니라 Spring Framework에 담긴 원리들도 깨우칠 수 있었다.</p>\n<p>여태까지 내가 했던 개발은 개발이 아니라고 느끼는 계기가 되었다.\n무언가 많이 한 것 같은데, 사실 알맹이가 없었다. 왜 이걸 이제야 알았을까?</p>\n<p>코드스피츠 뿐만 아니라 인프런의 백기선 님이 올리신 강의들도 도움이 많이 되었다.</p>\n<h3>4. 아쉬운 점</h3>\n<p>체력적인 한계를 느끼고 있다. 집에 오면 왜 이리 피곤한 걸까?\n다음 달부터는 수영하러 다녀야겠다. 몸도 찌뿌둥하고, 개발자에게 수영이 참 적합한 운동이라고 하니 꼭 다녀야지.</p>\n<p>그리고 책을 읽지 못했다. 2월에는 책을 꼭 읽어보자.</p>\n<h2>Summary</h2>\n<ul>\n<li>파일럿 프로젝트 마무리</li>\n<li>일일커밋 시작</li>\n<li>Today I Learn 시작</li>\n<li>객체지향 이해</li>\n<li>체력적 한계 및 독서 실패</li>\n</ul>\n",
      "date_published": "2020-01-31T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Gradle Wrapper",
      "url": "https://junilhwang.github.io/TIL/TIL/Gradle/GradleWrapper/",
      "id": "https://junilhwang.github.io/TIL/TIL/Gradle/GradleWrapper/",
      "summary": "Gradle Wrapper는 Gradle을 각 개발자나 CI 서버에 깔지 않고, 프로젝트에 함께 포함시켜 배포할 수 있는 방법을 제공해준다.",
      "content_html": "\n<p><code>Gradle Wrapper</code>는 Gradle을 각 개발자나 CI 서버에 깔지 않고, 프로젝트에 함께 포함시켜 배포할 수 있는 방법을 제공해준다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Wrapper를 사용하는 이유</p>\n<p>Gradle 빌드를 실행하는 데 권장되는 방법은 Gradle Wrapper를 사용하는 것이다.\nWrapper는 선언 된 버전의 Gradle을 호출하여 필요한 경우 미리 다운로드하는 스크립트다.\n결과적으로 수동 설치 프로세스를 수행하지 않고도 Gradle 프로젝트를 신속하게 시작할 수 있다.</p>\n</div>\n<p>즉, Gradle Wrapper를 사용하면 이미 존재하는 프로젝트를 새로운 환경에서 바로 빌드할 수 있다. java나 gardle도 설치할 필요가 없다. <strong>환경에 종속되지 않는다는 이야기다.</strong></p>\n<h2>Gradle Download</h2>\n<p>Gradle을 시작하기 이전에, Gradle을 <a href=\"https://gradle.org/releases/\" target=\"_blank\" rel=\"noopener noreferrer\">다운로드</a> 받아야 한다. 링크에서 원하는 버전을 다운받으면 된다. gradle을 다운 받은 다음, 원하는 위치로 옮긴 후 환경변수를 설정해야된다.</p>\n<h3>Linux &amp; MacOS</h3>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\">$ <span class=\"token function\">mkdir</span> /opt/gradle <span class=\"token comment\"># gradle 폴더 생성</span></span>\n<span class=\"line\">$ <span class=\"token function\">unzip</span> <span class=\"token parameter variable\">-d</span> /opt/gradle gradle-6.0.1-bin.zip <span class=\"token comment\"># 압축 해제</span></span>\n<span class=\"line highlighted\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/opt/gradle/gradle-6.0.1/bin <span class=\"token comment\"># 환경변수 설정</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>Window</h3>\n<p><code>C:\\Gradle</code>에 폴더를 만든 후, 다운받은 gradle을 옮긴다.</p>\n<p></p>\n<p>그리고 <code>컴퓨터 &gt; 속성 &gt; 고급 시스템 설정 &gt; 고급 &gt; 환경변수</code>로 들어간 다음 <code>시스템 변수</code>의 <code>Path</code>에 <code>C:\\Gradle\\gradle-6.0.1\\bin</code>를 추가해준다.</p>\n<p></p>\n<h3>설치 확인</h3>\n<p>환경변수까지 설정이 완료되었으면 <code>gradle -v</code> 명령을 통해 정상적으로 설치 되었는지 확인한다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\">$ gradle <span class=\"token parameter variable\">-v</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p></p>\n<h2>gradlew</h2>\n<p>프로젝트 폴더에서 다음과 같이 <code>gradle wrapper</code> 명령을 실행하면 <code>gradlew</code> 파일이 생성된다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># 그냥 실행</span></span>\n<span class=\"line\">gradle wrapper</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 옵션을 사용하는 경우</span></span>\n<span class=\"line\">gradle wrapper --gradle-version <span class=\"token number\">6.0</span>.1 --distribution-type all</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p><code>gradle build</code>를 사용하면 컴퓨터에 설치된 gradle과 java를 기준으로 build 하고, <code>./gradlew build</code>를 실행하면 <code>build.gradle</code> 파일에 정의한 내용을 기준으로 build된다.</p>\n<ul>\n<li>Linux, OSX, MacOS : <u>gradlew</u> 사용</li>\n<li>window : <u>gradleㅈ.bat</u> 사용</li>\n</ul>\n<h3>build.gradle 작성</h3>\n<p>다음은 SpringBoot를 gradle.build에 추가하는 내용이다.</p>\n<div class=\"language-groovy line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"groovy\" data-title=\"groovy\"><pre><code><span class=\"line\">plugins <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    id <span class=\"token string\">'org.springframework.boot'</span> version <span class=\"token string\">'2.2.0.RELEASE'</span></span>\n<span class=\"line\">    id <span class=\"token string\">'io.spring.dependency-management'</span> version <span class=\"token string\">'1.0.8.RELEASE'</span></span>\n<span class=\"line\">    id <span class=\"token string\">'java'</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// java version</span></span>\n<span class=\"line\">sourceCompatibility <span class=\"token operator\">=</span> <span class=\"token string\">'1.8'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 프로젝트의 종속성을 구성합니다.</span></span>\n<span class=\"line\">configurations <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    developmentOnly</span>\n<span class=\"line\">    runtimeClasspath <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        extendsFrom developmentOnly</span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// dependency를 maven에서 가져온다.</span></span>\n<span class=\"line\">repositories <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">dependencies <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 의존성(jar)을 가져온다.</span></span>\n<span class=\"line\">    implementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// test시에만 의존성을 가져온다.</span></span>\n<span class=\"line\">    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        exclude group<span class=\"token punctuation\">:</span> <span class=\"token string\">'org.junit.vintage'</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">:</span> <span class=\"token string\">'junit-vintage-engine'</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">test <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function\">useJUnitPlatform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>Reference</h2>\n<ul>\n<li><a href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle 공식 문서</a></li>\n<li><a href=\"https://effectivesquid.tistory.com/entry/Gradle-%EB%B9%8C%EB%93%9C%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B8%B0%EC%B4%88\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle 빌드 시스템 기초</a></li>\n<li><a href=\"https://kwonnam.pe.kr/wiki/gradle/wrapper\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle Wrapper</a></li>\n</ul>\n",
      "date_published": "2020-01-14T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "markdown-it-plantuml",
      "url": "https://junilhwang.github.io/TIL/TIL/vuepress/Plantuml/",
      "id": "https://junilhwang.github.io/TIL/TIL/vuepress/Plantuml/",
      "summary": "plantuml은 markdown에서 uml을 사용할 수 있게 해주는 플러그인이다.",
      "content_html": "\n<p>최근에 사내 입문교육에서 <code>plantuml</code>을 접했고 관심이 생겨서 정리한 내용이다.</p>\n<h2>1. Plantuml 소개</h2>\n<p>plantuml은 <code>markdown에서 uml을 사용</code>할 수 있게 해주는 플러그인이다.</p>\n<p>문법 또한 어렵지 않다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">@startuml</span>\n<span class=\"line\">Bob-&gt;Alice : hello</span>\n<span class=\"line\">@enduml</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 위의 코드는 다음과 같이 UML형태의 SVG로 변환 된다.</p>\n<img src=\"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBAJzArSyp9J4vLi5B8ICt9oUToICrB0Ke10000\" alt=\"uml diagram\">\n<p>조금 더 응용하여 웹 서비스의 구조를 표현해보도록 하자.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">@startuml</span>\n<span class=\"line\">actor User</span>\n<span class=\"line\">interface Client</span>\n<span class=\"line\">interface Server</span>\n<span class=\"line\">database MySQL</span>\n<span class=\"line\"></span>\n<span class=\"line\">User -&gt;&gt; Client : Event</span>\n<span class=\"line\">User &lt;&lt;- Client : HTML Document</span>\n<span class=\"line\">Client -&gt;&gt; Server : Http Request</span>\n<span class=\"line\">Server -&gt;&gt; Client : Http Response</span>\n<span class=\"line\">Server &lt;&lt;- MySQL : Data</span>\n<span class=\"line\">@enduml</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><img src=\"https://www.plantuml.com/plantuml/svg/LOz13e9034NtFKKlm0KC8IHYuW8MYXvW76f20ZCuxP1uUwSuHjs-ll_RrYmcI9mdC5Pym2jJWD49XRknXFjf92S_eAUm9cCmOcw62RjdVse1D8P5LUK0xl2mQd3ZPLby-V7IjTXu6sUTPwp9TxCQ8WkUwH691JBzgyu2BzunVGnTiXsJX2PT1pMv8Vtr0W00\" alt=\"uml diagram\">\n<p>이렇게 작성하고 보니 학부시절 <a href=\"https://www.umlet.com/\" target=\"_blank\" rel=\"noopener noreferrer\">umlet</a>으로 모든 도형을 하나하나 마우스로 그리고 배치하던게 주마등처럼 스쳐간다..</p>\n<p><img src=\"https://dispatch.cdnser.be/wp-content/uploads/2018/06/20180607225725_f.jpg\" alt=\"아련..\"></p>\n<h2>2. 플러그인 설치</h2>\n<p>본격적으로 Vuepress에서 plantuml을 사용할 수 있도록 플러그인을 설치해보자. vuepress는 기본적으로 <code>markdown-it</code>을 사용하고 있기 때문에 <code>markdown-it-plantuml</code>을 markdown-it에 extend 하면 된다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># yarn을 사용할 경우</span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> markdown-it-plantuml</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># npm을 사용할 경우</span></span>\n<span class=\"line\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> markdown-it-plantuml</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>설치가 완료 되었다면, <strong><code>.vuepress/config.js</code>에서 markdown에 plantuml을 extend</strong> 해보자.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token operator\">...</span> <span class=\"token comment\">// 앞 내용 생략</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">markdown</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token function-variable function\">extendMarkdown</span><span class=\"token operator\">:</span> <span class=\"token parameter\">md</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">      md<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'markdown-it-plantuml'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">  <span class=\"token operator\">...</span> <span class=\"token comment\">// 뒷 내용 생략</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 설정한 후에 plantuml을 사용하기만 하면 된다.</p>\n<h2>3. plantuml 응용하기</h2>\n<p>오늘(2020-01-06) 회사에서 진행중인 파일럿 프로젝트 문서에 사용한 plantuml의 일부다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">@startuml</span>\n<span class=\"line\">node \"Client\" {</span>\n<span class=\"line\">    agent Browser</span>\n<span class=\"line\">    node \"VueFramework\" {</span>\n<span class=\"line\">        (VueRouter)</span>\n<span class=\"line\">        [Components]</span>\n<span class=\"line\">        node \"VueStore\" {</span>\n<span class=\"line\">            [State]</span>\n<span class=\"line\">            [Mutations]</span>\n<span class=\"line\">            [Actions]</span>\n<span class=\"line\">        }</span>\n<span class=\"line\">    }</span>\n<span class=\"line\">}</span>\n<span class=\"line\">Browser --&gt; VueRouter : URI</span>\n<span class=\"line\">Browser -&gt; Components : Event</span>\n<span class=\"line\">VueRouter --&gt; Components</span>\n<span class=\"line\">VueStore --&gt; Components</span>\n<span class=\"line\">State &lt;- Mutations</span>\n<span class=\"line\">State &lt;-- Actions</span>\n<span class=\"line\">Mutations &lt;- Actions</span>\n<span class=\"line\">@enduml</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><img src=\"https://www.plantuml.com/plantuml/svg/NP3B2i8m44Nt-OgXArta1qHAjIYuSDEY6-cYs46ADYDvs8Nqtvs-KjiiGdBkpN18P6okhQjUGb614CIl4fKDu2k0L_xW2-mrrGPrH_hMrU5HvnNMf9zZjrqh3X9o5lNQirjCrPiK3pAPXtvCQadZ_uZkIMfpYzcSdHt3afHPyDrzGHlHxuqOn47A4BmPRE2IdAOiX4cGiyE73s9gorb1ZCfBtXd3LeBNz4Z2e2XyrXP76A4g-Fz_\" alt=\"uml diagram\">\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">@startuml</span>\n<span class=\"line\">node \"Server\" {</span>\n<span class=\"line\">    node Helper {</span>\n<span class=\"line\">        package \"CrawlerPacakge\" {</span>\n<span class=\"line\">            node \"MusicCrawler\"</span>\n<span class=\"line\">            node \"NewsCrawler\"</span>\n<span class=\"line\">            node \"Crawler\" </span>\n<span class=\"line\">        }</span>\n<span class=\"line\">        node \"Youtube Search API\" as YSA</span>\n<span class=\"line\">    }</span>\n<span class=\"line\">    node \"REST API\" as REST {</span>\n<span class=\"line\">        node Service</span>\n<span class=\"line\">        node Repository</span>\n<span class=\"line\">        node RestController</span>\n<span class=\"line\">    }</span>\n<span class=\"line\">    database H2</span>\n<span class=\"line\">}</span>\n<span class=\"line\">RestController &lt;-- Service</span>\n<span class=\"line\">Service &lt;-- Repository</span>\n<span class=\"line\">Service &lt;- Helper</span>\n<span class=\"line\">Repository &lt;-&gt; H2</span>\n<span class=\"line\">Crawler &lt;|-- MusicCrawler</span>\n<span class=\"line\">Crawler &lt;|-- NewsCrawler</span>\n<span class=\"line\">@enduml</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><img src=\"https://www.plantuml.com/plantuml/svg/VP4n3u8m48Nt_efBTnPdOY0kEcY8J8ndkIWHARaMYL7_kuLKA8dnbYRVUtUNUqsCHRRThHQDBWbaJdmdbl0Ku6faMwfROa-6Qb5TyUpC6yQ-9ivGuVLCCh1CpNBVcKfve_oX7wWtV-Il19Fs5aj7eJlRdGXoGbONIBET13HGvAcOxQDrkArID8CZjTfKLlCZPCPkT6DPrsxlo4kqU4BZabY9jrWQ88wYQR1_HnRCdh7FKioYW-jXhhyJufVh3JDRAa5Q8g6cT1_t0G00\" alt=\"uml diagram\">\n<p>plantuml만 있으면 설계문서는 매우 쉽게 작성할 수 있다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://vuepress.vuejs.org/config/#markdown-extendmarkdown\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown Extention 공식문서</a></li>\n<li><a href=\"https://plantuml.com/ko/\" target=\"_blank\" rel=\"noopener noreferrer\">Plantuml 공식 문서</a></li>\n<li><a href=\"https://www.npmjs.com/package/markdown-it-plantuml\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it-plantuml</a></li>\n</ul>\n",
      "image": "https://dispatch.cdnser.be/wp-content/uploads/2018/06/20180607225725_f.jpg",
      "date_published": "2020-01-07T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Vuepress + Utterances",
      "url": "https://junilhwang.github.io/TIL/TIL/vuepress/Utterances/",
      "id": "https://junilhwang.github.io/TIL/TIL/vuepress/Utterances/",
      "summary": "Vuepress에 Utterances(GitHub Issue를 이용한 댓글)를 적용하는 방법에 대해 기술합니다.",
      "content_html": "\n<p>Vuepress에 Utterances(GitHub Issue를 이용한 댓글)를 적용하는 방법에 대해 기술합니다.</p>\n<h2>1. Utterances Install</h2>\n<p><a href=\"https://utteranc.es/\" target=\"_blank\" rel=\"noopener noreferrer\">Utterances</a>는 <strong>GitHub Issue 기반</strong>으로 댓글(Comment)를 작성할 수 있게 해주는 플러그인이다.</p>\n<p>기존에 워드프레스로 만든 나의 개인 사이트는 <code>Disqus</code>를 이용하여 댓글을 관리하고 있는데, 개인적으로 Disqus보단 Utterances가 더 좋은 것 같다.</p>\n<p>Utterances를 사용하는 방법은 매우 간단하다. 사실 공식 사이트에 있는 내용을 그대로 따라하면 된다.</p>\n<h3>Repository</h3>\n<p>먼저 GitHub에 Public Repository를 만들어야 한다. 필자는 <a href=\"https://github.com/JunilHwang/blog-comment\" target=\"_blank\" rel=\"noopener noreferrer\">blog-comment</a> 라는 이름으로 만들었다.</p>\n<p>그리고 해당 Repository에 <code>Utterances App</code>을 설치해야한다. <a href=\"https://github.com/apps/utterances\" target=\"_blank\" rel=\"noopener noreferrer\">이 링크</a>에서 설치하면 된다.</p>\n<p>그 다음에 이 <code>script tag</code>를 적용할 page에 붙이면 된다.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span></span>\n<span class=\"line\">  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://utteranc.es/client.js<span class=\"token punctuation\">\"</span></span></span>\n<span class=\"line highlighted\">  <span class=\"token attr-name\">repo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>junilhwang/blog-comment<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">&lt;!--</span> <span class=\"token attr-name\">댓글(Comment)로</span> <span class=\"token attr-name\">사용할</span> <span class=\"token attr-name\">Repository</span> <span class=\"token attr-name\">--</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\">  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span></span>\n<span class=\"line highlighted\">    댓글 등록시 Issue가 등록되는데<span class=\"token punctuation\">,</span> 이 때 등록될 Issue의 title 형태</span>\n<span class=\"line highlighted\">    pathname<span class=\"token operator\">|</span>title<span class=\"token operator\">|</span>og<span class=\"token operator\">:</span>title<span class=\"token operator\">|</span>url 중 택 <span class=\"token number\">1</span></span>\n<span class=\"line\">  <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">  issue<span class=\"token operator\">-</span>term<span class=\"token operator\">=</span><span class=\"token string\">\"pathname\"</span></span>\n<span class=\"line\">  theme<span class=\"token operator\">=</span><span class=\"token string\">\"github-light\"</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 적용할 테마 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span></span>\n<span class=\"line\">  crossorigin<span class=\"token operator\">=</span><span class=\"token string\">\"anonymous\"</span></span>\n<span class=\"line\">  async<span class=\"token operator\">&gt;</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>그런데 문제는 Vuepress Post에 직접적으로 script tag를 추가할 수 없다는 것이다</strong></p>\n<h2>2. VuePress에 적용하기</h2>\n<p><code>global-components</code>를 이용하면 VuePress에 Utterances를 적용할 수 있다.</p>\n<p>일단 <code>.vuepress/theme/Comment.vue</code> 파일을 만들고, 다음과 같이 입력하자.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// script tag 생성</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> utterances <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    utterances<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'text/javascript'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    utterances<span class=\"token punctuation\">.</span>async <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    utterances<span class=\"token punctuation\">.</span>crossorigin <span class=\"token operator\">=</span> <span class=\"token string\">'anonymous'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    utterances<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://utteranc.es/client.js'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    </span>\n<span class=\"line highlighted\">    utterances<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'issue-term'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pathname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pathname|url|title|og:title 중 택 1</span></span>\n<span class=\"line highlighted\">    utterances<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'theme'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'github-light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// theme 설정</span></span>\n<span class=\"line highlighted\">    utterances<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'repo'</span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">junilhwang/blog-comment</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사용할 repository</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">    <span class=\"token comment\">// script tag 삽입</span></span>\n<span class=\"line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>utterances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그런데 <code>global-components</code>는 <strong>theme에서 사용하는 기능</strong>이기 때문에 theme에 따라 적용 방법이 다르다.</p>\n<h3>현재 Theme에 Extend하여 적용하기</h3>\n<p>theme를 custom 하지 않았다면, 즉, default theme를 그대로 사용중이라면 default theme를 extend 해서 적용하면 된다.</p>\n<p>먼저 <code>.vuepress/theme/index.js</code> 파일을 만들어야 한다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// .vuepress/theme/index.js</span></span>\n<span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">extend</span><span class=\"token operator\">:</span> <span class=\"token string\">'@vuepress/theme-default'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">globalLayout</span><span class=\"token operator\">:</span> <span class=\"token string\">'/layouts/GlobalLayout'</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 <code>.vuepress/layouts/GlobalLayout.vue</code> 에 다음과 같이 입력하면 된다.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>global-layout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$page.path ? 'Layout' : 'NotFound'<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Comment</span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>여기서 <code>&lt;Comment /&gt;</code>는 <code>global-components</code> 에서 저절로 가져와진다.</p>\n<p>그러면 이런식으로 적용된다.</p>\n<p></p>\n<h3>직접 만든 Theme에 적용하기</h3>\n<p>Theme를 직접 만들었다면 <code>.vuepress/theme/layouts/Layout.vue</code>에서 원하는 부분에 <code>&lt;Comment /&gt;</code>를 삽입하면 된다.</p>\n<p>필자의 경우엔 다음과 같이 했다.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">...</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Home</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$page.frontmatter.home<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Page</span> <span class=\"token attr-name\">v-else</span> <span class=\"token attr-name\">:sidebar-items</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebarItems<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line highlighted\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Comment</span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Navbar</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shouldShowNavbar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@toggle-sidebar</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggleSidebar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sidebar-mask<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggleSidebar(false)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Sidebar</span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Footer</span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"></span>\n<span class=\"line\"><span class=\"token comment\">// 생략</span></span>\n<span class=\"line\"></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 말 그대로 <strong>원하는 위치</strong>에 <code>&lt;Comment /&gt;</code>를 넣어주기만 하면 된다.</p>\n<h3>md 파일에 직접 넣기</h3>\n<p>VuePress에서는 <code>*.md</code> 파일에 있는 <code>VueComponent</code>를 <strong>html로 변환</strong>하여 출력한다.</p>\n<p>그래서 그냥 markdown에 <code>&lt;Comment /&gt;</code>를 그대로 사용해도 된다.</p>\n<div class=\"language-markdown line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"md\" data-title=\"md\"><pre><code><span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> Utterances</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">github issue를 comment로 사용하기</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Comment</span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>Reference</h2>\n<ul>\n<li><a href=\"https://utteranc.es/\" target=\"_blank\" rel=\"noopener noreferrer\">Utterances 공식문서</a></li>\n<li><a href=\"https://vuepress.vuejs.org/guide/using-vue.html\" target=\"_blank\" rel=\"noopener noreferrer\">Using Vue in Markdown</a></li>\n<li><a href=\"https://vuepress.vuejs.org/theme/writing-a-theme.html#directory-structure\" target=\"_blank\" rel=\"noopener noreferrer\">Vuepress Theme Write</a></li>\n<li><a href=\"https://vuepress.vuejs.org/theme/option-api.html#globallayout\" target=\"_blank\" rel=\"noopener noreferrer\">Vuepress Global Layouts</a></li>\n</ul>\n",
      "date_published": "2020-01-07T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "github page에 배포하기",
      "url": "https://junilhwang.github.io/TIL/TIL/vuepress/Deploy/",
      "id": "https://junilhwang.github.io/TIL/TIL/vuepress/Deploy/",
      "summary": "Vuepress로 만든 문서를 github page에 배포하는 방법에 대해 기록한 문서이다.",
      "content_html": "\n<p>Vuepress로 만든 문서를 github page에 배포하는 방법에 대해 기록한 문서이다.</p>\n<h2>1. 배포 과정 이해하기</h2>\n<p>먼저 <code>deploy.sh</code> 를 작성해야 한다. 이 스크립트가 하는 일은 다음과 같다.</p>\n<ol>\n<li>문서 빌드</li>\n<li>빌드된 문서를 git init -&gt; add -&gt; commit</li>\n<li>github에 push\n<ul>\n<li><code>https://&lt;user&gt;.github.com/</code> 에 배포하고 싶다면,\n<ul>\n<li>repository: <code>&lt;user&gt;.github.com</code></li>\n<li>branch: <code>master</code></li>\n</ul>\n</li>\n<li><code>https://&lt;user&gt;.github.com/&lt;repo&gt;</code> 에 배포하고 싶다면,\n<ul>\n<li>repository: <code>&lt;repo&gt;</code></li>\n<li>branch: <code>gh-pages</code></li>\n</ul>\n</li>\n<li>참고링크 : <a href=\"http://dogfeet.github.io/articles/2012/github-pages.html\" target=\"_blank\" rel=\"noopener noreferrer\">Github Pages 기능 이용하기</a></li>\n</ul>\n</li>\n</ol>\n<p>이 때 <code>package.json의 npm script</code>와 <code>deploy.sh의 위치</code>가 중요하기 때문에 프로젝트 폴더 구조에 따라 작성하는 방법이 다르다.</p>\n<h2>2. 프로젝트가 root 기준일 때</h2>\n<p>폴더 구조가 다음과 같다면</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">.(VuepressProject)</span>\n<span class=\"line\">├─ node_modules</span>\n<span class=\"line\">├─ package.json</span>\n<span class=\"line highlighted\">├─ .vuepress</span>\n<span class=\"line\">└─ deploy.sh </span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>일단 <code>package.json</code>의 <code>npm scripts</code>는 아래 처럼 작성해야 한다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  ... <span class=\"token comment\">// 앞 내용 생략</span></span>\n<span class=\"line\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"docs:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"docs:build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  ... <span class=\"token comment\">// 뒷 내용 생략</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>deploy.sh</code>는 이렇게 작성해야 한다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token shebang important\">#!/usr/bin/env sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 오류 발생시 중단한다.</span></span>\n<span class=\"line\"><span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 문서(md)를 build하여 html로 만든다. </span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> docs:build</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># build가 output된 폴더로 이동한다. </span></span>\n<span class=\"line highlighted\"><span class=\"token builtin class-name\">cd</span> .vuepress/dist</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># init + add + commit을 해준 다음</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> init</span>\n<span class=\"line\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'deploy'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># git push -f https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt; 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># git push -f https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 필자의 경우 TIL repository에 배포하기 때문에 아래와 같이 작성했다.</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span> https://github.com/JunilHwang/TIL.git master:gh-pages</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin class-name\">cd</span> -</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>3. vuepress가 root/docs 기준일 때</h2>\n<p>폴더 구조가 다음과 같다면</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">.(VuepressProject)</span>\n<span class=\"line\">├─ node_modules</span>\n<span class=\"line\">├─ package.json</span>\n<span class=\"line highlighted\">├─ docs</span>\n<span class=\"line highlighted\">│   └─ .vuepress</span>\n<span class=\"line\">└─ deploy.sh </span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>package.json에서 <code>vuepress cli</code>에 <code>docs</code>를 붙여야한다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  ... <span class=\"token comment\">// 앞 내용 생략</span></span>\n<span class=\"line\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"docs:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"docs:build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  ... <span class=\"token comment\">// 뒷 내용 생략</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>deploy.sh</code>는 이렇게 작성해야 한다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token shebang important\">#!/usr/bin/env sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 오류 발생시 중단한다.</span></span>\n<span class=\"line\"><span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 문서(md)를 build하여 html로 만든다. </span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> docs:build</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># build가 output된 폴더로 이동한다. </span></span>\n<span class=\"line highlighted\"><span class=\"token builtin class-name\">cd</span> docs/.vuepress/dist</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># init + add + commit을 해준 다음</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> init</span>\n<span class=\"line\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'deploy'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># git push -f https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt; 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># git push -f https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 필자의 경우 TIL repository에 배포하기 때문에 아래와 같이 작성했다.</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span> https://github.com/JunilHwang/TIL.git master:gh-pages</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin class-name\">cd</span> -</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>물론 위의 두 가지 경우 말고도 다양한 프로젝트 구조가 있을 수 있다.</p>\n<p>중요한 것은 <strong>deploy.sh가 정확하게 build된 폴더로 이동하여 github에 push할 수 있어야 한다는 점</strong>이다.</p>\n<h2>4. Shell Script 실행하기</h2>\n<p>처음 vuepress를 github pages에 배포할 때 push만 하면 deploy.sh를 자동으로 실행하는 줄 알았다(?)</p>\n<p>그건 나의 희망사항 이였고, <code>deploy.sh는 직접 실행</code>해야 한다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token function\">sh</span> deploy.sh</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ul>\n<li><strong>window</strong> : <code>git bash</code> 를 통해서 실행하면 된다.</li>\n<li><strong>mac</strong> : <code>terminal</code> 에서 실행하면 된다.</li>\n</ul>\n<h2>5. 자동으로 배포하기</h2>\n<p>자동으로 배포하는 방법은 다양하다. <s>하지만 난 수동으로 할래!</s></p>\n<ul>\n<li><a href=\"https://docs.travis-ci.com/user/deployment/pages/\" target=\"_blank\" rel=\"noopener noreferrer\">Travis CI</a></li>\n<li><a href=\"https://netlify.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Netlify</a></li>\n<li><a href=\"https://www.npmjs.com/package/firebase-tools\" target=\"_blank\" rel=\"noopener noreferrer\">Google Firebase</a></li>\n<li><a href=\"https://www.npmjs.com/package/surge\" target=\"_blank\" rel=\"noopener noreferrer\">Surge</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/heroku-cli\" target=\"_blank\" rel=\"noopener noreferrer\">Heroku CLI</a></li>\n<li><a href=\"https://zeit.co/examples/vuepress/\" target=\"_blank\" rel=\"noopener noreferrer\">Now</a></li>\n</ul>\n<p>이 부분은 <a href=\"https://vuepress.vuejs.org/guide/deploy.html\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a>를 참고하는걸로..</p>\n<h2>6. gh-pages branch 에 commit 기록 남기기</h2>\n<p>배포를 성공하는 것 까진 좋았다. 그런데 gh-pages에는 항상 commit 기록이 1개만 남아있는 상태가 유지된다. 이 때 <code>deploy.sh</code>의 내용을 조금 손보면 된다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token shebang important\">#!/usr/bin/env sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 오류 발생시 중단한다.</span></span>\n<span class=\"line\"><span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 문서(md)를 build하여 html로 만든다. </span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> docs:build</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># build가 output된 폴더로 이동한다. </span></span>\n<span class=\"line\"><span class=\"token builtin class-name\">cd</span> docs/.vuepress/dist</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># git clone https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt; 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># 필자는 이 경우에 해당한다.</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">-b</span> gh-pages https://github.com/<span class=\"token operator\">&lt;</span>USERNAME<span class=\"token operator\">&gt;</span>/<span class=\"token operator\">&lt;</span>REPO<span class=\"token operator\">&gt;</span>/</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># .git의 내용을 복사한 후 clone은 삭제한다.</span></span>\n<span class=\"line\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rf</span> TIL/.git ./.git</span>\n<span class=\"line\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> TIL</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># 이제 add + commit + push를 차례대로 실행해주면 끝</span></span>\n<span class=\"line\"><span class=\"token comment\"># $1은 문자열 인자</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'$1'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt; 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># git push origin master</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt; 에 배포하는 경우</span></span>\n<span class=\"line\"><span class=\"token comment\"># 필자는 이 경우에 해당한다.</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> push origin gh-pages</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token builtin class-name\">cd</span> -</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이렇게 작성된 <code>deploy.sh</code>은 다음과 같이 사용하면 된다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token function\">sh</span> deploy.sh <span class=\"token string\">\"커밋 메세지\"</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p><code>문서 commit + deploy까지 같이 자동화</code> 하고 싶다면 또 새로운 shell scripts를 작성하면 된다.</p>\n<p>파일명은 대충 <code>commit.sh</code> 이라고 지었다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token shebang important\">#!/usr/bin/env sh</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># abort on errors</span></span>\n<span class=\"line\"><span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span></span>\n<span class=\"line\"><span class=\"token function\">git</span> push origin master</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token function\">sh</span> deploy.sh <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>사용 방법은 다음과 같다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token function\">sh</span> commit.sh <span class=\"token string\">\"커밋 메세지\"</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>이러면 문서도 commit해주고 같은 commit message로 배포까지 완료해준다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"http://dogfeet.github.io/articles/2012/github-pages.html\" target=\"_blank\" rel=\"noopener noreferrer\">Github Pages 기능 이용하기</a></li>\n<li><a href=\"https://vuepress.vuejs.org/guide/deploy.html\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a></li>\n<li><a href=\"https://joshua1988.github.io/vue-camp/vuepress/learning-note.html#%EC%82%AC%EC%9D%B4%ED%8A%B8-%EB%B0%B0%ED%8F%AC-%ED%95%98%EA%B8%B0-%EC%A0%88%EC%B0%A8\" target=\"_blank\" rel=\"noopener noreferrer\">Vuepress 사이트 배포하기 절차</a></li>\n</ul>\n",
      "date_published": "2020-01-06T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "VuePress 테마 설정",
      "url": "https://junilhwang.github.io/TIL/TIL/vuepress/Theme/",
      "id": "https://junilhwang.github.io/TIL/TIL/vuepress/Theme/",
      "summary": "현재 페이지는 VuePress에서 Theme를 다루는 방법에 대해 기술한 내용이다.",
      "content_html": "\n<p>현재 페이지는 VuePress에서 Theme를 다루는 방법에 대해 기술한 내용이다.</p>\n<h2>Using Theme</h2>\n<p>테마는 직접 만들 수도 있고, 다른 사람이 만든 테마를 다운받아 사용할 수도 있다.</p>\n<p>테마와 관련된 설정은 기본적으로 <code>.vuepress/config.js</code> 에 입력하면 된다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// .vuepress/config.js</span></span>\n<span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> <span class=\"token string\">'vuepress-theme-테마이름'</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>prefix</code>가 <strong>vuepress-theme-</strong> 일 경우, 생략할 수 있다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// .vuepress/config.js</span></span>\n<span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> <span class=\"token string\">'테마이름'</span> <span class=\"token comment\">// 'vuepress-theme-테마이름' 을 가져온다.</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>참고로, vuepress의 기본 테마는 <code>node_modules/@vuepress/theme-default</code> 에 들어있으며,</p>\n<p>config.js에 theme를 지정하지 않으면, default는 <code>@vuepress/theme-default</code> 이다.</p>\n<h2>Vuepress Theme 직접 만들기</h2>\n<p>테마를 직접 만드는 방법은 매우 간단하다. <code>.vuepress/theme</code> 폴더를 만들고, 가이드라인대로 파일 및 폴더를 구성하면 된다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">.</span>\n<span class=\"line\">└─ .vuepress</span>\n<span class=\"line highlighted\">│  └─ theme</span>\n<span class=\"line highlighted\">│     └─ Layout.vue</span>\n<span class=\"line\">└─ README.md</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 <code>Layout.vue</code> 에 <code>&lt;Content /&gt;</code> 라는 component를 사용하면, <code>*.md</code> 파일의 내용이 보여지게 된다.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>README.md</code>에 있는 내용이 다음과 같다고 했을 때</p>\n<div class=\"language-markdown line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"md\" data-title=\"md\"><pre><code><span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> Custom Theme</span></span>\n<span class=\"line\">md 파일의 내용은 <span class=\"token code-snippet code keyword\">`&lt;Content /&gt;`</span> Component 를 통하여 보여지게 됩니다. </span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>결과 화면은 이렇게 나온다.</p>\n<p></p>\n<p>모든 <code>*.md</code> 파일은 <code>&lt;Content /&gt;</code> Component에 mapping 된다.</p>\n<h3>Theme Directory Structure</h3>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">theme</span>\n<span class=\"line\">├─ global-components</span>\n<span class=\"line\">│   └─ xxx.vue</span>\n<span class=\"line\">├─ components</span>\n<span class=\"line\">│   └─ xxx.vue</span>\n<span class=\"line\">├─ layouts</span>\n<span class=\"line\">│   ├─ Layout.vue (Mandatory)</span>\n<span class=\"line\">│   └─ 404.vue</span>\n<span class=\"line\">├─ styles</span>\n<span class=\"line\">│   ├─ index.styl</span>\n<span class=\"line\">│   └─ palette.styl</span>\n<span class=\"line\">├─ templates</span>\n<span class=\"line\">│   ├─ dev.html</span>\n<span class=\"line\">│   └─ ssr.html</span>\n<span class=\"line\">├─ index.js</span>\n<span class=\"line\">└─ enhanceApp.js</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"custom-container tip\"><p class=\"custom-container-title\">상세 설명</p>\n<ul>\n<li><code>theme/global-components</code> 이 디렉토리의 component는 자동으로 global component로 등록됨. <br><a href=\"https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/plugin-register-components\" target=\"_blank\" rel=\"noopener noreferrer\">* 참고링크</a></li>\n<li><code>theme/components</code> component 등록</li>\n<li><code>theme/layouts</code> Layout.vue가 기본 component 가 되고, 404.vue는 404 page에 대한 component 가 됨</li>\n<li><code>theme/styles</code> index.styl과 palette.styl을 기본으로 불러옴. 나머지는 작성하기 나름</li>\n<li><code>theme/templates</code> 기본 템플릿</li>\n<li><code>theme/index.js</code> 테마 구성의 entry 파일</li>\n<li><code>theme/enhanceApp.js</code> Vue plugin을 설치하거나 전역 구성 요소를 등록하거나 라우터 후크 추가 가능</li>\n</ul>\n</div>\n<p><code>Layout.vue</code> 는 항상 필요하지만, 다른 것들은 필요할 때 추가하면 된다.</p>\n<h3>VuePress 관련 computed 변수</h3>\n<p>VuePress에는 default theme 또는 custom theme에 사용하기 위해 <code>global computed</code>가 내장되어 있습니다.</p>\n<p>자세한 내용은 <a href=\"https://vuepress.vuejs.org/guide/global-computed.html\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a> 에서 확인할 수 있고, 일단 핵심적으로 사용되는 변수만 나열하면 다음과 같다.</p>\n<h4>$site</h4>\n<p>site의 <code>title</code> <code>description</code> <code>base</code> <code>pages</code> 등을 가져온다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue-powered static site generator\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"pages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">      <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524027677000</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">      <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    ...</span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>$page</h4>\n<p>현재 페이지에 대한 정보를 가져온다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Global Computed\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"regularPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/guide/global-computed.html\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"v-d4cbeb69eff3d\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/guide/global-computed.html\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"level\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$site\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"slug\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"site\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"level\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$page\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"slug\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$page\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    ...</span>\n<span class=\"line\">  <span class=\"token punctuation\">]</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>$themeconfig</h4>\n<p><code>config.js</code>의 <code>themeConfig</code>를 가져온다.</p>\n<h3>Theme를 직접 만들 때의 문제점</h3>\n<p>Theme를 직접 만들면 <code>default theme</code>에서 제공하는 style과 plugin을 사용할 수 없기 때문에 <code>code block</code> 이나 <code>markdown</code> 등을 새롭게 꾸며줘야 한다.</p>\n<p>예를들어 <code>code block</code>을 입력하면 다음과 같이 <strong>날 것(?) 으로 출력</strong>된다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\"># Custom Theme</span>\n<span class=\"line\">md 파일의 내용은 `&lt;Content /&gt;` Component 를 통하여 보여지게 됩니다.</span>\n<span class=\"line\"></span>\n<span class=\"line\">## code block</span>\n<span class=\"line\"></span>\n<span class=\"line\">```js</span>\n<span class=\"line\">const a = 10;</span>\n<span class=\"line\">```</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>이에 대한 방안 중 하나는 <strong>default-theme의 style을 가져다 사용하는 것</strong>이다.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line highlighted\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>theme-default-content<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line highlighted\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylus<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@vuepress/theme-default/styles/index.styl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>하지만 default-theme에서 지원하지 않는 것들을 일일히 찾아서 수정하는 것은 번거롭기 때문에, Theme를 처음부터 만드는 것 보단 <code>default theme</code>를 <strong>extend</strong> 하여 사용하거나 <strong>eject</strong> 사용 하는 것이 좋다.</p>\n<h2>Theme Extend</h2>\n<p>theme를 extend 하는 방법도 매우 간단하다. <code>.vuepress/theme/index.js</code> 에 다음과 같이 작성하면 된다.</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// theme/index.js</span></span>\n<span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">extend</span><span class=\"token operator\">:</span> <span class=\"token string\">'@vuepress/theme-default'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">  <span class=\"token literal-property property\">globalLayout</span><span class=\"token operator\">:</span> <span class=\"token string\">'/layouts/GlobalLayout'</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>GlobalLayout.vue</code> 도 만들어줘야 한다.</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\" data-title=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>global-layout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line highlighted\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$page.path ? 'Layout' : 'NotFound'<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>siteFooter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">      <span class=\"token entity named-entity\" title=\"©\">&amp;copy;</span> 개발자 황준일</span>\n<span class=\"line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>위와 같이 구성했을 때, 폴더 구조는 다음과 같다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">.</span>\n<span class=\"line\">└─ .vuepress</span>\n<span class=\"line\">│  └─ theme</span>\n<span class=\"line highlighted\">│     ├─ layouts</span>\n<span class=\"line highlighted\">│     │ └─ GlobalLayout.vue</span>\n<span class=\"line highlighted\">│     └─ index.js</span>\n<span class=\"line\">└─ README.md</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>결과를 확인해보면, footer가 추가된 것을 볼 수 있다.</p>\n<p></p>\n<p>여기서 <code>.vuepress/styles/index.styl</code> <code>.vuepress/styles/palette.styl</code> <code>.vuepress/config.js</code> 등의 파일을 만들고 약간의 입력을 통하여 조금 더 세련되게 꾸밀 수 있다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">TIP</p>\n<p><code>index.styl</code>은 <strong>전역에서 사용</strong>되는 stylesheet 이며,\n<code>pallete.styl</code>은 vuepress에서 사용하는 <strong>color들의 변수</strong>들을 담고 있다.</p>\n<p>다음은 <code>default</code>로 입력되어있는 pallete.styl 의 내용이다.</p>\n<div class=\"language-stylus line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"styl\" data-title=\"styl\"><pre><code><span class=\"line\"><span class=\"token comment\">// showing default values</span></span>\n<span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$accentColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#3eaf7c</span></span></span>\n<span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$textColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#2c3e50</span></span></span>\n<span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$borderColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#eaecef</span></span></span>\n<span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$codeBgColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#282c34</span></span></span>\n<span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$badgeTipColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#42b983</span></span></span>\n<span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$badgeWarningColor</span> <span class=\"token operator\">=</span> <span class=\"token func\"><span class=\"token function\">darken</span><span class=\"token punctuation\">(</span><span class=\"token hexcode\">#ffe564</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token unit\">%</span><span class=\"token punctuation\">)</span></span></span></span>\n<span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$badgeErrorColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#DA5961</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></div>\n<p><strong>변경될 구조</strong></p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">.</span>\n<span class=\"line\">└─ .vuepress</span>\n<span class=\"line highlighted\">│  ├─ config.js</span>\n<span class=\"line highlighted\">│  ├─ styles</span>\n<span class=\"line highlighted\">│  │  ├─ index.styl</span>\n<span class=\"line highlighted\">│  │  └─ palette.styl</span>\n<span class=\"line\">│  └─ theme</span>\n<span class=\"line\">│     ├─ layouts</span>\n<span class=\"line\">│     │ └─ GlobalLayout.vue</span>\n<span class=\"line\">│     └─ index.js</span>\n<span class=\"line\">└─ README.md</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>config.js</code> <code>index.styl</code> <code>palette.styl</code> 추가</p>\n<p><strong>.vuepress/config.js</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'VuePresesThemeCustom'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'테마 커스텀하기'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">themeConfig</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">search</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 검색은 사용하지 않는다.</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">logo</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://avatars0.githubusercontent.com/u/18749057?s=120&amp;v=4'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// logo 이미지</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">nav</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">link</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 상단 메뉴</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">sidebar</span><span class=\"token operator\">:</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 사이드바 사용 여부. auto로 하면 content의 내용이 반영된다.</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">smoothScroll</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 부드러운 스크롤 사용 여부</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>config에 대한 내용은 <a href=\"https://vuepress.vuejs.org/theme/default-theme-config.html\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a>를 참고하면 된다.</p>\n<p><strong>.vuepress/styles/index.styl</strong></p>\n<div class=\"language-stylus line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"styl\" data-title=\"styl\"><pre><code><span class=\"line\"><span class=\"token comment\">// font는 noto serif kr 을 기본으로 사용하도록 한다.</span></span>\n<span class=\"line\"><span class=\"token atrule-declaration\"><span class=\"token atrule\">@import</span> <span class=\"token url\">url('https://fonts.googleapis.com/css?family=Noto+Serif+KR&amp;display=swap')</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"line\"><span class=\"token selector\">body</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">font-family</span> <span class=\"token string\">'Noto Serif KR'</span><span class=\"token punctuation\">,</span> serif<span class=\"token punctuation\">,</span> Nanum Gothic<span class=\"token punctuation\">,</span> Malgun Gothic<span class=\"token punctuation\">,</span> -apple-system<span class=\"token punctuation\">,</span> BlinkMacSystemFont<span class=\"token punctuation\">,</span> <span class=\"token string\">'Segoe UI'</span><span class=\"token punctuation\">,</span> Roboto<span class=\"token punctuation\">,</span> Oxygen<span class=\"token punctuation\">,</span> Ubuntu<span class=\"token punctuation\">,</span> Cantarell<span class=\"token punctuation\">,</span> <span class=\"token string\">'Open Sans'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Helvetica Neue'</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token selector\">h1</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">color</span> $accentColor</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token selector\"><span class=\"token comment\">// 직접 만든 footer를 꾸미자</span></span>\n<span class=\"line\">.siteFooter</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">background</span> <span class=\"token hexcode\">#242729</span></span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">padding</span> <span class=\"token number\">30</span><span class=\"token unit\">px</span> <span class=\"token number\">0</span></span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">font-size</span> <span class=\"token number\">13</span><span class=\"token unit\">px</span></span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">color</span> <span class=\"token hexcode\">#848d95</span></span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">text-align</span> center</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token selector\"><span class=\"token comment\">// sidebar를 꾸며보자</span></span>\n<span class=\"line\">.sidebar</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">background</span> none</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">border-right</span> none</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">bottom</span> none</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">left</span> <span class=\"token func\"><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token unit\">%</span> <span class=\"token operator\">+</span> <span class=\"token number\">450</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span></span></span></span>\n<span class=\"line\">  <span class=\"token selector\">&amp;-link</span></span>\n<span class=\"line\">    <span class=\"token selector\">&amp;.active</span></span>\n<span class=\"line\">      <span class=\"token property-declaration\"><span class=\"token property\">border-left</span> none</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token selector\">.page</span></span>\n<span class=\"line\">  <span class=\"token property-declaration\"><span class=\"token property\">padding-left</span> <span class=\"token number\">0</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>.vuepress/styles/palette.styl</strong></p>\n<div class=\"language-stylus line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"styl\" data-title=\"styl\"><pre><code><span class=\"line\"><span class=\"token variable-declaration\"><span class=\"token variable\">$accentColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#1b52eb</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>accentColor는 기본 point 이다. 기본에는 초록색이였음.</p>\n<p><strong>결과화면</strong></p>\n<p></p>\n<p>조금만 손봤을 뿐인데 깔끔하게 만들어진 것을 확인할 수 있다.</p>\n<h2>Theme Eject</h2>\n<p>아예 Default Theme를 가져와서 직접 수정할 수도 있다.</p>\n<p><code>package.json</code> 에서 npm scripts로 eject 명령을 추가해보자.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token comment\">// pacakge.json</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress-stater\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"docs:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev --port 8000\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"docs:build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"docs:eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress eject\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"vuepress\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.0-rc.1\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그 다음에 terminal에서 <code>yarn docs:eject</code> 를 실행하면 된다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token function\">yarn</span> docs:eject</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><p>그러면 <code>.vuepress/theme</code> 폴더에 <code>@vuepress/theme-default</code>의 있는 파일들이 복사된 것을 확인할 수 있다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">theme</span>\n<span class=\"line\">├─ components</span>\n<span class=\"line\">│  ├─ Home.vue</span>\n<span class=\"line\">│  ├─ Navbar.vue</span>\n<span class=\"line\">│  └─ ...(기타 components)</span>\n<span class=\"line\">├─ global-components</span>\n<span class=\"line\">│  └─ Badge.vue</span>\n<span class=\"line\">├─ layouts</span>\n<span class=\"line\">│  ├─ Layout.vue</span>\n<span class=\"line\">│  └─ 404.vue</span>\n<span class=\"line\">├─ styles</span>\n<span class=\"line\">│  ├─ index.vue</span>\n<span class=\"line\">│  └─ ...(기타 styles)</span>\n<span class=\"line\">├─ util</span>\n<span class=\"line\">│  └─ index.js</span>\n<span class=\"line\">├─ index.js</span>\n<span class=\"line\">├─ LICENSE</span>\n<span class=\"line\">└─ noopModule.js</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이제 이 <code>theme-default</code> 의 내용을 기반으로 직접 수정하면 된다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://vuepress.vuejs.org/theme/\" target=\"_blank\" rel=\"noopener noreferrer\">공식문서</a></li>\n<li><a href=\"https://blog.g40n.xyz/posts/2019-01-01-vuepress-blog.html\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress로 블로그 만들기</a></li>\n</ul>\n",
      "date_published": "2020-01-05T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Vuepress 시작하기",
      "url": "https://junilhwang.github.io/TIL/TIL/vuepress/Starter/",
      "id": "https://junilhwang.github.io/TIL/TIL/vuepress/Starter/",
      "summary": "현재 페이지에서 다루고 있는 내용은 vuepress로 TIL 문서를 만들면서 알게된 내용들을 정리한 것이다.",
      "content_html": "\n<p>현재 페이지에서 다루고 있는 내용은 vuepress로 TIL 문서를 만들면서 알게된 내용들을 정리한 것이다.</p>\n<h2>Static Site Generator</h2>\n<p>먼저 vuepress 이전에 <code>SSG(Static Site Generator)</code> 에 대한 이해가 필요하다. SSG는 한국말로 <code>정적 사이트 생성기</code> 이며, 말 그대로 html, js, css 로만 만들어진 사이트를 의미한다. 감이 잘 안잡힌다면 <code>동적 사이트</code> 라는 개념을 생각해보자.</p>\n<h3>동적 사이트(Dynamic Site)</h3>\n<p>아마 다음과 같은 기술(혹은 프로그래밍 언어, 프레임워크)은 익숙할 것이다.</p>\n<ul>\n<li><code>java</code> Spring framework, jsp</li>\n<li><code>php</code> Laravel, Codeigniter framework, Wordpress</li>\n<li><code>python</code> Django, Flask framework</li>\n<li><code>node.js</code> Express.js, Coa.js, Nest.js</li>\n<li><code>C#</code> .NET framework</li>\n</ul>\n<p>위와 같은 기술스택으로 만들어진 사이트를 '동적 사이트' 라고 생각하면 된다.\n예를 들어 <code>게시판</code> 이라는 시스템이 그렇다.\n게시판에는 글작성, 글수정, 글삭제, 글조회 등이 존재한다.\n그리고 <code>조회 페이지</code>의 경우 <strong>하나의 페이지를 프로그래밍 하여 만들어 놓으면 그 페이지에 게시물 정보가 매칭되어 여러 개의 페이지가 만들어지는 것이다.</strong></p>\n<h3>정적 사이트(Static Site)</h3>\n<p>정적 사이트는 오직 HTML, CSS, Javascript 만 사용하여 만들어진 것이다.\nServer Side 에서 DB를 처리하거나 Request로 Data를 받아서 처리하는 게 아니기 때문에 작성/수정/삭제 같은 기능은 존재할 수 없다.\n오직 페이지를 조회하는 것만 가능하다.</p>\n<p>대표적으로 <code>Github Page</code> 가 정적 사이트라고 생각하면 된다. Github Page는 github에 올라온 파일(HTML, CSS, Javascript)을 기반으로 작동한다.</p>\n<h3>정적 사이트 생성기(SSG, Static Site Generator)</h3>\n<p><code>SSG</code>는 정적 사이트를 만들어주는 도구 혹은 프레임워크다. 다음과 같은 SSG들이 존재한다.</p>\n<ul>\n<li><strong>Jekyll</strong>: <code>Ruby 기반</code> 테마, 플러그인 등이 제일 풍부하며 Github Page에 내장</li>\n<li><strong>Hugo</strong>: <code>Go 기반</code> build 속도가 제일 빠름</li>\n<li><strong>Hexo</strong>: <code>Node.js 기반</code> 공식 한글 문서 지원</li>\n<li><strong>Gatsby</strong>: <code>React 기반</code> 정적 컨텐츠 + GraphQL</li>\n<li><strong>VuePress</strong>: <code>Vue 기반</code> 대표적으로 Vue 공식 문서에 사용됨. <code>필자가 사용하는 SSG</code></li>\n</ul>\n<p>최신 동향은 <a href=\"https://www.staticgen.com/\" target=\"_blank\" rel=\"noopener noreferrer\">StaticGen</a> 에서 확인할 수 있다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">Nuxt와 Next</p>\n<p>StaticGen에서 Nuxt와 Next에 대한 정보도 확인할 수 있다. 개인적으로 Nuxt와 Next는 SSG보단 SSR을 위한 도구라고 생각하기 때문에 위의 목록에서 제외했다.</p>\n</div>\n<h2>VuePress 시작하기</h2>\n<p>VuePress는 앞서 언급한 SSG 중 하나이며, 정말로 간단하게 시작할 수 있다.\n시작하기 전에 먼저 npm(혹은 yarn)이 설치되어 있어야 한다.</p>\n<p><a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress 공식문서</a>에 있는 내용을 기반으로 서술할 것이다.</p>\n<p>VuePress를 시작하기 위해선 Npm이나 Yarn 같은 Pacakge Manager 가 필요하다.</p>\n<ul>\n<li><a href=\"https://nodejs.org/ko/\" target=\"_blank\" rel=\"noopener noreferrer\">npm 설치하기</a> (Node.js를 설치하면 됨)</li>\n<li><a href=\"https://heropy.blog/2017/11/25/yarn/\" target=\"_blank\" rel=\"noopener noreferrer\">yarn 설치하기</a> (링크의 포스팅 참고)</li>\n</ul>\n<h3>install</h3>\n<p>필자는 yarn을 기준으로 설명할 것이다.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># project directory 만들기</span></span>\n<span class=\"line\"><span class=\"token function\">mkdir</span> vuepress-stater</span>\n<span class=\"line\"><span class=\"token builtin class-name\">cd</span> vuepress-starter</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># package.json 생성</span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> init <span class=\"token parameter variable\">-y</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\"># vuepress를 devDependency로 추가</span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> vuepress</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>그리고 pacakge.json 파일에 <code>scripts</code>를 추가해야 한다. 추가하기 전에 vuepress cli에 대한 이해가 필요하다.</p>\n<div class=\"custom-container tip\"><p class=\"custom-container-title\">vuepress cli</p>\n<ul>\n<li>vuepress &lt;command&gt; [targetDir] [options]</li>\n<li>targetDir와 options은 생략 가능하다.</li>\n<li><a href=\"https://vuepress.vuejs.org/api/cli.html\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress cli 명령어 확인하기</a></li>\n</ul>\n</div>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token comment\">// pacakge.json</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TIL\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/JunilHwang/TIL\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// github repository 정보. 굳이 없어도 됨.</span></span>\n<span class=\"line\">  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"junil-hwang &lt;junil.h@kakao.com&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// github author 정보. 굳이 없어도 됨.</span></span>\n<span class=\"line highlighted\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"docs:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev --port 8000\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line highlighted\">    <span class=\"token property\">\"docs:build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build\"</span></span>\n<span class=\"line highlighted\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"vuepress\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.2.0\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>필자는 root directory에 문서를 생성할 것이기 땜누에 targetDir를 생략했다.</p>\n<p>만약 진행중인 프로젝트가 존재하고, root에 <code>docs라는 하위 폴더</code>를 만들고 docs에 문서를 생성할 것이라면 다음과 같이 수정하면 된다.</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"json\" data-title=\"json\"><pre><code><span class=\"line\"><span class=\"token comment\">// package.json</span></span>\n<span class=\"line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token comment\">// ... 앞 내용 생략</span></span>\n<span class=\"line\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token property\">\"docs:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress dev docs --port 8000\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token property\">\"docs:build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vuepress build docs\"</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token comment\">// ... 뒷 내용 생략</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>scripts</code> 작성이 완료 후에 이제 <code>README.md</code>를 만들어야 한다.</p>\n<div class=\"language-markdown line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"md\" data-title=\"md\"><pre><code><span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> VuePress Starter</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">index page 입니다.</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>여기까지 완료 되었을 때 Project 구조는 다음과 같다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">. (vuepress-starter)</span>\n<span class=\"line\">  ├─ node_modules</span>\n<span class=\"line\">  ├─ README.md</span>\n<span class=\"line\">  └─ package.json</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>이제 작성한 <code>README.md</code> 를 vuepress로 확인해보자.</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre><code><span class=\"line\"><span class=\"token comment\"># pacakge.json에서 작성한 scripts 명령어를 실행하면 된다.</span></span>\n<span class=\"line\"><span class=\"token function\">yarn</span> docs:dev</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p></p>\n<p>이렇게 매우 간단하게 문서를 만들 수 있다.</p>\n<h2>config</h2>\n<p>이제 config를 이용하여 문서를 꾸며보자. 먼저 다음과 같이 <code>.vuepress</code> 폴더와 <code>config.js</code> 파일을 만들어야 한다.</p>\n<div class=\"language-text line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre><code><span class=\"line\">. (vuepress-starter)</span>\n<span class=\"line\">  ├─ node_modules</span>\n<span class=\"line highlighted\">  ├─ .vuepress</span>\n<span class=\"line highlighted\">  │  └─ config.js</span>\n<span class=\"line\">  ├─ README.md</span>\n<span class=\"line\">  └─ package.json</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\" data-title=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// config.js</span></span>\n<span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'vuepress-stater'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 사이트 타이틀</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'vuepress로 만든 문서입니다.'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">  <span class=\"token literal-property property\">themeConfig</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">logo</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://avatars1.githubusercontent.com/u/18749057?s=460&amp;v=4'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 로고 이미지</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">nav</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"line\">      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">link</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">sidebar</span><span class=\"token operator\">:</span> <span class=\"token string\">'auto'</span> <span class=\"token comment\">// h1~h6 같은 heading tag를 기준으로 sidebar를 만들어줌</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>* config.js의 내용은 <a href=\"https://vuepress.vuejs.org/config/\" target=\"_blank\" rel=\"noopener noreferrer\">Config Reference</a>를 참고하면 된다.</strong></p>\n<p><code>README.md</code> 에 대한 내용도 약간 보충해보자.</p>\n<div class=\"language-markdown line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"md\" data-title=\"md\"><pre><code><span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 문서 제목</span></span>\n<span class=\"line\">주제 내용</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> 소제목 1</span></span>\n<span class=\"line\">소제목 내용 1</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> 소제목 2</span></span>\n<span class=\"line\">소제목 내용 2</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">###</span> 소제목 2-1</span></span>\n<span class=\"line\">소제목 내용 2-1</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token title important\"><span class=\"token punctuation\">###</span> 소제목 2-2</span></span>\n<span class=\"line\">소제목 내용 2-2</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>다시 <code>yarn docs:dev</code> 를 실행하여 확인해보자.</p>\n<p></p>\n<p><code>logo</code>와 <code>navigation</code>, 그리고 <code>sidebar</code> 가 생긴것을 확인할 수 있다. 마치 <a href=\"https://kr.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">vue.js 공식문서</a> 처럼 생겼다. 공식문서도 vuepress로 만들어졌기 때문이다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress 공식문서</a></li>\n<li><a href=\"https://vuepress.vuejs.org/config/\" target=\"_blank\" rel=\"noopener noreferrer\">Config Reference</a></li>\n<li><a href=\"https://62che.com/blog/vuepress/%EC%A0%95%EC%A0%81-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%83%9D%EC%84%B1%EA%B8%B0%EB%9E%80.html#%EC%B5%9C%EC%8B%A0-%EB%8F%99%ED%96%A5\" target=\"_blank\" rel=\"noopener noreferrer\">정적 사이트 생성기란</a></li>\n</ul>\n",
      "date_published": "2020-01-04T00:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Today I Learned",
      "url": "https://junilhwang.github.io/TIL/TIL/About/",
      "id": "https://junilhwang.github.io/TIL/TIL/About/",
      "summary": "About\njunilhwang's github stats bn\n이력\n\n🏢 줌인터넷 프론트엔드 파트리더 (2021. 07 ~ 2022. 05)\n🏢 줌인터넷 풀 스택 포털 서비스 개발자 (2019. 11 ~ 2021. 06)\n🏢 디자인톡톡 웹 개발자 (2016. 09 ~ 2018.02)\n🏢 서울디지텍고등학교 웹 ...",
      "content_html": "\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=junilhwang\" alt=\"junilhwang's github stats bn\"></p>\n<h3>이력</h3>\n<ul>\n<li>🏢 <a href=\"https://zuminternet.com/\" target=\"_blank\" rel=\"noopener noreferrer\">줌인터넷</a> 프론트엔드 파트리더 (2021. 07 ~ 2022. 05)</li>\n<li>🏢 <a href=\"https://zuminternet.com/\" target=\"_blank\" rel=\"noopener noreferrer\">줌인터넷</a> 풀 스택 포털 서비스 개발자 (2019. 11 ~ 2021. 06)</li>\n<li>🏢 <a href=\"http://designtalktalk.com/home/\" target=\"_blank\" rel=\"noopener noreferrer\">디자인톡톡</a> 웹 개발자 (2016. 09 ~ 2018.02)</li>\n<li>🏢 <a href=\"http://home.sdh.hs.kr/index.do\" target=\"_blank\" rel=\"noopener noreferrer\">서울디지텍고등학교</a> 웹 개발 강사 (2014. 02 ~ 2014.11)</li>\n<li>🚎 <a href=\"https://github.com/DKU-STUDY\" target=\"_blank\" rel=\"noopener noreferrer\">단국대학교 개발자 스터디</a> (2020. 04 ~ 현재)</li>\n<li>🏫 삼일공업고등학교 (2013. 02)</li>\n<li>🏫 단국대학교 소프트웨어학과 졸업 (2020. 02)</li>\n</ul>\n",
      "image": "https://github-readme-stats.vercel.app/api?username=junilhwang",
      "date_published": "2020-01-01T13:00:00.000Z",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "개발자의 글쓰기",
      "url": "https://junilhwang.github.io/TIL/TIL/writing/",
      "id": "https://junilhwang.github.io/TIL/TIL/writing/",
      "summary": "개발자 황준일의 개발 외 글쓰기 시리즈입니다.",
      "content_html": "\n<p>개발은 생각보다 심오한 작업이다.\n소프트웨어 그 자체에 대한 지식과 공학적인 지식도 물론 중요하지만 최근들어 이러한 역량보다 중요하다고 느끼고 있는 게 바로\n말을 잘 하는 것, 표현을 잘 하는 것, 그리고 잘 쓰는 것이다.</p>\n<p>나의 생각을 잘 전달하기 위해서 글 쓰는 연습을 하자.</p>\n<ul>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-1/\" target=\"_blank\">유년시절 이야기 - Part 01</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-2/\" target=\"_blank\">유년시절 이야기 - Part 02</a></li>\n<li><a href=\"/TIL/writing/01-%EC%9C%A0%EB%85%84%EC%8B%9C%EC%A0%88-%EC%9D%B4%EC%95%BC%EA%B8%B0-3/\" target=\"_blank\">유년시절 이야기 - Part 03</a></li>\n<li><a href=\"/TIL/writing/02-2021-%EA%B3%84%ED%9A%8D/\" target=\"_blank\">2021 계획</a></li>\n<li><a href=\"/TIL/writing/03-%EC%83%9D%EA%B0%81%EC%A0%95%EB%A6%AC/\" target=\"_blank\">생각정리</a></li>\n</ul>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "04 자바가 확장한 객체지향 | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/04-Extended-By-Java/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/04-Extended-By-Java/",
      "summary": "일반적인 객체지향의 개념을 자바가 어떤식으로 확장하였는지 이해하여봅시다.",
      "content_html": "\n<p>작성 예정입니다.</p>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "05 객체 지향 설계를 위한 SOLID 원칙 | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/05-SOLID/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/05-SOLID/",
      "summary": "객체지향을 이용하여 프로그램을 설계할 때 필요한 SOLID 원칙에 대해 알아보고 이해하여봅시다.",
      "content_html": "\n<p>작성 예정입니다.</p>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "06 스프링이 사랑한 디자인패턴 | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/06-Design-Pattern/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/06-Design-Pattern/",
      "summary": "SOLID 원칙을 적용하여 만들어진 객체지향 설계의 기본적인 디자인 패턴들이 무엇이 있는지 알아봅시다.",
      "content_html": "\n<p>작성 예정입니다.</p>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "07 Spring Triangle | 객체지향의 원리와 이해",
      "url": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/07-Spring-Triangle/",
      "id": "https://junilhwang.github.io/TIL/TIL/Book/OOP-Principle/07-Spring-Triangle/",
      "summary": "IoC, DI, AOP, PSA 등 스프링에서 지향하고 있는 개념들을 살펴봅니다.",
      "content_html": "\n<p>작성 예정입니다.</p>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "자바스크립트의 동시성과 병렬성",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Concurrency-Parallel/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Concurrency-Parallel/",
      "summary": "자바스크립트의 동시성과 병렬성에 대해 다룹니다.",
      "content_html": "<p>** 아직 작성이 완료되지 않은 글입니다. **</p>\n<h1>자바스크립트트의 동시성과 병렬성</h1>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "자바스크립트 이벤트 루프",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Event-Loop/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Event-Loop/",
      "summary": "자바스크립트의 이벤트 루프에 대해 다룹니다.",
      "content_html": "<p>** 아직 작성이 완료되지 않은 글입니다. **</p>\n<h1>자바스크립트 이벤트 루프</h1>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Non-Blocking Loop 만들기",
      "url": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Non-Blocking-Loop/",
      "id": "https://junilhwang.github.io/TIL/TIL/Javascript/Domain/Non-Blocking-Loop/",
      "summary": "Promise, Generator, requestAnimationFrame 등을 이용하여 non-blocking loop를 만들 수 있습니다.",
      "content_html": "<p>** 아직 작성이 완료되지 않은 글입니다. **</p>\n<h1>Non-Blocking Loop 만들기</h1>\n",
      "date_modified": "2024-09-03T10:27:22.000Z",
      "authors": [],
      "tags": []
    }
  ]
}